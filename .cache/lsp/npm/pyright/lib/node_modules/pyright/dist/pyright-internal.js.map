{"version":3,"sources":["../../pyright-internal/src/analyzer/aliasDeclarationUtils.ts","../../pyright-internal/src/analyzer/analysis.ts","../../pyright-internal/src/analyzer/analyzerNodeInfo.ts","../../pyright-internal/src/analyzer/backgroundAnalysisProgram.ts","../../pyright-internal/src/analyzer/binder.ts","../../pyright-internal/src/analyzer/checker.ts","../../pyright-internal/src/analyzer/circularDependency.ts","../../pyright-internal/src/analyzer/codeFlow.ts","../../pyright-internal/src/analyzer/commentUtils.ts","../../pyright-internal/src/analyzer/declarationUtils.ts","../../pyright-internal/src/analyzer/docStringConversion.ts","../../pyright-internal/src/analyzer/docStringUtils.ts","../../pyright-internal/src/analyzer/importResolver.ts","../../pyright-internal/src/analyzer/importStatementUtils.ts","../../pyright-internal/src/analyzer/packageTypeVerifier.ts","../../pyright-internal/src/analyzer/parseTreeCleaner.ts","../../pyright-internal/src/analyzer/parseTreeUtils.ts","../../pyright-internal/src/analyzer/parseTreeWalker.ts","../../pyright-internal/src/analyzer/program.ts","../../pyright-internal/src/analyzer/pyTypedUtils.ts","../../pyright-internal/src/analyzer/pythonPathUtils.ts","../../pyright-internal/src/analyzer/scope.ts","../../pyright-internal/src/analyzer/scopeUtils.ts","../../pyright-internal/src/analyzer/service.ts","../../pyright-internal/src/analyzer/sourceFile.ts","../../pyright-internal/src/analyzer/sourceMapper.ts","../../pyright-internal/src/analyzer/staticExpressions.ts","../../pyright-internal/src/analyzer/symbol.ts","../../pyright-internal/src/analyzer/symbolNameUtils.ts","../../pyright-internal/src/analyzer/symbolUtils.ts","../../pyright-internal/src/analyzer/testWalker.ts","../../pyright-internal/src/analyzer/typeCache.ts","../../pyright-internal/src/analyzer/typeDocStringUtils.ts","../../pyright-internal/src/analyzer/typeEvaluator.ts","../../pyright-internal/src/analyzer/typeStubWriter.ts","../../pyright-internal/src/analyzer/typeUtils.ts","../../pyright-internal/src/analyzer/typeVarMap.ts","../../pyright-internal/src/analyzer/types.ts","../../pyright-internal/src/backgroundAnalysis.ts","../../pyright-internal/src/backgroundAnalysisBase.ts","../../pyright-internal/src/backgroundThreadBase.ts","../../pyright-internal/src/commands/commandController.ts","../../pyright-internal/src/commands/createTypeStub.ts","../../pyright-internal/src/commands/quickActionCommand.ts","../../pyright-internal/src/commands/restartServer.ts","../../pyright-internal/src/common/cancellationUtils.ts","../../pyright-internal/src/common/collectionUtils.ts","../../pyright-internal/src/common/commandLineOptions.ts","../../pyright-internal/src/common/configOptions.ts","../../pyright-internal/src/common/console.ts","../../pyright-internal/src/common/core.ts","../../pyright-internal/src/common/debug.ts","../../pyright-internal/src/common/deferred.ts","../../pyright-internal/src/common/diagnostic.ts","../../pyright-internal/src/common/diagnosticRules.ts","../../pyright-internal/src/common/diagnosticSink.ts","../../pyright-internal/src/common/extensions.ts","../../pyright-internal/src/common/fileSystem.ts","../../pyright-internal/src/common/logTracker.ts","../../pyright-internal/src/common/pathConsts.ts","../../pyright-internal/src/common/pathUtils.ts","../../pyright-internal/src/common/positionUtils.ts","../../pyright-internal/src/common/progressReporter.ts","../../pyright-internal/src/common/pythonVersion.ts","../../pyright-internal/src/common/stringUtils.ts","../../pyright-internal/src/common/textEditUtils.ts","../../pyright-internal/src/common/textRange.ts","../../pyright-internal/src/common/textRangeCollection.ts","../../pyright-internal/src/common/timing.ts","../../pyright-internal/src/languageServerBase.ts","../../pyright-internal/src/languageService/analyzerServiceExecutor.ts","../../pyright-internal/src/languageService/autoImporter.ts","../../pyright-internal/src/languageService/callHierarchyProvider.ts","../../pyright-internal/src/languageService/codeActionProvider.ts","../../pyright-internal/src/languageService/completionProvider.ts","../../pyright-internal/src/languageService/definitionProvider.ts","../../pyright-internal/src/languageService/documentHighlightProvider.ts","../../pyright-internal/src/languageService/documentSymbolProvider.ts","../../pyright-internal/src/languageService/hoverProvider.ts","../../pyright-internal/src/languageService/importSorter.ts","../../pyright-internal/src/languageService/quickActions.ts","../../pyright-internal/src/languageService/referencesProvider.ts","../../pyright-internal/src/languageService/signatureHelpProvider.ts","../../pyright-internal/src/localization/localize.ts","../../pyright-internal/src/parser/characterStream.ts","../../pyright-internal/src/parser/characters.ts","../../pyright-internal/src/parser/parseNodes.ts","../../pyright-internal/src/parser/parser.ts","../../pyright-internal/src/parser/stringTokenUtils.ts","../../pyright-internal/src/parser/tokenizer.ts","../../pyright-internal/src/parser/tokenizerTypes.ts","../../pyright-internal/src/parser/unicode.ts","../../pyright-internal/src/pyright.ts","../../pyright-internal/src/server.ts","../../pyright-internal/src/workspaceMap.ts"],"names":["resolveAliasDeclaration","importLookup","declaration","resolveLocalNames","curDeclaration","alreadyVisited","type","symbolName","usesLocalName","lookupResult","path","symbol","symbolTable","get","undefined","submoduleFallback","declarations","getTypedDeclarations","length","getDeclarations","find","decl","push","nullCallback","_","program","maxTime","configOptions","callback","console","token","moreToAnalyze","throwIfCancellationRequested","duration","Duration","analyze","filesLeftToAnalyze","getFilesToAnalyzeCount","debug","assert","diagnostics","getDiagnostics","diagnosticFileCount","elapsedTime","getDurationInSeconds","filesInProgram","getFileCount","filesRequiringAnalysis","checkingOnlyOpenFiles","isCheckingOnlyOpenFiles","fatalErrorOccurred","configParseErrorOccurred","e","OperationCanceledException","is","message","getErrorString","error","getSerializableError","getFlowNode","node","flowNode","analyzerNode","scope","afterFlowNode","fileInfo","importInfo","codeFlowExpressions","map","dunderAllNames","names","curNode","flags","FlowFlags","Unreachable","parent","_console","_configOptions","_importResolver","extension","backgroundAnalysis","maxAnalysisTime","this","_program","Program","_backgroundAnalysis","_maxAnalysisTime","setConfigOptions","importResolver","setImportResolver","filePaths","setTrackedFiles","_reportDiagnosticsForRemovedFiles","importNames","setAllowedThirdPartyImports","filePath","version","contents","setFileOpened","text","markFilesDirty","setFileClosed","evenIfContentsAreSame","markAllFilesDirty","_onAnalysisCompletion","setCompletionCallback","startAnalysis","_indices","analyzeProgram","workspaceIndices","libraryIndices","indices","_getIndices","indexResults","setWorkspaceIndex","execEnvRoot","libraryPath","setIndex","indexing","startIndexing","refreshIndexing","cancelIndexing","getIndex","findExecEnvironment","root","range","getDiagnosticsForRange","targetImportPath","targetIsSingleFile","stubPath","writeTypeStub","invalidateAndForceReanalysis","invalidateCache","restart","Map","getSourceFile","cacheIndexResults","execEnv","indicesMap","set","clear","fileDiags","Binder","ParseTreeWalker","super","_deferredBindingTasks","_nestedExceptDepth","_finallyTargets","_typingImportAliases","_typingSymbolAliases","_potentialPrivateSymbols","_fileInfo","isBuiltInModule","builtinsScope","_createNewScope","AnalyzerNodeInfo","setScope","_currentScope","setFlowNode","_currentFlowNode","_addBuiltInSymbolToCurrentScope","_createStartFlowNode","_walkStatementsAndReportUnreachable","statements","setCodeFlowExpressions","_currentExecutionScopeReferenceMap","setAfterFlowNode","_bindDeferred","forEach","name","_dunderAllNames","some","sym","setIsExternallyHidden","setDunderAllNames","moduleDocString","ParseTreeUtils","getDocString","fail","importResult","getImportInfo","isImportFound","isStubFile","importType","isPyTypedPresent","diagnostic","_addDiagnostic","diagnosticRuleSet","reportMissingTypeStubs","DiagnosticRule","Localizer","Diagnostic","stubFileMissing","format","importName","createTypeStubAction","action","moduleName","addAction","nonStubImportResult","reportMissingModuleSource","importSourceResolveFailure","reportMissingImports","importResolveFailure","walkMultiple","decorators","classDeclaration","convertOffsetsToRange","start","TextRange","getEnd","lines","_bindNameToScope","value","addDeclaration","setDeclaration","arguments","parentScope","walk","suite","_addSymbolToCurrentScope","_createAssignmentTargetFlowNodes","containingClassNode","getEnclosingClass","functionDeclaration","isMethod","isGenerator","parameters","param","defaultValue","typeAnnotation","typeAnnotationComment","returnTypeAnnotation","functionAnnotationComment","functionOrModuleNode","nodeType","functionOrModuleScope","getScope","_deferBinding","paramNode","paramDeclaration","_createFlowAssignment","_targetFunctionDeclaration","_currentReturnTarget","_createBranchLabel","_addAntecedent","returnFlowNode","_finishFlowLabel","expression","leftExpression","_createCallFlowNode","memberName","argExpr","valueExpression","entries","listEntryNode","strings","namesToAdd","_getDunderAllNamesFromImport","filter","_handleTypingStubAssignmentOrAnnotation","_bindPossibleTupleNamedTarget","_addTypeDeclarationForVariable","rightExpression","isPossibleTypeAlias","getEnclosingFunction","isTypingStubFile","_addInferredTypeAssignmentForVariable","expr","expressions","tupleEntryNode","_disableTrueFalseTargets","evaluationNode","getEvaluationNodeForAssignmentExpression","containerScope","curScope","lookUpSymbol","_addError","assignmentExprComprehension","assignmentExprContext","destExpression","operator","expressionList","_isNarrowingExpression","referenceKey","createKeyForReference","targetExpression","iterableExpression","preForLabel","_createLoopLabel","preElseLabel","postForLabel","_bindLoopStatement","forSuite","elseSuite","_currentContinueTarget","_unreachableFlowNode","_currentBreakTarget","returnStatements","returnExpression","target","_bindYield","thenLabel","elseLabel","postIfLabel","constExprValue","StaticExpressions","evaluateStaticBoolLikeExpression","testExpression","executionEnvironment","_bindConditional","ifSuite","postWhileLabel","preLoopLabel","whileSuite","assertTrueLabel","assertFalseLabel","exceptionExpression","typeExpression","isConstant","isConstantName","inferredTypeSource","exceptSuite","raiseStatements","raiseParams","tracebackExpression","curExceptTargets","exceptClauses","preFinallyLabel","preFinallyReturnOrRaiseLabel","isAfterElseAndExceptsReachable","preFinallyGate","PreFinallyGate","id","getUniqueFlowNodeId","antecedent","isGateClosed","finallySuite","exceptLabel","prevExceptTargets","_currentExceptTargets","trySuite","_isCodeUnreachable","exceptNode","index","pop","postFinallyNode","PostFinally","enclosingFunction","isAsync","awaitNotInAsync","stringNode","hasUnescapeErrors","StringTokenUtils","getUnescapedString","unescapeErrors","textRange","prefixLength","quoteMarkLength","offset","errorType","reportInvalidStringEscapeSequence","stringUnsupportedEscape","formatStringEscape","formatStringBrace","formatStringUnterminated","globalScope","getGlobalScope","nameList","nameValue","getBindingType","nonLocalRedefinition","valueWithScope","lookUpSymbolRecursive","globalReassignment","setBindingType","nonLocalInModule","globalRedefinition","nonLocalReassignment","nonLocalNoBinding","module","nameParts","firstNamePartValue","alias","isInPyTypedPackage","_createAliasDeclarationForMultipartImportName","typingSymbolsOfInterest","resolvedPath","resolvedPaths","isModuleInitFile","stripFileExtension","getFileName","leadingDots","isTypingImport","isWildcardImport","wildcardInFunction","lookupInfo","wildcardNames","_getWildcardImportNames","_addImplicitFromImport","localSymbol","aliasDecl","getEmptyRange","filteredImplicitImports","implicitImport","imp","_createFlowWildcardImport","s","imports","importSymbolNode","importedName","nameNode","withItems","item","trueLabel","falseLabel","postExpressionLabel","ifExpression","elseExpression","_currentFalseTarget","_currentTrueTarget","postRightLabel","trueTarget","falseTarget","preRightLabel","boundSymbols","i","comprehensions","compr","addedSymbols","addedSymbol","aliasSymbol","_createAssignmentAliasFlowNode","savedTrueTarget","savedFalseTarget","varName","varSymbol","importAlias","isNativeLib","existingDecl","firstNamePart","newDecl","_addImplicitImportsToLoaderActions","curLoaderActions","namePartValue","loaderActions","implicitImports","namesToImport","startsWith","isIgnoredForProtocolMatch","foundUnreachableStatement","statement","YieldFinder","checkContainsYield","Start","BranchLabel","antecedents","LoopLabel","_isLogicalExpression","_createFlowConditional","TrueCondition","FalseCondition","staticValue","conditionalFlowNode","_addExceptTargets","isCodeFlowSupportedForReference","isOrIsNotOperator","equalsOrNotEqualsOperator","constType","argumentCategory","isLeftNarrowing","isRightNarrowing","walkTargets","unbound","entry","Call","targetSymbolId","aliasSymbolId","AssignmentAlias","indeterminateSymbolId","symbolWithScope","prevFlowNode","Assignment","Unbind","WildcardImport","label","postLoopLabel","savedContinueTarget","savedBreakTarget","existing","addSymbol","isPrivateOrProtectedName","intrinsicType","setIsIgnoredForProtocolMatch","isInitiallyUnbound","symbolFlags","scopeType","prevScope","newScope","Scope","isExecutionScope","prevReferenceMap","source","typeAliasName","memberAccessInfo","_getMemberAccessInfo","classScope","honorPrivateNaming","reportPrivateUsage","setIsPrivateMember","isInstanceMember","isClassMember","setIsInstanceMember","setIsClassMember","isDefinedByMemberAccess","declarationHandled","finalInfo","_isAnnotationFinal","isExplicitTypeAlias","_isAnnotationTypeAlias","typeAnnotationNode","typeAliasNotInModule","isFinal","finalTypeNode","typeAliasAnnotation","baseExpression","setIsClassVar","annotationNotSupported","baseName","_isTypingAnnotation","items","pythonVersion","PythonVersion","V3_10","leftSymbolName","methodNode","classNode","className","firstParamName","decorator","decoratorName","existingLoaderAction","annotationNode","assignedName","Tuple","Generic","Protocol","Callable","Type","ClassVar","Final","Literal","TypedDict","Union","Optional","Annotated","TypeAlias","OrderedDict","Concatenate","TypeGuard","codeFlowExpressionMap","nextItem","shift","functionNode","yieldFromOutsideAsync","getEnclosingLambda","yieldOutsideFunction","yieldStatements","diagLevel","rule","_addWarning","_addInformation","assertNever","setRule","diagnosticSink","addDiagnosticWithTextRange","_containsYield","Checker","evaluator","_scopedNodes","_moduleNode","getFileInfo","_evaluator","getDunderAllNames","markNamesAccessed","_validateSymbolTables","_reportDuplicateImports","isCodeUnreachable","suppressDiagnostics","isExpressionNode","getType","classTypeResult","getTypeOfClass","_validateClassMethods","classType","_validateFinalMemberOverrides","ClassType","isTypedDictClass","_validateTypedDictClassSuite","functionTypeResult","getTypeOfFunction","paramType","functionType","details","isUnknown","isTypeVar","isSynthesized","boundType","addDiagnostic","reportUnknownParameterType","paramTypeUnknown","paramName","isPartlyUnknown","diagAddendum","DiagnosticAddendum","addMessage","printType","paramTypePartiallyUnknown","getString","defaultValueType","isEllipsisType","reportInvalidStubStatement","defaultValueNotEllipsis","returnTypeUnknown","_validateMethod","diag","_containsCovariantTypeVar","reportGeneralTypeIssues","paramTypeCovariant","_validateFunctionReturn","getScopeForNode","reportUnknownMemberType","stubUsesGetAttr","decoratedType","category","overloads","_validateOverloadConsistency","slice","reportUnknownLambdaType","returnType","lambdaReturnTypeUnknown","lambdaReturnTypePartiallyUnknown","_validateIsInstanceCall","isWithinDefaultParamInitializer","reportCallInDefaultInitializer","defaultValueContainsCall","evaluateTypesForStatement","enclosingFunctionNode","declaredReturnType","getFunctionDeclaredReturnType","UnknownType","create","NoneType","createInstance","isNodeReachable","isNoReturnType","noReturnContainsReturn","specializedDeclaredType","specializeType","canAssignType","returnTypeMismatch","exprType","reportUnknownVariableType","returnTypePartiallyUnknown","yieldType","adjYieldType","iteratorType","getBuiltInType","isClass","ObjectType","cloneForSpecialization","_validateYieldType","verifyRaiseExceptionType","baseExceptionType","exceptionType","doForSubtypes","subtype","isAnyOrUnknown","isNone","isObject","derivesFromClassRecursive","exceptionTypeIncorrect","isEmpty","addError","expectedExceptionObj","_validateExceptionType","isTupleClass","typeArguments","lastTypeArg","addDiagnosticForTextRange","reportAssertAlwaysTrue","assertAlwaysTrue","reportImplicitStringConcatenation","implicitStringConcat","formatExpr","_conditionallyReportPrivateUsage","verifyDeleteExpression","reportWildcardImportFromLibrary","wildcardLibraryImport","wildcardToken","importAs","child","prevOverloads","prevOverload","_isOverlappingOverload","overlappingOverload","obscured","obscuredBy","prevReturnType","FunctionType","getSpecializedReturnType","altNode","_findNodeForOverload","overloadReturnTypeMismatch","newIndex","prevIndex","overloadType","decls","getDeclarationsForNameNode","reportedUnreachable","lastStatement","end","addUnusedCode","_validateStubStatement","invalidStubStatement","substatement","errorNode","derivesFromBaseException","resultingExceptionType","transformTypeObjectToClass","iterableType","getTypeFromIterable","transformedSubtype","exceptionTypeNotClass","scopedNode","_conditionallyReportUnusedSymbol","_reportIncompatibleDeclarations","_reportMultipleFinalDeclarations","_reportMultipleTypeAliasDeclarations","_reportInvalidOverload","typedDecls","primaryDecl","getEffectiveTypeOfSymbol","isOverloaded","singleOverload","isFinalVariable","sawFinal","sawAssignment","isFinalVariableDeclaration","finalRedeclaration","finalReassigned","firstDecl","finalUnassigned","typeAliasDecl","isExplicitTypeAliasDeclaration","typeAliasRedeclared","getLastTypedDeclaredForSymbol","primaryDeclInfo","otherDecls","seeMethodDeclaration","seeFunctionDeclaration","seeClassDeclaration","seeParameterDeclaration","seeVariableDeclaration","seeDeclaration","addPrimaryDeclInfo","primaryDeclNode","addRelatedInfo","otherDecl","obscuredClassDeclaration","obscuredFunctionDeclaration","obscuredParameterDeclaration","primaryType","getTypeForDeclaration","duplicateIsOk","otherType","isTypeSame","obscuredVariableDeclaration","isProperty","accessedSymbolMap","has","SymbolNameUtils","isDunderName","_conditionallyReportUnusedDeclaration","_isSymbolPrivate","isPrivate","diagnosticLevel","reportUnusedImport","multipartName","np","join","extend","addUnusedCodeWithTextRange","unaccessedSymbol","unaccessedImport","importFrom","isReexport","isFuture","reportUnusedVariable","unaccessedVariable","reportUnusedClass","unaccessedClass","reportUnusedFunction","unaccessedFunction","callName","isInstanceCheck","arg0Type","transformPossibleRecursiveTypeAlias","derivesFromAnyOrUnknown","arg1Type","isSupportedTypeForIsInstance","isSupported","makeTypeVarsConcrete","isBuiltIn","isTypeArgumentExplicit","TypeBase","isInstantiable","isValidType","typeArg","typeVarNotAllowed","isInstanceInvalidType","isSubclassInvalidType","nonstandardClassTypes","classTypeList","objClass","isProtocolClass","isRuntimeCheckable","protocolUsedInCall","finalizeFilteredTypeList","types","combineTypes","filterType","varType","filteredTypes","filterIsSuperclass","isDerivedFrom","filterIsSubclass","isSameGenericClass","t","filteredType","remainingTypes","foundAnyType","subtypes","concat","getTestType","objTypeList","isNever","reportUnnecessaryIsInstance","unnecessaryIsInstanceNever","testType","unnecessaryIsSubclassNever","unnecessaryIsInstanceAlways","unnecessaryIsSubclassAlways","isPrivateName","isProtectedName","classOrModuleNode","primaryDeclaration","getEnclosingClassOrModule","isProtectedAccess","declClassTypeInfo","enclosingClassNode","enclosingClassTypeInfo","isNodeContainedWithin","protectedUsedOutsideOfClass","privateUsedOutsideOfClass","privateUsedOutsideOfModule","suiteNode","emitBadStatementError","typedDictBadVar","returnAnnotation","functionNeverReturns","isAfterNodeReachable","implicitlyReturnsNone","declaredReturnTypeUnknown","declaredReturnTypePartiallyUnknown","_containsContravariantTypeVar","returnTypeContravariant","getDeclaredGeneratorReturnType","isSuiteEmpty","noReturnReturnsNone","isAbstractMethod","returnMissing","inferredReturnType","getFunctionInferredReturnType","nodeId","isValid","isContravariant","scopeId","typeVarIsContravariant","isCovariant","typeVarIsCovariant","fields","parentSymbol","lookUpClassMember","finalRedeclarationBySubclass","_validateBaseClassOverrides","typeOfSymbol","baseClassAndSymbol","hasTypedDeclarations","baseClassSymbolType","partiallySpecializeType","canOverrideMethod","reportIncompatibleMethodOverride","incompatibleMethodOverride","origDecl","overriddenMethod","finalMethodOverride","finalMethod","lastDecl","methodOverridden","reportIncompatibleVariableOverride","symbolOverridden","overriddenSymbol","reportSelfClsParameterName","newClsParam","initSubclassClsParam","classGetItemClsParam","isStaticMethod","staticClsSelfParam","isClassMethod","classMethodClsParam","firstParamIsSimple","isLegalMetaclassName","classTypeInfo","typeType","instanceMethodSelfParam","adjustedYieldType","declaredYieldType","getDeclaredGeneratorYieldType","noReturnContainsYield","yieldTypeMismatch","importStatements","getTopLevelImports","importModuleMap","orderedImports","importStatement","symbolMap","importFromAs","reportDuplicateImport","duplicateImport","subnode","_paths","firstIndex","circDependency","_nextFlowNodeId","reference","key","leftNode","_applyStrictRules","ruleSet","strictRuleSet","getStrictDiagnosticRuleSet","boolRuleNames","getBooleanDiagnosticRules","diagRuleNames","getDiagLevelDiagnosticRules","skipRuleNames","getStrictModeNotOverriddenRules","ruleName","r","strictValue","prevValue","_parsePyrightComment","commentValue","prefix","p","operandList","substr","trim","split","operand","_parsePyrightOperand","operandSplit","boolRules","diagLevelValue","_parseDiagLevel","boolValue","tokens","defaultRuleSet","useStrict","cloneDiagnosticRuleSet","count","getItemAt","comments","comment","parameterParent","isParamListEllipsis","decl1","decl2","line","character","Error","docString","DocStringConverter","convert","_splitDocString","output","last","_isUndefinedOrWhitespace","trimEnd","LeadingSpaceCountRegExp","CrLfRegExp","NonWhitespaceRegExp","TildaHeaderRegExp","PlusHeaderRegExp","LeadingAsteriskRegExp","SpaceDotDotRegExp","DirectiveLikeRegExp","DoctestRegExp","DirectivesExtraNewlineRegExp","PotentialHeaders","exp","replacement","WhitespaceRegExp","DoubleTickRegExp","TabRegExp","TildeRegExp","PlusRegExp","UnescapedMarkdownCharsRegExp","HtmlEscapes","LiteralBlockEmptyRegExp","LiteralBlockReplacements","input","_builder","_skipAppendEmptyLine","_insideInlineCode","_appendDirectiveBlock","_stateStack","_lineNum","_blockIndent","_state","_parseText","_lines","_currentLineOrUndefined","before","beforeLine","_parseBacktickBlock","_parseDocTest","_parseLiteralBlock","_trimOutputAndAppendLine","_countLeadingSpaces","_currentLine","v","_currentIndent","next","splice","_parseEmpty","_beginBacktickBlock","_beginLiteralBlock","_beginDocTest","_beginDirective","_appendTextLine","_escapeHtml","_eatLine","escape","replace","_preprocessTextLine","test","_appendLine","parts","part","_append","expReplacement","match","exec","state","_pushAndSetState","_popState","_beginMinIndentCodeBlock","_currentLineWithinBlock","_currentLineIsOutsideBlock","prev","_lineAt","endsWith","_parseLiteralBlockSingleLine","_parseDirective","_nextBlockIndent","directiveType","directive","_parseDirectiveBlock","trimLeft","noNewLine","trimRight","docstring","repeat","first","amount","counts","Math","min","_largestTrim","_stripLeadingWhitespace","search","rawString","leftSpacesToRemove","Number","MAX_VALUE","trimmed","trimmedLines","functionDocString","docStringLines","trimmedLine","paramOffset","indexOf","supportedNativeLibExtensions","supportedFileExtensions","stubsSuffix","fs","_cachedPythonSearchPaths","_cachedImportResults","fileSystem","sourceFilePath","moduleDescriptor","_formatImportName","importFailureInfo","notFoundResult","isRelative","isNamespacePackage","isStubPackage","relativeImport","_resolveRelativeImport","cachedResults","_lookUpResultsInCache","importedSymbols","_isNamespacePackageResolved","bestImport","_resolveBestAbsoluteImport","addResultsToCache","similarityLimit","suggestions","_getCompletionSuggestionsRelative","_getCompletionSuggestionsTypeshedPath","_getCompletionSuggestionsAbsolute","extraPath","extraPaths","pythonSearchPaths","_getPythonSearchPaths","searchPath","stubFilePath","_mapCompiled","sourceFilePaths","env","result","f","nonEmptyPaths","changeAnyExtension","existsSync","importRootPaths","getImportRoots","relativeStubPaths","importRootPath","containsPath","getRelativePathComponentsFromDirectory","relativeStubPath","combinePathComponents","absoluteStubPath","resolvePaths","absoluteSourcePath","filePathWithoutExtension","combinePaths","isLocalTypingsFile","stdLibTypeshedPath","_getTypeshedPath","_getModuleNameFromPath","candidateModuleName","thirdPartyTypeshedPath","thirdPartyTypeshedPathEx","getTypeshedPathEx","useTypeshedVersionedFolders","roots","versionFolders","getPythonVersionStrings","stdTypeshed","typeshedPath","typeshedPathEx","cacheForExecEnv","_filterImplicitImports","rootPath","allowPartial","allowNativeLib","useStubPackage","allowPyi","packageDirectory","importFound","dirPath","fileNameWithoutExtension","pyFilePath","pyiFilePath","isFile","_findImplicitImports","isFirstPart","isLastPart","foundDirectory","isDirectory","foundInit","fileDirectory","stripTrailingDirectorySeparator","getDirectoryPath","nativeLibFileName","_getFilesInDirectory","fileExtension","getFileExtension","toLowerCase","withoutExtension","ext","equateStringsCaseInsensitive","nativeLibPath","cachedEntry","containerPath","stripTopContainerDir","ensureTrailingDirectorySeparator","relativeFilePath","getPathComponents","_isIdentifier","builtInImport","_findTypeshedPath","isTypeshedFile","typingsImport","resolveAbsoluteImport","bestResultSoFar","localImport","_pickBestImport","pyTypedInfo","thirdPartyImport","getPyTypedInfo","isPartiallyTyped","extraResults","resolveImportEx","typeshedImport","bestImportSoFar","newImport","isIdentifierStartChar","charCodeAt","isIdentifierChar","cacheKey","venv","PythonPathUtils","findPythonSearchPaths","isStdLib","stdLibFolderName","thirdPartyFolderName","pythonVersionString","testPath","_cachedTypeshedStdLibPath","_cachedTypeshedThirdPartyPath","possibleTypeshedPath","getTypeShedFallbackPath","getTypeshedSubdirectory","curDir","absImport","readdirEntriesSync","hasTrailingDot","_addFilteredSuggestions","getFileSystemEntries","files","file","fileWithoutExtension","StringUtils","computeCompletionSimilarity","_addUniqueSuggestion","directories","dir","suggestionToAdd","newImportResult","Object","assign","exclusions","implicitImportMap","fileName","exclusion","strippedFileName","dirName","values","getImportGroup","_formatModuleName","a","b","aImportGroup","bImportGroup","parseTree","localImports","mapByFilePath","followsNonImportStatement","foundFirstImportStatement","subStatement","list","importAsNode","_processImportNode","prevEntry","_processImportFromNode","parseResults","aliasName","textEditList","priorImport","curImport","insertionOffset","insertionPosition","convertOffsetToPosition","tokenizerOutput","insertText","replacementText","importGroup","invocationPosition","importText","importTextWithAlias","newImportStatement","invocation","convertPositionToOffset","insertBefore","insertionImport","prevImportGroup","curImportGroup","predominantEndOfLineSequence","addNewLineBefore","stopHere","simpleStatement","PackageSymbolType","PackageTypeVerifier","_fileSystem","_typeCache","ConfigOptions","_execEnv","ImportResolver","packageName","trimmedPackageName","report","rootDirectory","_getDirectoryForPackage","pyTypedPath","symbolCount","unknownTypeCount","missingFunctionDocStringCount","missingClassDocStringCount","missingDefaultParamCount","modules","includes","publicModules","_getListOfPublicModules","publicSymbolMap","_getPublicSymbolsForModule","_verifyTypesForModule","stack","toString","JSON","stringify","symbolType","Class","Function","Method","Constant","Variable","Module","TypeVar","Indeterminate","resolveImport","_resolveImport","modulePath","addTrackedFiles","sourceFile","getBoundSourceFile","symbols","getParseResults","moduleScope","_getPublicSymbolsInSymbolTable","scopeName","isExternallyHidden","_isSymbolTypeImplied","fullName","getTypeForSymbol","_verifySymbolsInSymbolTable","_addPublicModulesRecursive","uniqueModules","moduleMap","nameWithoutExtension","_isLegalModulePartName","currentSymbol","errorMessage","packageSymbolType","_getPackageSymbolType","packageSymbolTypeText","getSymbolTypeString","packageSymbol","_validateTypeIsCompletelyKnown","isDocStringMissing","isDefaultValueEllipsis","isFunction","hasDefault","defaultType","isOverloadedFunction","func","typeStack","typeToPush","isKnown","overload","createAddendum","subDiag","hasDeclaredType","typeInfo","_validateClassTypeIsCompletelyKnown","isFullyKnown","classDiag","addAddendum","classFields","info","convertToInstance","_validateModuleTypeIsCompletelyKnown","_pushType","cachedTypeInfo","classFieldMap","symbolTypeText","symbolDiag","mro","mroType","mroClassInfo","baseClass","baseClasses","baseClassMro","isBaseClassPublicSymbol","reportError","effectiveMetaclass","metaclassInfo","metaclassDiag","isMetaclassKnown","baseClassDiag","classInfo","getChildren","childDiag","typeArgDiag","typeVarText","typeParameters","typeAliasInfo","funcDecl","varDecl","ParseTreeCleanerWalker","_parseTree","cleanNodeAnalysisInfo","visitNode","findNodeByOffset","children","containingChild","printOperator","operatorMap","stopAtFunction","getEvaluationScopeNode","prevNode","isParamNameNode","depth","position","printExpression","arg","argStr","isImaginary","str","exprString","escapedValue","listStr","keyExpression","startValue","endValue","stepValue","paramStr","expandExpression","evaluationScope","targetNode","potentialContainer","isMatchingExpression","expression1","expression2","requireQuotedAnnotation","isQuoted","statementList","docStringNode","decodeDocString","callNode","namedTupleAssignedName","moduleOrSuite","statementIndex","findIndex","nextStatement","assignNode","defaultTarget","childrenToWalk","nodes","visitArgument","visitAssert","visitAssignment","visitAssignmentExpression","visitAugmentedAssignment","visitAwait","visitBinaryOperation","visitBreak","visitCall","visitClass","visitTernary","visitConstant","visitContinue","visitDecorator","visitDel","visitDictionary","visitDictionaryKeyEntry","visitDictionaryExpandEntry","visitError","visitIf","visitImport","visitImportAs","visitImportFrom","visitImportFromAs","visitIndex","visitIndexItems","visitEllipsis","visitExcept","visitFor","visitFormatString","visitFunction","visitFunctionAnnotation","paramTypeAnnotations","visitGlobal","visitLambda","visitList","visitListComprehension","visitListComprehensionFor","visitListComprehensionIf","visitMemberAccess","visitModule","visitModuleName","visitName","visitNonlocal","visitNumber","visitParameter","visitPass","visitRaise","visitReturn","visitSet","visitSlice","visitStatementList","visitString","visitStringList","visitSuite","visitTuple","visitTry","visitTypeAnnotation","visitUnaryOperation","visitUnpack","visitWhile","visitWith","visitWithItem","visitYield","visitYieldFrom","initialImportResolver","initialConfigOptions","_extension","logTracker","_sourceFileList","_sourceFileMap","_parsedFileCount","_lookUpImport","sourceFileInfo","_getSourceFileInfoFromPath","isBindingRequired","timingStats","typeCheckerTime","subtractFromTime","_bindFile","getModuleSymbolTable","getModuleDocString","StandardConsole","_logTracker","LogTracker","_createNewEvaluator","newFileMap","normalizePathCase","_fs","oldFile","getFilePath","isTracked","_removeUnneededFiles","_allowedThirdPartyImports","isThirdPartyImport","addTrackedFile","_getImportNameForFile","SourceFile","isOpenByClient","isThirdPartyPyTypedPresent","diagnosticsVersion","importedBy","shadows","shadowedBy","_addToSourceFileListAndMap","setClientVersion","markDirtyMap","markDirty","didContentsChangeOnDisk","_markFileDirtyRecursive","size","sourceFileCount","isCheckingRequired","_shouldCheckFile","checkOnlyOpenFiles","CancellationToken","None","_runEvaluatorWithCancellationToken","openFiles","sf","effectiveMaxTime","openFilesTimeInMs","_checkTypes","getDurationInMilliseconds","noOpenFilesTimeInMs","_isUserCode","results","indexingForAutoImportMode","warn","_handleMemoryHighUsage","projectRootDir","verbose","sortedFiles","sort","zeroImportFiles","sfInfo","relPath","getRelativePath","importFile","relativePath","typeStubPath","normalizePath","typeStubDir","makeDirectories","TypeStubWriter","write","expandTypeAlias","printUnknownAsAny","omitTypeArgsIfAny","omitUnannotatedParamType","pep604Printing","getModuleNameForImport","getDefaultExecEnvironment","stubFile","shadowImplPath","shadowFileInfo","createTypeEvaluator","disableInferenceForPyTypedSources","printTypeFlags","_getPrintTypeFlags","fileToParse","content","_isFileNeeded","isParseRequired","parse","_updateSourceFileImports","isFileDeleted","fileToAnalyze","_parseFile","builtinsImport","bind","sourceFileToExclude","userFileOnly","buildModuleSymbolsMap","fileToCheck","log","logState","suppress","check","reportImportCycles","closureMap","_getImportsRecursive","cycleDetectionTime","timeOperation","_detectAndReportImportCycles","recursionCount","setHitMaxImportDepth","importedFileInfo","dependencyChain","dependencyMap","_logImportCycle","circDep","CircularDependency","appendPath","normalizeOrder","firstFilePath","getPaths","firstSourceFile","addCircularDependency","markMap","markReanalysisRequired","dep","fileContents","getFileContents","convertRangeToTextRange","nameMap","libraryMap","currentNode","writtenWord","_buildModuleSymbolsMap","autoImporter","AutoImporter","currentScope","translatedWord","exactMatch","getAutoImportCandidates","options","fileDiagnostics","getDiagnosticVersion","unfilteredDiagnostics","doRangesIntersect","getDefinitionsForPosition","_createSourceMapper","includeDeclaration","reporter","invokedFromUserFile","referencesResult","getDeclarationForPosition","requiresGlobalSearch","curSourceFileInfo","addReferences","locations","l","declFileInfo","tempResult","ReferencesResult","nodeAtOffset","loc","doesRangeContain","addLocations","getClientVersion","readFileSync","symbolList","getCachedIndexResults","addHierarchicalSymbolsForDocument","query","getSymbolsForDocument","getHoverForPosition","getDocumentHighlight","getSignatureHelpForPosition","workspacePath","completionResult","ls","getCompletionsForPosition","add","completionList","completionListExtension","pr","updateCompletionList","completionItem","resolveCompletionItem","newName","d","editActions","targetDecl","CallHierarchyProvider","getTargetDeclaration","getCallForDeclaration","itemsToAdd","getIncomingCallsForDeclaration","getOutgoingCallsForDeclaration","command","args","performQuickAction","getTypeCacheSize","heapSizeInMb","round","process","memoryUsage","heapUsed","_discardCachedParseResults","dropParseAndBindInfo","isDebugMode","runWithCancellationToken","prepareForClose","_removeSourceFileFromListAndMap","importedFile","indexToRemove","fi","shadowedFile","_isImportNeededRecursive","recursionMap","importerInfo","mapCompiled","SourceMapper","implFilePath","stubFileInfo","_addShadowedFile","importer","isImportStubFile","thirdPartyImportAllowed","useLibraryCodeForTypes","filesAdded","getImports","getThirdPartyImportInfo","newImportPathMap","_isImportAllowed","thirdPartyTypeInfo","verboseOutput","updatedImportMap","oldFilePath","normalizedImportPath","getBuiltinsImport","resolvedBuiltinsPath","delete","fileStats","statSync","pyTypedContents","cachedSearchPaths","getPathResultFromInterpreter","interpreter","paths","commandLineArgs","execOutput","child_process","execFileSync","encoding","execSplit","execSplitEntry","normalizedPath","err","getPythonPathFromPythonInterpreter","interpreterPath","searchKey","cachedPath","platform","moduleDirectory","getModulePath","pathConsts","typeshedFallback","debugTypeshedPath","includeWatchPathsOnly","workspaceRoot","venvPath","defaultVenv","libPath","lib","sitePackages","sitePackagesPath","pathResult","pythonPath","notLocalBindings","_lookUpSymbolRecursiveInternal","Symbol","bindingType","isOutsideCallerModule","isBeyondExecutionScope","isIndependentlyExecutable","builtInScope","scopeNode","configFileNames","AnalyzerService","instanceName","importResolverFactory","backgroundAnalysisProgramFactory","_typeStubTargetIsSingleFile","_requireTrackedFileUpdate","_lastUserInteractionTime","Date","now","_disposed","_instanceName","_executionRootPath","_importResolverFactory","createImportResolver","_maxAnalysisTimeInForeground","_backgroundAnalysisProgramFactory","cwd","_backgroundAnalysisProgram","BackgroundAnalysisProgram","_removeSourceFileWatchers","_removeConfigFileWatcher","_removeLibraryFileWatcher","_clearReloadConfigTimer","_clearReanalysisTimer","_clearLibraryReanalysisTimer","_onCompletionCallback","commandLineOptions","reanalyze","_commandLineOptions","_getConfigOptions","ensureDefaultPythonVersion","ensureDefaultPythonPlatform","executionRoot","projectRoot","_applyConfigOptions","_scheduleReanalysis","updateOpenFileContents","test_setIndexing","getTextOnRange","getAutoImports","getIndexing","reportReferencesForPosition","addSymbolsForDocument","reportSymbolsForWorkspace","renameSymbolAtPosition","getCallForPosition","getIncomingCallsForPosition","getOutgoingCallsForPosition","fileCount","printDependencies","_analyzeTimer","_getFileNamesFromFileSpecs","configFilePath","_findConfigFile","_findConfigFileHereOrUp","_typeCheckingMode","defaultExcludes","fileSpecs","fileSpec","include","getFileSpec","exclude","_configFilePath","configJsonObj","_parseConfigFile","initializeFromJson","diagnosticSeverityOverrides","configFileDir","autoExcludeVenv","executionEnvironments","addExecEnvironmentForExtraPaths","autoSearchPaths","applyDiagnosticOverrides","reportDuplicateSetting","settingName","configValue","settingSource","fromVsCodeExtension","autoImportCompletions","fullVenvPath","pythonPaths","logLevel","LogLevel","Log","Info","typingsSubdirPath","_getTypeStubFolder","_typeStubTargetPath","watchForSourceChanges","watchForLibraryChanges","typeCheckingMode","typeStubTargetImportName","_typeStubTargetImportName","errMsg","typeStubInputTargetParts","mkdirSync","forEachAncestorDirectory","ancestor","configPath","configContents","parseAttemptCount","_reportConfigParseError","configObj","parseFailed","fileMap","findFilesTime","matchedFiles","_matchFiles","markFilesDirtyUnconditionally","filesToImport","targetPath","prevResolvedPath","fileList","excludePaths","excl","regExp","includeFileRegex","envMarkers","visitDirectory","absolutePath","includeRegExp","_isInExcludePath","directory","includeSpec","foundFileSpec","wildcardRoot","stat","_sourceFileWatcher","close","_watchForSourceChanges","spec","_verboseOutput","isIgnored","ignoredWatchEventFunction","createFileSystemWatcher","event","fileNameSplit","isTemporaryFile","_libraryFileWatcher","_watchForLibraryChanges","watchList","_scheduleLibraryAnalysis","_libraryReanalysisTimer","clearTimeout","setTimeout","_configFileWatcher","_scheduleReloadConfigFile","setOptions","_reloadConfigTimer","_reloadConfigFile","_updateConfigFileWatcher","_updateLibraryFileWatcher","_updateSourceFileWatchers","_updateTrackedFileList","requireTrackedFileUpdate","_backgroundAnalysisCancellationSource","cancel","timeSinceLastUserInteractionInMs","timeUntilNextAnalysisInMs","max","createBackgroundThreadCancellationTokenSource","_isFileDeleted","_diagnosticVersion","_fileContentsVersion","_lastFileContentLength","_lastFileContentHash","_analyzedFileContentsVersion","_parseTreeNeedsCleaning","_isBindingInProgress","_parseDiagnostics","_bindDiagnostics","_checkerDiagnostics","_diagnosticRuleSet","getBasicDiagnosticRuleSet","_circularDependencies","_isBindingNeeded","_isCheckingNeeded","_indexingNeeded","_filePath","_moduleName","_isStubFile","_isThirdPartyImport","_isThirdPartyPyTypedPresent","_isTypingStubFile","_isTypingExtensionsStubFile","_isBuiltInStubFile","normalizeSlashes","isMainThread","prevDiagnosticVersion","includeWarningsAndErrors","diagList","enableTypeIgnoreComments","typeIgnoreLines","_parseResults","keys","convertLevelToCategory","cirDep","importCycleDetected","_hitMaxImportDepth","importDepthExceeded","ignore","ignoreFileSpec","typeIgnoreAll","_imports","_builtinsImport","_moduleSymbolTable","_binderResults","_clientDocument","hashString","_cachedIndexResults","containsWildcardImport","getText","TextDocument","update","updatedDependencyList","isEqual","maxImportDepth","diagSink","DiagnosticSink","readFileTime","execEnvironment","parseOptions","ParseOptions","Parser","parseSourceFile","resolveImportsTime","_resolveImports","importedModules","builtinsImportResult","_typingModulePath","typingModulePath","_typeshedModulePath","typeshedModulePath","_collectionsModulePath","collectionsModulePath","fetchAndClear","strict","strictFileSpec","CommentUtils","getFileLevelDirectives","internalParseError","ModuleNode","futureImports","TextRangeCollection","predominantTabSequence","predominantSingleQuoteCharacter","isIndexingRequired","DocumentSymbolProvider","indexSymbols","privateOrProtected","sourceMapper","DefinitionProvider","ReferencesProvider","HoverProvider","DocumentHighlightProvider","SignatureHelpProvider","moduleSymbolsCallback","CompletionProvider","completionData","data","bindTime","_cleanParseTreeIfRequired","_buildFileInfo","setFileInfo","binder","bindModule","internalTestMode","TestWalker","internalBindError","internalTypeCheckingError","analysisDiagnostics","TextRangeDiagnosticSink","isTypingExtensionsStubFile","isBuiltInStubFile","clean","moduleImports","typingImportResult","typeshedImportResult","moduleImport","setImportInfo","getAnyExtensionFromPath","_isDefined","element","_fileBinder","_getBoundSourceFiles","stubDecl","findClassDeclarations","findFunctionDeclarations","_getFullClassName","flatMap","_findClassDeclarations","functionName","sourceFiles","_findMethodDeclarations","_findFunctionDeclarations","classDecls","classDecl","methodDecls","_lookUpSymbolDeclarations","methodDecl","functionDecls","functionDecl","resolvedDecl","fullClassName","parentNode","classNameParts","_findClassDeclarationsUnderNode","classNamePart","_findClassDeclarationsUnderClass","parentClassDecls","parentDecl","current","reverse","getSourceFilesFromStub","fp","evaluateStaticBoolExpression","typingImportAliases","leftValue","rightValue","_isSysVersionInfoExpression","comparisonVersion","majorVersion","minorVersion","_convertTupleToVersion","_evaluateNumericBinaryOperation","floor","_isSysPlatformInfoExpression","comparisonPlatform","expectedPlatformName","pythonPlatform","PythonPlatform","Darwin","Windows","Linux","_getExpectedPlatformNameFromPlatform","_evaluateStringBinaryOperation","_isOsNameInfoExpression","comparisonOsName","expectedOsName","_getExpectedOsNameFromPlatform","operatorType","nextSymbolId","_flags","newSymbol","_synthesizedType","_declarations","declIndex","areDeclarationsSame","curDecl","hasTypeForDeclaration","_constantRegEx","_underscoreOnlyRegEx","_verifyParentChildLinks","_verifyChildRanges","skipCheck","cachedType","isIncompleteType","_speculativeContextStack","speculativeRootNode","entriesToUndo","cache","stackDepth","stackSize","_entriesToUndo","_requiresUndo","getFunctionDocStringFromDeclaration","_getFunctionOrClassDeclDocString","docStrings","o","_getModuleNodeDocString","findModules","arithmeticOperatorMap","bitwiseOperatorMap","comparisonOperatorMap","booleanOperatorMap","nonSubscriptableBuiltinTypes","V3_9","evaluatorOptions","symbolResolutionStack","isReachableRecursionMap","functionRecursionMap","callIsNoReturnCache","codeFlowAnalyzerCache","typeCache","speculativeTypeTracker","SpeculativeTypeTracker","incompleteTypeTracker","IncompleteTypeTracker","cancellationToken","noneType","isDiagnosticSuppressed","flowIncompleteGeneration","returnTypeInferenceContextStack","returnTypeInferenceTypeCache","checkForCancellation","readTypeCache","isNodeInReturnTypeInferenceContext","writeTypeCache","typeCacheToUse","speculativeNode","getSpeculativeRootNode","trackEntry","deleteTypeCacheEntry","contextNode","getIndexOfSymbolResolution","symbolId","pushSymbolResolution","isResultValid","popSymbolResolution","poppedEntry","setSymbolResolutionPartialType","partialType","getSymbolResolutionPartialType","evaluateTypesForExpressionInContext","getTypeOfExpression","expectedType","typeResult","getTypeFromTypeshedModule","getTypeshedType","AnyType","reportExpectingTypeErrors","isResolutionCyclical","allowForwardReferences","useCodeFlowAnalysis","effectiveTypeInfo","getEffectiveTypeOfSymbolForUsage","effectiveType","isSpecialBuiltIn","typeAtStart","UnboundType","codeFlowType","getFlowTypeOfReference","requiresTypeArguments","reportMissingTypeArgument","typeArgsMissingForClass","createSpecializedClassType","getClassFromPotentialTypeObject","typeArgsMissingForAlias","isUnbound","reportUnboundVariable","symbolIsUnbound","isPossiblyUnbound","symbolIsPossiblyUnbound","setSymbolAccessed","reportUndefinedVariable","symbolIsUndefined","isParamSpec","paramSpecContext","genericNotAllowed","getTypeVarScopeNode","typeVarsForScope","functionTypeInfo","addTypeVarsToListIfUnique","getTypeVarArgumentsRecursive","typeVar","convertToInstantiable","findScopedTypeVar","typeVarUsedByOuterScope","enclosingScope","getEnclosingClassOrFunction","TypeVarType","cloneForScopeId","typeVarNotUsedByOuterScope","getTypeFromName","baseTypeFlags","baseTypeResult","isTypeAliasPlaceholder","memberTypeResult","getTypeFromMemberAccessWithBaseType","method","initialType","baseType","classMemberInfo","lookUpObjectMember","getTypeOfMember","getTypeFromMemberAccess","minPythonVersion","classNotRuntimeSubscriptable","getTypeFromIndexWithBaseType","getTypeFromIndex","targetClassType","bindToType","superCallArgCount","superCallFirstArg","enclosingClass","superCallZeroArgForm","secondArgType","superCallSecondArg","lookupResults","mroBase","baseClassType","getTypeFromSuperCall","typeString","addInformation","strType","cloneWithLiteral","argList","getTypeFromCallWithBaseType","getTypeFromCall","effectiveExpectedType","matchingSubtype","useSpeculativeMode","getTypeFromTupleExpected","entryTypeResults","builtInTupleType","cloneTupleForSpecialization","buildTupleTypesList","getTypeFromTupleInferred","getTypeFromTuple","createType","getBuiltInObject","getTypeFromConstant","indexItemsNode","isAnnotationLiteralValue","isBytes","cloneBuiltinObjectWithLiteral","parser","textValue","valueOffset","parseTextExpression","parseStringAsTypeAnnotation","expectedTypeNotString","isInteger","unaryOperatorMap","isOptionalType","reportOptionalOperand","noneOperator","removeNoneFromUnion","getTypeFromMagicMethodReturn","typeNotSupportUnaryOperator","literalValue","getTypeFromUnaryOperation","getTypeFromBinaryOperation","getTypeFromAugmentedAssignment","assignTypeToExpression","getTypeFromListExpected","forceStrict","entryTypes","getElementTypeFromListComprehension","stripLiteralValue","inferredEntryType","strictListInference","areTypesSame","getTypeFromListInferred","getTypeFromList","getTypeFromSlice","getTypeFromAwaitable","ifType","elseType","getTypeFromTernary","elementType","comp","builtInIteratorType","getTypingType","getTypeFromListComprehension","getTypeFromDictionaryExpected","expectedDiagAddendum","keyType","valueType","keyTypes","valueTypes","getKeyAndValueTypesFromDictionary","strictDictionaryInference","getTypeFromDictionaryInferred","getTypeFromDictionary","expectedFunctionType","getEffectiveParameterType","functionParam","addParameter","expectedReturnType","getFunctionEffectiveReturnType","getTypeFromLambda","entryNode","narrowedExpectedType","classAlias","getAliasClass","typeVarMap","TypeVarMap","entryType","getTypeFromSet","sentType","getDeclaredGeneratorSendType","getTypeFromYield","getTypeFromYieldFrom","iterType","unpackedType","resultType","isEmptyTuple","addExpectedClassDiagnostic","isAnnotationEvaluationPostponed","getTypeOfAnnotation","allowFinal","associateTypeVarsWithScope","specialType","aliasMapEntry","createSpecialBuiltInClass","handleTypingStubTypeAnnotation","evaluatorFlags","n","getTypeFromDecorator","functionOrClassType","getTypeFromObjectMember","objectType","usage","memberAccessFlags","memberInfo","getTypeFromClassMemberName","bindFunctionToClassOrObject","getTypeFromClassMember","isMetaclassMember","metaclass","getBoundMethod","treatAsClassMember","unboundMethodType","boundMethod","getTypeAnnotationForParameter","paramIndex","functionFlags","getFunctionFlagsFromDecorators","firstCommentAnnotationIndex","paramAnnotations","adjIndex","isDeclaredTypeAlias","getDeclaredTypeForExpression","classOrObjectBase","memberAccessClass","setItemMember","setItemType","boundFunction","declaredType","getDeclaredTypeOfSymbol","setterInfo","setter","generatorReturnType","getReturnTypeFromGenerator","awaitReturnType","typeNotAwaitable","supportGetItem","iterMethodName","nextMethodName","getItemMethodName","reportOptionalIterable","noneNotIterable","getIteratorReturnType","objType","iterReturnType","classMember","memberType","methodType","getSpecializedReturnTypeForMetaclassMethod","nextReturnType","methodNotDefinedOnType","methodReturnsNonObject","getItemReturnType","methodNotDefined","metaclassType","typeNotIterable","synthesizeTypedDictClassMethods","newType","addDefaultParameters","initType","getTypedDictMembersForClass","isRequired","createWithType","strClass","selfParam","defaultTypeVar","createGetMethod","getOverload","createPopMethods","keyParam","popOverload1","popOverload2","createSetDefaultMethod","setDefaultOverload","createDelItemMethod","delItemOverload","getOverloads","popOverloads","setDefaultOverloads","nameLiteralType","OverloadedFunctionType","importPath","isFlowNodeReachable","getAfterFlowNode","isFlowPathBetweenNodes","sourceNode","sinkNode","sourceFlowNode","sinkFlowNode","addDiagnosticWithSuppressionCheck","isDiagnosticSuppressedForNode","isSpeculativeMode","isIncompleteTypeMode","typeNotClass","typeExpectedClass","assignTypeToNameNode","srcExpression","expectedTypeDiagAddendum","destType","narrowTypeBasedOnAssignment","typeAssignmentMismatch","sourceType","ScopeUtils","isInstance","reportConstantRedefinition","constantRedefinition","assignTypeToMemberVariable","srcType","srcExprNode","classDef","memberFields","isFinalVar","reportPossibleUnknownAssignment","srcExpr","callType","paramSpecAssignedName","typeVarAssignedName","removeUnbound","classTypeResults","assignmentInProtocol","setType","setErrorNode","setExpectedTypeDiag","assignTypeToMemberAccessNode","indexTypeResult","targetTypes","Array","unpackIndex","tupleType","getSpecializedTupleType","sourceEntryTypes","sourceEntryCount","sourceIndex","targetIndex","remainingTargetEntries","remainingSourceEntries","entriesToPack","expectedEntryCount","tupleSizeMismatch","expected","received","typeList","targetType","listType","assignTypeToTupleNode","typeHintType","isFinalAllowedForAssignmentTarget","isEnumClass","iteratedType","assignmentTargetExpr","typeArgs","paramSpecUnknownMember","recursiveTypeAliasName","classFromTypeObject","ModuleType","getField","getAttrSymbol","getAttrType","moduleUnknownMember","reportOptionalMemberAccess","noneUnknownMember","typeUnsupported","diagMessage","memberAccess","memberSet","memberDelete","potentialTypeObject","objectClass","firstTypeArg","getConcreteTypeFromTypeVar","classLookupFlags","containingClass","containingClassType","isClassVar","memberSetClassVar","memberUnknown","objectAccessType","isAccessedThroughObject","isTypeValid","accessMethodName","memberClassType","accessMethod","isPropertyClass","propertyMissingSetter","propertyMissingDeleter","accessMethodType","findOverloadedFunctionType","boundMethodType","validateFunctionArguments","enforceTargetType","isInstanceMethod","stripFirstParameter","applyObjectAccessMethod","memberAssignment","printObjectTypeForClass","generalAttrType","getAttribType","applyGeneralAttributeAccess","isUnionableType","getTypeArgs","typeArgsTooMany","assignTypeToTypeVar","typeNotSpecializable","typeParam","getTypeVar","cloneForTypeAlias","typeArgTypes","genericClassAssigned","genericClassDeleted","literalEmptyArgs","literalTypes","cloneBuiltinClassWithLiteral","isLiteralType","literalUnsupportedType","createLiteralType","typeArgsMismatchOne","adjustedFlags","isAnnotatedClass","indexType","resultingType","entryName","keyRequiredDeleted","keyUndefined","typeNotStringLiteral","typedDictDiag","typedDictSet","typedDictDelete","typedDictAccess","magicMethodName","itemMethodType","indexTypeList","baseTypeClass","numberNode","validateCallArguments","getTypeFromIndexedObject","reportOptionalSubscript","noneNotSubscriptable","typeNotSubscriptable","adjFlags","getTypeArg","builtInTuple","expectedTypes","homogenousType","tupleTypeVarMap","populateTypeVarMapBasedOnExpectedType","specializedTuple","expectedTypesContainLiterals","tupleTypes","tupleClass","stripLiterals","combinedTupleType","effectiveTypeArguments","updateNamedTupleBaseClass","namedTupleIndex","c","namedTupleClass","typedTupleClass","updatedTupleClass","clonedNamedTupleClass","skipUnknownArgCheck","isTypeObject","validateConstructorArguments","argType","getTypeForArgument","getClassFullName","getTypeSourceId","computeMroLinearization","methodOrdering","createTypeVarType","createNamedTupleType","typeNotIntantiable","enumClass","nameArg","entriesArg","createEnumType","typedDictClass","typedDictFirstArg","usingDictSyntax","typedDictSecondArgDict","entryMap","typedDictSecondArgDictEntry","typedDictEntryName","typedDictEmptyName","typedDictEntryUnique","typedDictTotalParam","typedDictExtraArgs","createTypedDictType","hasAbstractMethods","abstractMethods","getAbstractMethods","errorsToDisplay","abstractMethod","memberIsAbstractMore","memberIsAbstract","typeAbstract","newClassName","newClassType","builtInName","reportUntypedNamedTuple","namedTupleNoTypes","callResult","argumentErrors","getTypeForArgumentExpectingType","classFlags","createNewType","castToType","castFromType","reportUnnecessaryCast","unnecessaryCast","argTypes","overloadCallName","argumentTypes","noOverload","reportOptionalCall","noneNotCallable","typeNotCallable","validOverload","effectiveTypeVarMap","clone","validatedTypes","reportedErrors","skipConstructorCheck","isSkipConstructorCheck","initMethodType","expectedSubType","applyExpectedSubtypeForConstructor","buildTypeVarMapFromSpecializedClass","applyExpectedTypeForConstructor","constructorMethodInfo","constructorMethodType","newReturnType","requiresSpecialization","constructorNoArgs","expectedSubtype","specializedType","expectedTypeArgs","sameClassTypeVarMap","getTypeVars","setTypeVar","isNarrowable","synthExpectedTypeArgs","getTypeParameters","genericExpectedType","synthesizedIndex","syntheticTypeVarMap","synthTypeVar","targetTypeVar","inferReturnTypeIfNeeded","overloadedFunctionType","objectNotCallable","returnTypes","subtypeCallResult","argIndex","typeParams","varArgDictParam","reportedArgError","paramMap","argsNeeded","argsReceived","positionalParamCount","positionalOnlyIndex","positionalArgCount","firstParamWithDefault","positionOnlyWithoutDefaultsCount","validateArgTypeParams","activeParam","trySetActive","active","foundUnpackedListArg","unpackedArgIndex","argPositional","adjustedCount","argPositionalExpectedOne","argPositionalExpectedCount","listElementType","advanceToNextArg","funcArg","requiresTypeVarMatching","argument","isNameSynthesized","foundUnpackedDictionaryArg","paramNameValue","paramEntry","paramAlreadyAssigned","paramInfoIndex","paramNameMissing","isDefaultParameterCheckDisabled","unassignedParams","missingParamNames","argMissingForParam","argMissingForParams","typeVarMatchingCount","passCount","argParam","validateArgType","lock","validatedArg","specializedReturnType","skipUnknownCheck","expectedTypeDiag","argTypeText","paramTypeText","argAssignmentParamFunction","argAssignmentParam","argAssignmentFunction","argAssignment","simplifiedType","argParamFunction","reportUnknownArgumentType","argTypeUnknown","argumentType","argTypePartiallyUnknown","firstConstraintArg","typeVarName","paramSpecIllegal","paramSpecFirstArg","typeVarFirstArg","firstArg","createInstantiable","paramNameNode","paramNameMap","duplicateParam","paramSpecUnknownParam","typeVarUnknownParam","getBooleanValue","typeVarVariance","constraints","typeVarBoundAndConstrained","typeVarGeneric","paramSpecUnknownArg","addConstraint","typeVarSingleConstraint","expectedBoolLiteral","includesTypes","namedTupleFirstArg","namedTupleType","constructorType","isAssignmentToDefaultsFollowingNamedTuple","selfParameter","addGenericGetAttribute","namedTupleSecondArg","paramInfo","entryList","entryTypeNode","entryNameNode","entryTypeInfo","namedTupleNameType","namedTupleEmptyName","namedTupleNameString","namedTupleNameUnique","keysItemType","itemsItemType","lenType","parenthesized","expectedOperandType","leftType","rightType","customMetaclassSupportsMethod","adjustedRightType","unionSyntaxIllegal","operatorToken","validateBinaryOperation","methodName","leftSubtype","rightSubtype","altMagicMethodName","typeNotSupportBinaryOperator","removeTruthinessFromType","removeFalsinessFromType","magicMethodSupported","handleObjectSubtype","bindToClassType","magicMethodType","functionArgs","obj","isMatch","keyValue","symbolEntry","assignDiag","typedDictFieldTypeMismatch","isProvided","typedDictFieldUndefined","typedDictFieldRequired","canAssignToTypedDict","builtInDict","dictTypeVarMap","specializedDict","expectedKeyType","expectedValueType","isExpectedTypeDict","specializedKeyType","inferTypeArgFromExpectedType","specializedValueType","limitEntryCount","expectedTypedDictEntries","addUnknown","adjExpectedKeyType","unexpandedType","mappingType","mappingTypeVarMap","dictUnpackIsNotMapping","dictEntryType","builtInList","listTypeVarMap","specializedList","expectedEntryType","isExpectedTypeList","specializedEntryType","diagDummy","typeUnknown","typePartiallyUnknown","expectedElementType","comprehension","itemType","createSpecialType","paramLimit","allowParamSpec","isTuple","ellipsisSecondArg","ellipsisContext","isModule","moduleContext","isParamSpecType","transformTypeForPossibleEnumClass","typeOfExpr","enumClassInfo","EnumLiteral","transformTypeForTypeAlias","specialClassType","baseClassName","aliasClass","evaluateTypesForAssignmentStatement","rightHandType","isResolutionCycle","_promote","no_type_check","NoReturn","Counter","List","Dict","DefaultDict","Set","FrozenSet","Deque","ChainMap","handleTypingStubAssignment","typeAliasNameNode","typeAliasTypeVar","isSpeculativeTypeAlias","isPossibleTypeAliasDeclaration","isPossibleImplicitTypeAlias","srcTypeResult","boolType","isTypeAliasRecursive","typeAliasIsRecursive","recursiveTypeParameters","evaluateTypesForAugmentedAssignment","cachedClassType","classSymbol","getDeclaration","genericTypeParameters","sawMetaclass","initSubclassArgs","constArgValue","exprFlags","isMetaclass","metaclassDuplicate","isTypingExtensionClass","V3_7","protocolIllegal","V3_6","typedDictBaseClass","baseClassCircular","baseClassInvalid","reportUntypedBaseClass","baseClassUnknown","declaredMetaclass","prevBaseClass","duplicateBaseClass","supportsAbstractMethods","baseClassFinal","reportedMetaclassConflict","baseClassMeta","metaclassConflict","typeMetaclass","innerScope","initMethod","initDecls","initDeclNode","initParams","genericParams","foundUnknown","newDecoratedType","applyClassDecorator","reportUntypedClassDecorator","classDecoratorTypeUnknown","isDataClass","skipSynthesizedInit","isSkipSynthesizedInit","initSymbol","initSymbolType","isSynthesizedMethod","skipSynthesizeInit","localDataClassEntries","fullDataClassEntries","allAncestorsKnown","allAncestorsAreKnown","mroClass","getDataClassEntries","existingIndex","addInheritedDataClassEntries","localEntryTypeEvaluator","variableNameNode","variableTypeEvaluator","hasDefaultValue","includeInInit","initArg","variableName","variableSymbol","dataClassEntry","insertIndex","firstDefaultValueIndex","dataClassFieldWithDefault","dataClassEntries","entryEvaluator","operatorMethod","dictType","synthesizeDataClassMethods","initSubclassMethodInfo","initSubclassMethodType","validateInitSubclassArgs","inputClassType","originalClassType","decoratorNode","decoratorType","decoratorCallType","cachedFunctionType","functionSymbol","addGenericParamTypes","isPseudoGenericClass","paramTypes","typeParamIndex","annotatedParamCountMismatch","annotatedType","concreteAnnotatedType","paramTypeNode","isNoneWithoutOptional","adjustedIndex","strictParameterNoneValue","paramAssignmentMismatch","addOptionalAction","offsetOfTypeNode","variadicParamType","transformVariadicParamType","inferredParamType","inferFirstParamType","isTypeInferred","awaitableFunctionType","createAwaitableReturnType","createAsyncFunction","applyFunctionDecorator","reportUntypedFunctionDecorator","functionDecoratorTypeUnknown","overloadedTypes","prevDecl","prevDeclDeclTypeInfo","newOverload","overloadAbstractMismatch","addOverloadsToFunctionType","clsType","makeScopeName","selfSpecializeClassType","selfType","paramCategory","isInClass","inputFunctionType","originalFunctionType","validatePropertyMethod","prop","fset","propertyClass","typeSourceId","propertyObject","reportPropertyTypeMismatch","fgetType","getGetterTypeFromProperty","fsetType","setterGetterTypeMismatch","fsetSymbol","setFunction","setParamType","setSymbol","clonePropertyWithSetter","fdel","fdelSymbol","delFunction","delSymbol","clonePropertyWithDeleter","fget","fgetSymbol","getFunction1","getFunction2","getFunctionOverload","getSymbol","accessorName","accessorFunction","accessorSymbol","createProperty","propertyStaticOrClassMethod","awaitableReturnType","asyncGeneratorType","generatorTypeArgs","coroutineType","inferFunctionReturnType","isAbstract","raiseStatement","raiseType","methodAlwaysRaisesNotImplemented","noReturnClass","inferredReturnTypes","returnNode","inferredYieldTypes","yieldNode","inferredYieldType","generatorType","evaluateTypesForForStatement","evaluateTypesForExceptStatement","exceptionTypes","getExceptionType","subType","evaluateTypesForWithStatement","reportOptionalContextManager","noneNotUsableWith","enterMethodName","scopedType","additionalHelp","enterType","memberReturnType","asyncHelp","typeNotUsableWith","exitMethodName","evaluateTypesForImportAs","symbolNameNode","getAliasedSymbolTypeForName","cachedModuleType","evaluateTypesForImportFromAs","aliasNode","importLookupInfo","importSymbolUnknown","evaluateTypesForImportFrom","getInferredTypeOfDeclaration","lastContextualExpression","isContextual","isNodeContextual","evaluateTypeAnnotationExpression","annotationParent","annotationType","nodeToEvaluate","evaluateTypeOfParameter","listComprehension","getTypeFromWildcardImport","wildcardDecl","getDeclaredCallBaseType","isCallNoReturn","callIsNoReturn","overloadedFunction","isStubDefinition","isPyTypedDefinition","executionScope","getExecutionScopeNode","getCodeFlowExpressions","executionNode","analyzer","codeFlowAnalyzer","getCodeFlowAnalyzerForReturnTypeInferenceContext","createCodeFlowAnalyzer","wasIncompleteTypeMode","codeFlowResult","getTypeFromCodeFlow","isIncomplete","enterIncompleteTypeMode","leaveIncompleteTypeMode","flowNodeTypeCacheSet","flowNodeTypeCache","setCacheEntry","prevIncompleteType","incompleteSubtypes","generationCount","setIncompleteSubtype","incompleteEntries","getCacheEntry","deleteCacheEntry","typesToCombine","evaluateAssignmentFlowNode","nodeForCacheLookup","getTypeFromFlowNode","curFlowNode","callFlowNode","assignmentFlowNode","flowType","aliasFlowNode","sawIncomplete","flowTypeResult","labelNode","firstWasIncomplete","isFirstTimeInLoop","cacheEntry","typeNarrowingCallback","getTypeNarrowingCallback","preFinallyFlowNode","postFinallyFlowNode","wasGateClosed","wildcardImportFlowNode","visitedFlowNodeMap","isFlowNodeReachableRecursive","isPositiveTest","adjIsPositiveTest","NeverType","arg0Expr","matches","narrowTypeForLiteralComparison","referenceType","literalType","canNarrow","narrowedType","isTypeDeclared","narrowTypeForDiscriminatedFieldComparison","containerType","narrowTypeForContains","literalKey","tdEntry","narrowTypeForTypedDictKey","narrowTypeForCallable","arg1Expr","foundNonClassType","getIsInstanceClassTypes","foundSuperclass","isClassRelationshipIndeterminate","narrowTypeForIsInstance","functionReturnType","typeGuardTypeArgs","typeGuardTypeArg","canBeTruthy","canBeFalsy","literalValueMatches","isLiteralValueSame","allLiteralTypes","enumerateLiteralsForType","paramSpec","concatTypeArgs","callableFirstArg","callableExtraArgs","createCallableType","optionalExtraArgs","createOptionalType","classVarFirstArgMissing","classVarTooManyArgs","createClassVarType","createUnionType","genericTypeArgMissing","uniqueTypeVars","genericTypeArgUnique","genericTypeArgTypeVar","createGenericType","finalContext","finalTooManyArgs","createFinalType","annotatedTypeArgMissing","createAnnotatedType","concatenateParamSpecMissing","concatenateTypeArgsMissing","createConcatenateType","typeGuardArgCount","createTypeGuardType","typeArgCount","isPartiallyConstructed","typeArgsExpectingNone","typeArgsTooFew","typeArgType","maxTypeRecursionCount","effectiveSrcType","typeBound","constraint","isSameWithoutLiteralValue","typeConstrainedTypeVar","canAssignToTypeVar","typeVarAssignmentMismatch","allowMissingTypeArgs","nameType","getBuiltInScope","honorCodeFlow","usageScope","declNode","wasSuppressed","enterSpeculativeContext","leaveSpeculativeContext","getDeclarationFromFunctionNamedParameter","functionScope","paramSymbol","intType","typeAliasNode","getTypeAnnotationNode","applyLoaderActionsToModuleType","moduleType","importedModuleSymbol","loaderFields","isSpeculativeTypeAliasFromPyTypedFile","isEnumValue","inferredType","DeclarationUtils","usageNode","isPrivateMember","considerDecl","isTypeAlias","isDeclInEnumClass","synthesizedType","getSynthesizedType","inferTypeIfNeeded","disableSpeculativeMode","enableSpeculativeMode","isWrapReturnTypeInAwait","hasUnannotatedParams","contextualReturnType","context","prevTypeCache","allArgTypesAreUnknown","getFunctionInferredReturnTypeUsingArguments","member","canAssignClassToProtocol","destClassFields","genericDestType","genericDestTypeVarMap","typesAreConsistent","srcClassTypeVarMap","memberTypeMismatch","protocolMemberClassVar","protocolMemberMissing","specializeForBaseClass","specializedSrcProtocol","verifyTypeArgumentsAssignable","canAssignClass","reportErrorsUsingObjType","destEntries","srcEntries","destEntry","srcEntry","typedDictFieldNotRequired","typedDictFieldMissing","canAssignTypedDict","fgetDestReturnType","fgetSrcReturnType","inheritanceChain","curSrcType","curTypeVarMap","ancestorIndex","ancestorType","destTypeArgs","destArgCount","isDestHomogenousTuple","srcTypeArgs","srcArgCount","isSrcHomogeneousType","expectedDestType","expectedSrcType","entryDiag","tupleEntryTypeMismatch","isLocked","canAssignClassWithTypeArgs","destErrorType","srcErrorType","typeIncompatible","destTypeParams","srcArgIndex","srcTypeArg","destArgIndex","destTypeArg","destTypeParam","assignmentDiag","typeVarIsInvariant","canNarrowType","curTypeVarMapping","typeParamSpec","constrainedType","typeConstraint","isSrcTypeVar","updatedType","curTypeIsNarrowable","updatedTypeIsNarrowable","reverseTypeVarMatching","typeVarSubstitution","setTypeArgumentsRecursive","specializedSrcType","isIncompatible","foundMatch","bestTypeVarMap","bestTypeVarMapScore","typeVarMapClone","typeVarMapScore","getScore","copyFromClone","destClassType","literalAssignmentMismatch","callbackType","getCallbackProtocolType","canAssignFunction","srcFunction","overloadIndex","noOverloadAssignable","callMember","constructorFunction","constructorInfo","overloadDiag","destOverload","overloadNotAssignable","assignToNone","canAssignFunctionParameter","specializedDestType","paramAssignment","canAssign","checkReturnType","srcParams","destParams","srcStartOfNamed","srcPositionals","srcArgsIndex","destStartOfNamed","destPositionals","destArgsIndex","positionalsToMatch","shouldSkipParamCompatibilityCheck","srcParamType","nonDefaultSrcParamCount","functionTooFewParams","destArgsType","srcArgsType","functionTooManyParams","argsParamMissing","destParamMap","destHasKwargsParam","destParam","paramDiag","specializedDestParamType","namedParamTypeMismatch","namedParamMissingInDest","namedParamMissingInSource","destReturnType","srcReturnType","returnDiag","functionReturnTypeMismatch","setParamSpec","replaceTypeArgsWithAny","assignedType","assignedTypeAlias","replacedTypeArg","newTypeArgs","expectedTypeArgType","assignedSubtype","narrowedSubtype","declaredSubtype","methodList","typedDictEntries","getTypedDictMembersForClassRecursive","keyMap","isCanOmitDictValues","treatAsClassMethod","partiallySpecializeFunctionForBoundClassOrObject","newOverloadType","addOverload","specializedFunction","firstParam","bindTypeMismatch","objName","printFunctionParts","paramTypeStrings","paramString","defaultValueAssignment","ignoreFirstParamOfDeclaration","returnTypeString","printLiteralValue","unionType","optionalType","isPseudoGeneric","filteredSubtypes","isLiteralObject","isLiteralClass","subtypeStrings","literals","unshift","literalValues","isEllipsis","exceptionTypeNotInstantiable","expectedExceptionClass","delTargetExpr","symbolInScope","nonLocalDecls","localDecl","nonLocalDecl","namePartIndex","aliasDeclaration","argNode","paramDecl","isWithinTypeAnnotation","getCallSignatureInfo","getItemAtPosition","exprNode","addedActive","previousCategory","addFakeArg","startTokenIndex","endTokenIndex","tok","signatures","addOneFunctionToSignature","addFunctionToSignature","baseMethod","overrideMethod","overrideType","canOverride","baseParams","overrideParams","foundParamCountMismatch","overrideParam","overrideParamCount","baseCount","overrideCount","paramCount","positionOnlyIndex","baseParam","overrideParamName","overrideName","baseParamType","overrideParamType","baseIsSynthesizedTypeVar","overrideIsSynthesizedTypeVar","baseReturnType","overrideReturnType","addWarning","unreachableCode","TrackedImport","isAccessed","TrackedImportAs","TrackedImportFrom","ImportSymbolWalker","_accessedImportedSymbols","_treatStringsAsSymbols","_stubPath","_sourceFile","_indentAmount","_includeAllImports","_typeStubText","_lineEnd","_tab","_classNestCount","_functionNestCount","_ifNestCount","_emittedSuite","_emitDocString","_trackedImportAs","_trackedImportFrom","_writeFile","_emitDecorators","argString","_printExpression","_emitLine","_emitSuite","_printParameter","valueExpr","emitValue","_printModuleName","symbolInfo","trackedImportAs","trackedImportFrom","_increaseIndent","prevEmittedSuite","paramTypeAnnotation","isType","treatStringsAsSymbols","importStr","lineEmitted","sortedSymbols","symStr","finalText","_printHeaderDocString","_printTrackedImports","writeFileSync","singleTickRegEx","tripleTickRegEx","newTypes","typeEntry","transformedType","recursionLevel","contextClassType","isGeneric","makeConcrete","typeVarCount","replacementType","_specializeClassType","_specializeFunctionType","_specializeOverloadedFunctionType","declaredTypesOnly","foundUnknownBaseClass","specializedMroClass","list1","list2","type2","type1","buildTypeVarMap","cloneAsInstance","cloneAsInstantiable","newEffectiveTypeArgs","specializationNeeded","oldTypeArgType","newTypeArgType","hasTypeVar","convertConstraintsToUnion","getParamSpec","cloneForParamSpec","specializedTypes","typesRequiredSpecialization","specializedParameters","parameterTypes","specializedInferredReturnType","_getGeneratorReturnTypeArgs","addDeclaringModuleNamesForType","moduleList","addIfUnique","anyOrUnknown","hasUnknownBaseClass","typeChanged","strippedValue","enumList","typeAliasPlaceholder","unspecializedType","allowLiteralUnions","getTypeVarsFromClass","combinedList","setSkipAbstractClassTest","baseClassToFind","ignoreUnknown","includeInstanceVars","isClassTypedDict","isTypedDictMemberAccessedThroughIndex","allowUnknownTypeArgsForClasses","isMroFound","classListsToMerge","baseClassesToInclude","isInTail","searchClass","classLists","classList","filterClass","classToFilter","foundValidHead","nonEmptyList","literalStr","itemName","_isLocked","_typeVarMap","_paramSpecMap","_isNarrowableMap","newTypeVarMap","score","_getComplexityScoreForType","_getKey","_isNarrowableByKey","minScore","subtypeScore","_getComplexityScoreForClass","typeArgScoreSum","UnionType","classType2","type1TypeArgs","type2TypeArgs","objType2","functionType2","params1","params2","param1","param2","return1Type","return2Type","unionType2","subtypes1","subtypes2","containsType","type2TypeVar","boundType1","boundType2","constraints1","constraints2","type2Module","removeFromUnion","removeFilter","maxSubtypeCount","expandedTypes","isNoReturn","newUnionType","hitMaxSubtypeCount","addType","typeToAdd","literalStrMap","literalIntMap","_addTypeIfUnique","typeClone","_instance","skipAbstractClassTest","treatAliasAsSame","class1Details","class2Details","dataClassEntries1","dataClassEntries2","symbolsMatch","symbol1","symbol2","subclassType","parentClassType","aliasedSubclass","typeFlags","deleteFirstParam","newFunction","newInstance","specEntry","useUnknown","isConstructorMethod","_noneInstance","_noneType","_neverInstance","_anyInstance","_ellipsisInstance","typeVarType","constraintType","BackgroundAnalysis","BackgroundAnalysisBase","initialData","global","__rootDirectory","cancellationFolderName","getCancellationFolderName","worker","Worker","__filename","workerData","setup","BackgroundAnalysisRunner","BackgroundAnalysisRunnerBase","_worker","on","msg","requestType","logData","level","convertAnalysisResults","enqueueRequest","_startOrResumeAnalysis","port1","port2","MessageChannel","disposeCancellationToken","cancellationId","getCancellationTokenId","port","waiter","getBackgroundWaiter","convertDiagnostics","request","postMessage","BackgroundThreadBase","threadId","getConsole","parentPort","onMessage","getCancellationTokenFromId","_analyzeOneChunk","run","createConfigOptionsFrom","_reportDiagnostics","_analysisPaused","processIndexing","_analysisDone","_actions","_rule","_relatedInfo","setCancellationFolderName","createFromRealFileSystem","Warn","jsonObject","RegExp","defaultPythonVersion","defaultPythonPlatform","code","kind","Promise","resolve","reject","m","_createStub","CreateTypeStubCommand","_restartServer","RestartServerCommand","_quickAction","QuickActionCommand","cmdParams","execute","ResponseError","_ls","callingFile","service","_createTypeStubService","workspace","workspaceName","rootUri","convertPathToUri","serviceInstance","disableLanguageServices","disableOrganizeImports","isInitialized","createDeferred","serverSettings","getSettings","AnalyzerServiceExecutor","runWithOptions","writeTypeStubInBackground","dispose","infoMessage","window","showInformationMessage","_handlePostCreateTypeStub","errMessage","showErrorMessage","getWorkspaceForFile","createBackgroundAnalysis","params","docUri","otherArgs","convertUriToPath","convertTextEdits","CancellationThrottle","curTimestamp","valueOf","_lastCheckTimestamp","FileBasedToken","cancellationFilePath","isCancelled","_emitter","fire","_disposeEmitter","shouldCheck","_pipeExists","Emitter","OwningFileToken","_createPipe","_removePipe","flag","unlinkSync","FileBasedCancellationTokenSource","_cancellationFilePath","_ownFile","_token","Cancelled","getCancellationFilePath","folderName","os","tmpdir","getCancellationFolderPath","String","FileCancellationReceiverStrategy","ErrorCodes","RequestCancelled","isCancellationRequested","argv","receiver","createReceiverStrategyFromArgv","CancellationReceiverStrategy","Message","sender","CancellationSenderStrategy","extractCancellationFolderName","cancellationSourceId","CancellationTokenSource","disposables","onCancellationRequested","toOffset","array","addRange","to","from","selectIndex","predicate","binarySearchKey","keySelector","keyComparer","low","high","middle","emptyArray","equalityComparer","equateValues","comparer","indicesOf","x","y","compareValues","stableSortIndices","every","isArray","object","property","reduce","ExecutionEnvironment","latestStablePythonVersion","diagSettings","getDiagnosticRuleSet","envRoot","srcPath","src","diagnosticOverrides","skipIncludeSection","configTypeCheckingMode","isAbsolute","effectiveTypeCheckingMode","defaultSettings","_convertBoolean","_convertDiagnosticLevel","versionFromString","typingsPath","_initExecutionEnvironmentFromJson","_getPythonVersionFromPythonInterpreter","versionToString","severity","fieldName","envObj","newExecEnv","pathIndex","versionJson","versionFromMajorMinor","major","minor","logType","logCount","infoCount","warnCount","errorCount","_levelMap","_maxLevel","maxLevel","_log","_getNumericalLevel","numericLevel","compareComparableValues","hasOwnProperty","prototype","call","trueOrFalse","toUpperCase","execArgv","stackCrawlMark","captureStackTrace","assertDefined","verboseDebugInfo","hasProperty","enumObject","isFlags","members","stableSort","getEnumMembers","remainingFlags","enumValue","enumName","isString","DeferredImpl","_resolved","_rejected","_promise","res","rej","_resolve","_reject","_value","apply","_reason","promises","deferred","all","then","catch","promise","_messages","_childAddenda","newAddendum","maxDepth","maxLineCount","_getLinesRecursive","_getMessageCount","addendum","messageCount","childLines","maxDepthRemaining","extraSpace","_diagnosticList","_diagnosticMap","prevDiagnostics","diagsToAdd","positionRange","ignoreErrors","tmp","setGracefulCleanup","fileWatcherProvider","RealFileSystem","ChokidarFileWatcherProvider","NullConsole","normalizedPaths","_isMacintosh","_isLinux","_fileWatcherProvider","chdir","readdirSync","withFileTypes","realpathSync","listener","createFileWatcher","createReadStream","createWriteStream","dst","copyFileSync","readFile","_tmpdir","dirSync","fileSync","discardDescriptor","_createFileSystemWatcher","watcherOptions","ignoreInitial","ignorePermissionErrors","followSymlinks","interval","binaryInterval","disableGlobbing","awaitWriteFinish","stabilityThreshold","pollInterval","usePolling","excludes","ignored","watcher","chokidar","watch","useFsEvents","_prefix","_dummyState","State","_indentation","_previousTitles","title","_printPreviousTitles","msDuration","isSuppressed","previousTitle","_addendum","_suppress","_fsCaseSensitivity","pathString","getRootLength","lastIndexOf","sep","charAt","p1","p2","rootLength","substring","rest","reducePathComponents","components","reduced","component","extensions","ignoreCase","stringEqualityComparer","tryGetExtensionFromPath","getAnyExtensionFromPathWorker","equateStringsCaseSensitive","baseFileName","getBaseFileName","extensionIndex","fromDirectory","getCanonicalFileNameOrIgnoreCase","getCanonicalFileName","identity","fromComponents","toComponents","fromComponent","toComponent","relative","getPathComponentsRelativeTo","hasTrailingDirectorySeparator","ch","multiDotExtension","extname","firstDotIndex","basename","normalize","getWildcardRegexPattern","pathComponents","escapedSeparator","getRegexEscapedSeparator","doubleAsteriskRegexFragment","reservedCharacterPattern","regExPattern","firstComponent","getWildcardRoot","comparePathsWorker","componentComparer","aRoot","bRoot","compareStringsCaseInsensitive","relativePathSegmentRegExp","aRest","bRest","aComponents","bComponents","sharedLength","pathExtension","fileSystemEntryExists","entryKind","isFileSystemCaseSensitive","isFileSystemCaseSensitiveInternal","mangledFilePath","randomBytes","FileSpec","candidate","parentPath","relativeTo","startingFromDirPath","curPath","currentDirectory","getStringComparer","parentComponents","childComponents","componentEqualityComparer","pathExt","compareStringsCaseSensitive","isSymbolicLink","uriString","convertedPath","URI","libraryFilePath","offsetAdjustment","itemIndex","getItemContaining","lineRange","startOffset","endOffset","fromBounds","_reporter","_isDisplayingProgress","isEnabled","begin","isNaN","is3x","latestPythonVersion","verString","parseInt","versionStrings","typedValue","symbolLower","toLocaleLowerCase","typedLower","symbolSubstrLength","smallestEditDistance","editDistance","hash","uri","edits","editAction","newText","changes","workspaceEdits","edit","Position","Range","comparePositions","isEmptyPosition","pos","contains","positionOrRange","_items","lastItem","mid","_startTime","TimingStat","totalTime","isTiming","totalTimeInSec","TimingStats","totalDuration","tokenizeFileTime","parseFileTime","printTime","_serverOptions","_connection","createConnection","_GetConnectionOptions","_hasConfigurationCapability","_hasVisualStudioExtensionsCapability","_hasWorkspaceFoldersCapability","_hasWatchFileCapability","_hasActiveParameterCapability","_hasSignatureLabelOffsetCapability","_hasHierarchicalDocumentSymbolCapability","_hoverContentFormat","MarkupKind","PlainText","_completionDocFormat","_supportsUnnecessaryDiagnosticTag","_fileWatchers","_lastTriggerKind","CompletionTriggerKind","Invoked","ConsoleWithLogLevel","productName","_workspaceMap","WorkspaceMap","setupConnection","supportedCommands","supportedCodeActions","_progressReporter","ProgressReportTracker","progressReporterFactory","listen","scopeUri","section","getConfiguration","_defaultClientConfig","getNestedProperty","diagnosticMode","getDiagnosticSeverityOverrides","maxAnalysisTimeInForeground","createBackgroundAnalysisProgram","onAnalysisCompletedHandler","lsBase","workspacePaths","nonWorkspacePaths","workspaces","getNonDefaultWorkspaces","nodeWatchers","recursive","filename","fileWatcher","eventHandler","onInitialize","initialize","onDidChangeConfiguration","settings","updateSettingsForAllWorkspaces","onCodeAction","executeCodeAction","onDefinition","recordUserInteractionTime","textDocument","getDefinitionForPosition","Location","onReferences","workDoneReporter","resultReporter","_pendingFindAllRefsCancellationSource","progress","_getProgressReporter","workDoneToken","CodeAction","findingReferences","CancelAfter","locs","done","onDocumentSymbol","convertToFlatSymbols","onWorkspaceSymbol","onHover","hoverResults","convertHoverResults","onDocumentHighlight","onSignatureHelp","signatureHelpResults","sig","ParameterInformation","documentation","sigInfo","SignatureInformation","activeParameter","isActive","callHasParameters","activeSignature","isRetrigger","triggerKind","SignatureHelpTriggerKind","prevActiveSignature","activeSignatureHelp","onCompletion","onCompletionResolve","completionItemData","onRenameRequest","convertWorkspaceEdits","languages","callHierarchy","onPrepare","callItem","onIncomingCalls","callItems","onOutgoingCalls","onDidOpenTextDocument","onDidChangeTextDocument","contentChanges","onDidCloseTextDocument","onDidChangeWatchedFiles","change","eventType","onInitialized","onDidChangeWorkspaceFolders","removed","added","newWorkspace","createWorkspaceServiceInstance","updateSettingsForWorkspace","client","register","DidChangeWatchedFilesNotification","watchers","globPattern","WatchKind","Create","Change","Delete","onExecuteCommand","_pendingCommandCancellationSource","executeCommand","WorkspaceEdit","applyEdit","isLongRunningCommand","executingCommand","capabilities","configuration","didChangeWatchedFiles","dynamicRegistration","workspaceFolders","supportsVisualStudioExtensions","signatureHelp","signatureInformation","activeParameterSupport","parameterInformation","labelOffsetSupport","documentSymbol","hierarchicalDocumentSymbolSupport","_getCompatibleMarkupKind","hover","contentFormat","completion","documentationFormat","supportedDiagnosticTags","publishDiagnostics","tagSupport","valueSet","tag","DiagnosticTag","Unnecessary","folder","textDocumentSync","TextDocumentSyncKind","Incremental","definitionProvider","workDoneProgress","referencesProvider","documentSymbolProvider","workspaceSymbolProvider","hoverProvider","documentHighlightProvider","renameProvider","completionProvider","triggerCharacters","resolveProvider","signatureHelpProvider","codeActionProvider","codeActionKinds","executeCommandProvider","commands","callHierarchyProvider","createAnalyzerService","fileDiag","sendDiagnostics","_convertDiagnostics","progressMessage","filesToAnalyzeOne","filesToAnalyzeCount","updateOptionsAndRestartService","completionIncomplete","TriggerForIncompleteCompletions","completions","getWorkspaceCompletionsForPosition","logLevelValue","clientSupportedFormats","serverSupportedFormats","Markdown","clientReporter","serverInitiatedReporter","createWorkDoneProgress","cancellationStrategy","getCancellationStrategyFromArgv","diags","convertedDiags","DiagnosticSeverity","Warning","Information","Hint","convertCategoryToSeverity","getRule","vsDiag","tags","relatedInfo","getRelatedInfo","relatedInformation","DiagnosticRelatedInformation","_expandPathVariables","languageServiceRootPath","trackFiles","workspaceRootPath","CommandLineOptions","openFilesOnly","isPythonBinary","getEffectiveCommandLineOptions","createModuleSymbolTableFromIndexResult","callbackfn","externallyVisible","convertSymbolKindToCompletionItemKind","SymbolKind","File","CompletionItemKind","Namespace","Package","Folder","Property","Field","Constructor","Enum","Interface","Text","Boolean","Value","Null","Key","EnumMember","Struct","Event","Operator","TypeParameter","moduleSymbolMap","variableKind","_execEnvironment","_invocationPosition","_excludes","_moduleSymbolMap","_libraryMap","_importStatements","word","importAliasMap","_addImportsFromModuleMap","_addImportsFromLibraryMap","_addImportsFromImportAliasMap","aliasMap","isStubFileOrHasInit","_isStubFileOrHasInit","_processModuleSymbolTable","topLevelSymbols","fileDir","initPathPy","initPathPyi","isStub","hasInit","isStubOrHasInit","importSource","moduleNameAndType","_getImportPartsForSymbols","dotCount","getCharacterCount","autoImportSymbol","_isSimilar","_containsName","_addToImportAliasMap","importParts","autoImportTextEdits","_getTextEditsForAutoImportByFilePath","_getImportParts","originalName","mapPerSymbolName","importAliasData","existingData","_compareImportAliasData","left","right","groupComparison","dotComparison","_getModuleNameAndTypeFromFilePath","_getImportGroupFromModuleNameAndType","importNamePart","createImportParts","getTextEditsForAutoImportSymbolAddition","getTextEditsForAutoImportInsertion","getSymbolKind","selectionRange","incomingCalls","FindIncomingCallTreeWalker","findCalls","parseRoot","initMethodMember","primaryInitDecl","outgoingCalls","FindOutgoingCallTreeWalker","_parseRoot","_cancellationToken","_outgoingCalls","_addOutgoingCallForDeclaration","leftHandType","propertyDecls","callDest","outgoingCall","outgoing","rangesAreEqual","fromRanges","fromRange","_symbolName","_declaration","_incomingCalls","_addIncomingCallForDeclaration","callSource","moduleRange","lambdaRange","functionRange","incomingCall","incoming","symbolKind","declType","codeActions","typeStubDiag","actions","getActions","createTypeStubFor","Command","createTypeStub","CodeActionKind","QuickFix","addOptionalDiag","addMissingOptionalAction","addOptionalToAnnotation","_keywords","SortCategory","_workspacePath","_fileContents","_position","_importLookup","_format","_sourceMapper","_moduleSymbolsCallback","initialNode","initialDepth","getNodeDepth","curOffset","curChar","lineTextRange","textOnLine","priorText","postText","priorWordIndex","priorWord","_isWithinComment","_getStringLiteralCompletions","_getImportModuleCompletions","_getExpressionErrorCompletions","_getMemberAccessCompletions","_getImportFromCompletions","_getExpressionCompletions","_getStatementCompletions","autoImportText","curIndex","_mostRecentCompletions","symbolLabel","_itemToResolve","tokenIndex","_createSingleKeywordCompletionList","_getMethodOverrideCompletions","keyword","CompletionItem","Keyword","sortText","_makeSortText","LikelyKeyword","CompletionList","partialName","classResults","getMembersForClass","methodSignature","_printMethodSignature","textEdit","TextEdit","_addSymbol","paramList","leftExprNode","lastKnownModule","specializedSubtype","getMembersForModule","functionClass","specializedLeftType","objectThrough","_addSymbolsForSymbolTable","_getLastKnownModule","curType","unknownMemberName","moduleNamesForType","getDeclaringModulesForType","lastKnownMemberName","parseNode","_addCallArgumentCompletions","_addSymbols","_findMatchingKeywords","_getAutoImportCompletions","_getIndexStringLiteral","declaredTypeOfTarget","_addLiteralValuesForTargetType","signatureInfo","callNameEnd","_addNamedParameters","_addLiteralValuesForArgument","signature","quoteValue","_getQuoteValueFromPriorText","_addStringLiteralToCompletionList","stringValue","quoteCharacter","lastSingleQuote","lastDoubleQuote","priorString","valueWithQuotes","LiteralValue","rangeStartCol","rangeEndCol","autoImport","_addNameToCompletionList","importFromNode","implImport","keywordList","partialMatch","argNameMap","_addNamedParametersToMap","argName","NamedParameter","includeSymbolCallback","autoImportSource","additionalTextEdits","itemKind","_convertDeclarationTypeToItemKind","typeDetail","propertyType","getClassDocString","getFunctionDocStringFromType","getOverloadedFunctionDocStrings","doc","markdownString","convertDocStringToMarkdown","plainTextString","convertDocStringToPlainText","AutoImport","detail","DunderSymbol","PrivateSymbol","NormalSymbol","te","sortCategory","recentListIndex","_getRecentListIndex","RecentAutoImport","ImportModuleName","RecentImportModuleName","RecentKeywordOrSymbol","_formatInteger","val","digits","charCodeZero","digit","fromCharCode","resolvedDeclaration","_isPossiblePropertyDeclaration","getCompletionSuggestions","missingImportKeyword","completionName","definitions","_addIfUnique","implDecls","findDeclarations","implDecl","itemToAdd","def","HighlightSymbolTreeWalker","_highlightResults","_resultsContainsDeclaration","_addResult","_isWriteAccess","DocumentHighlightKind","Write","Read","resolvedDeclNonlocal","resolvedDeclarations","findHighlights","includeAliasDeclarationInIndex","aliasUsed","wildcardUsed","getLibraryPathWithoutExtension","resolved","getIndexAliasData","getNameFromDeclaration","documentUri","flatSymbols","appendToFlatSymbolsRecursive","appendWorkspaceSymbolsRecursive","appendDocumentSymbolsRecursive","indexSymbolData","collectSymbolIndexData","container","symbolData","location","containerName","getContainerName","allNameTable","autoImportMode","allNames","getAllNameTable","hasDeclarations","lookup","collectSymbolIndexDataForName","flatSymbol","_addResultsForDeclaration","typeText","_addResultsPart","_addDocumentationPart","_getTypeText","typeNode","getTypeAliasInfo","_addInitMethodInsteadIfCallNode","callLeftNode","instanceType","functionParts","classText","_addDocumentationPartForType","addedDoc","_addDocumentationResultsPart","python","markupString","sortedStatements","compareImportStatements","primaryRange","_getPrimaryReplacementRange","_generateSortedImportText","_addSecondaryReplacementRanges","statementLimit","secondaryBlockStart","secondaryBlockLimit","curImportType","importLine","_formatImportNode","_formatImportFromNode","_compareSymbols","symbolText","cumulativeText","ImportSorter","startPos","endPos","additionalEditActions","_addMissingOptionalToParam","_locations","FindReferencesTreeWalker","_referencesResult","_includeDeclaration","_locationsFound","evalScope","refTreeWalker","findReferences","callSignatureInfo","_makeSignature","stringParts","extractParameterDocumentation","ParameterizedString","_formatString","defaultLocale","stringMapsByLocale","de","deStrings","enUsStrings","es","esStrings","fr","frStrings","ja","jaStrings","ru","ruStrings","zhCnStrings","zhTwStrings","localizedStrings","defaultStrings","getRawString","loadStringsFromJsonFile","loadDefaultStrings","locale","override","localeSplit","loadStringsForLocale","vscodeConfigString","VSCODE_NLS_CONFIG","localeString","LC_ALL","LC_MESSAGES","LANG","LANGUAGE","localeStringSplit","getLocaleFromEnv","keyParts","getRawStringFromMap","curObj","keyPart","annotationFormatString","annotationSpansStrings","annotationStringEscape","annotationTripleQuote","awaitIllegal","backticksIllegal","breakOutsideLoop","comprehensionInDict","comprehensionInSet","continueInFinally","continueOutsideLoop","defaultValueNotAllowed","dictInAnnotation","dictKeyValuePairs","dictExpandIllegalInComprehension","duplicateArgsParam","duplicateCatchAll","duplicateKwargsParam","duplicateNameOnly","duplicatePositionOnly","duplicateUnpack","expectedAfterDecorator","expectedArrow","expectedAsAfterException","expectedAssignRightHandExpr","expectedBinaryRightHandExpr","expectedClassName","expectedCloseBracket","expectedCloseBrace","expectedCloseParen","expectedColon","expectedDecoratorExpr","expectedDecoratorName","expectedDecoratorNewline","expectedDelExpr","expectedElse","expectedExpr","expectedImport","expectedImportAlias","expectedImportSymbols","expectedIdentifier","expectedIndentedBlock","expectedIn","expectedInExpr","expectedFunctionAfterAsync","expectedFunctionName","expectedMemberName","expectedModuleName","expectedNameAfterAs","expectedNamedArgument","expectedNewlineOrSemicolon","expectedOpenParen","expectedParamName","expectedReturnExpr","expectedSliceIndex","expectedYieldExpr","formatStringBytes","formatStringIllegal","formatStringUnicode","inconsistentIndent","inconsistentTabs","invalidIdentifierChar","invalidTokenChars","keyValueInSet","listInAnnotation","namedExceptAfterCatchAll","nonDefaultAfterDefault","operatorLessOrGreaterDeprecated","paramAfterKwargsParam","positionArgAfterNamedArg","positionOnlyAfterNameOnly","positionOnlyIncompatible","positionOnlyFirstParam","relativeImportNotAllowed","returnOutsideFunction","stringNonAsciiBytes","stringUnterminated","sublistParamsIncompatible","tupleInAnnotation","typeCallNotAllowed","typeVarUsedOnlyOnce","unexpectedAsyncToken","unexpectedExprToken","unexpectedIndent","unexpectedUnindent","unpackIllegalInComprehension","unpackInDict","unpackInSet","unpackTuplesIllegal","varAnnotationIllegal","walrusIllegal","walrusNotAllowed","yieldFromIllegal","useDictInstead","useListInstead","useTupleInstead","useTypeInstead","organizeImports","_text","_currentChar","_isEndOfStream","_checkBounds","advance","isEndOfStream","isWhiteSpace","currentChar","isLineBreak","moveNext","isAtWhiteSpace","isAtLineBreak","CharCategory","_identifierCharFastTableSize","_identifierCharFastTable","_identifierCharMap","_identifierCharMapInitialized","isDecimal","StartIdentifierChar","_buildIdentifierLookupTable","IdentifierChar","_startIdentifierCharRanges","unicode","unicodeLu","unicodeLl","unicodeLt","unicodeLo","unicodeLm","unicodeNl","_identifierCharRanges","unicodeMn","unicodeMc","unicodeNd","unicodePc","_buildIdentifierLookupTableFromUnicodeRangeTable","table","fastTableOnly","entryIndex","rangeStart","rangeEnd","fill","NotIdentifierChar","_nextNodeId","extendRange","newRange","ClassNode","SuiteNode","IfNode","ifOrElifToken","WhileNode","whileToken","ForNode","forToken","ListComprehensionForNode","startToken","ListComprehensionIfNode","ifToken","TryNode","tryToken","ExceptNode","exceptToken","FunctionNode","defToken","ParameterNode","classToken","createDummyForDecorators","WithNode","withToken","WithItemNode","DecoratorNode","atToken","StatementListNode","ErrorNode","initialRange","UnaryOperationNode","BinaryOperationNode","AssignmentExpressionNode","AssignmentNode","TypeAnnotationNode","FunctionAnnotationNode","openParenToken","AugmentedAssignmentNode","AwaitNode","awaitToken","TernaryNode","UnpackNode","starToken","TupleNode","enclosedInParens","CallNode","ListComprehensionNode","IndexItemsNode","openBracketToken","closeBracketToken","IndexNode","SliceNode","YieldNode","yieldToken","YieldFromNode","MemberAccessNode","LambdaNode","lambdaToken","NameNode","nameToken","ConstantNode","keywordType","EllipsisNode","NumberNode","StringNode","unescapedValue","FormatStringNode","StringListNode","DictionaryNode","DictionaryKeyEntryNode","DictionaryExpandEntryNode","SetNode","ListNode","ArgumentNode","argCategory","DelNode","delToken","PassNode","passToken","ImportNode","ModuleNameNode","ImportAsNode","ImportFromNode","fromToken","usesParens","ImportFromAsNode","GlobalNode","NonlocalNode","AssertNode","assertToken","BreakNode","ContinueNode","ReturnNode","RaiseNode","_tokenIndex","_parseOptions","_diagSink","_isInLoop","_isInFunction","_isInFinally","_isParsingTypeAnnotation","_isParsingIndexTrailer","_futureImportMap","_importedModules","_containsWildcardImport","_assignmentExpressionsAllowed","_startNewParse","moduleNode","_atEof","_consumeTokenIfType","nextToken","_peekToken","_getNextToken","indentToken","isIndentAmbiguous","_parseStatement","_consumeTokensUntilType","_tokenizerOutput","textOffset","textLength","parseTextMode","initialParenDepth","_parseTypeAnnotation","_parseFunctionTypeAnnotation","_parseTestExpression","_peekTokenType","tokenizer","Tokenizer","tokenize","_peekKeywordType","_parseIfStatement","_parseWhileStatement","_parseForStatement","_parseTryStatement","_parseWithStatement","_parseFunctionDef","_parseClassDef","_parseAsyncStatement","_peekOperatorType","_parseDecorated","_parseSimpleStatement","asyncToken","_getKeywordToken","_parseSuite","ifNode","_consumeTokenIfKeyword","wasInLoop","wasInFinally","postColonCallback","wasFunction","possibleIndent","dedentToken","matchesIndent","exprListResult","_parseExpressionList","targetExpr","_makeExpressionOrTuple","seqExpr","_parseTestListAsExpression","_parseLoopSuite","_handleExpressionParseError","forNode","compFor","_tryParseCompForStatement","listCompNode","compList","compIter","_tryParseCompIfStatement","startTokenKeywordType","_disallowAssignmentExpression","_parseOrTest","compForNode","ifExpr","_tryParseLambdaExpression","_parseAssignmentExpression","whileNode","tryNode","sawCatchAllExcept","typeExpr","_getTokenIfIdentifier","peekToken","_parseVarArgsList","functionTypeAnnotationToken","_getTypeAnnotationCommentText","_parseFunctionTypeAnnotationComment","terminator","allowAnnotations","sawDefaultParam","reportedNonDefaultParamErr","sawKwSeparator","sawPositionOnlySeparator","sawVarArgs","sawKwArgs","_parseParameter","foundComma","_parseVariableTypeAnnotationComment","lastParam","starCount","slashCount","firstToken","_consumeTokenIfOperator","_getLanguageVersion","V3_8","sublistStart","withItemList","_parseWithItem","withSuite","withNode","withItem","itemNode","_parseExpression","decoratorList","_parseDecorator","atOperator","isSupportedExpressionForm","_isNameOrMemberAccessExpression","IdentifierToken","_parseArgList","breakToken","continueToken","returnToken","_isNextTokenNeverExpression","returnExpr","_parseTestOrStarListAsExpression","_reportConditionalErrorForStarTupleElement","modName","_parseDottedModuleName","isFutureImport","possibleInputToken","possibleStarToken","inParen","importFromAsNode","importToken","importNode","aliasToken","allowJustDots","moduleNameNode","identifier","namePart","globalToken","globalNode","_parseNameList","nonlocalToken","nonlocalNode","raiseToken","raiseNode","assertNode","exceptionExpr","parseError","delNode","V3_3","exprList","_parseYieldExpression","invalidToken","cleanedText","smallStatement","_parseSmallStatement","nextTokenType","_parsePassStatement","_parseBreakStatement","_parseContinueStatement","_parseReturnStatement","_parseFromStatement","_parseImportStatement","_parseGlobalStatement","_parseNonlocalStatement","_parseRaiseStatement","_parseAssertStatement","_parseDelStatement","_parseExpressionStatement","trailingComma","tupleStartRange","tupleNode","errorCategory","errorString","_parseTestExpressionList","allowAssignmentExpression","_parseTestOrStarExpressionList","allowStar","_parseExpressionListGeneric","_parseTestOrStarExpression","sawStar","allowUnpack","_parseBitwiseOrExpression","_parseLambdaExpression","testExpr","elseExpr","leftExpr","walrusToken","rightExpr","_parseAndTest","_parseNotTest","notToken","notExpr","_parseComparison","comparisonOperator","isOperatorComparison","tokenAfterNot","_parseBitwiseXorExpression","_parseBitwiseAndExpression","_parseShiftExpression","_parseArithmeticExpression","nextOperator","_parseArithmeticTerm","_parseArithmeticFactor","_parseAtomExpression","V3_5","atomExpression","_parseAtom","wasParsingTypeAnnotation","isArgListTerminated","wasParsingIndexTrailer","indexExpressions","_parseSubscriptList","closingToken","indexNode","listResult","_parseSubscript","sliceExpressions","sliceIndex","sawColon","sliceNode","sawKeywordArg","_parseArgument","nameIdentifier","nameExpr","listComp","_tryParseListComprehension","_parseStringList","expressionNode","possibleTupleNode","_parseTupleAtom","listNode","_parseListAtom","dictNode","_parseDictionaryOrSetAtom","keywordToken","keywordAsIdentifier","errorMsg","childNode","allowConditional","lambdaNode","startParen","yieldExpr","_tryParseYieldExpression","_parseTestListWithComprehension","tupleOrExpression","startBracket","closeBracket","listAtom","sawComprehension","startBrace","dictionaryEntries","setEntries","isDictionary","isSet","sawListComprehension","isFirstEntry","doubleStarExpression","doubleStar","keyEntryNode","dictEntry","expandEntryNode","closeCurlyBrace","setAtom","dictionaryAtom","terminalCheck","finalEntryCheck","annotationExpr","isTypeAliasDeclaration","_parseChainAssignments","isOperatorAssignment","destExpr","getNextNodeId","assignmentNode","paramAnnotation","allowUnionNotation","stringToken","unescapedResult","nonAsciiInBytes","_reportStringTokenErrors","curToken","tokenOffset","StringToken","_makeStringNode","stringListNode","functionAnnotation","segment","segmentOffset","segmentLength","isExpression","textRangeStart","formatExpressions","formatStringSegments","segmentExprLength","_getFormatStringExpressionLength","_parseFormatStringSegment","formatDirective","braceDepth","startOfExprOffset","segmentValue","quoteStack","braceCount","parenCount","bracketCount","prevCharWasEqual","ignoreSeparator","inString","quoteSequence","stringList","_parseFormatString","unescapedString","possibleTupleExpr","wasAllowed","disallowedKeywords","keywordText","terminators","term","tokenType","_isAlphaNumericChar","charCode","_isOctalCharCode","_isHexCharCode","_getHexDigitValue","escapedString","isRaw","isFormat","formatExpressionNestCount","formatSegment","strOffset","addInvalidEscapeOffset","getEscapedCharacter","scanHexEscape","digitCount","foundIllegalHexDigit","hexValue","localValue","appendOutputChar","char","foundIllegalChar","charCount","lookaheadChar","octalCode","quoteChar","isTriplicate","strChar","and","as","async","await","break","class","continue","__debug__","del","elif","else","except","finally","for","if","import","in","lambda","nonlocal","not","or","pass","raise","return","try","while","with","yield","False","True","_operatorInfo","_cs","CharacterStream","_tokens","_prevLineStart","_parenDepth","_lineRanges","_indentAmounts","_typeIgnoreAll","_typeIgnoreLines","_crCount","_crLfCount","_lfCount","_indentCount","_indentTabCount","_indentSpacesTotal","_singleQuoteCount","_doubleQuoteCount","_addNextToken","NewLineToken","_getComments","_setIndent","Token","_addLineRange","averageSpacePerIndent","skipWhitespace","_handleCharacter","stringPrefixLength","_getStringPrefixLength","stringPrefix","quoteTypeFlags","_getQuoteTypeFlags","_handleString","_handleComment","_handleInvalid","nextChar","newLineType","_handleNewLine","lookAhead","OperatorToken","_isPossibleNumber","_tryNumber","_tryIdentifier","_tryOperator","lineLength","_readIndentationAfterNewLine","tab1Spaces","tab8Spaces","isTabPresent","isSpacePresent","IndentToken","prevTabInfo","dedentPoints","dedentAmount","actualDedentAmount","DedentToken","KeywordToken","radix","leadingChars","isHex","isBinary","isOctal","NumberToken","isDecimalInteger","mightBeFloatingPoint","_skipFloatingPointCandidate","parseFloat","prevComments","_comments","skipToEol","Comment","stringLiteralInfo","_skipToEndOfStringLiteral","getCurrentChar","_skipFractionalNumber","_skipDecimalNumber","allowSign","indentAmount","ExitStatus","cancellationNone","freeze","getVersionString","convertDiagnosticToJson","isEmptyRange","logDiagnosticToConsole","yellow","firstLine","remainingLines","red","cyan","blue","gray","optionDefinitions","multiple","defaultOption","argErr","optionName","help","outputjson","incompatibleArgs","createstub","project","realFileSystem","outputJson","jsonReport","completenessReport","time","summary","filesAnalyzed","warningCount","informationCount","timeInSec","getTotalDuration","jsonDiag","typeCompleteness","packageRootDirectory","completnessScore","jsonModule","jsonSymbol","buildTypeCompletenessReport","verify","printTypeCompletenessReportText","exit","ErrorsReported","NoErrors","FatalError","verifyPackageTypes","ConfigFileParseError","diagnosticCount","reportDiagnosticsAsJson","fileErrorsAndWarnings","reportDiagnosticsAsText","printSummary","stats","printStats","printDetails","dependencies","processArgs","PyrightServer","LanguageServerBase","__dirname","reporterFactory","SourceOrganizeImports","_controller","CommandController","pythonSection","pythonAnalysisSection","typeshedPaths","getDiagnosticRuleName","getSeverityOverrides","isOpenFilesOnly","convertLogLevel","pyrightSection","CodeActionProvider","getCodeActionsForPosition","connection","sendNotification","_defaultWorkspacePath","bestRootPath","bestInstance","defaultWorkspace","workspaceNames"],"mappings":"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CA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,CAAC,IAAK,KACN,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,OACA,CAAC,OAAQ,QACT,OACA,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,OACA,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,OACA,CAAC,OAAQ,SAGA,EAAAC,UAA+B,CACxC,CAAC,GAAI,KACL,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,IAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,OACA,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,CAAC,OAAQ,QACT,OACA,CAAC,OAAQ,SAGA,EAAAC,UAA+B,CACxC,IACA,IACA,IACA,IACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,MAGS,EAAAC,UAA+B,CACxC,IACA,IACA,IACA,CAAC,IAAK,KACN,IACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,KACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAA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,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,KACA,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,CAAC,KAAM,MACP,KACA,CAAC,KAAM,MACP,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,MACA,MACA,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,MACA,MACA,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,MACA,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,MAAO,OACR,CAAC,OAAQ,QACT,CAAC,OAAQ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","file":"pyright-internal.js","sourcesContent":["/*\n * aliasDeclarationUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Helper functions around alias declarations.\n */\n\nimport { ImportLookup, ImportLookupResult } from './analyzerFileInfo';\nimport { Declaration, DeclarationType } from './declaration';\nimport { Symbol } from './symbol';\n\n// If the specified declaration is an alias declaration that points to a symbol,\n// it resolves the alias and looks up the symbol, then returns the first declaration\n// associated with that symbol. It does this recursively if necessary. If a symbol\n// lookup fails, undefined is returned. If resolveLocalNames is true, the method\n// resolves aliases through local renames (\"as\" clauses found in import statements).\nexport function resolveAliasDeclaration(\n    importLookup: ImportLookup,\n    declaration: Declaration,\n    resolveLocalNames: boolean\n): Declaration | undefined {\n    let curDeclaration: Declaration | undefined = declaration;\n    const alreadyVisited: Declaration[] = [];\n\n    while (true) {\n        if (curDeclaration.type !== DeclarationType.Alias) {\n            return curDeclaration;\n        }\n\n        if (!curDeclaration.symbolName) {\n            return curDeclaration;\n        }\n\n        // If we are not supposed to follow local alias names and this\n        // is a local name, don't continue to follow the alias.\n        if (!resolveLocalNames && curDeclaration.usesLocalName) {\n            return curDeclaration;\n        }\n\n        let lookupResult: ImportLookupResult | undefined;\n        if (curDeclaration.path) {\n            lookupResult = importLookup(curDeclaration.path);\n            if (!lookupResult) {\n                return undefined;\n            }\n        }\n\n        const symbol: Symbol | undefined = lookupResult\n            ? lookupResult.symbolTable.get(curDeclaration.symbolName)\n            : undefined;\n        if (!symbol) {\n            if (curDeclaration.submoduleFallback) {\n                return resolveAliasDeclaration(importLookup, curDeclaration.submoduleFallback, resolveLocalNames);\n            }\n            return undefined;\n        }\n\n        // Prefer declarations with specified types. If we don't have any of those,\n        // fall back on declarations with inferred types.\n        let declarations = symbol.getTypedDeclarations();\n        if (declarations.length === 0) {\n            declarations = symbol.getDeclarations();\n\n            if (declarations.length === 0) {\n                return undefined;\n            }\n        }\n\n        // Prefer the last declaration in the list. This ensures that\n        // we use all of the overloads if it's an overloaded function.\n        curDeclaration = declarations[declarations.length - 1];\n\n        // Make sure we don't follow a circular list indefinitely.\n        if (alreadyVisited.find((decl) => decl === curDeclaration)) {\n            return declaration;\n        }\n        alreadyVisited.push(curDeclaration);\n    }\n}\n","/*\n * analysis.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Various analysis helper types and functions\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport { OperationCanceledException, throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { ConfigOptions } from '../common/configOptions';\nimport { ConsoleInterface } from '../common/console';\nimport * as debug from '../common/debug';\nimport { FileDiagnostics } from '../common/diagnosticSink';\nimport { Duration } from '../common/timing';\nimport { MaxAnalysisTime, Program } from './program';\n\nexport const nullCallback: AnalysisCompleteCallback = (_) => {\n    /* empty */\n};\n\nexport interface AnalysisResults {\n    diagnostics: FileDiagnostics[];\n    filesInProgram: number;\n    checkingOnlyOpenFiles: boolean;\n    filesRequiringAnalysis: number;\n    fatalErrorOccurred: boolean;\n    configParseErrorOccurred: boolean;\n    elapsedTime: number;\n    error?: Error;\n}\n\nexport type AnalysisCompleteCallback = (results: AnalysisResults) => void;\n\nexport function analyzeProgram(\n    program: Program,\n    maxTime: MaxAnalysisTime | undefined,\n    configOptions: ConfigOptions,\n    callback: AnalysisCompleteCallback | undefined,\n    console: ConsoleInterface,\n    token: CancellationToken\n): boolean {\n    let moreToAnalyze = false;\n\n    callback = callback ?? nullCallback;\n\n    try {\n        throwIfCancellationRequested(token);\n\n        const duration = new Duration();\n        moreToAnalyze = program.analyze(maxTime, token);\n\n        const filesLeftToAnalyze = program.getFilesToAnalyzeCount();\n        debug.assert(filesLeftToAnalyze === 0 || moreToAnalyze);\n\n        const diagnostics = program.getDiagnostics(configOptions);\n        const diagnosticFileCount = diagnostics.length;\n        const elapsedTime = duration.getDurationInSeconds();\n\n        // Report any diagnostics or completion.\n        if (diagnosticFileCount > 0 || !moreToAnalyze) {\n            callback({\n                diagnostics,\n                filesInProgram: program.getFileCount(),\n                filesRequiringAnalysis: filesLeftToAnalyze,\n                checkingOnlyOpenFiles: program.isCheckingOnlyOpenFiles(),\n                fatalErrorOccurred: false,\n                configParseErrorOccurred: false,\n                elapsedTime,\n            });\n        }\n    } catch (e) {\n        if (OperationCanceledException.is(e)) {\n            return false;\n        }\n\n        const message = debug.getErrorString(e);\n        console.error('Error performing analysis: ' + message);\n\n        callback({\n            diagnostics: [],\n            filesInProgram: 0,\n            filesRequiringAnalysis: 0,\n            checkingOnlyOpenFiles: true,\n            fatalErrorOccurred: true,\n            configParseErrorOccurred: false,\n            elapsedTime: 0,\n            error: debug.getSerializableError(e),\n        });\n    }\n\n    return moreToAnalyze;\n}\n","/*\n * analyzerNodeInfo.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Defines objects that hang off the parse nodes in the parse tree.\n * It contains information collected during the binder phase that\n * can be used for later analysis steps or for language services\n * (e.g. hover information).\n */\n\nimport {\n    ClassNode,\n    ExecutionScopeNode,\n    FunctionNode,\n    LambdaNode,\n    ListComprehensionNode,\n    ModuleNode,\n    ParseNode,\n} from '../parser/parseNodes';\nimport { AnalyzerFileInfo } from './analyzerFileInfo';\nimport { FlowFlags, FlowNode } from './codeFlow';\nimport { Declaration } from './declaration';\nimport { ImportResult } from './importResult';\nimport { Scope } from './scope';\n\ninterface AnalyzerNodeInfo {\n    //---------------------------------------------------------------\n    // Set as part of import resolution\n\n    // Information about an import; used for import nodes only.\n    importInfo?: ImportResult;\n\n    //---------------------------------------------------------------\n    // Set by Binder\n\n    // Scope for nodes that introduce scopes: modules, functions,\n    // classes, lambdas, and list comprehensions. A scope is used\n    // to store symbol names and their associated types and declarations.\n    scope?: Scope;\n\n    // Declaration (for functions and classes only).\n    declaration?: Declaration;\n\n    // Control flow information for this node.\n    flowNode?: FlowNode;\n\n    // Control flow information at the end of this node.\n    afterFlowNode?: FlowNode;\n\n    // Info about the source file, used only on module nodes.\n    fileInfo?: AnalyzerFileInfo;\n\n    // Map of expressions used within an execution scope (module,\n    // function or lambda) that requires code flow analysis.\n    codeFlowExpressions?: Map<string, string>;\n\n    // List of __all__ symbols in the module.\n    dunderAllNames?: string[];\n}\n\nexport type ScopedNode = ModuleNode | ClassNode | FunctionNode | LambdaNode | ListComprehensionNode;\n\n// Cleans out all fields that are added by the analyzer phases\n// (after the post-parse walker).\nexport function cleanNodeAnalysisInfo(node: ParseNode) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    delete analyzerNode.scope;\n    delete analyzerNode.declaration;\n    delete analyzerNode.flowNode;\n    delete analyzerNode.afterFlowNode;\n    delete analyzerNode.fileInfo;\n}\n\nexport function getImportInfo(node: ParseNode): ImportResult | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.importInfo;\n}\n\nexport function setImportInfo(node: ParseNode, importInfo: ImportResult) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.importInfo = importInfo;\n}\n\nexport function getScope(node: ParseNode): Scope | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.scope;\n}\n\nexport function setScope(node: ParseNode, scope: Scope) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.scope = scope;\n}\n\nexport function getDeclaration(node: ParseNode): Declaration | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.declaration;\n}\n\nexport function setDeclaration(node: ParseNode, decl: Declaration) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.declaration = decl;\n}\n\nexport function getFlowNode(node: ParseNode): FlowNode | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.flowNode;\n}\n\nexport function setFlowNode(node: ParseNode, flowNode: FlowNode) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.flowNode = flowNode;\n}\n\nexport function getAfterFlowNode(node: ParseNode): FlowNode | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.afterFlowNode;\n}\n\nexport function setAfterFlowNode(node: ParseNode, flowNode: FlowNode) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.afterFlowNode = flowNode;\n}\n\nexport function getFileInfo(node: ModuleNode): AnalyzerFileInfo | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.fileInfo;\n}\n\nexport function setFileInfo(node: ModuleNode, fileInfo: AnalyzerFileInfo) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.fileInfo = fileInfo;\n}\n\nexport function getCodeFlowExpressions(node: ExecutionScopeNode): Map<string, string> | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.codeFlowExpressions;\n}\n\nexport function setCodeFlowExpressions(node: ExecutionScopeNode, map: Map<string, string>) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.codeFlowExpressions = map;\n}\n\nexport function getDunderAllNames(node: ModuleNode): string[] | undefined {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    return analyzerNode.dunderAllNames;\n}\n\nexport function setDunderAllNames(node: ModuleNode, names: string[] | undefined) {\n    const analyzerNode = node as AnalyzerNodeInfo;\n    analyzerNode.dunderAllNames = names;\n}\n\nexport function isCodeUnreachable(node: ParseNode): boolean {\n    let curNode: ParseNode | undefined = node;\n\n    // Walk up the parse tree until we find a node with\n    // an associated flow node.\n    while (curNode) {\n        const flowNode = getFlowNode(curNode);\n        if (flowNode) {\n            return !!(flowNode.flags & FlowFlags.Unreachable);\n        }\n        curNode = curNode.parent;\n    }\n\n    return false;\n}\n","/*\n * BackgroundAnalysisProgram.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Applies operations to both the foreground program and a background\n * analysis running in a worker process.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-textdocument';\n\nimport { BackgroundAnalysisBase } from '../backgroundAnalysisBase';\nimport { ConfigOptions } from '../common/configOptions';\nimport { ConsoleInterface } from '../common/console';\nimport { Diagnostic } from '../common/diagnostic';\nimport { FileDiagnostics } from '../common/diagnosticSink';\nimport { LanguageServiceExtension } from '../common/extensibility';\nimport { Range } from '../common/textRange';\nimport { IndexResults } from '../languageService/documentSymbolProvider';\nimport { AnalysisCompleteCallback, analyzeProgram } from './analysis';\nimport { ImportResolver } from './importResolver';\nimport { Indices, MaxAnalysisTime, Program } from './program';\n\nexport class BackgroundAnalysisProgram {\n    private _program: Program;\n    private _backgroundAnalysis?: BackgroundAnalysisBase;\n    private _onAnalysisCompletion?: AnalysisCompleteCallback;\n    private _maxAnalysisTime?: MaxAnalysisTime;\n    private _indices: Indices | undefined;\n\n    constructor(\n        private _console: ConsoleInterface,\n        private _configOptions: ConfigOptions,\n        private _importResolver: ImportResolver,\n        extension?: LanguageServiceExtension,\n        backgroundAnalysis?: BackgroundAnalysisBase,\n        maxAnalysisTime?: MaxAnalysisTime\n    ) {\n        this._program = new Program(this._importResolver, this._configOptions, this._console, extension);\n        this._backgroundAnalysis = backgroundAnalysis;\n        this._maxAnalysisTime = maxAnalysisTime;\n    }\n\n    get configOptions() {\n        return this._configOptions;\n    }\n\n    get importResolver() {\n        return this._importResolver;\n    }\n\n    get program() {\n        return this._program;\n    }\n\n    get backgroundAnalysis() {\n        return this._backgroundAnalysis;\n    }\n\n    setConfigOptions(configOptions: ConfigOptions) {\n        this._configOptions = configOptions;\n        this._backgroundAnalysis?.setConfigOptions(configOptions);\n        this._program.setConfigOptions(configOptions);\n    }\n\n    setImportResolver(importResolver: ImportResolver) {\n        this._importResolver = importResolver;\n        this._program.setImportResolver(importResolver);\n\n        // Do nothing for background analysis.\n        // Background analysis updates importer when configOptions is changed rather than\n        // having two APIs to reduce the chance of the program and importer pointing to\n        // two different configOptions.\n    }\n\n    setTrackedFiles(filePaths: string[]) {\n        this._backgroundAnalysis?.setTrackedFiles(filePaths);\n        const diagnostics = this._program.setTrackedFiles(filePaths);\n        this._reportDiagnosticsForRemovedFiles(diagnostics);\n    }\n\n    setAllowedThirdPartyImports(importNames: string[]) {\n        this._backgroundAnalysis?.setAllowedThirdPartyImports(importNames);\n        this._program.setAllowedThirdPartyImports(importNames);\n    }\n\n    setFileOpened(filePath: string, version: number | null, contents: string) {\n        this._backgroundAnalysis?.setFileOpened(filePath, version, [{ text: contents }]);\n        this._program.setFileOpened(filePath, version, [{ text: contents }]);\n    }\n\n    updateOpenFileContents(path: string, version: number | null, contents: TextDocumentContentChangeEvent[]) {\n        this._backgroundAnalysis?.setFileOpened(path, version, contents);\n        this._program.setFileOpened(path, version, contents);\n        this.markFilesDirty([path], true);\n    }\n\n    setFileClosed(filePath: string) {\n        this._backgroundAnalysis?.setFileClosed(filePath);\n        const diagnostics = this._program.setFileClosed(filePath);\n        this._reportDiagnosticsForRemovedFiles(diagnostics);\n    }\n\n    markAllFilesDirty(evenIfContentsAreSame: boolean) {\n        this._backgroundAnalysis?.markAllFilesDirty(evenIfContentsAreSame);\n        this._program.markAllFilesDirty(evenIfContentsAreSame);\n    }\n\n    markFilesDirty(filePaths: string[], evenIfContentsAreSame: boolean) {\n        this._backgroundAnalysis?.markFilesDirty(filePaths, evenIfContentsAreSame);\n        this._program.markFilesDirty(filePaths, evenIfContentsAreSame);\n    }\n\n    setCompletionCallback(callback?: AnalysisCompleteCallback) {\n        this._onAnalysisCompletion = callback;\n        this._backgroundAnalysis?.setCompletionCallback(callback);\n    }\n\n    startAnalysis(token: CancellationToken): boolean {\n        if (this._backgroundAnalysis) {\n            this._backgroundAnalysis.startAnalysis(this._indices, token);\n            return false;\n        }\n\n        return analyzeProgram(\n            this._program,\n            this._maxAnalysisTime,\n            this._configOptions,\n            this._onAnalysisCompletion,\n            this._console,\n            token\n        );\n    }\n\n    test_setIndexing(\n        workspaceIndices: Map<string, IndexResults>,\n        libraryIndices: Map<string, Map<string, IndexResults>>\n    ) {\n        const indices = this._getIndices();\n        for (const [filePath, indexResults] of workspaceIndices) {\n            indices.setWorkspaceIndex(filePath, indexResults);\n        }\n\n        for (const [execEnvRoot, map] of libraryIndices) {\n            for (const [libraryPath, indexResults] of map) {\n                indices.setIndex(execEnvRoot, libraryPath, indexResults);\n            }\n        }\n    }\n\n    startIndexing() {\n        if (!this._configOptions.indexing) {\n            return;\n        }\n\n        this._backgroundAnalysis?.startIndexing(this._configOptions, this._getIndices());\n    }\n\n    refreshIndexing() {\n        if (!this._configOptions.indexing) {\n            return;\n        }\n\n        this._backgroundAnalysis?.refreshIndexing(this._configOptions, this._indices);\n    }\n\n    cancelIndexing() {\n        this._backgroundAnalysis?.cancelIndexing(this._configOptions);\n    }\n\n    getIndexing(filePath: string) {\n        return this._indices?.getIndex(this._configOptions.findExecEnvironment(filePath).root);\n    }\n\n    async getDiagnosticsForRange(filePath: string, range: Range, token: CancellationToken): Promise<Diagnostic[]> {\n        if (this._backgroundAnalysis) {\n            return this._backgroundAnalysis.getDiagnosticsForRange(filePath, range, token);\n        }\n\n        return this._program.getDiagnosticsForRange(filePath, range);\n    }\n\n    async writeTypeStub(\n        targetImportPath: string,\n        targetIsSingleFile: boolean,\n        stubPath: string,\n        token: CancellationToken\n    ): Promise<any> {\n        if (this._backgroundAnalysis) {\n            return this._backgroundAnalysis.writeTypeStub(targetImportPath, targetIsSingleFile, stubPath, token);\n        }\n\n        analyzeProgram(this._program, undefined, this._configOptions, this._onAnalysisCompletion, this._console, token);\n        return this._program.writeTypeStub(targetImportPath, targetIsSingleFile, stubPath, token);\n    }\n\n    invalidateAndForceReanalysis() {\n        this.refreshIndexing();\n\n        this._backgroundAnalysis?.invalidateAndForceReanalysis();\n\n        // Make sure the import resolver doesn't have invalid\n        // cached entries.\n        this._importResolver.invalidateCache();\n\n        // Mark all files with one or more errors dirty.\n        this._program.markAllFilesDirty(true);\n    }\n\n    invalidateCache() {\n        // Invalidate import resolver because it could have cached\n        // imports that are no longer valid because a source file has\n        // been deleted or added.\n        this._importResolver.invalidateCache();\n    }\n\n    restart() {\n        this._backgroundAnalysis?.restart();\n    }\n\n    private _getIndices(): Indices {\n        if (!this._indices) {\n            const program = this._program;\n\n            // The map holds onto index results of library files per execution root.\n            // The map will be refreshed together when library files are re-scanned.\n            // It can't be cached by sourceFile since some of library files won't have\n            // corresponding sourceFile created.\n            const map = new Map<string, Map<string, IndexResults>>();\n            this._indices = {\n                setWorkspaceIndex(path: string, indexResults: IndexResults): void {\n                    // Index result of workspace file will be cached by each sourceFile\n                    // and it will go away when the source file goes away.\n                    program.getSourceFile(path)?.cacheIndexResults(indexResults);\n                },\n                getIndex(execEnv: string): Map<string, IndexResults> | undefined {\n                    return map.get(execEnv);\n                },\n                setIndex(execEnv: string, path: string, indexResults: IndexResults): void {\n                    let indicesMap = map.get(execEnv);\n                    if (!indicesMap) {\n                        indicesMap = new Map<string, IndexResults>();\n                        map.set(execEnv, indicesMap);\n                    }\n\n                    indicesMap.set(path, indexResults);\n                },\n                reset(): void {\n                    map.clear();\n                },\n            };\n        }\n\n        return this._indices!;\n    }\n\n    private _reportDiagnosticsForRemovedFiles(fileDiags: FileDiagnostics[]) {\n        if (fileDiags.length > 0) {\n            // If analysis is running in the foreground process, report any\n            // diagnostics that resulted from the close operation (used to\n            // clear diagnostics that are no longer of interest).\n            if (!this._backgroundAnalysis && this._onAnalysisCompletion) {\n                this._onAnalysisCompletion({\n                    diagnostics: fileDiags,\n                    filesInProgram: this._program.getFileCount(),\n                    filesRequiringAnalysis: this._program.getFilesToAnalyzeCount(),\n                    checkingOnlyOpenFiles: this._program.isCheckingOnlyOpenFiles(),\n                    fatalErrorOccurred: false,\n                    configParseErrorOccurred: false,\n                    elapsedTime: 0,\n                });\n            }\n        }\n    }\n}\n\nexport type BackgroundAnalysisProgramFactory = (\n    console: ConsoleInterface,\n    configOptions: ConfigOptions,\n    importResolver: ImportResolver,\n    extension?: LanguageServiceExtension,\n    backgroundAnalysis?: BackgroundAnalysisBase,\n    maxAnalysisTime?: MaxAnalysisTime\n) => BackgroundAnalysisProgram;\n","/*\n * binder.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * A parse tree walker that performs basic name binding (creation of\n * scopes and associated symbol tables).\n * The binder walks the parse tree by scopes starting at the module\n * level. When a new scope is detected, it is pushed onto a list and\n * walked separately at a later time. (The exception is a class scope,\n * which is immediately walked.) Walking the tree in this manner\n * simulates the order in which execution normally occurs in a Python\n * file. The binder attempts to statically detect runtime errors that\n * would be reported by the python interpreter when executing the code.\n * This binder doesn't perform any static type checking.\n */\n\nimport { Commands } from '../commands/commands';\nimport { DiagnosticLevel } from '../common/configOptions';\nimport { assert, assertNever, fail } from '../common/debug';\nimport { CreateTypeStubFileAction, Diagnostic } from '../common/diagnostic';\nimport { DiagnosticRule } from '../common/diagnosticRules';\nimport { getFileName, stripFileExtension } from '../common/pathUtils';\nimport { convertOffsetsToRange } from '../common/positionUtils';\nimport { PythonVersion } from '../common/pythonVersion';\nimport { getEmptyRange } from '../common/textRange';\nimport { TextRange } from '../common/textRange';\nimport { Localizer } from '../localization/localize';\nimport {\n    ArgumentCategory,\n    AssertNode,\n    AssignmentExpressionNode,\n    AssignmentNode,\n    AugmentedAssignmentNode,\n    AwaitNode,\n    BinaryOperationNode,\n    BreakNode,\n    CallNode,\n    ClassNode,\n    ContinueNode,\n    DelNode,\n    ExceptNode,\n    ExpressionNode,\n    ForNode,\n    FunctionNode,\n    GlobalNode,\n    IfNode,\n    ImportAsNode,\n    ImportFromNode,\n    LambdaNode,\n    ListComprehensionNode,\n    MemberAccessNode,\n    ModuleNameNode,\n    ModuleNode,\n    NameNode,\n    NonlocalNode,\n    ParseNode,\n    ParseNodeType,\n    RaiseNode,\n    ReturnNode,\n    StatementNode,\n    StringListNode,\n    SuiteNode,\n    TernaryNode,\n    TryNode,\n    TypeAnnotationNode,\n    UnaryOperationNode,\n    WhileNode,\n    WithNode,\n    YieldFromNode,\n    YieldNode,\n} from '../parser/parseNodes';\nimport * as StringTokenUtils from '../parser/stringTokenUtils';\nimport { KeywordType, OperatorType } from '../parser/tokenizerTypes';\nimport { AnalyzerFileInfo, ImportLookupResult } from './analyzerFileInfo';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport {\n    createKeyForReference,\n    FlowAssignment,\n    FlowAssignmentAlias,\n    FlowCall,\n    FlowCondition,\n    FlowFlags,\n    FlowLabel,\n    FlowNode,\n    FlowPostFinally,\n    FlowPreFinallyGate,\n    FlowWildcardImport,\n    getUniqueFlowNodeId,\n    isCodeFlowSupportedForReference,\n} from './codeFlow';\nimport {\n    AliasDeclaration,\n    ClassDeclaration,\n    DeclarationType,\n    FunctionDeclaration,\n    IntrinsicType,\n    ModuleLoaderActions,\n    ParameterDeclaration,\n    VariableDeclaration,\n} from './declaration';\nimport { ImplicitImport, ImportResult, ImportType } from './importResult';\nimport * as ParseTreeUtils from './parseTreeUtils';\nimport { ParseTreeWalker } from './parseTreeWalker';\nimport { NameBindingType, Scope, ScopeType } from './scope';\nimport * as StaticExpressions from './staticExpressions';\nimport { indeterminateSymbolId, Symbol, SymbolFlags } from './symbol';\nimport { isConstantName, isPrivateOrProtectedName } from './symbolNameUtils';\n\ninterface MemberAccessInfo {\n    classNode: ClassNode;\n    methodNode: FunctionNode;\n    classScope: Scope;\n    isInstanceMember: boolean;\n}\n\ninterface DeferredBindingTask {\n    scope: Scope;\n    codeFlowExpressionMap: Map<string, string>;\n    callback: () => void;\n}\n\ninterface FinalInfo {\n    isFinal: boolean;\n    finalTypeNode?: ExpressionNode;\n}\n\ntype NarrowingExpressionNode = NameNode | MemberAccessNode;\n\nexport interface BinderResults {\n    moduleDocString?: string;\n}\n\nexport class Binder extends ParseTreeWalker {\n    private readonly _fileInfo: AnalyzerFileInfo;\n\n    // A queue of deferred analysis operations.\n    private _deferredBindingTasks: DeferredBindingTask[] = [];\n\n    // The current scope in effect.\n    private _currentScope!: Scope;\n\n    // Number of nested except statements at current point of analysis.\n    // Used to determine if a naked \"raise\" statement is allowed.\n    private _nestedExceptDepth = 0;\n\n    // Current control-flow node.\n    private _currentFlowNode: FlowNode | undefined;\n\n    // Current target function declaration, if currently binding\n    // a function. This allows return and yield statements to be\n    // added to the function declaration.\n    private _targetFunctionDeclaration: FunctionDeclaration | undefined;\n\n    // Flow node label that is the target of a \"break\" statement.\n    private _currentBreakTarget?: FlowLabel;\n\n    // Flow node label that is the target of a \"continue\" statement.\n    private _currentContinueTarget?: FlowLabel;\n\n    // Flow nodes used for if/else and while/else statements.\n    private _currentTrueTarget?: FlowLabel;\n    private _currentFalseTarget?: FlowLabel;\n\n    // Flow nodes used within try blocks.\n    private _currentExceptTargets?: FlowLabel[];\n\n    // Flow nodes used within try/finally flows.\n    private _finallyTargets: FlowLabel[] = [];\n\n    // Flow nodes used for return statements.\n    private _currentReturnTarget?: FlowLabel;\n\n    // Map of symbols within the current execution scope\n    // and require code flow analysis to resolve.\n    private _currentExecutionScopeReferenceMap: Map<string, string> | undefined;\n\n    // Aliases of \"typing\" and \"typing_extensions\".\n    private _typingImportAliases: string[] = [];\n\n    // Map of imports of specific symbols imported from \"typing\" and \"typing_extensions\"\n    // and the names they alias to.\n    private _typingSymbolAliases: Map<string, string> = new Map<string, string>();\n\n    // List of names statically assigned to __all__ symbol.\n    private _dunderAllNames: string[] | undefined;\n\n    // Flow node that is used for unreachable code.\n    private static _unreachableFlowNode: FlowNode = {\n        flags: FlowFlags.Unreachable,\n        id: getUniqueFlowNodeId(),\n    };\n\n    // Map of symbols at the module level that may be private depending\n    // on whether they are listed in the __all__ list.\n    private _potentialPrivateSymbols = new Map<string, Symbol>();\n\n    constructor(fileInfo: AnalyzerFileInfo) {\n        super();\n\n        this._fileInfo = fileInfo;\n    }\n\n    bindModule(node: ModuleNode): BinderResults {\n        // We'll assume that if there is no builtins scope provided, we must be\n        // binding the builtins module itself.\n        const isBuiltInModule = this._fileInfo.builtinsScope === undefined;\n\n        const moduleScope = this._createNewScope(\n            isBuiltInModule ? ScopeType.Builtin : ScopeType.Module,\n            this._fileInfo.builtinsScope,\n            () => {\n                AnalyzerNodeInfo.setScope(node, this._currentScope);\n                AnalyzerNodeInfo.setFlowNode(node, this._currentFlowNode!);\n\n                // Bind implicit names.\n                // List taken from https://docs.python.org/3/reference/import.html#__name__\n                this._addBuiltInSymbolToCurrentScope('__doc__', node, 'str');\n                this._addBuiltInSymbolToCurrentScope('__name__', node, 'str');\n                this._addBuiltInSymbolToCurrentScope('__loader__', node, 'Any');\n                this._addBuiltInSymbolToCurrentScope('__package__', node, 'str');\n                this._addBuiltInSymbolToCurrentScope('__spec__', node, 'Any');\n                this._addBuiltInSymbolToCurrentScope('__path__', node, 'List[str]');\n                this._addBuiltInSymbolToCurrentScope('__file__', node, 'str');\n                this._addBuiltInSymbolToCurrentScope('__cached__', node, 'str');\n                this._addBuiltInSymbolToCurrentScope('__dict__', node, 'Dict[str, Any]');\n\n                // Create a start node for the module.\n                this._currentFlowNode = this._createStartFlowNode();\n\n                this._walkStatementsAndReportUnreachable(node.statements);\n\n                AnalyzerNodeInfo.setCodeFlowExpressions(node, this._currentExecutionScopeReferenceMap!);\n\n                // Associate the code flow node at the end of the module with the module.\n                AnalyzerNodeInfo.setAfterFlowNode(node, this._currentFlowNode);\n            }\n        );\n\n        // Perform all analysis that was deferred during the first pass.\n        this._bindDeferred();\n\n        // Use the __all__ list to determine whether any potential private\n        // symbols should be made externally invisible.\n        this._potentialPrivateSymbols.forEach((symbol, name) => {\n            // If this symbol was found in the dunder all, don't mark it\n            // as externally hidden.\n            if (!this._dunderAllNames?.some((sym) => sym === name)) {\n                symbol.setIsExternallyHidden();\n            }\n        });\n\n        AnalyzerNodeInfo.setDunderAllNames(node, this._dunderAllNames);\n\n        return {\n            moduleDocString: ParseTreeUtils.getDocString(node.statements),\n        };\n    }\n\n    visitModule(node: ModuleNode): boolean {\n        // Tree walking should start with the children of\n        // the node, so we should never get here.\n        fail('We should never get here');\n        return false;\n    }\n\n    visitSuite(node: SuiteNode): boolean {\n        this._walkStatementsAndReportUnreachable(node.statements);\n        return false;\n    }\n\n    visitModuleName(node: ModuleNameNode): boolean {\n        const importResult = AnalyzerNodeInfo.getImportInfo(node);\n        assert(importResult !== undefined);\n\n        if (importResult) {\n            if (!importResult.isImportFound) {\n                this._addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportMissingImports,\n                    DiagnosticRule.reportMissingImports,\n                    Localizer.Diagnostic.importResolveFailure().format({ importName: importResult.importName }),\n                    node\n                );\n            } else {\n                // Source found, but type stub is missing\n                if (\n                    !importResult.isStubFile &&\n                    importResult.importType === ImportType.ThirdParty &&\n                    !importResult.isPyTypedPresent\n                ) {\n                    const diagnostic = this._addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportMissingTypeStubs,\n                        DiagnosticRule.reportMissingTypeStubs,\n                        Localizer.Diagnostic.stubFileMissing().format({ importName: importResult.importName }),\n                        node\n                    );\n                    if (diagnostic) {\n                        // Add a diagnostic action for resolving this diagnostic.\n                        const createTypeStubAction: CreateTypeStubFileAction = {\n                            action: Commands.createTypeStub,\n                            moduleName: importResult.importName,\n                        };\n                        diagnostic.addAction(createTypeStubAction);\n                    }\n                }\n\n                // Type stub found, but source is missing.\n                if (\n                    importResult.isStubFile &&\n                    importResult.importType !== ImportType.BuiltIn &&\n                    importResult.nonStubImportResult &&\n                    !importResult.nonStubImportResult.isImportFound\n                ) {\n                    // Don't report this for stub files.\n                    if (!this._fileInfo.isStubFile) {\n                        this._addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportMissingModuleSource,\n                            DiagnosticRule.reportMissingModuleSource,\n                            Localizer.Diagnostic.importSourceResolveFailure().format({\n                                importName: importResult.importName,\n                            }),\n                            node\n                        );\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    visitClass(node: ClassNode): boolean {\n        this.walkMultiple(node.decorators);\n\n        const classDeclaration: ClassDeclaration = {\n            type: DeclarationType.Class,\n            node,\n            path: this._fileInfo.filePath,\n            range: convertOffsetsToRange(node.name.start, TextRange.getEnd(node.name), this._fileInfo.lines),\n            moduleName: this._fileInfo.moduleName,\n        };\n\n        const symbol = this._bindNameToScope(this._currentScope, node.name.value);\n        if (symbol) {\n            symbol.addDeclaration(classDeclaration);\n        }\n\n        // Stash the declaration in the parse node for later access.\n        AnalyzerNodeInfo.setDeclaration(node, classDeclaration);\n\n        this.walkMultiple(node.arguments);\n\n        // For nested classes, use the scope that contains the outermost\n        // class rather than the immediate parent.\n        let parentScope = this._currentScope;\n        while (parentScope.type === ScopeType.Class) {\n            parentScope = parentScope.parent!;\n        }\n\n        this._createNewScope(ScopeType.Class, parentScope, () => {\n            AnalyzerNodeInfo.setScope(node, this._currentScope);\n\n            // Analyze the suite.\n            this.walk(node.suite);\n        });\n\n        this._addSymbolToCurrentScope(node.name.value, /* isInitiallyUnbound */ true);\n\n        this._createAssignmentTargetFlowNodes(node.name, /* walkTargets */ false, /* unbound */ false);\n\n        return false;\n    }\n\n    visitFunction(node: FunctionNode): boolean {\n        const symbol = this._bindNameToScope(this._currentScope, node.name.value);\n        const containingClassNode = ParseTreeUtils.getEnclosingClass(node, true);\n        const functionDeclaration: FunctionDeclaration = {\n            type: DeclarationType.Function,\n            node,\n            isMethod: !!containingClassNode,\n            isGenerator: false,\n            path: this._fileInfo.filePath,\n            range: convertOffsetsToRange(node.name.start, TextRange.getEnd(node.name), this._fileInfo.lines),\n            moduleName: this._fileInfo.moduleName,\n        };\n\n        if (symbol) {\n            symbol.addDeclaration(functionDeclaration);\n        }\n\n        // Stash the declaration in the parse node for later access.\n        AnalyzerNodeInfo.setDeclaration(node, functionDeclaration);\n\n        this.walkMultiple(node.decorators);\n        node.parameters.forEach((param) => {\n            if (param.defaultValue) {\n                this.walk(param.defaultValue);\n            }\n\n            if (param.typeAnnotation) {\n                this.walk(param.typeAnnotation);\n            }\n\n            if (param.typeAnnotationComment) {\n                this.walk(param.typeAnnotationComment);\n            }\n        });\n\n        if (node.returnTypeAnnotation) {\n            this.walk(node.returnTypeAnnotation);\n        }\n\n        if (node.functionAnnotationComment) {\n            this.walk(node.functionAnnotationComment);\n        }\n\n        // Find the function or module that contains this function and use its scope.\n        // We can't simply use this._currentScope because functions within a class use\n        // the scope of the containing function or module when they execute.\n        let functionOrModuleNode: ParseNode | undefined = node.parent;\n        while (functionOrModuleNode) {\n            if (\n                functionOrModuleNode.nodeType === ParseNodeType.Module ||\n                functionOrModuleNode.nodeType === ParseNodeType.Function\n            ) {\n                break;\n            }\n\n            functionOrModuleNode = functionOrModuleNode.parent;\n        }\n        assert(functionOrModuleNode !== undefined);\n\n        const functionOrModuleScope = AnalyzerNodeInfo.getScope(functionOrModuleNode!);\n        assert(functionOrModuleScope !== undefined);\n\n        // Don't walk the body of the function until we're done analyzing\n        // the current scope.\n        this._createNewScope(ScopeType.Function, functionOrModuleScope, () => {\n            AnalyzerNodeInfo.setScope(node, this._currentScope);\n\n            const enclosingClass = ParseTreeUtils.getEnclosingClass(node);\n            if (enclosingClass) {\n                // Add the implicit \"__class__\" symbol described in PEP 3135.\n                this._addBuiltInSymbolToCurrentScope('__class__', node, 'class');\n            }\n\n            this._deferBinding(() => {\n                // Create a start node for the function.\n                this._currentFlowNode = this._createStartFlowNode();\n\n                node.parameters.forEach((paramNode) => {\n                    if (paramNode.name) {\n                        const symbol = this._bindNameToScope(this._currentScope, paramNode.name.value);\n                        if (symbol) {\n                            const paramDeclaration: ParameterDeclaration = {\n                                type: DeclarationType.Parameter,\n                                node: paramNode,\n                                path: this._fileInfo.filePath,\n                                range: convertOffsetsToRange(\n                                    paramNode.start,\n                                    TextRange.getEnd(paramNode),\n                                    this._fileInfo.lines\n                                ),\n                                moduleName: this._fileInfo.moduleName,\n                            };\n\n                            symbol.addDeclaration(paramDeclaration);\n                            AnalyzerNodeInfo.setDeclaration(paramNode.name, paramDeclaration);\n                        }\n\n                        this._createFlowAssignment(paramNode.name);\n                    }\n                });\n\n                this._targetFunctionDeclaration = functionDeclaration;\n                this._currentReturnTarget = this._createBranchLabel();\n\n                // Walk the statements that make up the function.\n                this.walk(node.suite);\n\n                // Associate the code flow node at the end of the suite with\n                // the suite.\n                AnalyzerNodeInfo.setAfterFlowNode(node.suite, this._currentFlowNode);\n\n                // Compute the final return flow node and associate it with\n                // the function's parse node. If this node is unreachable, then\n                // the function never returns.\n                this._addAntecedent(this._currentReturnTarget, this._currentFlowNode);\n                const returnFlowNode = this._finishFlowLabel(this._currentReturnTarget);\n                AnalyzerNodeInfo.setAfterFlowNode(node, returnFlowNode);\n            });\n\n            AnalyzerNodeInfo.setCodeFlowExpressions(node, this._currentExecutionScopeReferenceMap!);\n        });\n\n        this._createAssignmentTargetFlowNodes(node.name, /* walkTargets */ false, /* unbound */ false);\n\n        // We'll walk the child nodes in a deferred manner, so don't walk them now.\n        return false;\n    }\n\n    visitLambda(node: LambdaNode): boolean {\n        // Analyze the parameter defaults in the context of the parent's scope\n        // before we add any names from the function's scope.\n        node.parameters.forEach((param) => {\n            if (param.defaultValue) {\n                this.walk(param.defaultValue);\n            }\n        });\n\n        this._createNewScope(ScopeType.Function, this._currentScope, () => {\n            AnalyzerNodeInfo.setScope(node, this._currentScope);\n\n            this._deferBinding(() => {\n                // Create a start node for the lambda.\n                this._currentFlowNode = this._createStartFlowNode();\n\n                node.parameters.forEach((paramNode) => {\n                    if (paramNode.name) {\n                        const symbol = this._bindNameToScope(this._currentScope, paramNode.name.value);\n                        if (symbol) {\n                            const paramDeclaration: ParameterDeclaration = {\n                                type: DeclarationType.Parameter,\n                                node: paramNode,\n                                path: this._fileInfo.filePath,\n                                range: convertOffsetsToRange(\n                                    paramNode.start,\n                                    TextRange.getEnd(paramNode),\n                                    this._fileInfo.lines\n                                ),\n                                moduleName: this._fileInfo.moduleName,\n                            };\n\n                            symbol.addDeclaration(paramDeclaration);\n                            AnalyzerNodeInfo.setDeclaration(paramNode.name, paramDeclaration);\n                        }\n\n                        this._createFlowAssignment(paramNode.name);\n                        this.walk(paramNode.name);\n                    }\n                });\n\n                // Walk the expression that make up the lambda body.\n                this.walk(node.expression);\n\n                AnalyzerNodeInfo.setCodeFlowExpressions(node, this._currentExecutionScopeReferenceMap!);\n            });\n        });\n\n        // We'll walk the child nodes in a deferred manner.\n        return false;\n    }\n\n    visitCall(node: CallNode): boolean {\n        this.walk(node.leftExpression);\n        this.walkMultiple(node.arguments);\n        this._createCallFlowNode(node);\n\n        // Is this an manipulation of dunder all?\n        if (\n            this._currentScope.type === ScopeType.Module &&\n            node.leftExpression.nodeType === ParseNodeType.MemberAccess &&\n            node.leftExpression.leftExpression.nodeType === ParseNodeType.Name &&\n            node.leftExpression.leftExpression.value === '__all__'\n        ) {\n            // Is this a call to \"__all__.extend()\"?\n            if (node.leftExpression.memberName.value === 'extend' && node.arguments.length === 1) {\n                const argExpr = node.arguments[0].valueExpression;\n\n                // Is this a call to \"__all__.extend([<list>])\"?\n                if (argExpr.nodeType === ParseNodeType.List) {\n                    argExpr.entries.forEach((listEntryNode) => {\n                        if (\n                            listEntryNode.nodeType === ParseNodeType.StringList &&\n                            listEntryNode.strings.length === 1 &&\n                            listEntryNode.strings[0].nodeType === ParseNodeType.String\n                        ) {\n                            this._dunderAllNames?.push(listEntryNode.strings[0].value);\n                        }\n                    });\n                } else if (\n                    argExpr.nodeType === ParseNodeType.MemberAccess &&\n                    argExpr.leftExpression.nodeType === ParseNodeType.Name &&\n                    argExpr.memberName.value === '__all__'\n                ) {\n                    // Is this a call to \"__all__.extend(<mod>.__all__)\"?\n                    const namesToAdd = this._getDunderAllNamesFromImport(argExpr.leftExpression.value);\n                    if (namesToAdd) {\n                        namesToAdd.forEach((name) => {\n                            this._dunderAllNames?.push(name);\n                        });\n                    }\n                }\n            } else if (node.leftExpression.memberName.value === 'remove' && node.arguments.length === 1) {\n                // Is this a call to \"__all__.remove()\"?\n                const argExpr = node.arguments[0].valueExpression;\n                if (\n                    argExpr.nodeType === ParseNodeType.StringList &&\n                    argExpr.strings.length === 1 &&\n                    argExpr.strings[0].nodeType === ParseNodeType.String &&\n                    this._dunderAllNames\n                ) {\n                    this._dunderAllNames = this._dunderAllNames.filter((name) => name !== argExpr.strings[0].value);\n                }\n            } else if (node.leftExpression.memberName.value === 'append' && node.arguments.length === 1) {\n                // Is this a call to \"__all__.append()\"?\n                const argExpr = node.arguments[0].valueExpression;\n                if (\n                    argExpr.nodeType === ParseNodeType.StringList &&\n                    argExpr.strings.length === 1 &&\n                    argExpr.strings[0].nodeType === ParseNodeType.String\n                ) {\n                    this._dunderAllNames?.push(argExpr.strings[0].value);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    visitAssignment(node: AssignmentNode): boolean {\n        if (this._handleTypingStubAssignmentOrAnnotation(node)) {\n            return false;\n        }\n\n        this._bindPossibleTupleNamedTarget(node.leftExpression);\n\n        if (node.typeAnnotationComment) {\n            this.walk(node.typeAnnotationComment);\n            this._addTypeDeclarationForVariable(node.leftExpression, node.typeAnnotationComment);\n        }\n\n        this.walk(node.rightExpression);\n\n        let isPossibleTypeAlias = true;\n        if (ParseTreeUtils.getEnclosingClass(node) || ParseTreeUtils.getEnclosingFunction(node)) {\n            // We will assume that type aliases are defined only at the module level.\n            isPossibleTypeAlias = false;\n        } else if (node.rightExpression.nodeType === ParseNodeType.Call && this._fileInfo.isTypingStubFile) {\n            // Some special built-in types defined in typing.pyi use\n            // assignments of the form List = _Alias(). We don't want to\n            // treat these as type aliases.\n            isPossibleTypeAlias = false;\n        }\n\n        this._addInferredTypeAssignmentForVariable(node.leftExpression, node.rightExpression, isPossibleTypeAlias);\n\n        this._createAssignmentTargetFlowNodes(node.leftExpression, /* walkTargets */ true, /* unbound */ false);\n\n        // Is this an assignment to dunder all?\n        if (this._currentScope.type === ScopeType.Module) {\n            if (\n                (node.leftExpression.nodeType === ParseNodeType.Name && node.leftExpression.value === '__all__') ||\n                (node.leftExpression.nodeType === ParseNodeType.TypeAnnotation &&\n                    node.leftExpression.valueExpression.nodeType === ParseNodeType.Name &&\n                    node.leftExpression.valueExpression.value === '__all__')\n            ) {\n                const expr = node.rightExpression;\n                this._dunderAllNames = [];\n\n                if (expr.nodeType === ParseNodeType.List) {\n                    expr.entries.forEach((listEntryNode) => {\n                        if (\n                            listEntryNode.nodeType === ParseNodeType.StringList &&\n                            listEntryNode.strings.length === 1 &&\n                            listEntryNode.strings[0].nodeType === ParseNodeType.String\n                        ) {\n                            this._dunderAllNames!.push(listEntryNode.strings[0].value);\n                        }\n                    });\n                } else if (expr.nodeType === ParseNodeType.Tuple) {\n                    expr.expressions.forEach((tupleEntryNode) => {\n                        if (\n                            tupleEntryNode.nodeType === ParseNodeType.StringList &&\n                            tupleEntryNode.strings.length === 1 &&\n                            tupleEntryNode.strings[0].nodeType === ParseNodeType.String\n                        ) {\n                            this._dunderAllNames!.push(tupleEntryNode.strings[0].value);\n                        }\n                    });\n                }\n            }\n        }\n\n        return false;\n    }\n\n    visitAssignmentExpression(node: AssignmentExpressionNode) {\n        // Temporarily disable true/false targets in case this assignment\n        // expression is located within an if/else conditional.\n        this._disableTrueFalseTargets(() => {\n            // Evaluate the operand expression.\n            this.walk(node.rightExpression);\n        });\n\n        const evaluationNode = ParseTreeUtils.getEvaluationNodeForAssignmentExpression(node);\n        if (!evaluationNode) {\n            this._addError(Localizer.Diagnostic.assignmentExprContext(), node);\n        } else {\n            // Bind the name to the containing scope. This special logic is required\n            // because of the behavior defined in PEP 572. Targets of assignment\n            // expressions don't bind to a list comprehension's scope but instead\n            // bind to its containing scope.\n            const containerScope = AnalyzerNodeInfo.getScope(evaluationNode)!;\n\n            // If we're in a list comprehension (possibly nested), make sure that\n            // local for targets don't collide with the target of the assignment\n            // expression.\n            let curScope: Scope | undefined = this._currentScope;\n            while (curScope && curScope !== containerScope) {\n                const localSymbol = curScope.lookUpSymbol(node.name.value);\n                if (localSymbol) {\n                    this._addError(\n                        Localizer.Diagnostic.assignmentExprComprehension().format({ name: node.name.value }),\n                        node.name\n                    );\n                    break;\n                }\n\n                curScope = curScope.parent;\n            }\n\n            this._bindNameToScope(containerScope, node.name.value);\n            this._addInferredTypeAssignmentForVariable(node.name, node.rightExpression);\n        }\n\n        this._createAssignmentTargetFlowNodes(node.name, /* walkTargets */ true, /* unbound */ false);\n\n        return false;\n    }\n\n    visitAugmentedAssignment(node: AugmentedAssignmentNode) {\n        this.walk(node.leftExpression);\n        this.walk(node.rightExpression);\n\n        this._addInferredTypeAssignmentForVariable(node.destExpression, node.rightExpression);\n\n        this._bindPossibleTupleNamedTarget(node.destExpression);\n        this._createAssignmentTargetFlowNodes(node.destExpression, /* walkTargets */ false, /* unbound */ false);\n\n        // Is this an assignment to dunder all of the form\n        // __all__ += <expression>?\n        if (\n            node.operator === OperatorType.AddEqual &&\n            this._currentScope.type === ScopeType.Module &&\n            node.leftExpression.nodeType === ParseNodeType.Name &&\n            node.leftExpression.value === '__all__'\n        ) {\n            const expr = node.rightExpression;\n\n            if (expr.nodeType === ParseNodeType.List) {\n                // Is this the form __all__ += [\"a\", \"b\"]?\n                expr.entries.forEach((listEntryNode) => {\n                    if (\n                        listEntryNode.nodeType === ParseNodeType.StringList &&\n                        listEntryNode.strings.length === 1 &&\n                        listEntryNode.strings[0].nodeType === ParseNodeType.String\n                    ) {\n                        this._dunderAllNames?.push(listEntryNode.strings[0].value);\n                    }\n                });\n            } else if (\n                expr.nodeType === ParseNodeType.MemberAccess &&\n                expr.leftExpression.nodeType === ParseNodeType.Name &&\n                expr.memberName.value === '__all__'\n            ) {\n                // Is this using the form \"__all__ += <mod>.__all__\"?\n                const namesToAdd = this._getDunderAllNamesFromImport(expr.leftExpression.value);\n                if (namesToAdd) {\n                    namesToAdd.forEach((name) => {\n                        this._dunderAllNames?.push(name);\n                    });\n                }\n            }\n        }\n\n        return false;\n    }\n\n    visitDel(node: DelNode) {\n        node.expressions.forEach((expr) => {\n            this._bindPossibleTupleNamedTarget(expr);\n            this.walk(expr);\n            this._createAssignmentTargetFlowNodes(expr, /* walkTargets */ false, /* unbound */ true);\n        });\n\n        return false;\n    }\n\n    visitTypeAnnotation(node: TypeAnnotationNode): boolean {\n        if (this._handleTypingStubAssignmentOrAnnotation(node)) {\n            return false;\n        }\n\n        this._bindPossibleTupleNamedTarget(node.valueExpression);\n        this._addTypeDeclarationForVariable(node.valueExpression, node.typeAnnotation);\n\n        // For type annotations that are not part of assignments (e.g. simple variable\n        // annotations), we need to populate the reference map. Otherwise the type\n        // analyzer's code flow engine won't run and detect cases where the variable\n        // is unbound.\n        const expressionList: NarrowingExpressionNode[] = [];\n        if (this._isNarrowingExpression(node.valueExpression, expressionList)) {\n            expressionList.forEach((expr) => {\n                const referenceKey = createKeyForReference(expr);\n                this._currentExecutionScopeReferenceMap!.set(referenceKey, referenceKey);\n            });\n        }\n        return true;\n    }\n\n    visitFor(node: ForNode) {\n        this._bindPossibleTupleNamedTarget(node.targetExpression);\n        this._addInferredTypeAssignmentForVariable(node.targetExpression, node);\n\n        this.walk(node.iterableExpression);\n\n        const preForLabel = this._createLoopLabel();\n        const preElseLabel = this._createBranchLabel();\n        const postForLabel = this._createBranchLabel();\n\n        this._addAntecedent(preForLabel, this._currentFlowNode!);\n        this._currentFlowNode = preForLabel;\n        this._addAntecedent(preElseLabel, this._currentFlowNode);\n        this._createAssignmentTargetFlowNodes(node.targetExpression, /* walkTargets */ true, /* unbound */ false);\n\n        this._bindLoopStatement(preForLabel, postForLabel, () => {\n            this.walk(node.forSuite);\n            this._addAntecedent(preForLabel, this._currentFlowNode!);\n        });\n\n        this._currentFlowNode = this._finishFlowLabel(preElseLabel);\n        if (node.elseSuite) {\n            this.walk(node.elseSuite);\n        }\n        this._addAntecedent(postForLabel, this._currentFlowNode);\n\n        this._currentFlowNode = this._finishFlowLabel(postForLabel);\n\n        return false;\n    }\n\n    visitContinue(node: ContinueNode): boolean {\n        if (this._currentContinueTarget) {\n            this._addAntecedent(this._currentContinueTarget, this._currentFlowNode!);\n        }\n        this._currentFlowNode = Binder._unreachableFlowNode;\n\n        // Continue nodes don't have any children.\n        return false;\n    }\n\n    visitBreak(node: BreakNode): boolean {\n        if (this._currentBreakTarget) {\n            this._addAntecedent(this._currentBreakTarget, this._currentFlowNode!);\n        }\n        this._currentFlowNode = Binder._unreachableFlowNode;\n\n        // Break nodes don't have any children.\n        return false;\n    }\n\n    visitReturn(node: ReturnNode): boolean {\n        if (this._targetFunctionDeclaration) {\n            if (!this._targetFunctionDeclaration.returnStatements) {\n                this._targetFunctionDeclaration.returnStatements = [];\n            }\n            this._targetFunctionDeclaration.returnStatements.push(node);\n        }\n\n        if (node.returnExpression) {\n            this.walk(node.returnExpression);\n        }\n\n        AnalyzerNodeInfo.setFlowNode(node, this._currentFlowNode!);\n        if (this._currentReturnTarget) {\n            this._addAntecedent(this._currentReturnTarget, this._currentFlowNode!);\n        }\n        this._finallyTargets.forEach((target) => {\n            this._addAntecedent(target, this._currentFlowNode!);\n        });\n        this._currentFlowNode = Binder._unreachableFlowNode;\n        return false;\n    }\n\n    visitYield(node: YieldNode): boolean {\n        this._bindYield(node);\n        return false;\n    }\n\n    visitYieldFrom(node: YieldFromNode): boolean {\n        this._bindYield(node);\n        return false;\n    }\n\n    visitMemberAccess(node: MemberAccessNode): boolean {\n        AnalyzerNodeInfo.setFlowNode(node, this._currentFlowNode!);\n        return true;\n    }\n\n    visitName(node: NameNode): boolean {\n        AnalyzerNodeInfo.setFlowNode(node, this._currentFlowNode!);\n\n        // Name nodes have no children.\n        return false;\n    }\n\n    visitIf(node: IfNode): boolean {\n        const thenLabel = this._createBranchLabel();\n        const elseLabel = this._createBranchLabel();\n        const postIfLabel = this._createBranchLabel();\n\n        // Determine if the test condition is always true or always false. If so,\n        // we can treat either the then or the else clause as unconditional.\n        const constExprValue = StaticExpressions.evaluateStaticBoolLikeExpression(\n            node.testExpression,\n            this._fileInfo.executionEnvironment,\n            this._typingImportAliases\n        );\n\n        this._bindConditional(node.testExpression, thenLabel, elseLabel);\n\n        // Handle the if clause.\n        this._currentFlowNode =\n            constExprValue === false ? Binder._unreachableFlowNode : this._finishFlowLabel(thenLabel);\n        this.walk(node.ifSuite);\n        this._addAntecedent(postIfLabel, this._currentFlowNode);\n\n        // Now handle the else clause if it's present. If there\n        // are chained \"else if\" statements, they'll be handled\n        // recursively here.\n        this._currentFlowNode =\n            constExprValue === true ? Binder._unreachableFlowNode : this._finishFlowLabel(elseLabel);\n        if (node.elseSuite) {\n            this.walk(node.elseSuite);\n        }\n        this._addAntecedent(postIfLabel, this._currentFlowNode);\n        this._currentFlowNode = this._finishFlowLabel(postIfLabel);\n\n        return false;\n    }\n\n    visitWhile(node: WhileNode): boolean {\n        const thenLabel = this._createBranchLabel();\n        const elseLabel = this._createBranchLabel();\n        const postWhileLabel = this._createBranchLabel();\n\n        // Determine if the test condition is always true or always false. If so,\n        // we can treat either the while or the else clause as unconditional.\n        const constExprValue = StaticExpressions.evaluateStaticBoolLikeExpression(\n            node.testExpression,\n            this._fileInfo.executionEnvironment,\n            this._typingImportAliases\n        );\n\n        const preLoopLabel = this._createLoopLabel();\n        this._addAntecedent(preLoopLabel, this._currentFlowNode!);\n        this._currentFlowNode = preLoopLabel;\n\n        this._bindConditional(node.testExpression, thenLabel, elseLabel);\n\n        // Handle the while clause.\n        this._currentFlowNode =\n            constExprValue === false ? Binder._unreachableFlowNode : this._finishFlowLabel(thenLabel);\n        this._bindLoopStatement(preLoopLabel, postWhileLabel, () => {\n            this.walk(node.whileSuite);\n        });\n        this._addAntecedent(preLoopLabel, this._currentFlowNode);\n\n        this._currentFlowNode =\n            constExprValue === true ? Binder._unreachableFlowNode : this._finishFlowLabel(elseLabel);\n        if (node.elseSuite) {\n            this.walk(node.elseSuite);\n        }\n        this._addAntecedent(postWhileLabel, this._currentFlowNode);\n        this._currentFlowNode = this._finishFlowLabel(postWhileLabel);\n        return false;\n    }\n\n    visitAssert(node: AssertNode): boolean {\n        const assertTrueLabel = this._createBranchLabel();\n        const assertFalseLabel = this._createBranchLabel();\n\n        this._bindConditional(node.testExpression, assertTrueLabel, assertFalseLabel);\n\n        if (node.exceptionExpression) {\n            this._currentFlowNode = this._finishFlowLabel(assertFalseLabel);\n            this.walk(node.exceptionExpression);\n        }\n\n        this._currentFlowNode = this._finishFlowLabel(assertTrueLabel);\n        return false;\n    }\n\n    visitExcept(node: ExceptNode): boolean {\n        if (node.typeExpression) {\n            this.walk(node.typeExpression);\n        }\n\n        if (node.name) {\n            this.walk(node.name);\n            const symbol = this._bindNameToScope(this._currentScope, node.name.value);\n            this._createAssignmentTargetFlowNodes(node.name, /* walkTargets */ true, /* unbound */ false);\n\n            if (symbol) {\n                const declaration: VariableDeclaration = {\n                    type: DeclarationType.Variable,\n                    node: node.name,\n                    isConstant: isConstantName(node.name.value),\n                    inferredTypeSource: node,\n                    path: this._fileInfo.filePath,\n                    range: convertOffsetsToRange(node.name.start, TextRange.getEnd(node.name), this._fileInfo.lines),\n                    moduleName: this._fileInfo.moduleName,\n                };\n                symbol.addDeclaration(declaration);\n            }\n        }\n\n        this.walk(node.exceptSuite);\n\n        if (node.name) {\n            // The exception name is implicitly unbound at the end of\n            // the except block.\n            this._createFlowAssignment(node.name, /* unbound */ true);\n        }\n\n        return false;\n    }\n\n    visitRaise(node: RaiseNode): boolean {\n        if (this._targetFunctionDeclaration) {\n            if (!this._targetFunctionDeclaration.raiseStatements) {\n                this._targetFunctionDeclaration.raiseStatements = [];\n            }\n            this._targetFunctionDeclaration.raiseStatements.push(node);\n        }\n\n        if (!node.typeExpression && this._nestedExceptDepth === 0) {\n            this._addError(Localizer.Diagnostic.raiseParams(), node);\n        }\n\n        if (node.typeExpression) {\n            this.walk(node.typeExpression);\n        }\n        if (node.valueExpression) {\n            this.walk(node.valueExpression);\n        }\n        if (node.tracebackExpression) {\n            this.walk(node.tracebackExpression);\n        }\n\n        this._finallyTargets.forEach((target) => {\n            this._addAntecedent(target, this._currentFlowNode!);\n        });\n\n        this._currentFlowNode = Binder._unreachableFlowNode;\n        return false;\n    }\n\n    visitTry(node: TryNode): boolean {\n        // The try/except/else/finally statement is tricky to model using static code\n        // flow rules because the finally clause is executed regardless of whether an\n        // exception is raised or a return statement is executed. Code within the finally\n        // clause needs to be reachable always, and we conservatively assume that any\n        // statement within the try block can generate an exception, so we assume that its\n        // antecedent is the pre-try flow. We implement this with a \"gate\" node in the\n        // control flow graph. If analysis starts within the finally clause, the gate is\n        // opened, and all raise/return statements within try/except/else blocks are\n        // considered antecedents. If analysis starts outside (after) the finally clause,\n        // the gate is closed, and only paths that don't hit a raise/return statement\n        // in try/except/else blocks are considered.\n        //\n        //\n        //                               1. PostElse\n        //                                    ^\n        //                                    |\n        // 3. TryExceptElseReturnOrExcept     |\n        //       ^                            |\n        //       |                            |     2. PostExcept (for each except)\n        //       |                            |            ^\n        // 4. ReturnOrRaiseLabel              |            |\n        //       ^                            |            |\n        //       |                            |   |---------\n        // 5. PreFinallyGate                  |   |\n        //       ^                            |   |\n        //       |------------------          |   |\n        //                         |          |   |\n        //                        6. PreFinallyLabel\n        //                                ^\n        //                         (finally block)\n        //                                ^\n        //                        7. PostFinally\n        //                                ^    (only if isAfterElseAndExceptsReachable)\n        //                         (after finally)\n\n        // Create one flow label for every except clause.\n        const curExceptTargets = node.exceptClauses.map(() => this._createBranchLabel());\n        const preFinallyLabel = this._createBranchLabel();\n\n        // Create a label for all of the return or raise labels that are\n        // encountered within the try/except/else blocks. This conditionally\n        // connects the return/raise statement to the finally clause.\n        const preFinallyReturnOrRaiseLabel = this._createBranchLabel();\n        let isAfterElseAndExceptsReachable = false;\n\n        const preFinallyGate: FlowPreFinallyGate = {\n            flags: FlowFlags.PreFinallyGate,\n            id: getUniqueFlowNodeId(),\n            antecedent: preFinallyReturnOrRaiseLabel,\n            isGateClosed: false,\n        };\n        if (node.finallySuite) {\n            this._addAntecedent(preFinallyLabel, preFinallyGate);\n        }\n\n        // An exception may be generated before the first flow node\n        // added by the try block, so all of the exception targets\n        // must have the pre-try flow node as an antecedent.\n        curExceptTargets.forEach((exceptLabel) => {\n            this._addAntecedent(exceptLabel, this._currentFlowNode!);\n        });\n\n        // We don't perfectly handle nested finally clauses, which are not\n        // possible to model fully within a static analyzer, but we do handle\n        // a single level of finally statements, and we handle most cases\n        // involving nesting. Returns or raises within the try/except/raise\n        // block will execute the finally target(s).\n        if (node.finallySuite) {\n            this._finallyTargets.push(preFinallyReturnOrRaiseLabel);\n        }\n\n        // Handle the try block.\n        const prevExceptTargets = this._currentExceptTargets;\n        this._currentExceptTargets = curExceptTargets;\n        this.walk(node.trySuite);\n        this._currentExceptTargets = prevExceptTargets;\n\n        // Handle the else block, which is executed only if\n        // execution falls through the try block.\n        if (node.elseSuite) {\n            this.walk(node.elseSuite);\n        }\n        this._addAntecedent(preFinallyLabel, this._currentFlowNode!);\n        if (!this._isCodeUnreachable()) {\n            isAfterElseAndExceptsReachable = true;\n        }\n\n        // Handle the except blocks.\n        this._nestedExceptDepth++;\n        node.exceptClauses.forEach((exceptNode, index) => {\n            this._currentFlowNode = this._finishFlowLabel(curExceptTargets[index]);\n            this.walk(exceptNode);\n            this._addAntecedent(preFinallyLabel, this._currentFlowNode);\n            if (!this._isCodeUnreachable()) {\n                isAfterElseAndExceptsReachable = true;\n            }\n        });\n        this._nestedExceptDepth--;\n\n        if (node.finallySuite) {\n            this._finallyTargets.pop();\n        }\n\n        // Handle the finally block.\n        this._currentFlowNode = this._finishFlowLabel(preFinallyLabel);\n        if (node.finallySuite) {\n            this.walk(node.finallySuite);\n\n            // Add a post-finally node at the end. If we traverse this node,\n            // we'll set the \"ignore\" flag in the pre-finally node.\n            const postFinallyNode: FlowPostFinally = {\n                flags: FlowFlags.PostFinally,\n                id: getUniqueFlowNodeId(),\n                antecedent: this._currentFlowNode,\n                preFinallyGate,\n            };\n            this._currentFlowNode = isAfterElseAndExceptsReachable ? postFinallyNode : Binder._unreachableFlowNode;\n        }\n\n        return false;\n    }\n\n    visitAwait(node: AwaitNode) {\n        // Make sure this is within an async lambda or function.\n        const enclosingFunction = ParseTreeUtils.getEnclosingFunction(node);\n        if (enclosingFunction === undefined || !enclosingFunction.isAsync) {\n            this._addError(Localizer.Diagnostic.awaitNotInAsync(), node);\n        }\n\n        return true;\n    }\n\n    visitStringList(node: StringListNode): boolean {\n        for (const stringNode of node.strings) {\n            if (stringNode.hasUnescapeErrors) {\n                const unescapedResult = StringTokenUtils.getUnescapedString(stringNode.token);\n\n                unescapedResult.unescapeErrors.forEach((error: StringTokenUtils.UnescapeError) => {\n                    const start =\n                        stringNode.token.start +\n                        stringNode.token.prefixLength +\n                        stringNode.token.quoteMarkLength +\n                        error.offset;\n                    const textRange = { start, length: error.length };\n\n                    if (error.errorType === StringTokenUtils.UnescapeErrorType.InvalidEscapeSequence) {\n                        this._addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportInvalidStringEscapeSequence,\n                            DiagnosticRule.reportInvalidStringEscapeSequence,\n                            Localizer.Diagnostic.stringUnsupportedEscape(),\n                            textRange\n                        );\n                    } else if (error.errorType === StringTokenUtils.UnescapeErrorType.EscapeWithinFormatExpression) {\n                        this._addError(Localizer.Diagnostic.formatStringEscape(), textRange);\n                    } else if (\n                        error.errorType === StringTokenUtils.UnescapeErrorType.SingleCloseBraceWithinFormatLiteral\n                    ) {\n                        this._addError(Localizer.Diagnostic.formatStringBrace(), textRange);\n                    } else if (error.errorType === StringTokenUtils.UnescapeErrorType.UnterminatedFormatExpression) {\n                        this._addError(Localizer.Diagnostic.formatStringUnterminated(), textRange);\n                    }\n                });\n            }\n        }\n\n        return true;\n    }\n\n    visitGlobal(node: GlobalNode): boolean {\n        const globalScope = this._currentScope.getGlobalScope();\n\n        node.nameList.forEach((name) => {\n            const nameValue = name.value;\n\n            // Is the binding inconsistent?\n            if (this._currentScope.getBindingType(nameValue) === NameBindingType.Nonlocal) {\n                this._addError(Localizer.Diagnostic.nonLocalRedefinition().format({ name: nameValue }), name);\n            }\n\n            const valueWithScope = this._currentScope.lookUpSymbolRecursive(nameValue);\n\n            // Was the name already assigned within this scope before it was declared global?\n            if (valueWithScope && valueWithScope.scope === this._currentScope) {\n                this._addError(Localizer.Diagnostic.globalReassignment().format({ name: nameValue }), name);\n            }\n\n            // Add it to the global scope if it's not already added.\n            this._bindNameToScope(globalScope, nameValue);\n\n            if (this._currentScope !== globalScope) {\n                this._currentScope.setBindingType(nameValue, NameBindingType.Global);\n            }\n        });\n\n        return true;\n    }\n\n    visitNonlocal(node: NonlocalNode): boolean {\n        const globalScope = this._currentScope.getGlobalScope();\n\n        if (this._currentScope === globalScope) {\n            this._addError(Localizer.Diagnostic.nonLocalInModule(), node);\n        } else {\n            node.nameList.forEach((name) => {\n                const nameValue = name.value;\n\n                // Is the binding inconsistent?\n                if (this._currentScope.getBindingType(nameValue) === NameBindingType.Global) {\n                    this._addError(Localizer.Diagnostic.globalRedefinition().format({ name: nameValue }), name);\n                }\n\n                const valueWithScope = this._currentScope.lookUpSymbolRecursive(nameValue);\n\n                // Was the name already assigned within this scope before it was declared nonlocal?\n                if (valueWithScope && valueWithScope.scope === this._currentScope) {\n                    this._addError(Localizer.Diagnostic.nonLocalReassignment().format({ name: nameValue }), name);\n                } else if (!valueWithScope || valueWithScope.scope === globalScope) {\n                    this._addError(Localizer.Diagnostic.nonLocalNoBinding().format({ name: nameValue }), name);\n                }\n\n                if (valueWithScope) {\n                    this._currentScope.setBindingType(nameValue, NameBindingType.Nonlocal);\n                }\n            });\n        }\n\n        return true;\n    }\n\n    visitImportAs(node: ImportAsNode): boolean {\n        if (node.module.nameParts.length > 0) {\n            const firstNamePartValue = node.module.nameParts[0].value;\n\n            let symbolName: string | undefined;\n            if (node.alias) {\n                // The symbol name is defined by the alias.\n                symbolName = node.alias.value;\n            } else {\n                // There was no alias, so we need to use the first element of\n                // the name parts as the symbol.\n                symbolName = firstNamePartValue;\n            }\n\n            const symbol = this._bindNameToScope(this._currentScope, symbolName);\n            if (symbol && !node.alias) {\n                if (this._fileInfo.isStubFile) {\n                    // PEP 484 indicates that imported symbols should not be\n                    // considered \"reexported\" from a type stub file unless\n                    // they are imported using the \"as\" form.\n                    symbol.setIsExternallyHidden();\n                } else if (this._fileInfo.isInPyTypedPackage && this._currentScope.type === ScopeType.Module) {\n                    this._potentialPrivateSymbols.set(symbolName, symbol);\n                }\n            }\n\n            const importInfo = AnalyzerNodeInfo.getImportInfo(node.module);\n            assert(importInfo !== undefined);\n\n            if (symbol) {\n                this._createAliasDeclarationForMultipartImportName(node, node.alias, importInfo, symbol);\n            }\n\n            this._createFlowAssignment(node.alias ? node.alias : node.module.nameParts[0]);\n\n            if (node.module.nameParts.length === 1) {\n                if (firstNamePartValue === 'typing' || firstNamePartValue === 'typing_extensions') {\n                    this._typingImportAliases.push(node.alias?.value || firstNamePartValue);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    visitImportFrom(node: ImportFromNode): boolean {\n        const typingSymbolsOfInterest = ['Final', 'TypeAlias'];\n        const importInfo = AnalyzerNodeInfo.getImportInfo(node.module);\n\n        let resolvedPath = '';\n        if (importInfo && importInfo.isImportFound) {\n            resolvedPath = importInfo.resolvedPaths[importInfo.resolvedPaths.length - 1];\n        }\n\n        // If this file is a module __init__.py(i), relative imports of submodules\n        // using the syntax \"from .x import y\" introduce a symbol x into the\n        // module namespace. We do this first (before adding the individual imported\n        // symbols below) in case one of the imported symbols is the same name as the\n        // submodule. In that case, we want to the symbol to appear later in the\n        // declaration list because it should \"win\" when resolving the alias.\n        const fileName = stripFileExtension(getFileName(this._fileInfo.filePath));\n        const isModuleInitFile =\n            fileName === '__init__' && node.module.leadingDots === 1 && node.module.nameParts.length > 0;\n\n        let isTypingImport = false;\n        if (node.module.nameParts.length === 1) {\n            const firstNamePartValue = node.module.nameParts[0].value;\n            if (firstNamePartValue === 'typing' || firstNamePartValue === 'typing_extensions') {\n                isTypingImport = true;\n            }\n        }\n\n        if (node.isWildcardImport) {\n            if (ParseTreeUtils.getEnclosingClass(node) || ParseTreeUtils.getEnclosingFunction(node)) {\n                this._addError(Localizer.Diagnostic.wildcardInFunction(), node);\n            }\n\n            if (importInfo) {\n                const names: string[] = [];\n\n                const lookupInfo = this._fileInfo.importLookup(resolvedPath);\n                if (lookupInfo) {\n                    const wildcardNames = this._getWildcardImportNames(lookupInfo);\n\n                    if (isModuleInitFile) {\n                        // If the symbol is going to be immediately replaced with a same-named\n                        // imported symbol, skip this.\n                        const isImmediatelyReplaced = wildcardNames.some((name) => {\n                            return name === node.module.nameParts[0].value;\n                        });\n\n                        if (!isImmediatelyReplaced) {\n                            this._addImplicitFromImport(node, importInfo);\n                        }\n                    }\n\n                    wildcardNames.forEach((name) => {\n                        const localSymbol = this._bindNameToScope(this._currentScope, name);\n\n                        if (localSymbol) {\n                            const importedSymbol = lookupInfo.symbolTable.get(name)!;\n\n                            // Is the symbol in the target module's symbol table? If so,\n                            // alias it.\n                            if (importedSymbol) {\n                                const aliasDecl: AliasDeclaration = {\n                                    type: DeclarationType.Alias,\n                                    node,\n                                    path: resolvedPath,\n                                    range: getEmptyRange(),\n                                    usesLocalName: false,\n                                    symbolName: name,\n                                    moduleName: this._fileInfo.moduleName,\n                                };\n                                localSymbol.addDeclaration(aliasDecl);\n                                names.push(name);\n                            } else {\n                                // The symbol wasn't in the target module's symbol table. It's probably\n                                // an implicitly-imported submodule referenced by __all__.\n                                if (importInfo && importInfo.filteredImplicitImports) {\n                                    const implicitImport = importInfo.filteredImplicitImports.find(\n                                        (imp) => imp.name === name\n                                    );\n\n                                    if (implicitImport) {\n                                        const submoduleFallback: AliasDeclaration = {\n                                            type: DeclarationType.Alias,\n                                            node,\n                                            path: implicitImport.path,\n                                            range: getEmptyRange(),\n                                            usesLocalName: false,\n                                            moduleName: this._fileInfo.moduleName,\n                                        };\n\n                                        const aliasDecl: AliasDeclaration = {\n                                            type: DeclarationType.Alias,\n                                            node,\n                                            path: resolvedPath,\n                                            usesLocalName: false,\n                                            symbolName: name,\n                                            submoduleFallback,\n                                            range: getEmptyRange(),\n                                            moduleName: this._fileInfo.moduleName,\n                                        };\n\n                                        localSymbol.addDeclaration(aliasDecl);\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n\n                this._createFlowWildcardImport(node, names);\n\n                if (isTypingImport) {\n                    typingSymbolsOfInterest.forEach((s) => {\n                        this._typingSymbolAliases.set(s, s);\n                    });\n                }\n            }\n        } else {\n            if (isModuleInitFile) {\n                // If the symbol is going to be immediately replaced with a same-named\n                // imported symbol, skip this.\n                const isImmediatelyReplaced = node.imports.some((importSymbolNode) => {\n                    const nameNode = importSymbolNode.alias || importSymbolNode.name;\n                    return nameNode.value === node.module.nameParts[0].value;\n                });\n\n                if (!isImmediatelyReplaced) {\n                    this._addImplicitFromImport(node, importInfo);\n                }\n            }\n\n            node.imports.forEach((importSymbolNode) => {\n                const importedName = importSymbolNode.name.value;\n                const nameNode = importSymbolNode.alias || importSymbolNode.name;\n                const symbol = this._bindNameToScope(this._currentScope, nameNode.value);\n\n                if (symbol) {\n                    if (!importSymbolNode.alias) {\n                        if (this._fileInfo.isStubFile) {\n                            // PEP 484 indicates that imported symbols should not be\n                            // considered \"reexported\" from a type stub file unless\n                            // they are imported using the \"as\" form.\n                            symbol.setIsExternallyHidden();\n                        } else if (this._fileInfo.isInPyTypedPackage && this._currentScope.type === ScopeType.Module) {\n                            this._potentialPrivateSymbols.set(nameNode.value, symbol);\n                        }\n                    }\n\n                    // Is the import referring to an implicitly-imported module?\n                    let implicitImport: ImplicitImport | undefined;\n                    if (importInfo && importInfo.filteredImplicitImports) {\n                        implicitImport = importInfo.filteredImplicitImports.find((imp) => imp.name === importedName);\n                    }\n\n                    let submoduleFallback: AliasDeclaration | undefined;\n                    if (implicitImport) {\n                        submoduleFallback = {\n                            type: DeclarationType.Alias,\n                            node: importSymbolNode,\n                            path: implicitImport.path,\n                            range: getEmptyRange(),\n                            usesLocalName: false,\n                            moduleName: this._fileInfo.moduleName,\n                        };\n\n                        // Handle the case of \"from . import X\". In this case,\n                        // we want to always resolve to the submodule rather than\n                        // the resolved path.\n                        if (node.module.nameParts.length === 0) {\n                            resolvedPath = '';\n                        }\n                    }\n\n                    const aliasDecl: AliasDeclaration = {\n                        type: DeclarationType.Alias,\n                        node: importSymbolNode,\n                        path: resolvedPath,\n                        usesLocalName: !!importSymbolNode.alias,\n                        symbolName: importedName,\n                        submoduleFallback,\n                        range: getEmptyRange(),\n                        moduleName: this._fileInfo.moduleName,\n                    };\n\n                    symbol.addDeclaration(aliasDecl);\n                    this._createFlowAssignment(importSymbolNode.alias || importSymbolNode.name);\n\n                    if (isTypingImport) {\n                        if (typingSymbolsOfInterest.some((s) => s === importSymbolNode.name.value)) {\n                            this._typingSymbolAliases.set(nameNode.value, importSymbolNode.name.value);\n                        }\n                    }\n                }\n            });\n        }\n\n        return true;\n    }\n\n    visitWith(node: WithNode): boolean {\n        node.withItems.forEach((item) => {\n            this.walk(item.expression);\n            if (item.target) {\n                this._bindPossibleTupleNamedTarget(item.target);\n                this._addInferredTypeAssignmentForVariable(item.target, item);\n                this._createAssignmentTargetFlowNodes(item.target, /* walkTargets */ true, /* unbound */ false);\n            }\n        });\n\n        this.walk(node.suite);\n\n        return false;\n    }\n\n    visitTernary(node: TernaryNode): boolean {\n        const trueLabel = this._createBranchLabel();\n        const falseLabel = this._createBranchLabel();\n        const postExpressionLabel = this._createBranchLabel();\n\n        // Handle the test expression.\n        this._bindConditional(node.testExpression, trueLabel, falseLabel);\n\n        // Handle the \"true\" portion (the \"if\" expression).\n        this._currentFlowNode = this._finishFlowLabel(trueLabel);\n        this.walk(node.ifExpression);\n        this._addAntecedent(postExpressionLabel, this._currentFlowNode);\n\n        // Handle the \"false\" portion (the \"else\" expression).\n        this._currentFlowNode = this._finishFlowLabel(falseLabel);\n        this.walk(node.elseExpression);\n        this._addAntecedent(postExpressionLabel, this._currentFlowNode);\n\n        this._currentFlowNode = this._finishFlowLabel(postExpressionLabel);\n\n        return false;\n    }\n\n    visitUnaryOperation(node: UnaryOperationNode): boolean {\n        if (node.operator === OperatorType.Not && this._currentFalseTarget && this._currentTrueTarget) {\n            // Swap the existing true/false targets.\n            this._bindConditional(node.expression, this._currentFalseTarget, this._currentTrueTarget);\n        } else {\n            // Temporarily set the true/false targets to undefined because\n            // this unary operation is not part of a chain of logical expressions\n            // (AND/OR/NOT subexpressions).\n            this._disableTrueFalseTargets(() => {\n                // Evaluate the operand expression.\n                this.walk(node.expression);\n            });\n        }\n\n        return false;\n    }\n\n    visitBinaryOperation(node: BinaryOperationNode): boolean {\n        if (node.operator === OperatorType.And || node.operator === OperatorType.Or) {\n            let trueTarget = this._currentTrueTarget;\n            let falseTarget = this._currentFalseTarget;\n            let postRightLabel: FlowLabel | undefined;\n\n            if (!trueTarget || !falseTarget) {\n                postRightLabel = this._createBranchLabel();\n                trueTarget = falseTarget = postRightLabel;\n            }\n\n            const preRightLabel = this._createBranchLabel();\n            if (node.operator === OperatorType.And) {\n                this._bindConditional(node.leftExpression, preRightLabel, falseTarget);\n            } else {\n                this._bindConditional(node.leftExpression, trueTarget, preRightLabel);\n            }\n            this._currentFlowNode = this._finishFlowLabel(preRightLabel);\n            this._bindConditional(node.rightExpression, trueTarget, falseTarget);\n            if (postRightLabel) {\n                this._currentFlowNode = this._finishFlowLabel(postRightLabel);\n            }\n        } else {\n            // Temporarily set the true/false targets to undefined because\n            // this binary operation is not part of a chain of logical expressions\n            // (AND/OR/NOT subexpressions).\n            this._disableTrueFalseTargets(() => {\n                this.walk(node.leftExpression);\n                this.walk(node.rightExpression);\n            });\n        }\n\n        return false;\n    }\n\n    visitListComprehension(node: ListComprehensionNode): boolean {\n        this._createNewScope(ScopeType.ListComprehension, this._currentScope, () => {\n            AnalyzerNodeInfo.setScope(node, this._currentScope);\n\n            const falseLabel = this._createBranchLabel();\n\n            // We'll walk the comprehensions list twice. The first time we'll\n            // bind targets of for statements. The second time we'll walk\n            // expressions and create the control flow graph.\n            const boundSymbols: Map<string, Symbol>[] = [];\n            for (let i = 0; i < node.comprehensions.length; i++) {\n                const compr = node.comprehensions[i];\n                const addedSymbols = new Map<string, Symbol>();\n                if (compr.nodeType === ParseNodeType.ListComprehensionFor) {\n                    this._bindPossibleTupleNamedTarget(compr.targetExpression, addedSymbols);\n                    this._addInferredTypeAssignmentForVariable(compr.targetExpression, compr);\n                }\n                boundSymbols.push(addedSymbols);\n            }\n\n            for (let i = 0; i < node.comprehensions.length; i++) {\n                const compr = node.comprehensions[i];\n                if (compr.nodeType === ParseNodeType.ListComprehensionFor) {\n                    const addedSymbols = boundSymbols[i];\n\n                    // Determine if we added a new symbol to this scope. If so, see\n                    // if it's the same name as a symbol in an outer scope. If so, we'll\n                    // create an alias node in the control flow graph.\n                    for (const addedSymbol of addedSymbols) {\n                        const aliasSymbol = this._currentScope.parent!.lookUpSymbol(addedSymbol[0]);\n                        if (aliasSymbol) {\n                            this._createAssignmentAliasFlowNode(addedSymbol[1].id, aliasSymbol.id);\n                        }\n                    }\n\n                    this.walk(compr.iterableExpression);\n\n                    this._createAssignmentTargetFlowNodes(\n                        compr.targetExpression,\n                        /* walkTargets */ true,\n                        /* unbound */ false\n                    );\n                } else {\n                    const trueLabel = this._createBranchLabel();\n                    this._bindConditional(compr.testExpression, trueLabel, falseLabel);\n                    this._currentFlowNode = this._finishFlowLabel(trueLabel);\n                }\n            }\n\n            this.walk(node.expression);\n            this._addAntecedent(falseLabel, this._currentFlowNode!);\n            this._currentFlowNode = this._finishFlowLabel(falseLabel);\n        });\n\n        return false;\n    }\n\n    private _disableTrueFalseTargets(callback: () => void): void {\n        const savedTrueTarget = this._currentTrueTarget;\n        const savedFalseTarget = this._currentFalseTarget;\n\n        this._currentTrueTarget = undefined;\n        this._currentFalseTarget = undefined;\n\n        callback();\n\n        this._currentFalseTarget = savedFalseTarget;\n        this._currentTrueTarget = savedTrueTarget;\n    }\n\n    // Attempts to resolve the module name, import it, and return\n    // its __all__ symbols.\n    private _getDunderAllNamesFromImport(varName: string): string[] | undefined {\n        const varSymbol = this._currentScope.lookUpSymbol(varName);\n        if (!varSymbol) {\n            return undefined;\n        }\n\n        // There should be only one declaration for the variable.\n        const aliasDecl = varSymbol.getDeclarations().find((decl) => decl.type === DeclarationType.Alias) as\n            | AliasDeclaration\n            | undefined;\n        const resolvedPath = aliasDecl?.path || aliasDecl?.submoduleFallback?.path;\n        if (!resolvedPath) {\n            return undefined;\n        }\n\n        const lookupInfo = this._fileInfo.importLookup(resolvedPath);\n        if (!lookupInfo) {\n            return undefined;\n        }\n\n        return lookupInfo.dunderAllNames;\n    }\n\n    private _addImplicitFromImport(node: ImportFromNode, importInfo?: ImportResult) {\n        const symbolName = node.module.nameParts[0].value;\n        const symbol = this._bindNameToScope(this._currentScope, symbolName);\n        if (symbol) {\n            this._createAliasDeclarationForMultipartImportName(node, undefined, importInfo, symbol);\n        }\n\n        this._createFlowAssignment(node.module.nameParts[0]);\n    }\n\n    private _createAliasDeclarationForMultipartImportName(\n        node: ImportAsNode | ImportFromNode,\n        importAlias: NameNode | undefined,\n        importInfo: ImportResult | undefined,\n        symbol: Symbol\n    ) {\n        const firstNamePartValue = node.module.nameParts[0].value;\n\n        if (importInfo && importInfo.isImportFound && !importInfo.isNativeLib && importInfo.resolvedPaths.length > 0) {\n            // See if there's already a matching alias declaration for this import.\n            // if so, we'll update it rather than creating a new one. This is required\n            // to handle cases where multiple import statements target the same\n            // starting symbol such as \"import a.b.c\" and \"import a.d\". In this case,\n            // we'll build a single declaration that describes the combined actions\n            // of both import statements, thus reflecting the behavior of the\n            // python module loader.\n            const existingDecl = symbol\n                .getDeclarations()\n                .find((decl) => decl.type === DeclarationType.Alias && decl.firstNamePart === firstNamePartValue);\n\n            let newDecl: AliasDeclaration;\n            if (existingDecl) {\n                newDecl = existingDecl as AliasDeclaration;\n            } else {\n                newDecl = {\n                    type: DeclarationType.Alias,\n                    node,\n                    path: '',\n                    moduleName: importInfo.importName,\n                    range: getEmptyRange(),\n                    firstNamePart: firstNamePartValue,\n                    usesLocalName: !!importAlias,\n                };\n            }\n\n            // Add the implicit imports for this module if it's the last\n            // name part we're resolving.\n            if (importAlias || node.module.nameParts.length === 1) {\n                newDecl.path = importInfo.resolvedPaths[importInfo.resolvedPaths.length - 1];\n                this._addImplicitImportsToLoaderActions(importInfo, newDecl);\n            } else {\n                // Fill in the remaining name parts.\n                let curLoaderActions: ModuleLoaderActions = newDecl;\n\n                for (let i = 1; i < node.module.nameParts.length; i++) {\n                    if (i >= importInfo.resolvedPaths.length) {\n                        break;\n                    }\n\n                    const namePartValue = node.module.nameParts[i].value;\n\n                    // Is there an existing loader action for this name?\n                    let loaderActions = curLoaderActions.implicitImports\n                        ? curLoaderActions.implicitImports.get(namePartValue)\n                        : undefined;\n                    if (!loaderActions) {\n                        // Allocate a new loader action.\n                        loaderActions = {\n                            path: '',\n                            implicitImports: new Map<string, ModuleLoaderActions>(),\n                        };\n                        if (!curLoaderActions.implicitImports) {\n                            curLoaderActions.implicitImports = new Map<string, ModuleLoaderActions>();\n                        }\n                        curLoaderActions.implicitImports.set(namePartValue, loaderActions);\n                    }\n\n                    // If this is the last name part we're resolving, add in the\n                    // implicit imports as well.\n                    if (i === node.module.nameParts.length - 1) {\n                        loaderActions.path = importInfo.resolvedPaths[i];\n                        this._addImplicitImportsToLoaderActions(importInfo, loaderActions);\n                    }\n\n                    curLoaderActions = loaderActions;\n                }\n            }\n\n            if (!existingDecl) {\n                symbol.addDeclaration(newDecl);\n            }\n        } else {\n            // If we couldn't resolve the import, create a dummy declaration with a\n            // bogus path so it gets an unknown type (rather than an unbound type) at\n            // analysis time.\n            const newDecl: AliasDeclaration = {\n                type: DeclarationType.Alias,\n                node,\n                path: '*** unresolved ***',\n                range: getEmptyRange(),\n                usesLocalName: !!importAlias,\n                moduleName: '',\n            };\n            symbol.addDeclaration(newDecl);\n        }\n    }\n\n    private _getWildcardImportNames(lookupInfo: ImportLookupResult): string[] {\n        // If a dunder all symbol is defined, it takes precedence.\n        if (lookupInfo.dunderAllNames) {\n            return lookupInfo.dunderAllNames;\n        }\n\n        // Import all names that don't begin with an underscore.\n        const namesToImport: string[] = [];\n        lookupInfo.symbolTable.forEach((symbol, name) => {\n            if (!name.startsWith('_') && !symbol.isIgnoredForProtocolMatch()) {\n                namesToImport!.push(name);\n            }\n        });\n\n        return namesToImport;\n    }\n\n    private _walkStatementsAndReportUnreachable(statements: StatementNode[]) {\n        let foundUnreachableStatement = false;\n\n        for (const statement of statements) {\n            AnalyzerNodeInfo.setFlowNode(statement, this._currentFlowNode!);\n\n            if (!foundUnreachableStatement) {\n                foundUnreachableStatement = this._isCodeUnreachable();\n            }\n\n            if (!foundUnreachableStatement) {\n                this.walk(statement);\n            } else {\n                // If we're within a function, we need to look for unreachable yield\n                // statements because they affect the behavior of the function (making\n                // it a generator) even if they're never executed.\n                if (this._targetFunctionDeclaration && !this._targetFunctionDeclaration.isGenerator) {\n                    const yieldFinder = new YieldFinder();\n                    if (yieldFinder.checkContainsYield(statement)) {\n                        this._targetFunctionDeclaration.isGenerator = true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private _createStartFlowNode() {\n        const flowNode: FlowNode = {\n            flags: FlowFlags.Start,\n            id: getUniqueFlowNodeId(),\n        };\n        return flowNode;\n    }\n\n    private _createBranchLabel() {\n        const flowNode: FlowLabel = {\n            flags: FlowFlags.BranchLabel,\n            id: getUniqueFlowNodeId(),\n            antecedents: [],\n        };\n        return flowNode;\n    }\n\n    private _createLoopLabel() {\n        const flowNode: FlowLabel = {\n            flags: FlowFlags.LoopLabel,\n            id: getUniqueFlowNodeId(),\n            antecedents: [],\n        };\n        return flowNode;\n    }\n\n    private _finishFlowLabel(node: FlowLabel) {\n        // If there were no antecedents, this is unreachable.\n        if (node.antecedents.length === 0) {\n            return Binder._unreachableFlowNode;\n        }\n\n        // If there was only one antecedent, there's no need\n        // for a label to exist.\n        if (node.antecedents.length === 1) {\n            return node.antecedents[0];\n        }\n\n        return node;\n    }\n\n    private _bindConditional(node: ExpressionNode, trueTarget: FlowLabel, falseTarget: FlowLabel) {\n        const savedTrueTarget = this._currentTrueTarget;\n        const savedFalseTarget = this._currentFalseTarget;\n        this._currentTrueTarget = trueTarget;\n        this._currentFalseTarget = falseTarget;\n\n        this.walk(node);\n\n        this._currentTrueTarget = savedTrueTarget;\n        this._currentFalseTarget = savedFalseTarget;\n\n        if (!this._isLogicalExpression(node)) {\n            this._addAntecedent(\n                trueTarget,\n                this._createFlowConditional(FlowFlags.TrueCondition, this._currentFlowNode!, node)\n            );\n            this._addAntecedent(\n                falseTarget,\n                this._createFlowConditional(FlowFlags.FalseCondition, this._currentFlowNode!, node)\n            );\n        }\n    }\n\n    private _createFlowConditional(flags: FlowFlags, antecedent: FlowNode, expression: ExpressionNode): FlowNode {\n        if (antecedent.flags & FlowFlags.Unreachable) {\n            return antecedent;\n        }\n        const staticValue = StaticExpressions.evaluateStaticBoolLikeExpression(\n            expression,\n            this._fileInfo.executionEnvironment,\n            this._typingImportAliases\n        );\n        if (\n            (staticValue === true && flags & FlowFlags.FalseCondition) ||\n            (staticValue === false && flags & FlowFlags.TrueCondition)\n        ) {\n            return Binder._unreachableFlowNode;\n        }\n\n        const expressionList: NarrowingExpressionNode[] = [];\n        if (!this._isNarrowingExpression(expression, expressionList)) {\n            return antecedent;\n        }\n\n        expressionList.forEach((expr) => {\n            const referenceKey = createKeyForReference(expr);\n            this._currentExecutionScopeReferenceMap!.set(referenceKey, referenceKey);\n        });\n\n        const conditionalFlowNode: FlowCondition = {\n            flags,\n            id: getUniqueFlowNodeId(),\n            expression,\n            antecedent,\n        };\n\n        this._addExceptTargets(conditionalFlowNode);\n\n        return conditionalFlowNode;\n    }\n\n    // Indicates whether the expression is a NOT, AND or OR expression.\n    private _isLogicalExpression(expression: ExpressionNode): boolean {\n        switch (expression.nodeType) {\n            case ParseNodeType.UnaryOperation: {\n                return expression.operator === OperatorType.Not;\n            }\n\n            case ParseNodeType.BinaryOperation: {\n                return expression.operator === OperatorType.And || expression.operator === OperatorType.Or;\n            }\n        }\n\n        return false;\n    }\n\n    private _isNarrowingExpression(expression: ExpressionNode, expressionList: NarrowingExpressionNode[]): boolean {\n        switch (expression.nodeType) {\n            case ParseNodeType.Name:\n            case ParseNodeType.MemberAccess: {\n                if (isCodeFlowSupportedForReference(expression)) {\n                    expressionList.push(expression);\n                    return true;\n                }\n\n                return false;\n            }\n\n            case ParseNodeType.AssignmentExpression: {\n                expressionList.push(expression.name);\n                return true;\n            }\n\n            case ParseNodeType.BinaryOperation: {\n                const isOrIsNotOperator =\n                    expression.operator === OperatorType.Is || expression.operator === OperatorType.IsNot;\n                const equalsOrNotEqualsOperator =\n                    expression.operator === OperatorType.Equals || expression.operator === OperatorType.NotEquals;\n\n                if (isOrIsNotOperator || equalsOrNotEqualsOperator) {\n                    // Look for \"X is None\", \"X is not None\", \"X == None\", \"X != None\".\n                    // These are commonly-used patterns used in control flow.\n                    if (\n                        expression.rightExpression.nodeType === ParseNodeType.Constant &&\n                        expression.rightExpression.constType === KeywordType.None\n                    ) {\n                        return this._isNarrowingExpression(expression.leftExpression, expressionList);\n                    }\n\n                    // Look for \"type(X) is Y\" or \"type(X) is not Y\".\n                    if (\n                        isOrIsNotOperator &&\n                        expression.leftExpression.nodeType === ParseNodeType.Call &&\n                        expression.leftExpression.leftExpression.nodeType === ParseNodeType.Name &&\n                        expression.leftExpression.leftExpression.value === 'type' &&\n                        expression.leftExpression.arguments.length === 1 &&\n                        expression.leftExpression.arguments[0].argumentCategory === ArgumentCategory.Simple\n                    ) {\n                        return this._isNarrowingExpression(\n                            expression.leftExpression.arguments[0].valueExpression,\n                            expressionList\n                        );\n                    }\n\n                    const isLeftNarrowing = this._isNarrowingExpression(expression.leftExpression, expressionList);\n\n                    // Look for \"X is Y\" or \"X is not Y\".\n                    if (isOrIsNotOperator) {\n                        return isLeftNarrowing;\n                    }\n\n                    // Look for X == <literal>, X != <literal> or <literal> == X, <literal> != X\n                    if (equalsOrNotEqualsOperator) {\n                        const isRightNarrowing = this._isNarrowingExpression(\n                            expression.rightExpression,\n                            expressionList\n                        );\n                        return isLeftNarrowing || isRightNarrowing;\n                    }\n                }\n\n                // Look for \"<string> in Y\" or \"<string> not in Y\".\n                if (expression.operator === OperatorType.In || expression.operator === OperatorType.NotIn) {\n                    if (this._isNarrowingExpression(expression.rightExpression, expressionList)) {\n                        return true;\n                    }\n                }\n\n                // Look for \"X in Y\".\n                if (expression.operator === OperatorType.In) {\n                    return this._isNarrowingExpression(expression.leftExpression, expressionList);\n                }\n\n                return false;\n            }\n\n            case ParseNodeType.UnaryOperation: {\n                return (\n                    expression.operator === OperatorType.Not &&\n                    this._isNarrowingExpression(expression.expression, expressionList)\n                );\n            }\n\n            case ParseNodeType.AugmentedAssignment: {\n                return this._isNarrowingExpression(expression.rightExpression, expressionList);\n            }\n\n            case ParseNodeType.Call: {\n                if (\n                    expression.leftExpression.nodeType === ParseNodeType.Name &&\n                    (expression.leftExpression.value === 'isinstance' ||\n                        expression.leftExpression.value === 'issubclass') &&\n                    expression.arguments.length === 2\n                ) {\n                    return this._isNarrowingExpression(expression.arguments[0].valueExpression, expressionList);\n                }\n\n                if (\n                    expression.leftExpression.nodeType === ParseNodeType.Name &&\n                    expression.leftExpression.value === 'callable' &&\n                    expression.arguments.length === 1\n                ) {\n                    return this._isNarrowingExpression(expression.arguments[0].valueExpression, expressionList);\n                }\n\n                // Is this potentially a call to a user-defined type guard function?\n                if (expression.arguments.length >= 1) {\n                    return this._isNarrowingExpression(expression.arguments[0].valueExpression, expressionList);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private _createAssignmentTargetFlowNodes(target: ExpressionNode, walkTargets: boolean, unbound: boolean) {\n        switch (target.nodeType) {\n            case ParseNodeType.Name:\n            case ParseNodeType.MemberAccess: {\n                this._createFlowAssignment(target, unbound);\n                if (walkTargets) {\n                    this.walk(target);\n                }\n                break;\n            }\n\n            case ParseNodeType.Tuple: {\n                target.expressions.forEach((expr) => {\n                    this._createAssignmentTargetFlowNodes(expr, walkTargets, unbound);\n                });\n                break;\n            }\n\n            case ParseNodeType.TypeAnnotation: {\n                this._createAssignmentTargetFlowNodes(target.valueExpression, /* walkTargets */ false, unbound);\n                if (walkTargets) {\n                    this.walk(target);\n                }\n                break;\n            }\n\n            case ParseNodeType.Unpack: {\n                this._createAssignmentTargetFlowNodes(target.expression, /* walkTargets */ false, unbound);\n                if (walkTargets) {\n                    this.walk(target);\n                }\n                break;\n            }\n\n            case ParseNodeType.List: {\n                target.entries.forEach((entry) => {\n                    this._createAssignmentTargetFlowNodes(entry, walkTargets, unbound);\n                });\n                break;\n            }\n\n            default: {\n                if (walkTargets) {\n                    this.walk(target);\n                }\n            }\n        }\n    }\n\n    private _createCallFlowNode(node: CallNode) {\n        if (!this._isCodeUnreachable()) {\n            const flowNode: FlowCall = {\n                flags: FlowFlags.Call,\n                id: getUniqueFlowNodeId(),\n                node,\n                antecedent: this._currentFlowNode!,\n            };\n\n            this._currentFlowNode = flowNode;\n        }\n\n        AnalyzerNodeInfo.setFlowNode(node, this._currentFlowNode!);\n    }\n\n    private _createAssignmentAliasFlowNode(targetSymbolId: number, aliasSymbolId: number) {\n        if (!this._isCodeUnreachable()) {\n            const flowNode: FlowAssignmentAlias = {\n                flags: FlowFlags.AssignmentAlias,\n                id: getUniqueFlowNodeId(),\n                antecedent: this._currentFlowNode!,\n                targetSymbolId,\n                aliasSymbolId,\n            };\n\n            this._currentFlowNode = flowNode;\n        }\n    }\n\n    private _createFlowAssignment(node: NameNode | MemberAccessNode, unbound = false) {\n        let targetSymbolId = indeterminateSymbolId;\n        if (node.nodeType === ParseNodeType.Name) {\n            const symbolWithScope = this._currentScope.lookUpSymbolRecursive(node.value);\n            assert(symbolWithScope !== undefined);\n            targetSymbolId = symbolWithScope!.symbol.id;\n        }\n\n        const prevFlowNode = this._currentFlowNode!;\n        if (!this._isCodeUnreachable() && isCodeFlowSupportedForReference(node)) {\n            const flowNode: FlowAssignment = {\n                flags: FlowFlags.Assignment,\n                id: getUniqueFlowNodeId(),\n                node,\n                antecedent: this._currentFlowNode!,\n                targetSymbolId,\n            };\n\n            const referenceKey = createKeyForReference(node);\n            this._currentExecutionScopeReferenceMap!.set(referenceKey, referenceKey);\n\n            if (unbound) {\n                flowNode.flags |= FlowFlags.Unbind;\n            }\n\n            this._addExceptTargets(flowNode);\n            this._currentFlowNode = flowNode;\n        }\n\n        // If we're marking the node as unbound and there is already a flow node\n        // associated with the node, don't replace it. This case applies for symbols\n        // introduced in except clauses. If there is no use the previous flow node\n        // associated, use the previous flow node (applies in the del case).\n        // Otherwise, the node will be evaluated as unbound at this point in the flow.\n        if (!unbound || AnalyzerNodeInfo.getFlowNode(node) === undefined) {\n            AnalyzerNodeInfo.setFlowNode(node, unbound ? prevFlowNode : this._currentFlowNode!);\n        }\n    }\n\n    private _createFlowWildcardImport(node: ImportFromNode, names: string[]) {\n        if (!this._isCodeUnreachable()) {\n            const flowNode: FlowWildcardImport = {\n                flags: FlowFlags.WildcardImport,\n                id: getUniqueFlowNodeId(),\n                node,\n                names,\n                antecedent: this._currentFlowNode!,\n            };\n\n            this._addExceptTargets(flowNode);\n            this._currentFlowNode = flowNode;\n        }\n\n        AnalyzerNodeInfo.setFlowNode(node, this._currentFlowNode!);\n    }\n\n    private _isCodeUnreachable() {\n        return !!(this._currentFlowNode!.flags & FlowFlags.Unreachable);\n    }\n\n    private _addExceptTargets(flowNode: FlowNode) {\n        // If there are any except targets, then we're in a try block, and we\n        // have to assume that an exception can be raised after every assignment.\n        if (this._currentExceptTargets) {\n            this._currentExceptTargets.forEach((label) => {\n                this._addAntecedent(label, flowNode);\n            });\n        }\n    }\n\n    private _bindLoopStatement(preLoopLabel: FlowLabel, postLoopLabel: FlowLabel, callback: () => void) {\n        const savedContinueTarget = this._currentContinueTarget;\n        const savedBreakTarget = this._currentBreakTarget;\n        this._currentContinueTarget = preLoopLabel;\n        this._currentBreakTarget = postLoopLabel;\n\n        callback();\n\n        this._currentContinueTarget = savedContinueTarget;\n        this._currentBreakTarget = savedBreakTarget;\n    }\n\n    private _addAntecedent(label: FlowLabel, antecedent: FlowNode) {\n        if (!(this._currentFlowNode!.flags & FlowFlags.Unreachable)) {\n            // Don't add the same antecedent twice.\n            if (!label.antecedents.some((existing) => existing.id === antecedent.id)) {\n                label.antecedents.push(antecedent);\n            }\n        }\n    }\n\n    private _bindNameToScope(scope: Scope, name: string, addedSymbols?: Map<string, Symbol>) {\n        if (this._currentScope.getBindingType(name) === undefined) {\n            // Don't overwrite an existing symbol.\n            let symbol = scope.lookUpSymbol(name);\n            if (!symbol) {\n                symbol = scope.addSymbol(name, SymbolFlags.InitiallyUnbound | SymbolFlags.ClassMember);\n\n                // Handle the case where a new symbol is being added to a class\n                // but the expression assigned to it uses a symbol of the same\n                // name that is declared in an outer scope.\n                if (scope.type === ScopeType.Class) {\n                    const aliasSymbol = scope.parent!.lookUpSymbol(name);\n                    if (aliasSymbol) {\n                        this._createAssignmentAliasFlowNode(symbol.id, aliasSymbol.id);\n                    }\n                }\n\n                if (isPrivateOrProtectedName(name)) {\n                    if (this._fileInfo.isStubFile) {\n                        symbol.setIsExternallyHidden();\n                    } else if (this._fileInfo.isInPyTypedPackage && this._currentScope.type === ScopeType.Module) {\n                        this._potentialPrivateSymbols.set(name, symbol);\n                    }\n                }\n\n                if (addedSymbols) {\n                    addedSymbols.set(name, symbol);\n                }\n            }\n\n            return symbol;\n        }\n\n        return undefined;\n    }\n\n    private _bindPossibleTupleNamedTarget(target: ExpressionNode, addedSymbols?: Map<string, Symbol>) {\n        switch (target.nodeType) {\n            case ParseNodeType.Name: {\n                this._bindNameToScope(this._currentScope, target.value, addedSymbols);\n                break;\n            }\n\n            case ParseNodeType.Tuple: {\n                target.expressions.forEach((expr) => {\n                    this._bindPossibleTupleNamedTarget(expr, addedSymbols);\n                });\n                break;\n            }\n\n            case ParseNodeType.List: {\n                target.entries.forEach((expr) => {\n                    this._bindPossibleTupleNamedTarget(expr, addedSymbols);\n                });\n                break;\n            }\n\n            case ParseNodeType.TypeAnnotation: {\n                this._bindPossibleTupleNamedTarget(target.valueExpression, addedSymbols);\n                break;\n            }\n\n            case ParseNodeType.Unpack: {\n                this._bindPossibleTupleNamedTarget(target.expression, addedSymbols);\n                break;\n            }\n        }\n    }\n\n    private _addBuiltInSymbolToCurrentScope(\n        nameValue: string,\n        node: ModuleNode | ClassNode | FunctionNode,\n        type: IntrinsicType\n    ) {\n        const symbol = this._addSymbolToCurrentScope(nameValue, /* isInitiallyUnbound */ false);\n        if (symbol) {\n            symbol.addDeclaration({\n                type: DeclarationType.Intrinsic,\n                node,\n                intrinsicType: type,\n                path: this._fileInfo.filePath,\n                range: getEmptyRange(),\n                moduleName: this._fileInfo.moduleName,\n            });\n            symbol.setIsIgnoredForProtocolMatch();\n        }\n    }\n\n    // Adds a new symbol with the specified name if it doesn't already exist.\n    private _addSymbolToCurrentScope(nameValue: string, isInitiallyUnbound: boolean) {\n        let symbol = this._currentScope.lookUpSymbol(nameValue);\n\n        if (!symbol) {\n            let symbolFlags = SymbolFlags.None;\n\n            if (isInitiallyUnbound) {\n                symbolFlags |= SymbolFlags.InitiallyUnbound;\n            }\n\n            if (this._currentScope.type === ScopeType.Class) {\n                symbolFlags |= SymbolFlags.ClassMember;\n            }\n\n            if (this._fileInfo.isStubFile && isPrivateOrProtectedName(nameValue)) {\n                symbolFlags |= SymbolFlags.ExternallyHidden;\n            }\n\n            // Add the symbol. Assume that symbols with a default type source ID\n            // are \"implicit\" symbols added to the scope. These are not initially unbound.\n            symbol = this._currentScope.addSymbol(nameValue, symbolFlags);\n        }\n\n        return symbol;\n    }\n\n    private _createNewScope(scopeType: ScopeType, parentScope: Scope | undefined, callback: () => void) {\n        const prevScope = this._currentScope;\n        const newScope = new Scope(scopeType, parentScope);\n        this._currentScope = newScope;\n\n        // If this scope is an execution scope, allocate a new reference map.\n        const isExecutionScope =\n            scopeType === ScopeType.Builtin || scopeType === ScopeType.Module || scopeType === ScopeType.Function;\n        const prevReferenceMap = this._currentExecutionScopeReferenceMap;\n\n        if (isExecutionScope) {\n            this._currentExecutionScopeReferenceMap = new Map<string, string>();\n        }\n\n        callback();\n\n        this._currentExecutionScopeReferenceMap = prevReferenceMap;\n        this._currentScope = prevScope;\n\n        return newScope;\n    }\n\n    private _addInferredTypeAssignmentForVariable(\n        target: ExpressionNode,\n        source: ParseNode,\n        isPossibleTypeAlias = false\n    ) {\n        switch (target.nodeType) {\n            case ParseNodeType.Name: {\n                const name = target;\n                const symbolWithScope = this._currentScope.lookUpSymbolRecursive(name.value);\n                if (symbolWithScope && symbolWithScope.symbol) {\n                    const declaration: VariableDeclaration = {\n                        type: DeclarationType.Variable,\n                        node: target,\n                        isConstant: isConstantName(target.value),\n                        inferredTypeSource: source,\n                        typeAliasName: isPossibleTypeAlias ? target : undefined,\n                        path: this._fileInfo.filePath,\n                        range: convertOffsetsToRange(name.start, TextRange.getEnd(name), this._fileInfo.lines),\n                        moduleName: this._fileInfo.moduleName,\n                    };\n                    symbolWithScope.symbol.addDeclaration(declaration);\n                }\n                break;\n            }\n\n            case ParseNodeType.MemberAccess: {\n                const memberAccessInfo = this._getMemberAccessInfo(target);\n                if (memberAccessInfo) {\n                    const name = target.memberName;\n\n                    let symbol = memberAccessInfo.classScope.lookUpSymbol(name.value);\n                    if (!symbol) {\n                        symbol = memberAccessInfo.classScope.addSymbol(name.value, SymbolFlags.InitiallyUnbound);\n                        const honorPrivateNaming = this._fileInfo.diagnosticRuleSet.reportPrivateUsage !== 'none';\n                        if (isPrivateOrProtectedName(name.value) && honorPrivateNaming) {\n                            symbol.setIsPrivateMember();\n                        }\n                    }\n\n                    if (memberAccessInfo.isInstanceMember) {\n                        // If a method (which has a declared type) is being overwritten\n                        // by an expression with no declared type, don't mark it as\n                        // an instance member because the type evaluator will think\n                        // that it doesn't need to perform object binding.\n                        if (\n                            !symbol.isClassMember() ||\n                            !symbol\n                                .getDeclarations()\n                                .some((decl) => decl.type === DeclarationType.Function && decl.isMethod)\n                        ) {\n                            symbol.setIsInstanceMember();\n                        }\n                    } else {\n                        symbol.setIsClassMember();\n                    }\n\n                    const declaration: VariableDeclaration = {\n                        type: DeclarationType.Variable,\n                        node: target.memberName,\n                        isConstant: isConstantName(name.value),\n                        inferredTypeSource: source,\n                        isDefinedByMemberAccess: true,\n                        path: this._fileInfo.filePath,\n                        range: convertOffsetsToRange(\n                            target.memberName.start,\n                            target.memberName.start + target.memberName.length,\n                            this._fileInfo.lines\n                        ),\n                        moduleName: this._fileInfo.moduleName,\n                    };\n                    symbol.addDeclaration(declaration);\n                }\n                break;\n            }\n\n            case ParseNodeType.Tuple: {\n                target.expressions.forEach((expr) => {\n                    this._addInferredTypeAssignmentForVariable(expr, source);\n                });\n                break;\n            }\n\n            case ParseNodeType.TypeAnnotation: {\n                this._addInferredTypeAssignmentForVariable(target.valueExpression, source);\n                break;\n            }\n\n            case ParseNodeType.Unpack: {\n                this._addInferredTypeAssignmentForVariable(target.expression, source);\n                break;\n            }\n\n            case ParseNodeType.List: {\n                target.entries.forEach((entry) => {\n                    this._addInferredTypeAssignmentForVariable(entry, source);\n                });\n                break;\n            }\n        }\n    }\n\n    private _addTypeDeclarationForVariable(target: ExpressionNode, typeAnnotation: ExpressionNode) {\n        let declarationHandled = false;\n\n        switch (target.nodeType) {\n            case ParseNodeType.Name: {\n                const name = target;\n                const symbolWithScope = this._currentScope.lookUpSymbolRecursive(name.value);\n                if (symbolWithScope && symbolWithScope.symbol) {\n                    const finalInfo = this._isAnnotationFinal(typeAnnotation);\n                    const isExplicitTypeAlias = this._isAnnotationTypeAlias(typeAnnotation);\n\n                    let typeAnnotationNode: ExpressionNode | undefined = typeAnnotation;\n                    if (isExplicitTypeAlias) {\n                        typeAnnotationNode = undefined;\n\n                        // Type aliases are allowed only in the global scope.\n                        if (this._currentScope.type !== ScopeType.Module) {\n                            this._addError(Localizer.Diagnostic.typeAliasNotInModule(), typeAnnotation);\n                        }\n                    } else if (finalInfo.isFinal) {\n                        typeAnnotationNode = finalInfo.finalTypeNode;\n                    }\n\n                    const declaration: VariableDeclaration = {\n                        type: DeclarationType.Variable,\n                        node: target,\n                        isConstant: isConstantName(name.value),\n                        isFinal: finalInfo.isFinal,\n                        typeAliasAnnotation: isExplicitTypeAlias ? typeAnnotation : undefined,\n                        typeAliasName: isExplicitTypeAlias ? target : undefined,\n                        path: this._fileInfo.filePath,\n                        typeAnnotationNode,\n                        range: convertOffsetsToRange(name.start, TextRange.getEnd(name), this._fileInfo.lines),\n                        moduleName: this._fileInfo.moduleName,\n                    };\n                    symbolWithScope.symbol.addDeclaration(declaration);\n\n                    // Is this annotation indicating that the variable is a \"ClassVar\"? Note\n                    // that this check is somewhat fragile because we can't verify here that\n                    // \"ClassVar\" maps to the typing module symbol by this name.\n                    const isClassVar =\n                        typeAnnotation.nodeType === ParseNodeType.Index &&\n                        typeAnnotation.baseExpression.nodeType === ParseNodeType.Name &&\n                        typeAnnotation.baseExpression.value === 'ClassVar';\n\n                    if (isClassVar) {\n                        symbolWithScope.symbol.setIsClassVar();\n                    } else {\n                        symbolWithScope.symbol.setIsInstanceMember();\n                    }\n                }\n\n                declarationHandled = true;\n                break;\n            }\n\n            case ParseNodeType.MemberAccess: {\n                // We need to determine whether this expression is declaring a class or\n                // instance variable. This is difficult because python doesn't provide\n                // a keyword for accessing \"this\". Instead, it uses naming conventions\n                // of \"cls\" and \"self\", but we don't want to rely on these naming\n                // conventions here. Instead, we'll apply some heuristics to determine\n                // whether the symbol on the LHS is a reference to the current class\n                // or an instance of the current class.\n\n                const memberAccessInfo = this._getMemberAccessInfo(target);\n                if (memberAccessInfo) {\n                    const name = target.memberName;\n\n                    let symbol = memberAccessInfo.classScope.lookUpSymbol(name.value);\n                    if (!symbol) {\n                        symbol = memberAccessInfo.classScope.addSymbol(name.value, SymbolFlags.InitiallyUnbound);\n                        const honorPrivateNaming = this._fileInfo.diagnosticRuleSet.reportPrivateUsage !== 'none';\n                        if (isPrivateOrProtectedName(name.value) && honorPrivateNaming) {\n                            symbol.setIsPrivateMember();\n                        }\n                    }\n\n                    if (memberAccessInfo.isInstanceMember) {\n                        symbol.setIsInstanceMember();\n                    } else {\n                        symbol.setIsClassMember();\n                    }\n\n                    const finalInfo = this._isAnnotationFinal(typeAnnotation);\n                    const declaration: VariableDeclaration = {\n                        type: DeclarationType.Variable,\n                        node: target.memberName,\n                        isConstant: isConstantName(name.value),\n                        isDefinedByMemberAccess: true,\n                        isFinal: finalInfo.isFinal,\n                        path: this._fileInfo.filePath,\n                        typeAnnotationNode: finalInfo.isFinal ? finalInfo.finalTypeNode : typeAnnotation,\n                        range: convertOffsetsToRange(\n                            target.memberName.start,\n                            target.memberName.start + target.memberName.length,\n                            this._fileInfo.lines\n                        ),\n                        moduleName: this._fileInfo.moduleName,\n                    };\n                    symbol.addDeclaration(declaration);\n\n                    declarationHandled = true;\n                }\n                break;\n            }\n        }\n\n        if (!declarationHandled) {\n            this._addError(Localizer.Diagnostic.annotationNotSupported(), typeAnnotation);\n        }\n    }\n\n    // Determines whether the expression refers to a type exported by the typing\n    // or typing_extensions modules. We can directly evaluate the types at binding\n    // time. We assume here that the code isn't making use of some custom type alias\n    // to refer to the typing types.\n    private _isTypingAnnotation(typeAnnotation: ExpressionNode, name: string): boolean {\n        if (typeAnnotation.nodeType === ParseNodeType.Name) {\n            const alias = this._typingSymbolAliases.get(typeAnnotation.value);\n            if (alias === name) {\n                return true;\n            }\n        } else if (typeAnnotation.nodeType === ParseNodeType.MemberAccess) {\n            if (\n                typeAnnotation.leftExpression.nodeType === ParseNodeType.Name &&\n                typeAnnotation.memberName.value === name\n            ) {\n                const baseName = typeAnnotation.leftExpression.value;\n                return this._typingImportAliases.some((alias) => alias === baseName);\n            }\n        }\n\n        return false;\n    }\n\n    // Determines if the specified type annotation expression is a \"Final\".\n    // It returns two boolean values indicating if the expression is a \"Final\"\n    // expression and whether it's a \"raw\" Final with no type arguments.\n    private _isAnnotationFinal(typeAnnotation: ExpressionNode | undefined): FinalInfo {\n        let isFinal = false;\n        let finalTypeNode: ExpressionNode | undefined;\n\n        if (typeAnnotation) {\n            if (this._isTypingAnnotation(typeAnnotation, 'Final')) {\n                isFinal = true;\n            } else if (typeAnnotation.nodeType === ParseNodeType.Index && typeAnnotation.items.items.length === 1) {\n                // Recursively call to see if the base expression is \"Final\".\n                const finalInfo = this._isAnnotationFinal(typeAnnotation.baseExpression);\n                if (finalInfo.isFinal) {\n                    isFinal = true;\n                    finalTypeNode = typeAnnotation.items.items[0];\n                }\n            }\n        }\n\n        return { isFinal, finalTypeNode };\n    }\n\n    private _isAnnotationTypeAlias(typeAnnotation: ExpressionNode | undefined) {\n        if (!typeAnnotation) {\n            return false;\n        }\n\n        if (this._fileInfo.executionEnvironment.pythonVersion < PythonVersion.V3_10 && !this._fileInfo.isStubFile) {\n            return false;\n        }\n\n        return this._isTypingAnnotation(typeAnnotation, 'TypeAlias');\n    }\n\n    // Determines whether a member access expression is referring to a\n    // member of a class (either a class or instance member). This will\n    // typically take the form \"self.x\" or \"cls.x\".\n    private _getMemberAccessInfo(node: MemberAccessNode): MemberAccessInfo | undefined {\n        // We handle only simple names on the left-hand side of the expression,\n        // not calls, nested member accesses, index expressions, etc.\n        if (node.leftExpression.nodeType !== ParseNodeType.Name) {\n            return undefined;\n        }\n\n        const leftSymbolName = node.leftExpression.value;\n\n        // Make sure the expression is within a function (i.e. a method) that's\n        // within a class definition.\n        const methodNode = ParseTreeUtils.getEnclosingFunction(node);\n        if (!methodNode) {\n            return undefined;\n        }\n\n        const classNode = ParseTreeUtils.getEnclosingClass(methodNode);\n        if (!classNode) {\n            return undefined;\n        }\n\n        // Determine whether the left-hand side indicates a class or\n        // instance member.\n        let isInstanceMember = false;\n\n        if (methodNode.parameters.length < 1 || !methodNode.parameters[0].name) {\n            return undefined;\n        }\n\n        const className = classNode.name.value;\n        const firstParamName = methodNode.parameters[0].name.value;\n\n        if (leftSymbolName === className) {\n            isInstanceMember = false;\n        } else {\n            if (leftSymbolName !== firstParamName) {\n                return undefined;\n            }\n\n            // To determine whether the first parameter of the method\n            // refers to the class or the instance, we need to apply\n            // some heuristics.\n            if (methodNode.name.value === '__new__') {\n                // The __new__ method is special. It acts as a classmethod even\n                // though it doesn't have a @classmethod decorator.\n                isInstanceMember = false;\n            } else {\n                // Assume that it's an instance member unless we find\n                // a decorator that tells us otherwise.\n                isInstanceMember = true;\n                for (const decorator of methodNode.decorators) {\n                    if (decorator.expression.nodeType === ParseNodeType.Name) {\n                        const decoratorName = decorator.expression.value;\n\n                        if (decoratorName === 'staticmethod') {\n                            // A static method doesn't have a \"self\" or \"cls\" parameter.\n                            return undefined;\n                        } else if (decoratorName === 'classmethod') {\n                            // A classmethod implies that the first parameter is \"cls\".\n                            isInstanceMember = false;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        const classScope = AnalyzerNodeInfo.getScope(classNode)!;\n        assert(classScope !== undefined);\n\n        return {\n            classNode,\n            methodNode,\n            classScope,\n            isInstanceMember,\n        };\n    }\n\n    private _addImplicitImportsToLoaderActions(importResult: ImportResult, loaderActions: ModuleLoaderActions) {\n        importResult.filteredImplicitImports.forEach((implicitImport) => {\n            const existingLoaderAction = loaderActions.implicitImports\n                ? loaderActions.implicitImports.get(implicitImport.name)\n                : undefined;\n            if (existingLoaderAction) {\n                existingLoaderAction.path = implicitImport.path;\n            } else {\n                if (!loaderActions.implicitImports) {\n                    loaderActions.implicitImports = new Map<string, ModuleLoaderActions>();\n                }\n                loaderActions.implicitImports.set(implicitImport.name, {\n                    path: implicitImport.path,\n                    implicitImports: new Map<string, ModuleLoaderActions>(),\n                });\n            }\n        });\n    }\n\n    // Handles some special-case assignment statements that are found\n    // within the typings.pyi file.\n    private _handleTypingStubAssignmentOrAnnotation(node: AssignmentNode | TypeAnnotationNode) {\n        if (!this._fileInfo.isTypingStubFile) {\n            return false;\n        }\n\n        let annotationNode: TypeAnnotationNode;\n\n        if (node.nodeType === ParseNodeType.TypeAnnotation) {\n            annotationNode = node;\n        } else {\n            if (node.leftExpression.nodeType !== ParseNodeType.TypeAnnotation) {\n                return false;\n            }\n\n            annotationNode = node.leftExpression;\n        }\n\n        if (annotationNode.valueExpression.nodeType !== ParseNodeType.Name) {\n            return false;\n        }\n\n        const assignedNameNode = annotationNode.valueExpression;\n        const specialTypes: { [name: string]: boolean } = {\n            Tuple: true,\n            Generic: true,\n            Protocol: true,\n            Callable: true,\n            Type: true,\n            ClassVar: true,\n            Final: true,\n            Literal: true,\n            TypedDict: true,\n            Union: true,\n            Optional: true,\n            Annotated: true,\n            TypeAlias: true,\n            OrderedDict: true,\n            Concatenate: true,\n            TypeGuard: true,\n        };\n\n        const assignedName = assignedNameNode.value;\n\n        if (!specialTypes[assignedName]) {\n            return false;\n        }\n        const symbol = this._bindNameToScope(this._currentScope, assignedName);\n\n        if (symbol) {\n            symbol.addDeclaration({\n                type: DeclarationType.SpecialBuiltInClass,\n                node: annotationNode,\n                path: this._fileInfo.filePath,\n                range: convertOffsetsToRange(\n                    annotationNode.start,\n                    TextRange.getEnd(annotationNode),\n                    this._fileInfo.lines\n                ),\n                moduleName: this._fileInfo.moduleName,\n            });\n        }\n        return true;\n    }\n\n    private _deferBinding(callback: () => void) {\n        this._deferredBindingTasks.push({\n            scope: this._currentScope,\n            codeFlowExpressionMap: this._currentExecutionScopeReferenceMap!,\n            callback,\n        });\n    }\n\n    private _bindDeferred() {\n        while (this._deferredBindingTasks.length > 0) {\n            const nextItem = this._deferredBindingTasks.shift()!;\n\n            // Reset the state\n            this._currentScope = nextItem.scope;\n            this._nestedExceptDepth = 0;\n            this._currentExecutionScopeReferenceMap = nextItem.codeFlowExpressionMap;\n\n            nextItem.callback();\n        }\n    }\n\n    private _bindYield(node: YieldNode | YieldFromNode) {\n        const functionNode = ParseTreeUtils.getEnclosingFunction(node);\n\n        if (!functionNode) {\n            if (!ParseTreeUtils.getEnclosingLambda(node)) {\n                this._addError(Localizer.Diagnostic.yieldOutsideFunction(), node);\n            }\n        } else if (functionNode.isAsync && node.nodeType === ParseNodeType.YieldFrom) {\n            // PEP 525 indicates that 'yield from' is not allowed in an\n            // async function.\n            this._addError(Localizer.Diagnostic.yieldFromOutsideAsync(), node);\n        }\n\n        if (this._targetFunctionDeclaration) {\n            if (!this._targetFunctionDeclaration.yieldStatements) {\n                this._targetFunctionDeclaration.yieldStatements = [];\n            }\n            this._targetFunctionDeclaration.yieldStatements.push(node);\n            this._targetFunctionDeclaration.isGenerator = true;\n        }\n\n        if (node.expression) {\n            this.walk(node.expression);\n        }\n\n        AnalyzerNodeInfo.setFlowNode(node, this._currentFlowNode!);\n    }\n\n    private _addDiagnostic(diagLevel: DiagnosticLevel, rule: string, message: string, textRange: TextRange) {\n        let diagnostic: Diagnostic | undefined;\n        switch (diagLevel) {\n            case 'error':\n                diagnostic = this._addError(message, textRange);\n                break;\n\n            case 'warning':\n                diagnostic = this._addWarning(message, textRange);\n                break;\n\n            case 'information':\n                diagnostic = this._addInformation(message, textRange);\n                break;\n\n            case 'none':\n                break;\n\n            default:\n                return assertNever(diagLevel, `${diagLevel} is not expected`);\n        }\n\n        if (diagnostic) {\n            diagnostic.setRule(rule);\n        }\n\n        return diagnostic;\n    }\n\n    private _addError(message: string, textRange: TextRange) {\n        return this._fileInfo.diagnosticSink.addDiagnosticWithTextRange('error', message, textRange);\n    }\n\n    private _addWarning(message: string, textRange: TextRange) {\n        return this._fileInfo.diagnosticSink.addDiagnosticWithTextRange('warning', message, textRange);\n    }\n\n    private _addInformation(message: string, textRange: TextRange) {\n        return this._fileInfo.diagnosticSink.addDiagnosticWithTextRange('information', message, textRange);\n    }\n}\n\nexport class YieldFinder extends ParseTreeWalker {\n    private _containsYield = false;\n\n    checkContainsYield(node: ParseNode) {\n        this.walk(node);\n        return this._containsYield;\n    }\n\n    visitYield(node: YieldNode): boolean {\n        this._containsYield = true;\n        return false;\n    }\n\n    visitYieldFrom(node: YieldFromNode): boolean {\n        this._containsYield = true;\n        return false;\n    }\n}\n","/*\n * checker.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * A parse tree walker that performs static type checking for\n * a source file. Most of its work is performed by the type\n * evaluator, but this module touches every node in the file\n * to ensure that all statements and expressions are evaluated\n * and checked. It also performs some additional checks that\n * cannot (or should not be) performed lazily.\n */\n\nimport { Commands } from '../commands/commands';\nimport { DiagnosticLevel } from '../common/configOptions';\nimport { assert } from '../common/debug';\nimport { Diagnostic, DiagnosticAddendum } from '../common/diagnostic';\nimport { DiagnosticRule } from '../common/diagnosticRules';\nimport { TextRange } from '../common/textRange';\nimport { Localizer } from '../localization/localize';\nimport {\n    AssertNode,\n    AssignmentExpressionNode,\n    AssignmentNode,\n    AugmentedAssignmentNode,\n    BinaryOperationNode,\n    CallNode,\n    ClassNode,\n    DelNode,\n    ErrorNode,\n    ExceptNode,\n    FormatStringNode,\n    ForNode,\n    FunctionNode,\n    IfNode,\n    ImportAsNode,\n    ImportFromAsNode,\n    ImportFromNode,\n    IndexNode,\n    isExpressionNode,\n    LambdaNode,\n    ListComprehensionNode,\n    MemberAccessNode,\n    ModuleNode,\n    NameNode,\n    ParameterCategory,\n    ParseNode,\n    ParseNodeType,\n    RaiseNode,\n    ReturnNode,\n    SliceNode,\n    StatementListNode,\n    StatementNode,\n    StringListNode,\n    SuiteNode,\n    TernaryNode,\n    TupleNode,\n    TypeAnnotationNode,\n    UnaryOperationNode,\n    UnpackNode,\n    WhileNode,\n    WithNode,\n    YieldFromNode,\n    YieldNode,\n} from '../parser/parseNodes';\nimport { AnalyzerFileInfo } from './analyzerFileInfo';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport { Declaration, DeclarationType } from './declaration';\nimport { isExplicitTypeAliasDeclaration, isFinalVariableDeclaration } from './declarationUtils';\nimport { ImportType } from './importResult';\nimport { getTopLevelImports } from './importStatementUtils';\nimport * as ParseTreeUtils from './parseTreeUtils';\nimport { ParseTreeWalker } from './parseTreeWalker';\nimport { ScopeType } from './scope';\nimport { getScopeForNode } from './scopeUtils';\nimport { Symbol } from './symbol';\nimport * as SymbolNameUtils from './symbolNameUtils';\nimport { getLastTypedDeclaredForSymbol, isFinalVariable } from './symbolUtils';\nimport { TypeEvaluator } from './typeEvaluator';\nimport {\n    ClassType,\n    combineTypes,\n    FunctionType,\n    isAnyOrUnknown,\n    isClass,\n    isNever,\n    isNone,\n    isObject,\n    isTypeSame,\n    isTypeVar,\n    isUnknown,\n    NoneType,\n    ObjectType,\n    Type,\n    TypeBase,\n    TypeCategory,\n    TypeVarType,\n    UnknownType,\n} from './types';\nimport {\n    CanAssignFlags,\n    ClassMemberLookupFlags,\n    derivesFromAnyOrUnknown,\n    derivesFromClassRecursive,\n    doForSubtypes,\n    getDeclaredGeneratorReturnType,\n    getDeclaredGeneratorYieldType,\n    isEllipsisType,\n    isNoReturnType,\n    isPartlyUnknown,\n    isProperty,\n    isTupleClass,\n    lookUpClassMember,\n    makeTypeVarsConcrete,\n    partiallySpecializeType,\n    specializeType,\n    transformPossibleRecursiveTypeAlias,\n    transformTypeObjectToClass,\n} from './typeUtils';\n\nexport class Checker extends ParseTreeWalker {\n    private readonly _moduleNode: ModuleNode;\n    private readonly _fileInfo: AnalyzerFileInfo;\n    private readonly _evaluator: TypeEvaluator;\n\n    // A list of all nodes that are defined within the module that\n    // have their own scopes.\n    private _scopedNodes: AnalyzerNodeInfo.ScopedNode[] = [];\n\n    constructor(node: ModuleNode, evaluator: TypeEvaluator) {\n        super();\n\n        this._moduleNode = node;\n        this._fileInfo = AnalyzerNodeInfo.getFileInfo(node)!;\n        this._evaluator = evaluator;\n    }\n\n    check() {\n        this._scopedNodes.push(this._moduleNode);\n\n        this._walkStatementsAndReportUnreachable(this._moduleNode.statements);\n\n        // Mark symbols accessed by __all__ as accessed.\n        const dunderAllNames = AnalyzerNodeInfo.getDunderAllNames(this._moduleNode);\n        if (dunderAllNames) {\n            this._evaluator.markNamesAccessed(this._moduleNode, dunderAllNames);\n        }\n\n        // Perform a one-time validation of symbols in all scopes\n        // defined in this module for things like unaccessed variables.\n        this._validateSymbolTables();\n\n        this._reportDuplicateImports();\n    }\n\n    walk(node: ParseNode) {\n        if (!AnalyzerNodeInfo.isCodeUnreachable(node)) {\n            super.walk(node);\n        } else {\n            this._evaluator.suppressDiagnostics(() => {\n                super.walk(node);\n            });\n        }\n    }\n\n    visitSuite(node: SuiteNode): boolean {\n        this._walkStatementsAndReportUnreachable(node.statements);\n        return false;\n    }\n\n    visitStatementList(node: StatementListNode) {\n        node.statements.forEach((statement) => {\n            if (isExpressionNode(statement)) {\n                // Evaluate the expression in case it wasn't otherwise evaluated\n                // through lazy analysis. This will mark referenced symbols as\n                // accessed and report any errors associated with it.\n                this._evaluator.getType(statement);\n            }\n        });\n\n        return true;\n    }\n\n    visitClass(node: ClassNode): boolean {\n        const classTypeResult = this._evaluator.getTypeOfClass(node);\n\n        this.walk(node.suite);\n        this.walkMultiple(node.decorators);\n        this.walkMultiple(node.arguments);\n\n        if (classTypeResult) {\n            this._validateClassMethods(classTypeResult.classType);\n\n            this._validateFinalMemberOverrides(classTypeResult.classType);\n\n            if (ClassType.isTypedDictClass(classTypeResult.classType)) {\n                this._validateTypedDictClassSuite(node.suite);\n            }\n        }\n\n        this._scopedNodes.push(node);\n\n        return false;\n    }\n\n    visitFunction(node: FunctionNode): boolean {\n        const functionTypeResult = this._evaluator.getTypeOfFunction(node);\n        const containingClassNode = ParseTreeUtils.getEnclosingClass(node, true);\n\n        if (functionTypeResult) {\n            // Report any unknown parameter types.\n            node.parameters.forEach((param, index) => {\n                // Allow unknown param types if the param is named '_'.\n                if (param.name && param.name.value !== '_') {\n                    const paramType = functionTypeResult.functionType.details.parameters[index].type;\n                    if (\n                        isUnknown(paramType) ||\n                        (isTypeVar(paramType) && paramType.details.isSynthesized && !paramType.details.boundType)\n                    ) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportUnknownParameterType,\n                            DiagnosticRule.reportUnknownParameterType,\n                            Localizer.Diagnostic.paramTypeUnknown().format({ paramName: param.name.value }),\n                            param.name\n                        );\n                    } else if (isPartlyUnknown(paramType)) {\n                        const diagAddendum = new DiagnosticAddendum();\n                        diagAddendum.addMessage(\n                            Localizer.DiagnosticAddendum.paramType().format({\n                                paramType: this._evaluator.printType(paramType, /* expandTypeAlias */ true),\n                            })\n                        );\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportUnknownParameterType,\n                            DiagnosticRule.reportUnknownParameterType,\n                            Localizer.Diagnostic.paramTypePartiallyUnknown().format({ paramName: param.name.value }) +\n                                diagAddendum.getString(),\n                            param.name\n                        );\n                    }\n                }\n\n                // If it's a stub file, report an issue of the default value expression is not \"...\".\n                if (param.defaultValue && this._fileInfo.isStubFile) {\n                    const defaultValueType = this._evaluator.getType(param.defaultValue);\n                    if (!defaultValueType || !isEllipsisType(defaultValueType)) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportInvalidStubStatement,\n                            DiagnosticRule.reportInvalidStubStatement,\n                            Localizer.Diagnostic.defaultValueNotEllipsis(),\n                            param.defaultValue\n                        );\n                    }\n                }\n            });\n\n            // If this is a stub, ensure that the return type is specified.\n            if (this._fileInfo.isStubFile) {\n                const returnAnnotation =\n                    node.returnTypeAnnotation || node.functionAnnotationComment?.returnTypeAnnotation;\n                if (!returnAnnotation) {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportUnknownParameterType,\n                        DiagnosticRule.reportUnknownParameterType,\n                        Localizer.Diagnostic.returnTypeUnknown(),\n                        node.name\n                    );\n                }\n            }\n\n            if (containingClassNode) {\n                this._validateMethod(node, functionTypeResult.functionType, containingClassNode);\n            }\n        }\n\n        node.parameters.forEach((param, index) => {\n            if (param.defaultValue) {\n                this.walk(param.defaultValue);\n            }\n\n            if (param.typeAnnotation) {\n                this.walk(param.typeAnnotation);\n            }\n\n            if (param.typeAnnotationComment) {\n                this.walk(param.typeAnnotationComment);\n            }\n\n            if (functionTypeResult) {\n                const annotationNode = param.typeAnnotation || param.typeAnnotationComment;\n                if (annotationNode) {\n                    const paramType = functionTypeResult.functionType.details.parameters[index].type;\n                    const diag = new DiagnosticAddendum();\n                    if (this._containsCovariantTypeVar(paramType, node.id, diag)) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.paramTypeCovariant() + diag.getString(),\n                            annotationNode\n                        );\n                    }\n                }\n            }\n        });\n\n        if (node.returnTypeAnnotation) {\n            this.walk(node.returnTypeAnnotation);\n        }\n\n        if (node.functionAnnotationComment) {\n            this.walk(node.functionAnnotationComment);\n        }\n\n        this.walkMultiple(node.decorators);\n\n        node.parameters.forEach((param) => {\n            if (param.name) {\n                this.walk(param.name);\n            }\n        });\n\n        this.walk(node.suite);\n\n        if (functionTypeResult) {\n            // Validate that the function returns the declared type.\n            this._validateFunctionReturn(node, functionTypeResult.functionType);\n        }\n\n        // If we're at the module level within a stub file, report a diagnostic\n        // if there is a '__getattr__' function defined when in strict mode.\n        // This signifies an incomplete stub file that obscures type errors.\n        if (this._fileInfo.isStubFile && node.name.value === '__getattr__') {\n            const scope = getScopeForNode(node);\n            if (scope?.type === ScopeType.Module) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportUnknownMemberType,\n                    DiagnosticRule.reportUnknownMemberType,\n                    Localizer.Diagnostic.stubUsesGetAttr(),\n                    node.name\n                );\n            }\n        }\n\n        this._scopedNodes.push(node);\n\n        if (functionTypeResult && functionTypeResult.decoratedType.category === TypeCategory.OverloadedFunction) {\n            const overloads = functionTypeResult.decoratedType.overloads;\n            if (overloads.length > 1) {\n                this._validateOverloadConsistency(\n                    node,\n                    overloads[overloads.length - 1],\n                    overloads.slice(0, overloads.length - 1)\n                );\n            }\n        }\n\n        return false;\n    }\n\n    visitLambda(node: LambdaNode): boolean {\n        this._evaluator.getType(node);\n\n        // Walk the children.\n        this.walkMultiple([...node.parameters, node.expression]);\n\n        node.parameters.forEach((param) => {\n            if (param.name) {\n                const paramType = this._evaluator.getType(param.name);\n                if (paramType) {\n                    if (isUnknown(paramType)) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportUnknownLambdaType,\n                            DiagnosticRule.reportUnknownLambdaType,\n                            Localizer.Diagnostic.paramTypeUnknown().format({ paramName: param.name.value }),\n                            param.name\n                        );\n                    } else if (isPartlyUnknown(paramType)) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportUnknownLambdaType,\n                            DiagnosticRule.reportUnknownLambdaType,\n                            Localizer.Diagnostic.paramTypePartiallyUnknown().format({ paramName: param.name.value }),\n                            param.name\n                        );\n                    }\n                }\n            }\n        });\n\n        const returnType = this._evaluator.getType(node.expression);\n        if (returnType) {\n            if (isUnknown(returnType)) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportUnknownLambdaType,\n                    DiagnosticRule.reportUnknownLambdaType,\n                    Localizer.Diagnostic.lambdaReturnTypeUnknown(),\n                    node.expression\n                );\n            } else if (isPartlyUnknown(returnType)) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportUnknownLambdaType,\n                    DiagnosticRule.reportUnknownLambdaType,\n                    Localizer.Diagnostic.lambdaReturnTypePartiallyUnknown().format({\n                        returnType: this._evaluator.printType(returnType, /* expandTypeAlias */ false),\n                    }),\n                    node.expression\n                );\n            }\n        }\n\n        this._scopedNodes.push(node);\n\n        return false;\n    }\n\n    visitCall(node: CallNode): boolean {\n        this._validateIsInstanceCall(node);\n\n        if (ParseTreeUtils.isWithinDefaultParamInitializer(node) && !this._fileInfo.isStubFile) {\n            this._evaluator.addDiagnostic(\n                this._fileInfo.diagnosticRuleSet.reportCallInDefaultInitializer,\n                DiagnosticRule.reportCallInDefaultInitializer,\n                Localizer.Diagnostic.defaultValueContainsCall(),\n                node\n            );\n        }\n\n        return true;\n    }\n\n    visitFor(node: ForNode): boolean {\n        this._evaluator.evaluateTypesForStatement(node);\n        return true;\n    }\n\n    visitListComprehension(node: ListComprehensionNode): boolean {\n        this._scopedNodes.push(node);\n        return true;\n    }\n\n    visitIf(node: IfNode): boolean {\n        this._evaluator.getType(node.testExpression);\n        return true;\n    }\n\n    visitWhile(node: WhileNode): boolean {\n        this._evaluator.getType(node.testExpression);\n        return true;\n    }\n\n    visitWith(node: WithNode): boolean {\n        node.withItems.forEach((item) => {\n            this._evaluator.evaluateTypesForStatement(item);\n        });\n\n        return true;\n    }\n\n    visitReturn(node: ReturnNode): boolean {\n        let returnType: Type;\n\n        const enclosingFunctionNode = ParseTreeUtils.getEnclosingFunction(node);\n        const declaredReturnType = enclosingFunctionNode\n            ? this._evaluator.getFunctionDeclaredReturnType(enclosingFunctionNode)\n            : undefined;\n\n        if (node.returnExpression) {\n            returnType = this._evaluator.getType(node.returnExpression) || UnknownType.create();\n        } else {\n            // There is no return expression, so \"None\" is assumed.\n            returnType = NoneType.createInstance();\n        }\n\n        if (this._evaluator.isNodeReachable(node) && enclosingFunctionNode) {\n            if (declaredReturnType) {\n                if (isNoReturnType(declaredReturnType)) {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.noReturnContainsReturn(),\n                        node\n                    );\n                } else {\n                    const diagAddendum = new DiagnosticAddendum();\n\n                    // Specialize the return type in case it contains references to type variables.\n                    // These will be replaced with the corresponding constraint or bound types.\n                    const specializedDeclaredType = specializeType(declaredReturnType, undefined);\n                    if (!this._evaluator.canAssignType(specializedDeclaredType, returnType, diagAddendum)) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.returnTypeMismatch().format({\n                                exprType: this._evaluator.printType(returnType, /* expandTypeAlias */ false),\n                                returnType: this._evaluator.printType(\n                                    specializedDeclaredType,\n                                    /* expandTypeAlias */ false\n                                ),\n                            }) + diagAddendum.getString(),\n                            node.returnExpression ? node.returnExpression : node\n                        );\n                    }\n                }\n            }\n\n            if (isUnknown(returnType)) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportUnknownVariableType,\n                    DiagnosticRule.reportUnknownVariableType,\n                    Localizer.Diagnostic.returnTypeUnknown(),\n                    node.returnExpression!\n                );\n            } else if (isPartlyUnknown(returnType)) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportUnknownVariableType,\n                    DiagnosticRule.reportUnknownVariableType,\n                    Localizer.Diagnostic.returnTypePartiallyUnknown().format({\n                        returnType: this._evaluator.printType(returnType, /* expandTypeAlias */ true),\n                    }),\n                    node.returnExpression!\n                );\n            }\n        }\n\n        return true;\n    }\n\n    visitYield(node: YieldNode) {\n        const yieldType = node.expression ? this._evaluator.getType(node.expression) : NoneType.createInstance();\n\n        // Wrap the yield type in an Iterator.\n        let adjYieldType = yieldType;\n        const iteratorType = this._evaluator.getBuiltInType(node, 'Iterator');\n        if (yieldType && isClass(iteratorType)) {\n            adjYieldType = ObjectType.create(\n                ClassType.cloneForSpecialization(iteratorType, [yieldType], /* isTypeArgumentExplicit */ true)\n            );\n        } else {\n            adjYieldType = UnknownType.create();\n        }\n\n        this._validateYieldType(node, adjYieldType);\n\n        return true;\n    }\n\n    visitYieldFrom(node: YieldFromNode) {\n        const yieldType = this._evaluator.getType(node.expression);\n        if (yieldType) {\n            this._validateYieldType(node, yieldType);\n        }\n\n        return true;\n    }\n\n    visitRaise(node: RaiseNode): boolean {\n        this._evaluator.verifyRaiseExceptionType(node);\n\n        if (node.valueExpression) {\n            const baseExceptionType = this._evaluator.getBuiltInType(node, 'BaseException') as ClassType;\n            const exceptionType = this._evaluator.getType(node.valueExpression);\n\n            // Validate that the argument of \"raise\" is an exception object or None.\n            if (exceptionType && baseExceptionType && isClass(baseExceptionType)) {\n                const diagAddendum = new DiagnosticAddendum();\n\n                doForSubtypes(exceptionType, (subtype) => {\n                    if (!isAnyOrUnknown(subtype) && !isNone(subtype)) {\n                        if (isObject(subtype)) {\n                            if (\n                                !derivesFromClassRecursive(\n                                    subtype.classType,\n                                    baseExceptionType,\n                                    /* ignoreUnknown */ false\n                                )\n                            ) {\n                                diagAddendum.addMessage(\n                                    Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                                        type: this._evaluator.printType(subtype, /* expandTypeAlias */ false),\n                                    })\n                                );\n                            }\n                        } else {\n                            diagAddendum.addMessage(\n                                Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                                    type: this._evaluator.printType(subtype, /* expandTypeAlias */ false),\n                                })\n                            );\n                        }\n                    }\n\n                    return subtype;\n                });\n\n                if (!diagAddendum.isEmpty()) {\n                    this._evaluator.addError(\n                        Localizer.Diagnostic.expectedExceptionObj() + diagAddendum.getString(),\n                        node.valueExpression\n                    );\n                }\n            }\n        }\n\n        return true;\n    }\n\n    visitExcept(node: ExceptNode): boolean {\n        if (node.typeExpression) {\n            this._evaluator.evaluateTypesForStatement(node);\n\n            const exceptionType = this._evaluator.getType(node.typeExpression);\n            if (exceptionType) {\n                this._validateExceptionType(exceptionType, node.typeExpression);\n            }\n        }\n\n        return true;\n    }\n\n    visitAssert(node: AssertNode) {\n        if (node.exceptionExpression) {\n            this._evaluator.getType(node.exceptionExpression);\n        }\n\n        // Specifically look for a common programming error where the two arguments\n        // to an assert are enclosed in parens and interpreted as a two-element tuple.\n        //   assert (x > 3, \"bad value x\")\n        const type = this._evaluator.getType(node.testExpression);\n        if (type && isObject(type)) {\n            if (isTupleClass(type.classType) && type.classType.typeArguments) {\n                if (type.classType.typeArguments.length > 0) {\n                    const lastTypeArg = type.classType.typeArguments[type.classType.typeArguments.length - 1];\n                    if (!isEllipsisType(lastTypeArg)) {\n                        this._evaluator.addDiagnosticForTextRange(\n                            this._fileInfo,\n                            this._fileInfo.diagnosticRuleSet.reportAssertAlwaysTrue,\n                            DiagnosticRule.reportAssertAlwaysTrue,\n                            Localizer.Diagnostic.assertAlwaysTrue(),\n                            node.testExpression\n                        );\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    visitAssignment(node: AssignmentNode): boolean {\n        this._evaluator.evaluateTypesForStatement(node);\n        if (node.typeAnnotationComment) {\n            this._evaluator.getType(node.typeAnnotationComment);\n        }\n\n        return true;\n    }\n\n    visitAssignmentExpression(node: AssignmentExpressionNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitAugmentedAssignment(node: AugmentedAssignmentNode): boolean {\n        this._evaluator.evaluateTypesForStatement(node);\n        return true;\n    }\n\n    visitIndex(node: IndexNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitBinaryOperation(node: BinaryOperationNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitSlice(node: SliceNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitUnpack(node: UnpackNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitTuple(node: TupleNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitUnaryOperation(node: UnaryOperationNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitTernary(node: TernaryNode): boolean {\n        this._evaluator.getType(node);\n        return true;\n    }\n\n    visitStringList(node: StringListNode): boolean {\n        if (node.typeAnnotation) {\n            this._evaluator.getType(node);\n        }\n\n        if (node.strings.length > 1) {\n            this._evaluator.addDiagnosticForTextRange(\n                this._fileInfo,\n                this._fileInfo.diagnosticRuleSet.reportImplicitStringConcatenation,\n                DiagnosticRule.reportImplicitStringConcatenation,\n                Localizer.Diagnostic.implicitStringConcat(),\n                node\n            );\n        }\n\n        return true;\n    }\n\n    visitFormatString(node: FormatStringNode): boolean {\n        node.expressions.forEach((formatExpr) => {\n            this._evaluator.getType(formatExpr);\n        });\n\n        return true;\n    }\n\n    visitName(node: NameNode) {\n        // Determine if we should log information about private usage.\n        this._conditionallyReportPrivateUsage(node);\n        return true;\n    }\n\n    visitDel(node: DelNode) {\n        node.expressions.forEach((expr) => {\n            this._evaluator.verifyDeleteExpression(expr);\n        });\n\n        return true;\n    }\n\n    visitMemberAccess(node: MemberAccessNode) {\n        this._evaluator.getType(node);\n        this._conditionallyReportPrivateUsage(node.memberName);\n\n        // Walk the leftExpression but not the memberName.\n        this.walk(node.leftExpression);\n\n        return false;\n    }\n\n    visitImportAs(node: ImportAsNode): boolean {\n        this._evaluator.evaluateTypesForStatement(node);\n        return false;\n    }\n\n    visitImportFrom(node: ImportFromNode): boolean {\n        if (!node.isWildcardImport) {\n            node.imports.forEach((importAs) => {\n                this._evaluator.evaluateTypesForStatement(importAs);\n            });\n        } else {\n            const importInfo = AnalyzerNodeInfo.getImportInfo(node.module);\n            if (importInfo && importInfo.isImportFound && importInfo.importType !== ImportType.Local) {\n                this._evaluator.addDiagnosticForTextRange(\n                    this._fileInfo,\n                    this._fileInfo.diagnosticRuleSet.reportWildcardImportFromLibrary,\n                    DiagnosticRule.reportWildcardImportFromLibrary,\n                    Localizer.Diagnostic.wildcardLibraryImport(),\n                    node.wildcardToken || node\n                );\n            }\n        }\n\n        return false;\n    }\n\n    visitTypeAnnotation(node: TypeAnnotationNode): boolean {\n        this._evaluator.getType(node.typeAnnotation);\n        return true;\n    }\n\n    visitError(node: ErrorNode) {\n        // Get the type of the child so it's available to\n        // the completion provider.\n        if (node.child) {\n            this._evaluator.getType(node.child);\n        }\n\n        // Don't explore further.\n        return false;\n    }\n\n    private _validateOverloadConsistency(\n        node: FunctionNode,\n        functionType: FunctionType,\n        prevOverloads: FunctionType[]\n    ) {\n        for (let i = 0; i < prevOverloads.length; i++) {\n            const prevOverload = prevOverloads[i];\n            if (this._isOverlappingOverload(functionType, prevOverload)) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.overlappingOverload().format({\n                        name: node.name.value,\n                        obscured: prevOverloads.length + 1,\n                        obscuredBy: i + 1,\n                    }),\n                    node.name\n                );\n                break;\n            }\n        }\n\n        for (let i = 0; i < prevOverloads.length; i++) {\n            const prevOverload = prevOverloads[i];\n            if (this._isOverlappingOverload(prevOverload, functionType)) {\n                const prevReturnType = FunctionType.getSpecializedReturnType(prevOverload);\n                const returnType = FunctionType.getSpecializedReturnType(functionType);\n\n                if (\n                    prevReturnType &&\n                    returnType &&\n                    !this._evaluator.canAssignType(returnType, prevReturnType, new DiagnosticAddendum())\n                ) {\n                    const altNode = this._findNodeForOverload(node, prevOverload);\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.overloadReturnTypeMismatch().format({\n                            name: node.name.value,\n                            newIndex: prevOverloads.length + 1,\n                            prevIndex: i + 1,\n                        }),\n                        (altNode || node).name\n                    );\n                    break;\n                }\n            }\n        }\n    }\n\n    // Mypy reports overlapping overload errors on the line that contains the\n    // earlier overload. Typeshed stubs contain type: ignore comments on these\n    // lines, so it is important for us to report them in the same manner.\n    private _findNodeForOverload(functionNode: FunctionNode, overloadType: FunctionType): FunctionNode | undefined {\n        const decls = this._evaluator.getDeclarationsForNameNode(functionNode.name);\n        if (!decls) {\n            return undefined;\n        }\n\n        for (const decl of decls) {\n            if (decl.type === DeclarationType.Function) {\n                const functionType = this._evaluator.getTypeOfFunction(decl.node);\n                if (functionType?.functionType === overloadType) {\n                    return decl.node;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    private _isOverlappingOverload(functionType: FunctionType, prevOverload: FunctionType) {\n        return this._evaluator.canAssignType(\n            functionType,\n            prevOverload,\n            new DiagnosticAddendum(),\n            /* typeVarMap */ undefined,\n            CanAssignFlags.MatchTypeVarsExactly |\n                CanAssignFlags.SkipFunctionReturnTypeCheck |\n                CanAssignFlags.DisallowAssignFromAny\n        );\n    }\n\n    private _walkStatementsAndReportUnreachable(statements: StatementNode[]) {\n        let reportedUnreachable = false;\n\n        for (const statement of statements) {\n            // No need to report unreachable more than once since the first time\n            // covers all remaining statements in the statement list.\n            if (!reportedUnreachable) {\n                if (!this._evaluator.isNodeReachable(statement)) {\n                    // Create a text range that covers the next statement through\n                    // the end of the statement list.\n                    const start = statement.start;\n                    const lastStatement = statements[statements.length - 1];\n                    const end = TextRange.getEnd(lastStatement);\n                    this._evaluator.addUnusedCode(statement, { start, length: end - start });\n\n                    reportedUnreachable = true;\n                }\n            }\n\n            if (!reportedUnreachable && this._fileInfo.isStubFile) {\n                this._validateStubStatement(statement);\n            }\n\n            this.walk(statement);\n        }\n    }\n\n    private _validateStubStatement(statement: StatementNode) {\n        switch (statement.nodeType) {\n            case ParseNodeType.If:\n            case ParseNodeType.Function:\n            case ParseNodeType.Class:\n            case ParseNodeType.Error: {\n                // These are allowed in a stub file.\n                break;\n            }\n\n            case ParseNodeType.While:\n            case ParseNodeType.For:\n            case ParseNodeType.Try:\n            case ParseNodeType.With: {\n                // These are not allowed.\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportInvalidStubStatement,\n                    DiagnosticRule.reportInvalidStubStatement,\n                    Localizer.Diagnostic.invalidStubStatement(),\n                    statement\n                );\n                break;\n            }\n\n            case ParseNodeType.StatementList: {\n                for (const substatement of statement.statements) {\n                    switch (substatement.nodeType) {\n                        case ParseNodeType.Assert:\n                        case ParseNodeType.AssignmentExpression:\n                        case ParseNodeType.AugmentedAssignment:\n                        case ParseNodeType.Await:\n                        case ParseNodeType.BinaryOperation:\n                        case ParseNodeType.Call:\n                        case ParseNodeType.Constant:\n                        case ParseNodeType.Del:\n                        case ParseNodeType.Dictionary:\n                        case ParseNodeType.Index:\n                        case ParseNodeType.For:\n                        case ParseNodeType.FormatString:\n                        case ParseNodeType.Global:\n                        case ParseNodeType.Lambda:\n                        case ParseNodeType.List:\n                        case ParseNodeType.MemberAccess:\n                        case ParseNodeType.Name:\n                        case ParseNodeType.Nonlocal:\n                        case ParseNodeType.Number:\n                        case ParseNodeType.Raise:\n                        case ParseNodeType.Return:\n                        case ParseNodeType.Set:\n                        case ParseNodeType.Slice:\n                        case ParseNodeType.Ternary:\n                        case ParseNodeType.Tuple:\n                        case ParseNodeType.Try:\n                        case ParseNodeType.UnaryOperation:\n                        case ParseNodeType.Unpack:\n                        case ParseNodeType.While:\n                        case ParseNodeType.With:\n                        case ParseNodeType.WithItem:\n                        case ParseNodeType.Yield:\n                        case ParseNodeType.YieldFrom: {\n                            this._evaluator.addDiagnostic(\n                                this._fileInfo.diagnosticRuleSet.reportInvalidStubStatement,\n                                DiagnosticRule.reportInvalidStubStatement,\n                                Localizer.Diagnostic.invalidStubStatement(),\n                                substatement\n                            );\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private _validateExceptionType(exceptionType: Type, errorNode: ParseNode) {\n        const baseExceptionType = this._evaluator.getBuiltInType(errorNode, 'BaseException');\n        const derivesFromBaseException = (classType: ClassType) => {\n            if (!baseExceptionType || !isClass(baseExceptionType)) {\n                return true;\n            }\n\n            return derivesFromClassRecursive(classType, baseExceptionType, /* ignoreUnknown */ false);\n        };\n\n        const diagAddendum = new DiagnosticAddendum();\n        let resultingExceptionType: Type | undefined;\n\n        if (isAnyOrUnknown(exceptionType)) {\n            resultingExceptionType = exceptionType;\n        } else {\n            // Handle the case where we have a Type[X] object.\n            if (isObject(exceptionType)) {\n                exceptionType = transformTypeObjectToClass(exceptionType);\n            }\n\n            if (isClass(exceptionType)) {\n                if (!derivesFromBaseException(exceptionType)) {\n                    diagAddendum.addMessage(\n                        Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                            type: this._evaluator.printType(exceptionType, /* expandTypeAlias */ false),\n                        })\n                    );\n                }\n                resultingExceptionType = ObjectType.create(exceptionType);\n            } else if (isObject(exceptionType)) {\n                const iterableType = this._evaluator.getTypeFromIterable(\n                    exceptionType,\n                    /* isAsync */ false,\n                    errorNode,\n                    false\n                );\n\n                resultingExceptionType = doForSubtypes(iterableType, (subtype) => {\n                    if (isAnyOrUnknown(subtype)) {\n                        return subtype;\n                    }\n\n                    const transformedSubtype = transformTypeObjectToClass(subtype);\n                    if (isClass(transformedSubtype)) {\n                        if (!derivesFromBaseException(transformedSubtype)) {\n                            diagAddendum.addMessage(\n                                Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                                    type: this._evaluator.printType(exceptionType, /* expandTypeAlias */ false),\n                                })\n                            );\n                        }\n\n                        return ObjectType.create(transformedSubtype);\n                    }\n\n                    diagAddendum.addMessage(\n                        Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                            type: this._evaluator.printType(exceptionType, /* expandTypeAlias */ false),\n                        })\n                    );\n                    return UnknownType.create();\n                });\n            }\n        }\n\n        if (!diagAddendum.isEmpty()) {\n            this._evaluator.addError(\n                Localizer.Diagnostic.exceptionTypeNotClass().format({\n                    type: this._evaluator.printType(exceptionType, /* expandTypeAlias */ false),\n                }),\n                errorNode\n            );\n        }\n\n        return resultingExceptionType || UnknownType.create();\n    }\n\n    private _validateSymbolTables() {\n        for (const scopedNode of this._scopedNodes) {\n            const scope = AnalyzerNodeInfo.getScope(scopedNode);\n\n            if (scope) {\n                scope.symbolTable.forEach((symbol, name) => {\n                    this._conditionallyReportUnusedSymbol(name, symbol, scope.type);\n\n                    this._reportIncompatibleDeclarations(name, symbol);\n\n                    this._reportMultipleFinalDeclarations(name, symbol);\n\n                    this._reportMultipleTypeAliasDeclarations(name, symbol);\n\n                    this._reportInvalidOverload(name, symbol);\n                });\n            }\n        }\n    }\n\n    private _reportInvalidOverload(name: string, symbol: Symbol) {\n        const typedDecls = symbol.getTypedDeclarations();\n        if (typedDecls.length === 1) {\n            const primaryDecl = typedDecls[0];\n            if (primaryDecl.type === DeclarationType.Function) {\n                const type = this._evaluator.getEffectiveTypeOfSymbol(symbol);\n\n                if (type.category === TypeCategory.Function && FunctionType.isOverloaded(type)) {\n                    // There should never be a single overload.\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.singleOverload().format({ name }),\n                        primaryDecl.node.name\n                    );\n                }\n            }\n        }\n    }\n\n    private _reportMultipleFinalDeclarations(name: string, symbol: Symbol) {\n        if (!isFinalVariable(symbol)) {\n            return;\n        }\n\n        const decls = symbol.getDeclarations();\n        let sawFinal = false;\n        let sawAssignment = false;\n\n        decls.forEach((decl) => {\n            if (isFinalVariableDeclaration(decl)) {\n                if (sawFinal) {\n                    this._evaluator.addError(Localizer.Diagnostic.finalRedeclaration().format({ name }), decl.node);\n                }\n                sawFinal = true;\n            }\n\n            if (decl.type === DeclarationType.Variable && decl.inferredTypeSource) {\n                if (sawAssignment) {\n                    this._evaluator.addError(Localizer.Diagnostic.finalReassigned().format({ name }), decl.node);\n                }\n                sawAssignment = true;\n            }\n        });\n\n        // If it's not a stub file, an assignment must be provided.\n        if (!sawAssignment && !this._fileInfo.isStubFile) {\n            const firstDecl = decls.find((decl) => decl.type === DeclarationType.Variable && decl.isFinal);\n            if (firstDecl) {\n                this._evaluator.addError(Localizer.Diagnostic.finalUnassigned().format({ name }), firstDecl.node);\n            }\n        }\n    }\n\n    private _reportMultipleTypeAliasDeclarations(name: string, symbol: Symbol) {\n        const decls = symbol.getDeclarations();\n        const typeAliasDecl = decls.find((decl) => isExplicitTypeAliasDeclaration(decl));\n\n        // If this is a type alias, there should be only one declaration.\n        if (typeAliasDecl && decls.length > 1) {\n            decls.forEach((decl) => {\n                if (decl !== typeAliasDecl) {\n                    this._evaluator.addError(Localizer.Diagnostic.typeAliasRedeclared().format({ name }), decl.node);\n                }\n            });\n        }\n    }\n\n    private _reportIncompatibleDeclarations(name: string, symbol: Symbol) {\n        // If there's one or more declaration with a declared type,\n        // all other declarations should match. The only exception is\n        // for functions that have an overload.\n        const primaryDecl = getLastTypedDeclaredForSymbol(symbol);\n\n        // If there's no declaration with a declared type, we're done.\n        if (!primaryDecl) {\n            return;\n        }\n\n        let otherDecls = symbol.getDeclarations().filter((decl) => decl !== primaryDecl);\n\n        // If it's a function, we can skip any other declarations\n        // that are overloads.\n        if (primaryDecl.type === DeclarationType.Function) {\n            otherDecls = otherDecls.filter((decl) => decl.type !== DeclarationType.Function);\n        }\n\n        // If there are no other declarations to consider, we're done.\n        if (otherDecls.length === 0) {\n            return;\n        }\n\n        let primaryDeclInfo: string;\n        if (primaryDecl.type === DeclarationType.Function) {\n            if (primaryDecl.isMethod) {\n                primaryDeclInfo = Localizer.DiagnosticAddendum.seeMethodDeclaration();\n            } else {\n                primaryDeclInfo = Localizer.DiagnosticAddendum.seeFunctionDeclaration();\n            }\n        } else if (primaryDecl.type === DeclarationType.Class) {\n            primaryDeclInfo = Localizer.DiagnosticAddendum.seeClassDeclaration();\n        } else if (primaryDecl.type === DeclarationType.Parameter) {\n            primaryDeclInfo = Localizer.DiagnosticAddendum.seeParameterDeclaration();\n        } else if (primaryDecl.type === DeclarationType.Variable) {\n            primaryDeclInfo = Localizer.DiagnosticAddendum.seeVariableDeclaration();\n        } else {\n            primaryDeclInfo = Localizer.DiagnosticAddendum.seeDeclaration();\n        }\n\n        const addPrimaryDeclInfo = (diag?: Diagnostic) => {\n            if (diag) {\n                let primaryDeclNode: ParseNode | undefined;\n                if (primaryDecl.type === DeclarationType.Function || primaryDecl.type === DeclarationType.Class) {\n                    primaryDeclNode = primaryDecl.node.name;\n                } else if (primaryDecl.type === DeclarationType.Variable) {\n                    if (primaryDecl.node.nodeType === ParseNodeType.Name) {\n                        primaryDeclNode = primaryDecl.node;\n                    }\n                } else if (primaryDecl.type === DeclarationType.Parameter) {\n                    if (primaryDecl.node.name) {\n                        primaryDeclNode = primaryDecl.node.name;\n                    }\n                }\n\n                if (primaryDeclNode) {\n                    diag.addRelatedInfo(primaryDeclInfo, primaryDecl.path, primaryDecl.range);\n                }\n            }\n        };\n\n        for (const otherDecl of otherDecls) {\n            if (otherDecl.type === DeclarationType.Class) {\n                const diag = this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.obscuredClassDeclaration().format({ name }),\n                    otherDecl.node.name\n                );\n                addPrimaryDeclInfo(diag);\n            } else if (otherDecl.type === DeclarationType.Function) {\n                const diag = this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.obscuredFunctionDeclaration().format({ name }),\n                    otherDecl.node.name\n                );\n                addPrimaryDeclInfo(diag);\n            } else if (otherDecl.type === DeclarationType.Parameter) {\n                if (otherDecl.node.name) {\n                    const diag = this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.obscuredParameterDeclaration().format({ name }),\n                        otherDecl.node.name\n                    );\n                    addPrimaryDeclInfo(diag);\n                }\n            } else if (otherDecl.type === DeclarationType.Variable) {\n                const primaryType = this._evaluator.getTypeForDeclaration(primaryDecl);\n\n                if (otherDecl.typeAnnotationNode) {\n                    if (otherDecl.node.nodeType === ParseNodeType.Name) {\n                        let duplicateIsOk = false;\n\n                        // If both declarations are variables, it's OK if they\n                        // both have the same declared type.\n                        if (primaryDecl.type === DeclarationType.Variable) {\n                            const otherType = this._evaluator.getTypeForDeclaration(otherDecl);\n                            if (primaryType && otherType && isTypeSame(primaryType, otherType)) {\n                                duplicateIsOk = true;\n                            }\n                        }\n\n                        if (!duplicateIsOk) {\n                            const diag = this._evaluator.addDiagnostic(\n                                this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                                DiagnosticRule.reportGeneralTypeIssues,\n                                Localizer.Diagnostic.obscuredVariableDeclaration().format({ name }),\n                                otherDecl.node\n                            );\n                            addPrimaryDeclInfo(diag);\n                        }\n                    }\n                } else if (primaryType && !isProperty(primaryType)) {\n                    if (primaryDecl.type === DeclarationType.Function || primaryDecl.type === DeclarationType.Class) {\n                        const diag = this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.obscuredVariableDeclaration().format({ name }),\n                            otherDecl.node\n                        );\n                        addPrimaryDeclInfo(diag);\n                    }\n                }\n            }\n        }\n    }\n\n    private _conditionallyReportUnusedSymbol(name: string, symbol: Symbol, scopeType: ScopeType) {\n        const accessedSymbolMap = this._fileInfo.accessedSymbolMap;\n        if (symbol.isIgnoredForProtocolMatch() || accessedSymbolMap.has(symbol.id)) {\n            return;\n        }\n\n        // A name of \"_\" means \"I know this symbol isn't used\", so\n        // don't report it as unused.\n        if (name === '_') {\n            return;\n        }\n\n        if (SymbolNameUtils.isDunderName(name)) {\n            return;\n        }\n\n        const decls = symbol.getDeclarations();\n        decls.forEach((decl) => {\n            this._conditionallyReportUnusedDeclaration(decl, this._isSymbolPrivate(name, scopeType));\n        });\n    }\n\n    private _conditionallyReportUnusedDeclaration(decl: Declaration, isPrivate: boolean) {\n        let diagnosticLevel: DiagnosticLevel;\n        let nameNode: NameNode | undefined;\n        let message: string | undefined;\n        let rule: DiagnosticRule | undefined;\n\n        switch (decl.type) {\n            case DeclarationType.Alias:\n                diagnosticLevel = this._fileInfo.diagnosticRuleSet.reportUnusedImport;\n                rule = DiagnosticRule.reportUnusedImport;\n                if (decl.node.nodeType === ParseNodeType.ImportAs) {\n                    if (decl.node.alias) {\n                        // Aliases in stub files are assumed to be re-exports.\n                        if (!this._fileInfo.isStubFile) {\n                            nameNode = decl.node.alias;\n                        }\n                    } else {\n                        // Handle multi-part names specially.\n                        const nameParts = decl.node.module.nameParts;\n                        if (nameParts.length > 0) {\n                            const multipartName = nameParts.map((np) => np.value).join('.');\n                            const textRange: TextRange = { start: nameParts[0].start, length: nameParts[0].length };\n                            TextRange.extend(textRange, nameParts[nameParts.length - 1]);\n                            this._fileInfo.diagnosticSink.addUnusedCodeWithTextRange(\n                                Localizer.Diagnostic.unaccessedSymbol().format({ name: multipartName }),\n                                textRange,\n                                { action: Commands.unusedImport }\n                            );\n\n                            this._evaluator.addDiagnosticForTextRange(\n                                this._fileInfo,\n                                this._fileInfo.diagnosticRuleSet.reportUnusedImport,\n                                DiagnosticRule.reportUnusedImport,\n                                Localizer.Diagnostic.unaccessedImport().format({ name: multipartName }),\n                                textRange\n                            );\n                            return;\n                        }\n                    }\n                } else if (decl.node.nodeType === ParseNodeType.ImportFromAs) {\n                    const importFrom = decl.node.parent as ImportFromNode;\n\n                    // If this is a stub file that is using the \"from A import B as C\" or \"from . import C\",\n                    // don't mark \"C\" as unaccessed because it's assumed to be re-exported.\n                    const isReexport = this._fileInfo.isStubFile && decl.node.alias !== undefined;\n\n                    // If this is a __future__ import, it's OK for the import symbol to be unaccessed.\n                    const isFuture =\n                        importFrom.module.nameParts.length === 1 &&\n                        importFrom.module.nameParts[0].value === '__future__';\n\n                    if (!isReexport && !isFuture) {\n                        nameNode = decl.node.alias || decl.node.name;\n                    }\n                }\n\n                if (nameNode) {\n                    message = Localizer.Diagnostic.unaccessedImport().format({ name: nameNode.value });\n                }\n                break;\n\n            case DeclarationType.Variable:\n            case DeclarationType.Parameter:\n                if (!isPrivate) {\n                    return;\n                }\n\n                if (this._fileInfo.isStubFile) {\n                    // Don't mark variables or parameters as unaccessed in\n                    // stub files. It's typical for them to be unaccessed here.\n                    return;\n                }\n\n                diagnosticLevel = this._fileInfo.diagnosticRuleSet.reportUnusedVariable;\n\n                if (decl.node.nodeType === ParseNodeType.Name) {\n                    nameNode = decl.node;\n                } else if (decl.node.nodeType === ParseNodeType.Parameter) {\n                    nameNode = decl.node.name;\n\n                    // Don't emit a diagnostic for unused parameters.\n                    diagnosticLevel = 'none';\n                }\n\n                if (nameNode) {\n                    rule = DiagnosticRule.reportUnusedVariable;\n                    message = Localizer.Diagnostic.unaccessedVariable().format({ name: nameNode.value });\n                }\n                break;\n\n            case DeclarationType.Class:\n                if (!isPrivate) {\n                    return;\n                }\n\n                // If a stub is exporting a private type, we'll assume that the author\n                // knows what he or she is doing.\n                if (this._fileInfo.isStubFile) {\n                    return;\n                }\n\n                diagnosticLevel = this._fileInfo.diagnosticRuleSet.reportUnusedClass;\n                nameNode = decl.node.name;\n                rule = DiagnosticRule.reportUnusedClass;\n                message = Localizer.Diagnostic.unaccessedClass().format({ name: nameNode.value });\n                break;\n\n            case DeclarationType.Function:\n                if (!isPrivate) {\n                    return;\n                }\n\n                // If a stub is exporting a private type, we'll assume that the author\n                // knows what he or she is doing.\n                if (this._fileInfo.isStubFile) {\n                    return;\n                }\n\n                diagnosticLevel = this._fileInfo.diagnosticRuleSet.reportUnusedFunction;\n                nameNode = decl.node.name;\n                rule = DiagnosticRule.reportUnusedFunction;\n                message = Localizer.Diagnostic.unaccessedFunction().format({ name: nameNode.value });\n                break;\n\n            default:\n                return;\n        }\n\n        if (nameNode && rule !== undefined && message) {\n            const action = rule === DiagnosticRule.reportUnusedImport ? { action: Commands.unusedImport } : undefined;\n            this._fileInfo.diagnosticSink.addUnusedCodeWithTextRange(\n                Localizer.Diagnostic.unaccessedSymbol().format({ name: nameNode.value }),\n                nameNode,\n                action\n            );\n            this._evaluator.addDiagnostic(diagnosticLevel, rule, message, nameNode);\n        }\n    }\n\n    // Validates that a call to isinstance or issubclass are necessary. This is a\n    // common source of programming errors. Also validates that arguments passed\n    // to isinstance or issubclass won't generate exceptions.\n    private _validateIsInstanceCall(node: CallNode) {\n        if (\n            node.leftExpression.nodeType !== ParseNodeType.Name ||\n            (node.leftExpression.value !== 'isinstance' && node.leftExpression.value !== 'issubclass') ||\n            node.arguments.length !== 2\n        ) {\n            return;\n        }\n\n        const callName = node.leftExpression.value;\n        const isInstanceCheck = callName === 'isinstance';\n\n        let arg0Type = this._evaluator.getType(node.arguments[0].valueExpression);\n        if (!arg0Type) {\n            return;\n        }\n        arg0Type = doForSubtypes(arg0Type, (subtype) => {\n            return transformPossibleRecursiveTypeAlias(transformTypeObjectToClass(subtype));\n        });\n\n        if (derivesFromAnyOrUnknown(arg0Type)) {\n            return;\n        }\n\n        const arg1Type = this._evaluator.getType(node.arguments[1].valueExpression);\n        if (!arg1Type) {\n            return;\n        }\n\n        // Create a helper function that determines whether the specified\n        // type is valid for the isinstance or issubclass call.\n        const isSupportedTypeForIsInstance = (type: Type) => {\n            let isSupported = true;\n\n            doForSubtypes(type, (subtype) => {\n                subtype = makeTypeVarsConcrete(subtype);\n\n                switch (subtype.category) {\n                    case TypeCategory.Any:\n                    case TypeCategory.Unknown:\n                    case TypeCategory.Unbound:\n                        break;\n\n                    case TypeCategory.Object:\n                        isSupported =\n                            ClassType.isBuiltIn(subtype.classType, 'type') ||\n                            ClassType.isBuiltIn(subtype.classType, 'Type');\n                        break;\n\n                    case TypeCategory.Class:\n                        // If it's a class, make sure that it has not been given explicit\n                        // type arguments. This will result in a TypeError exception.\n                        if (subtype.isTypeArgumentExplicit) {\n                            isSupported = false;\n                        }\n                        break;\n\n                    case TypeCategory.Function:\n                        isSupported = TypeBase.isInstantiable(subtype);\n                        break;\n\n                    default:\n                        isSupported = false;\n                        break;\n                }\n                return undefined;\n            });\n\n            return isSupported;\n        };\n\n        let isValidType = true;\n        if (isObject(arg1Type) && isTupleClass(arg1Type.classType) && arg1Type.classType.typeArguments) {\n            isValidType = !arg1Type.classType.typeArguments.some((typeArg) => !isSupportedTypeForIsInstance(typeArg));\n        } else {\n            isValidType = isSupportedTypeForIsInstance(arg1Type);\n        }\n\n        if (!isValidType) {\n            const diag = new DiagnosticAddendum();\n            diag.addMessage(Localizer.DiagnosticAddendum.typeVarNotAllowed());\n\n            this._evaluator.addDiagnostic(\n                this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                isInstanceCheck\n                    ? Localizer.Diagnostic.isInstanceInvalidType().format({\n                          type: this._evaluator.printType(arg1Type, /* expandTypeAlias */ false),\n                      }) + diag.getString()\n                    : Localizer.Diagnostic.isSubclassInvalidType().format({\n                          type: this._evaluator.printType(arg1Type, /* expandTypeAlias */ false),\n                      }) + diag.getString(),\n                node.arguments[1]\n            );\n        }\n\n        // If this call is within an assert statement, we won't check whether\n        // it's unnecessary.\n        let curNode: ParseNode | undefined = node;\n        while (curNode) {\n            if (curNode.nodeType === ParseNodeType.Assert) {\n                return;\n            }\n            curNode = curNode.parent;\n        }\n\n        // Several built-in classes don't follow the normal class hierarchy\n        // rules, so we'll avoid emitting false-positive diagnostics if these\n        // are used.\n        const nonstandardClassTypes = [\n            'FunctionType',\n            'LambdaType',\n            'BuiltinFunctionType',\n            'BuiltinMethodType',\n            'type',\n            'Type',\n        ];\n\n        const classTypeList: ClassType[] = [];\n        if (isClass(arg1Type)) {\n            classTypeList.push(arg1Type);\n            if (ClassType.isBuiltIn(arg1Type) && nonstandardClassTypes.some((name) => name === arg1Type.details.name)) {\n                return;\n            }\n        } else if (isObject(arg1Type)) {\n            // The isinstance and issubclass call supports a variation where the second\n            // parameter is a tuple of classes.\n            const objClass = arg1Type.classType;\n            if (isTupleClass(objClass) && objClass.typeArguments) {\n                objClass.typeArguments.forEach((typeArg) => {\n                    if (isClass(typeArg)) {\n                        classTypeList.push(typeArg);\n                    } else {\n                        return;\n                    }\n                });\n            }\n            if (ClassType.isBuiltIn(objClass) && nonstandardClassTypes.some((name) => name === objClass.details.name)) {\n                return;\n            }\n        } else {\n            return;\n        }\n\n        // According to PEP 544, protocol classes cannot be used as the right-hand\n        // argument to isinstance or issubclass unless they are annotated as\n        // \"runtime checkable\".\n        if (classTypeList.some((type) => ClassType.isProtocolClass(type) && !ClassType.isRuntimeCheckable(type))) {\n            this._evaluator.addError(\n                Localizer.Diagnostic.protocolUsedInCall().format({ name: callName }),\n                node.arguments[1].valueExpression\n            );\n        }\n\n        const finalizeFilteredTypeList = (types: Type[]): Type => {\n            return combineTypes(types);\n        };\n\n        const filterType = (varType: ClassType): Type[] => {\n            const filteredTypes: Type[] = [];\n\n            for (const filterType of classTypeList) {\n                const filterIsSuperclass = ClassType.isDerivedFrom(varType, filterType);\n                const filterIsSubclass = ClassType.isDerivedFrom(filterType, varType);\n\n                // Normally, a class should never be both a subclass and a\n                // superclass. However, this can happen if one of the classes\n                // derives from an unknown type. In this case, we'll add an\n                // unknown type into the filtered type list to avoid any\n                // false positives.\n                const isClassRelationshipIndeterminate =\n                    filterIsSubclass && filterIsSubclass && !ClassType.isSameGenericClass(varType, filterType);\n\n                if (isClassRelationshipIndeterminate) {\n                    filteredTypes.push(UnknownType.create());\n                } else if (filterIsSuperclass) {\n                    // If the variable type is a subclass of the isinstance\n                    // filter, we haven't learned anything new about the\n                    // variable type.\n                    filteredTypes.push(varType);\n                } else if (filterIsSubclass) {\n                    // If the variable type is a superclass of the isinstance\n                    // filter, we can narrow the type to the subclass.\n                    filteredTypes.push(filterType);\n                }\n            }\n\n            if (!isInstanceCheck) {\n                return filteredTypes;\n            }\n\n            // Make all class types into object types before returning them.\n            return filteredTypes.map((t) => (isClass(t) ? ObjectType.create(t) : t));\n        };\n\n        let filteredType: Type;\n        if (isInstanceCheck && isObject(arg0Type)) {\n            const remainingTypes = filterType(arg0Type.classType);\n            filteredType = finalizeFilteredTypeList(remainingTypes);\n        } else if (!isInstanceCheck && isClass(arg0Type)) {\n            const remainingTypes = filterType(arg0Type);\n            filteredType = finalizeFilteredTypeList(remainingTypes);\n        } else if (arg0Type.category === TypeCategory.Union) {\n            let remainingTypes: Type[] = [];\n            let foundAnyType = false;\n\n            arg0Type.subtypes.forEach((t) => {\n                if (isAnyOrUnknown(t)) {\n                    foundAnyType = true;\n                }\n\n                if (isInstanceCheck && isObject(t)) {\n                    remainingTypes = remainingTypes.concat(filterType(t.classType));\n                } else if (!isInstanceCheck && isClass(t)) {\n                    remainingTypes = remainingTypes.concat(filterType(t));\n                }\n            });\n\n            filteredType = finalizeFilteredTypeList(remainingTypes);\n\n            // If we found an any or unknown type, all bets are off.\n            if (foundAnyType) {\n                return;\n            }\n        } else {\n            return;\n        }\n\n        const getTestType = () => {\n            const objTypeList = classTypeList.map((t) => ObjectType.create(t));\n            return combineTypes(objTypeList);\n        };\n\n        if (isNever(filteredType)) {\n            this._evaluator.addDiagnostic(\n                this._fileInfo.diagnosticRuleSet.reportUnnecessaryIsInstance,\n                DiagnosticRule.reportUnnecessaryIsInstance,\n                isInstanceCheck\n                    ? Localizer.Diagnostic.unnecessaryIsInstanceNever().format({\n                          testType: this._evaluator.printType(arg0Type, /* expandTypeAlias */ false),\n                          classType: this._evaluator.printType(getTestType(), /* expandTypeAlias */ false),\n                      })\n                    : Localizer.Diagnostic.unnecessaryIsSubclassNever().format({\n                          testType: this._evaluator.printType(arg0Type, /* expandTypeAlias */ false),\n                          classType: this._evaluator.printType(getTestType(), /* expandTypeAlias */ false),\n                      }),\n                node\n            );\n        } else if (isTypeSame(filteredType, arg0Type)) {\n            this._evaluator.addDiagnostic(\n                this._fileInfo.diagnosticRuleSet.reportUnnecessaryIsInstance,\n                DiagnosticRule.reportUnnecessaryIsInstance,\n                isInstanceCheck\n                    ? Localizer.Diagnostic.unnecessaryIsInstanceAlways().format({\n                          testType: this._evaluator.printType(arg0Type, /* expandTypeAlias */ false),\n                          classType: this._evaluator.printType(getTestType(), /* expandTypeAlias */ false),\n                      })\n                    : Localizer.Diagnostic.unnecessaryIsSubclassAlways().format({\n                          testType: this._evaluator.printType(arg0Type, /* expandTypeAlias */ false),\n                          classType: this._evaluator.printType(getTestType(), /* expandTypeAlias */ false),\n                      }),\n                node\n            );\n        }\n    }\n\n    private _isSymbolPrivate(nameValue: string, scopeType: ScopeType) {\n        // All variables within the scope of a function or a list\n        // comprehension are considered private.\n        if (scopeType === ScopeType.Function || scopeType === ScopeType.ListComprehension) {\n            return true;\n        }\n\n        // See if the symbol is private.\n        if (SymbolNameUtils.isPrivateName(nameValue)) {\n            return true;\n        }\n\n        if (SymbolNameUtils.isProtectedName(nameValue)) {\n            // Protected names outside of a class scope are considered private.\n            const isClassScope = scopeType === ScopeType.Class;\n            return !isClassScope;\n        }\n\n        return false;\n    }\n\n    private _conditionallyReportPrivateUsage(node: NameNode) {\n        if (this._fileInfo.diagnosticRuleSet.reportPrivateUsage === 'none') {\n            return;\n        }\n\n        // Ignore privates in type stubs.\n        if (this._fileInfo.isStubFile) {\n            return;\n        }\n\n        const nameValue = node.value;\n        const isPrivateName = SymbolNameUtils.isPrivateName(nameValue);\n        const isProtectedName = SymbolNameUtils.isProtectedName(nameValue);\n\n        // If it's not a protected or private name, don't bother with\n        // any further checks.\n        if (!isPrivateName && !isProtectedName) {\n            return;\n        }\n\n        const declarations = this._evaluator.getDeclarationsForNameNode(node);\n\n        let primaryDeclaration =\n            declarations && declarations.length > 0 ? declarations[declarations.length - 1] : undefined;\n        if (!primaryDeclaration || primaryDeclaration.node === node) {\n            return;\n        }\n\n        // If this symbol is an import alias (i.e. it's a local name rather than the original\n        // imported name), skip the private check.\n        if (primaryDeclaration.type === DeclarationType.Alias && primaryDeclaration.usesLocalName) {\n            return;\n        }\n\n        primaryDeclaration = this._evaluator.resolveAliasDeclaration(primaryDeclaration, /* resolveLocalNames */ true);\n        if (!primaryDeclaration || primaryDeclaration.node === node) {\n            return;\n        }\n\n        let classOrModuleNode: ClassNode | ModuleNode | undefined;\n        if (primaryDeclaration.node) {\n            classOrModuleNode = ParseTreeUtils.getEnclosingClassOrModule(primaryDeclaration.node);\n        }\n\n        // If this is the name of a class, find the module or class that contains it rather\n        // than constraining the use of the class name within the class itself.\n        if (\n            primaryDeclaration.node &&\n            primaryDeclaration.node.parent &&\n            primaryDeclaration.node.parent === classOrModuleNode &&\n            classOrModuleNode.nodeType === ParseNodeType.Class\n        ) {\n            classOrModuleNode = ParseTreeUtils.getEnclosingClassOrModule(classOrModuleNode);\n        }\n\n        // If it's a class member, check whether it's a legal protected access.\n        let isProtectedAccess = false;\n        if (classOrModuleNode && classOrModuleNode.nodeType === ParseNodeType.Class) {\n            if (isProtectedName) {\n                const declClassTypeInfo = this._evaluator.getTypeOfClass(classOrModuleNode);\n                if (declClassTypeInfo && isClass(declClassTypeInfo.decoratedType)) {\n                    // Note that the access is to a protected class member.\n                    isProtectedAccess = true;\n\n                    const enclosingClassNode = ParseTreeUtils.getEnclosingClass(node);\n                    if (enclosingClassNode) {\n                        isProtectedAccess = true;\n                        const enclosingClassTypeInfo = this._evaluator.getTypeOfClass(enclosingClassNode);\n\n                        // If the referencing class is a subclass of the declaring class, it's\n                        // allowed to access a protected name.\n                        if (enclosingClassTypeInfo && isClass(enclosingClassTypeInfo.decoratedType)) {\n                            if (\n                                derivesFromClassRecursive(\n                                    enclosingClassTypeInfo.decoratedType,\n                                    declClassTypeInfo.decoratedType,\n                                    /* ignoreUnknown */ true\n                                )\n                            ) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (classOrModuleNode && !ParseTreeUtils.isNodeContainedWithin(node, classOrModuleNode)) {\n            if (isProtectedAccess) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportPrivateUsage,\n                    DiagnosticRule.reportPrivateUsage,\n                    Localizer.Diagnostic.protectedUsedOutsideOfClass().format({ name: nameValue }),\n                    node\n                );\n            } else {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportPrivateUsage,\n                    DiagnosticRule.reportPrivateUsage,\n                    classOrModuleNode.nodeType === ParseNodeType.Class\n                        ? Localizer.Diagnostic.privateUsedOutsideOfClass().format({ name: nameValue })\n                        : Localizer.Diagnostic.privateUsedOutsideOfModule().format({ name: nameValue }),\n                    node\n                );\n            }\n        }\n    }\n\n    // Verifies the rules specified in PEP 589 about TypedDict classes.\n    // They cannot have statements other than type annotations, doc\n    // strings, and \"pass\" statements or ellipses.\n    private _validateTypedDictClassSuite(suiteNode: SuiteNode) {\n        const emitBadStatementError = (node: ParseNode) => {\n            this._evaluator.addError(Localizer.Diagnostic.typedDictBadVar(), node);\n        };\n\n        suiteNode.statements.forEach((statement) => {\n            if (!AnalyzerNodeInfo.isCodeUnreachable(statement)) {\n                if (statement.nodeType === ParseNodeType.StatementList) {\n                    for (const substatement of statement.statements) {\n                        if (\n                            substatement.nodeType !== ParseNodeType.TypeAnnotation &&\n                            substatement.nodeType !== ParseNodeType.Ellipsis &&\n                            substatement.nodeType !== ParseNodeType.StringList &&\n                            substatement.nodeType !== ParseNodeType.Pass\n                        ) {\n                            emitBadStatementError(substatement);\n                        }\n                    }\n                } else {\n                    emitBadStatementError(statement);\n                }\n            }\n        });\n    }\n\n    private _validateFunctionReturn(node: FunctionNode, functionType: FunctionType) {\n        // Stub files are allowed not to return an actual value,\n        // so skip this if it's a stub file.\n        if (this._fileInfo.isStubFile) {\n            return;\n        }\n\n        const returnAnnotation = node.returnTypeAnnotation || node.functionAnnotationComment?.returnTypeAnnotation;\n        if (returnAnnotation) {\n            const functionNeverReturns = !this._evaluator.isAfterNodeReachable(node);\n            const implicitlyReturnsNone = this._evaluator.isAfterNodeReachable(node.suite);\n\n            let declaredReturnType = functionType.details.declaredReturnType;\n\n            if (declaredReturnType) {\n                if (isUnknown(declaredReturnType)) {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportUnknownVariableType,\n                        DiagnosticRule.reportUnknownVariableType,\n                        Localizer.Diagnostic.declaredReturnTypeUnknown(),\n                        returnAnnotation\n                    );\n                } else if (isPartlyUnknown(declaredReturnType)) {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportUnknownVariableType,\n                        DiagnosticRule.reportUnknownVariableType,\n                        Localizer.Diagnostic.declaredReturnTypePartiallyUnknown().format({\n                            returnType: this._evaluator.printType(declaredReturnType, /* expandTypeAlias */ true),\n                        }),\n                        returnAnnotation\n                    );\n                }\n\n                const diag = new DiagnosticAddendum();\n                if (this._containsContravariantTypeVar(declaredReturnType, node.id, diag)) {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.returnTypeContravariant() + diag.getString(),\n                        returnAnnotation\n                    );\n                }\n            }\n\n            // Wrap the declared type in a generator type if the function is a generator.\n            if (FunctionType.isGenerator(functionType)) {\n                declaredReturnType = getDeclaredGeneratorReturnType(functionType);\n            }\n\n            // The types of all return statement expressions were already checked\n            // against the declared type, but we need to verify the implicit None\n            // at the end of the function.\n            if (declaredReturnType && !functionNeverReturns && implicitlyReturnsNone) {\n                if (isNoReturnType(declaredReturnType)) {\n                    // If the function consists entirely of \"...\", assume that it's\n                    // an abstract method or a protocol method and don't require that\n                    // the return type matches.\n                    if (!ParseTreeUtils.isSuiteEmpty(node.suite)) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.noReturnReturnsNone(),\n                            returnAnnotation\n                        );\n                    }\n                } else if (!FunctionType.isAbstractMethod(functionType)) {\n                    // Make sure that the function doesn't implicitly return None if the declared\n                    // type doesn't allow it. Skip this check for abstract methods.\n                    const diagAddendum = new DiagnosticAddendum();\n\n                    // If the declared type isn't compatible with 'None', flag an error.\n                    if (!this._evaluator.canAssignType(declaredReturnType, NoneType.createInstance(), diagAddendum)) {\n                        // If the function consists entirely of \"...\", assume that it's\n                        // an abstract method or a protocol method and don't require that\n                        // the return type matches.\n                        if (!ParseTreeUtils.isSuiteEmpty(node.suite)) {\n                            this._evaluator.addDiagnostic(\n                                this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                                DiagnosticRule.reportGeneralTypeIssues,\n                                Localizer.Diagnostic.returnMissing().format({\n                                    returnType: this._evaluator.printType(\n                                        declaredReturnType,\n                                        /* expandTypeAlias */ false\n                                    ),\n                                }) + diagAddendum.getString(),\n                                returnAnnotation\n                            );\n                        }\n                    }\n                }\n            }\n        } else {\n            const inferredReturnType = this._evaluator.getFunctionInferredReturnType(functionType);\n            if (isUnknown(inferredReturnType)) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportUnknownParameterType,\n                    DiagnosticRule.reportUnknownParameterType,\n                    Localizer.Diagnostic.returnTypeUnknown(),\n                    node.name\n                );\n            } else if (isPartlyUnknown(inferredReturnType)) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportUnknownParameterType,\n                    DiagnosticRule.reportUnknownParameterType,\n                    Localizer.Diagnostic.returnTypePartiallyUnknown().format({\n                        returnType: this._evaluator.printType(inferredReturnType, /* expandTypeAlias */ true),\n                    }),\n                    node.name\n                );\n            }\n        }\n    }\n\n    private _containsContravariantTypeVar(type: Type, nodeId: number, diag: DiagnosticAddendum): boolean {\n        let isValid = true;\n\n        doForSubtypes(type, (subtype) => {\n            if (isTypeVar(subtype) && subtype.details.isContravariant) {\n                if (subtype.scopeId !== nodeId) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeVarIsContravariant().format({ name: subtype.details.name })\n                    );\n                    isValid = false;\n                }\n            }\n            return undefined;\n        });\n\n        return !isValid;\n    }\n\n    private _containsCovariantTypeVar(type: Type, nodeId: number, diag: DiagnosticAddendum): boolean {\n        let isValid = true;\n\n        doForSubtypes(type, (subtype) => {\n            if (isTypeVar(subtype) && subtype.details.isCovariant) {\n                if (subtype.scopeId !== nodeId) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeVarIsCovariant().format({ name: subtype.details.name })\n                    );\n                    isValid = false;\n                }\n            }\n            return undefined;\n        });\n\n        return !isValid;\n    }\n\n    // Validates that any overridden member variables are not marked\n    // as Final in parent classes.\n    private _validateFinalMemberOverrides(classType: ClassType) {\n        classType.details.fields.forEach((localSymbol, name) => {\n            const parentSymbol = lookUpClassMember(classType, name, ClassMemberLookupFlags.SkipOriginalClass);\n            if (parentSymbol && isClass(parentSymbol.classType) && isFinalVariable(parentSymbol.symbol)) {\n                const decl = localSymbol.getDeclarations()[0];\n                this._evaluator.addError(\n                    Localizer.Diagnostic.finalRedeclarationBySubclass().format({\n                        name,\n                        className: parentSymbol.classType.details.name,\n                    }),\n                    decl.node\n                );\n            }\n        });\n    }\n\n    // Validates that any overridden methods contain the same signatures\n    // as the original method. Also marks the class as abstract if one or\n    // more abstract methods are not overridden.\n    private _validateClassMethods(classType: ClassType) {\n        // Skip the overrides check for stub files. Many of the built-in\n        // typeshed stub files trigger this diagnostic.\n        if (!this._fileInfo.isStubFile) {\n            this._validateBaseClassOverrides(classType);\n        }\n    }\n\n    private _validateBaseClassOverrides(classType: ClassType) {\n        classType.details.fields.forEach((symbol, name) => {\n            // Don't check magic functions or private symbols.\n            if (\n                !symbol.isClassMember() ||\n                SymbolNameUtils.isDunderName(name) ||\n                SymbolNameUtils.isPrivateOrProtectedName(name)\n            ) {\n                return;\n            }\n\n            // Get the symbol type defined in this class.\n            const typeOfSymbol = this._evaluator.getEffectiveTypeOfSymbol(symbol);\n\n            // If the type of the override symbol isn't known, stop here.\n            if (isAnyOrUnknown(typeOfSymbol)) {\n                return;\n            }\n\n            // Get the symbol defined in the base class.\n            const baseClassAndSymbol = lookUpClassMember(classType, name, ClassMemberLookupFlags.SkipOriginalClass);\n\n            if (!baseClassAndSymbol || !isClass(baseClassAndSymbol.classType)) {\n                return;\n            }\n\n            // If the base class doesn't provide a type declaration, we won't bother\n            // proceeding with additional checks. Type inference is too inaccurate\n            // in this case, plus it would be very slow.\n            if (!baseClassAndSymbol.symbol.hasTypedDeclarations()) {\n                return;\n            }\n\n            const baseClassSymbolType = partiallySpecializeType(\n                this._evaluator.getEffectiveTypeOfSymbol(baseClassAndSymbol.symbol),\n                baseClassAndSymbol.classType\n            );\n            const diagAddendum = new DiagnosticAddendum();\n\n            if (\n                baseClassSymbolType.category === TypeCategory.Function ||\n                baseClassSymbolType.category === TypeCategory.OverloadedFunction\n            ) {\n                if (typeOfSymbol.category === TypeCategory.Function) {\n                    if (!this._evaluator.canOverrideMethod(baseClassSymbolType, typeOfSymbol, diagAddendum)) {\n                        const decl = getLastTypedDeclaredForSymbol(symbol);\n                        if (decl && decl.type === DeclarationType.Function) {\n                            const diag = this._evaluator.addDiagnostic(\n                                this._fileInfo.diagnosticRuleSet.reportIncompatibleMethodOverride,\n                                DiagnosticRule.reportIncompatibleMethodOverride,\n                                Localizer.Diagnostic.incompatibleMethodOverride().format({\n                                    name,\n                                    className: baseClassAndSymbol.classType.details.name,\n                                }) + diagAddendum.getString(),\n                                decl.node.name\n                            );\n\n                            const origDecl = getLastTypedDeclaredForSymbol(baseClassAndSymbol.symbol);\n                            if (diag && origDecl) {\n                                diag.addRelatedInfo(\n                                    Localizer.DiagnosticAddendum.overriddenMethod(),\n                                    origDecl.path,\n                                    origDecl.range\n                                );\n                            }\n                        }\n                    }\n\n                    if (baseClassSymbolType.category === TypeCategory.Function) {\n                        if (FunctionType.isFinal(baseClassSymbolType)) {\n                            const decl = getLastTypedDeclaredForSymbol(symbol);\n                            if (decl && decl.type === DeclarationType.Function) {\n                                const diag = this._evaluator.addError(\n                                    Localizer.Diagnostic.finalMethodOverride().format({\n                                        name,\n                                        className: baseClassAndSymbol.classType.details.name,\n                                    }),\n                                    decl.node.name\n                                );\n\n                                const origDecl = getLastTypedDeclaredForSymbol(baseClassAndSymbol.symbol);\n                                if (diag && origDecl) {\n                                    diag.addRelatedInfo(\n                                        Localizer.DiagnosticAddendum.finalMethod(),\n                                        origDecl.path,\n                                        origDecl.range\n                                    );\n                                }\n                            }\n                        }\n                    }\n                } else if (!isAnyOrUnknown(typeOfSymbol)) {\n                    const decls = symbol.getDeclarations();\n                    if (decls.length > 0) {\n                        const lastDecl = decls[decls.length - 1];\n                        const diag = this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportIncompatibleMethodOverride,\n                            DiagnosticRule.reportIncompatibleMethodOverride,\n                            Localizer.Diagnostic.methodOverridden().format({\n                                name,\n                                className: baseClassAndSymbol.classType.details.name,\n                            }) + diagAddendum.getString(),\n                            lastDecl.node\n                        );\n\n                        const origDecl = getLastTypedDeclaredForSymbol(baseClassAndSymbol.symbol);\n                        if (diag && origDecl) {\n                            diag.addRelatedInfo(\n                                Localizer.DiagnosticAddendum.overriddenMethod(),\n                                origDecl.path,\n                                origDecl.range\n                            );\n                        }\n                    }\n                }\n            } else {\n                // This check can be expensive, so don't perform it if the corresponding\n                // rule is disabled.\n                if (this._fileInfo.diagnosticRuleSet.reportIncompatibleVariableOverride !== 'none') {\n                    // Verify that the override type is assignable to (same or narrower than)\n                    // the declared type of the base symbol.\n                    if (!this._evaluator.canAssignType(baseClassSymbolType, typeOfSymbol, diagAddendum)) {\n                        const decls = symbol.getDeclarations();\n                        if (decls.length > 0) {\n                            const lastDecl = decls[decls.length - 1];\n                            if (lastDecl) {\n                                const diag = this._evaluator.addDiagnostic(\n                                    this._fileInfo.diagnosticRuleSet.reportIncompatibleVariableOverride,\n                                    DiagnosticRule.reportIncompatibleVariableOverride,\n                                    Localizer.Diagnostic.symbolOverridden().format({\n                                        name,\n                                        className: baseClassAndSymbol.classType.details.name,\n                                    }) + diagAddendum.getString(),\n                                    lastDecl.node\n                                );\n\n                                const origDecl = getLastTypedDeclaredForSymbol(baseClassAndSymbol.symbol);\n                                if (diag && origDecl) {\n                                    diag.addRelatedInfo(\n                                        Localizer.DiagnosticAddendum.overriddenSymbol(),\n                                        origDecl.path,\n                                        origDecl.range\n                                    );\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    // Performs checks on a function that is located within a class\n    // and has been determined not to be a property accessor.\n    private _validateMethod(node: FunctionNode, functionType: FunctionType, classNode: ClassNode) {\n        if (node.name && node.name.value === '__new__') {\n            // __new__ overrides should have a \"cls\" parameter.\n            if (\n                node.parameters.length === 0 ||\n                !node.parameters[0].name ||\n                (node.parameters[0].name.value !== 'cls' && node.parameters[0].name.value !== 'mcs')\n            ) {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportSelfClsParameterName,\n                    DiagnosticRule.reportSelfClsParameterName,\n                    Localizer.Diagnostic.newClsParam(),\n                    node.parameters.length > 0 ? node.parameters[0] : node.name\n                );\n            }\n        } else if (node.name && node.name.value === '__init_subclass__') {\n            // __init_subclass__ overrides should have a \"cls\" parameter.\n            if (node.parameters.length === 0 || !node.parameters[0].name || node.parameters[0].name.value !== 'cls') {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportSelfClsParameterName,\n                    DiagnosticRule.reportSelfClsParameterName,\n                    Localizer.Diagnostic.initSubclassClsParam(),\n                    node.parameters.length > 0 ? node.parameters[0] : node.name\n                );\n            }\n        } else if (node.name && node.name.value === '__class_getitem__') {\n            // __class_getitem__ overrides should have a \"cls\" parameter.\n            if (node.parameters.length === 0 || !node.parameters[0].name || node.parameters[0].name.value !== 'cls') {\n                this._evaluator.addDiagnostic(\n                    this._fileInfo.diagnosticRuleSet.reportSelfClsParameterName,\n                    DiagnosticRule.reportSelfClsParameterName,\n                    Localizer.Diagnostic.classGetItemClsParam(),\n                    node.parameters.length > 0 ? node.parameters[0] : node.name\n                );\n            }\n        } else if (FunctionType.isStaticMethod(functionType)) {\n            // Static methods should not have \"self\" or \"cls\" parameters.\n            if (node.parameters.length > 0 && node.parameters[0].name) {\n                const paramName = node.parameters[0].name.value;\n                if (paramName === 'self' || paramName === 'cls') {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportSelfClsParameterName,\n                        DiagnosticRule.reportSelfClsParameterName,\n                        Localizer.Diagnostic.staticClsSelfParam(),\n                        node.parameters[0].name\n                    );\n                }\n            }\n        } else if (FunctionType.isClassMethod(functionType)) {\n            let paramName = '';\n            if (node.parameters.length > 0 && node.parameters[0].name) {\n                paramName = node.parameters[0].name.value;\n            }\n            // Class methods should have a \"cls\" parameter. We'll exempt parameter\n            // names that start with an underscore since those are used in a few\n            // cases in the stdlib pyi files.\n            if (paramName !== 'cls') {\n                if (!this._fileInfo.isStubFile || (!paramName.startsWith('_') && paramName !== 'metacls')) {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportSelfClsParameterName,\n                        DiagnosticRule.reportSelfClsParameterName,\n                        Localizer.Diagnostic.classMethodClsParam(),\n                        node.parameters.length > 0 ? node.parameters[0] : node.name\n                    );\n                }\n            }\n        } else {\n            // The presence of a decorator can change the behavior, so we need\n            // to back off from this check if a decorator is present.\n            if (node.decorators.length === 0) {\n                let paramName = '';\n                let firstParamIsSimple = true;\n                if (node.parameters.length > 0) {\n                    if (node.parameters[0].name) {\n                        paramName = node.parameters[0].name.value;\n                    }\n\n                    if (node.parameters[0].category !== ParameterCategory.Simple) {\n                        firstParamIsSimple = false;\n                    }\n                }\n\n                // Instance methods should have a \"self\" parameter.\n                if (firstParamIsSimple && paramName !== 'self') {\n                    // Special-case metaclasses, which can use \"cls\".\n                    let isLegalMetaclassName = false;\n                    if (paramName === 'cls') {\n                        const classTypeInfo = this._evaluator.getTypeOfClass(classNode);\n                        const typeType = this._evaluator.getBuiltInType(classNode, 'type');\n                        if (typeType && isClass(typeType) && classTypeInfo && isClass(classTypeInfo.classType)) {\n                            if (\n                                derivesFromClassRecursive(classTypeInfo.classType, typeType, /* ignoreUnknown */ true)\n                            ) {\n                                isLegalMetaclassName = true;\n                            }\n                        }\n                    }\n\n                    // Some typeshed stubs use a name that starts with an underscore to designate\n                    // a parameter that cannot be positional.\n                    const isPrivateName = SymbolNameUtils.isPrivateOrProtectedName(paramName);\n\n                    if (!isLegalMetaclassName && !isPrivateName) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportSelfClsParameterName,\n                            DiagnosticRule.reportSelfClsParameterName,\n                            Localizer.Diagnostic.instanceMethodSelfParam(),\n                            node.parameters.length > 0 ? node.parameters[0] : node.name\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    private _validateYieldType(node: YieldNode | YieldFromNode, adjustedYieldType: Type) {\n        let declaredYieldType: Type | undefined;\n        const enclosingFunctionNode = ParseTreeUtils.getEnclosingFunction(node);\n\n        if (enclosingFunctionNode) {\n            const functionTypeResult = this._evaluator.getTypeOfFunction(enclosingFunctionNode);\n            if (functionTypeResult) {\n                assert(functionTypeResult.functionType.category === TypeCategory.Function);\n                const iterableType = this._evaluator.getBuiltInType(node, 'Iterable');\n                declaredYieldType = getDeclaredGeneratorYieldType(functionTypeResult.functionType, iterableType);\n            }\n        }\n\n        if (this._evaluator.isNodeReachable(node)) {\n            if (declaredYieldType) {\n                if (isNoReturnType(declaredYieldType)) {\n                    this._evaluator.addDiagnostic(\n                        this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.noReturnContainsYield(),\n                        node\n                    );\n                } else {\n                    const diagAddendum = new DiagnosticAddendum();\n                    if (!this._evaluator.canAssignType(declaredYieldType, adjustedYieldType, diagAddendum)) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.yieldTypeMismatch().format({\n                                exprType: this._evaluator.printType(adjustedYieldType, /* expandTypeAlias */ false),\n                                yieldType: this._evaluator.printType(declaredYieldType, /* expandTypeAlias */ false),\n                            }) + diagAddendum.getString(),\n                            node.expression || node\n                        );\n                    }\n                }\n            }\n        }\n    }\n\n    private _reportDuplicateImports() {\n        const importStatements = getTopLevelImports(this._moduleNode);\n\n        const importModuleMap = new Map<string, ImportAsNode>();\n\n        importStatements.orderedImports.forEach((importStatement) => {\n            if (importStatement.node.nodeType === ParseNodeType.ImportFrom) {\n                const symbolMap = new Map<string, ImportFromAsNode>();\n\n                importStatement.node.imports.forEach((importFromAs) => {\n                    // Ignore duplicates if they're aliased.\n                    if (!importFromAs.alias) {\n                        const prevImport = symbolMap.get(importFromAs.name.value);\n                        if (prevImport) {\n                            this._evaluator.addDiagnostic(\n                                this._fileInfo.diagnosticRuleSet.reportDuplicateImport,\n                                DiagnosticRule.reportDuplicateImport,\n                                Localizer.Diagnostic.duplicateImport().format({ importName: importFromAs.name.value }),\n                                importFromAs.name\n                            );\n                        } else {\n                            symbolMap.set(importFromAs.name.value, importFromAs);\n                        }\n                    }\n                });\n            } else if (importStatement.subnode) {\n                // Ignore duplicates if they're aliased.\n                if (!importStatement.subnode.alias) {\n                    const prevImport = importModuleMap.get(importStatement.moduleName);\n                    if (prevImport) {\n                        this._evaluator.addDiagnostic(\n                            this._fileInfo.diagnosticRuleSet.reportDuplicateImport,\n                            DiagnosticRule.reportDuplicateImport,\n                            Localizer.Diagnostic.duplicateImport().format({ importName: importStatement.moduleName }),\n                            importStatement.subnode\n                        );\n                    } else {\n                        importModuleMap.set(importStatement.moduleName, importStatement.subnode);\n                    }\n                }\n            }\n        });\n    }\n}\n","/*\n * circularDependency.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * A list of file paths that are part of a circular dependency\n * chain (i.e. a chain of imports). Since these are circular, there\n * no defined \"start\", but this module helps normalize the start\n * by picking the alphabetically-first module in the cycle.\n */\n\nexport class CircularDependency {\n    private _paths: string[] = [];\n\n    appendPath(path: string) {\n        this._paths.push(path);\n    }\n\n    getPaths() {\n        return this._paths;\n    }\n\n    normalizeOrder() {\n        // Find the path that is alphabetically first and reorder\n        // based on that.\n        let firstIndex = 0;\n        this._paths.forEach((path, index) => {\n            if (path < this._paths[firstIndex]) {\n                firstIndex = index;\n            }\n        });\n\n        if (firstIndex !== 0) {\n            this._paths = this._paths.slice(firstIndex).concat(this._paths.slice(0, firstIndex));\n        }\n    }\n\n    isEqual(circDependency: CircularDependency) {\n        if (circDependency._paths.length !== this._paths.length) {\n            return false;\n        }\n\n        for (let i = 0; i < this._paths.length; i++) {\n            if (this._paths[i] !== circDependency._paths[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","/*\n * codeFlow.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Data structures that track the code flow (or more accurately,\n * the inverse of code flow) starting with return statements and\n * working back to the entry. This allows us to work out the\n * types at each point of the code flow.\n *\n * This is largely based on the code flow engine in the\n * TypeScript compiler.\n */\n\nimport { assert } from '../common/debug';\nimport {\n    CallNode,\n    ExpressionNode,\n    ImportFromNode,\n    MemberAccessNode,\n    NameNode,\n    ParseNodeType,\n} from '../parser/parseNodes';\n\nexport enum FlowFlags {\n    Unreachable = 1 << 0, // Unreachable code\n    Start = 1 << 1, // Entry point\n    BranchLabel = 1 << 2, // Junction for forward control flow\n    LoopLabel = 1 << 3, // Junction for backward control flow\n    Assignment = 1 << 4, // Assignment statement\n    Unbind = 1 << 5, // Used with assignment to indicate target should be unbound\n    WildcardImport = 1 << 6, // For \"from X import *\" statements\n    TrueCondition = 1 << 7, // Condition known to be true\n    FalseCondition = 1 << 9, // Condition known to be false\n    Call = 1 << 10, // Call node\n    PreFinallyGate = 1 << 11, // Injected edge that links pre-finally label and pre-try flow\n    PostFinally = 1 << 12, // Injected edge that links post-finally flow with the rest of the graph\n    AssignmentAlias = 1 << 13, // Assigned symbol is aliased to another symbol with the same name\n}\n\nlet _nextFlowNodeId = 1;\n\nexport function getUniqueFlowNodeId() {\n    return _nextFlowNodeId++;\n}\n\nexport interface FlowNode {\n    flags: FlowFlags;\n    id: number;\n}\n\n// FlowLabel represents a junction with multiple possible\n// preceding control flows.\nexport interface FlowLabel extends FlowNode {\n    antecedents: FlowNode[];\n}\n\n// FlowAssignment represents a node that assigns a value.\nexport interface FlowAssignment extends FlowNode {\n    node: NameNode | MemberAccessNode;\n    antecedent: FlowNode;\n    targetSymbolId: number;\n}\n\n// FlowAssignmentAlias handles a case where a symbol\n// takes on the value of a symbol with the same name\n// but within an outer scope, such as when a variable\n// is references within a list comprehension iteration\n// expression before the result is assigned to a\n// local variable of the same name.\nexport interface FlowAssignmentAlias extends FlowNode {\n    antecedent: FlowNode;\n    targetSymbolId: number;\n    aliasSymbolId: number;\n}\n\n// Similar to FlowAssignment but used specifically for\n// wildcard \"from X import *\" statements.\nexport interface FlowWildcardImport extends FlowNode {\n    node: ImportFromNode;\n    names: string[];\n    antecedent: FlowNode;\n}\n\n// FlowCondition represents a condition that is known to\n// be true or false at the node's location in the control flow.\nexport interface FlowCondition extends FlowNode {\n    expression: ExpressionNode;\n    antecedent: FlowNode;\n}\n\n// Records a call, which may raise exceptions, thus affecting\n// the code flow and making subsequent code unreachable.\nexport interface FlowCall extends FlowNode {\n    node: CallNode;\n    antecedent: FlowNode;\n}\n\n// See comment in the visitTry method in binder.ts for a full\n// explanation of the FlowPreFinally and FlowPostFinally nodes.\nexport interface FlowPreFinallyGate extends FlowNode {\n    antecedent: FlowNode;\n    isGateClosed: boolean;\n}\n\nexport interface FlowPostFinally extends FlowNode {\n    antecedent: FlowNode;\n    preFinallyGate: FlowPreFinallyGate;\n}\n\nexport function isCodeFlowSupportedForReference(reference: ExpressionNode): boolean {\n    if (reference.nodeType === ParseNodeType.Name) {\n        return true;\n    }\n\n    if (reference.nodeType === ParseNodeType.MemberAccess) {\n        return isCodeFlowSupportedForReference(reference.leftExpression);\n    }\n\n    return false;\n}\n\nexport function createKeyForReference(reference: NameNode | MemberAccessNode): string {\n    let key;\n    if (reference.nodeType === ParseNodeType.Name) {\n        key = reference.value;\n    } else {\n        key = reference.memberName.value;\n        let leftNode = reference.leftExpression;\n        while (leftNode.nodeType === ParseNodeType.MemberAccess) {\n            key = leftNode.memberName.value + `.${key}`;\n            leftNode = leftNode.leftExpression;\n        }\n        assert(leftNode.nodeType === ParseNodeType.Name);\n        key = (leftNode as NameNode).value + `.${key}`;\n    }\n\n    return key;\n}\n","/*\n * commentUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Utility functions that parse comments and extract commands\n * or other directives from them.\n */\n\nimport {\n    cloneDiagnosticRuleSet,\n    DiagnosticLevel,\n    DiagnosticRuleSet,\n    getBooleanDiagnosticRules,\n    getDiagLevelDiagnosticRules,\n    getStrictDiagnosticRuleSet,\n    getStrictModeNotOverriddenRules,\n} from '../common/configOptions';\nimport { TextRangeCollection } from '../common/textRangeCollection';\nimport { Token } from '../parser/tokenizerTypes';\n\nexport function getFileLevelDirectives(\n    tokens: TextRangeCollection<Token>,\n    defaultRuleSet: DiagnosticRuleSet,\n    useStrict: boolean\n): DiagnosticRuleSet {\n    let ruleSet = cloneDiagnosticRuleSet(defaultRuleSet);\n\n    if (useStrict) {\n        _applyStrictRules(ruleSet);\n    }\n\n    for (let i = 0; i < tokens.count; i++) {\n        const token = tokens.getItemAt(i);\n        if (token.comments) {\n            for (const comment of token.comments) {\n                const value = comment.value.trim();\n\n                ruleSet = _parsePyrightComment(value, ruleSet);\n            }\n        }\n    }\n\n    return ruleSet;\n}\n\nfunction _applyStrictRules(ruleSet: DiagnosticRuleSet) {\n    const strictRuleSet = getStrictDiagnosticRuleSet();\n    const boolRuleNames = getBooleanDiagnosticRules();\n    const diagRuleNames = getDiagLevelDiagnosticRules();\n    const skipRuleNames = getStrictModeNotOverriddenRules();\n\n    // Enable the strict rules as appropriate.\n    for (const ruleName of boolRuleNames) {\n        if (skipRuleNames.find((r) => r === ruleName)) {\n            continue;\n        }\n\n        if ((strictRuleSet as any)[ruleName]) {\n            (ruleSet as any)[ruleName] = true;\n        }\n    }\n\n    for (const ruleName of diagRuleNames) {\n        if (skipRuleNames.find((r) => r === ruleName)) {\n            continue;\n        }\n\n        const strictValue: DiagnosticLevel = (strictRuleSet as any)[ruleName];\n        const prevValue: DiagnosticLevel = (ruleSet as any)[ruleName];\n\n        if (\n            strictValue === 'error' ||\n            (strictValue === 'warning' && prevValue !== 'error') ||\n            (strictValue === 'information' && prevValue !== 'error' && prevValue !== 'warning')\n        ) {\n            (ruleSet as any)[ruleName] = strictValue;\n        }\n    }\n}\n\nfunction _parsePyrightComment(commentValue: string, ruleSet: DiagnosticRuleSet) {\n    // Is this a pyright or mspython-specific comment?\n    const validPrefixes = ['pyright:', 'mspython:'];\n    const prefix = validPrefixes.find((p) => commentValue.startsWith(p));\n    if (prefix) {\n        const operands = commentValue.substr(prefix.length).trim();\n        const operandList = operands.split(',').map((s) => s.trim());\n\n        // If it contains a \"strict\" operand, replace the existing\n        // diagnostic rules with their strict counterparts.\n        if (operandList.some((s) => s === 'strict')) {\n            _applyStrictRules(ruleSet);\n        }\n\n        for (const operand of operandList) {\n            ruleSet = _parsePyrightOperand(operand, ruleSet);\n        }\n    }\n\n    return ruleSet;\n}\n\nfunction _parsePyrightOperand(operand: string, ruleSet: DiagnosticRuleSet) {\n    const operandSplit = operand.split('=').map((s) => s.trim());\n    if (operandSplit.length !== 2) {\n        return ruleSet;\n    }\n\n    const ruleName = operandSplit[0];\n    const boolRules = getBooleanDiagnosticRules();\n    const diagLevelRules = getDiagLevelDiagnosticRules();\n\n    if (diagLevelRules.find((r) => r === ruleName)) {\n        const diagLevelValue = _parseDiagLevel(operandSplit[1]);\n        if (diagLevelValue !== undefined) {\n            (ruleSet as any)[ruleName] = diagLevelValue;\n        }\n    } else if (boolRules.find((r) => r === ruleName)) {\n        const boolValue = _parseBoolSetting(operandSplit[1]);\n        if (boolValue !== undefined) {\n            (ruleSet as any)[ruleName] = boolValue;\n        }\n    }\n\n    return ruleSet;\n}\n\nfunction _parseDiagLevel(value: string): DiagnosticLevel | undefined {\n    switch (value) {\n        case 'false':\n        case 'none':\n            return 'none';\n\n        case 'true':\n        case 'error':\n            return 'error';\n\n        case 'warning':\n            return 'warning';\n\n        case 'information':\n            return 'information';\n\n        default:\n            return undefined;\n    }\n}\n\nfunction _parseBoolSetting(value: string): boolean | undefined {\n    if (value === 'false') {\n        return false;\n    } else if (value === 'true') {\n        return true;\n    }\n\n    return undefined;\n}\n","/*\n * declarationUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Collection of static methods that operate on declarations.\n */\n\nimport { ParseNodeType } from '../parser/parseNodes';\nimport { Declaration, DeclarationType } from './declaration';\n\nexport function hasTypeForDeclaration(declaration: Declaration): boolean {\n    switch (declaration.type) {\n        case DeclarationType.Intrinsic:\n        case DeclarationType.Class:\n        case DeclarationType.SpecialBuiltInClass:\n        case DeclarationType.Function:\n            return true;\n\n        case DeclarationType.Parameter: {\n            if (declaration.node.typeAnnotation || declaration.node.typeAnnotationComment) {\n                return true;\n            }\n            const parameterParent = declaration.node.parent;\n            if (parameterParent?.nodeType === ParseNodeType.Function) {\n                if (\n                    parameterParent.functionAnnotationComment &&\n                    !parameterParent.functionAnnotationComment.isParamListEllipsis\n                ) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        case DeclarationType.Variable:\n            return !!declaration.typeAnnotationNode;\n\n        case DeclarationType.Alias:\n            return false;\n    }\n}\n\nexport function areDeclarationsSame(decl1: Declaration, decl2: Declaration): boolean {\n    if (decl1.type !== decl2.type) {\n        return false;\n    }\n\n    if (decl1.path !== decl2.path) {\n        return false;\n    }\n\n    if (\n        decl1.range.start.line !== decl2.range.start.line ||\n        decl1.range.start.character !== decl2.range.start.character\n    ) {\n        return false;\n    }\n\n    // Alias declarations refer to the entire import statement.\n    // We need to further differentiate.\n    if (decl1.type === DeclarationType.Alias && decl2.type === DeclarationType.Alias) {\n        if (\n            decl1.symbolName !== decl2.symbolName ||\n            decl1.firstNamePart !== decl2.firstNamePart ||\n            decl1.usesLocalName !== decl2.usesLocalName\n        ) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isFinalVariableDeclaration(decl: Declaration) {\n    return decl.type === DeclarationType.Variable && !!decl.isFinal;\n}\n\nexport function isExplicitTypeAliasDeclaration(decl: Declaration) {\n    return decl.type === DeclarationType.Variable && !!decl.typeAliasAnnotation;\n}\n\nexport function isPossibleTypeAliasDeclaration(decl: Declaration) {\n    return decl.type === DeclarationType.Variable && !!decl.typeAliasName;\n}\n\nexport function getNameFromDeclaration(declaration: Declaration) {\n    switch (declaration.type) {\n        case DeclarationType.Alias:\n            return declaration.symbolName;\n\n        case DeclarationType.Class:\n        case DeclarationType.Function:\n            return declaration.node.name.value;\n\n        case DeclarationType.Parameter:\n            return declaration.node.name?.value;\n\n        case DeclarationType.Variable:\n            return declaration.node.nodeType === ParseNodeType.Name ? declaration.node.value : undefined;\n\n        case DeclarationType.Intrinsic:\n        case DeclarationType.SpecialBuiltInClass:\n            return undefined;\n    }\n\n    throw new Error(`Shouldn't reach here`);\n}\n","/*\n * docStringConversion.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Python doc string to markdown/plain text format conversion.\n */\n\n// Converts a docstring to markdown format.\n//\n// This does various things, including removing common indention, escaping\n// characters, handling code blocks, and more.\n//\n// This is a straight port of\n// https://github.com/microsoft/python-language-server/blob/master/src/LanguageServer/Impl/Documentation/DocstringConverter.cs\n//\n// The restructured npm library was evaluated, and while it worked well for\n// parsing valid input, it was going to be more difficult to handle invalid\n// RST input.\nexport function convertDocStringToMarkdown(docString: string): string {\n    return new DocStringConverter(docString).convert();\n}\n\n//  Converts a docstring to a plaintext, human readable form. This will\n//  first strip any common leading indention (like inspect.cleandoc),\n//  then remove duplicate empty/whitespace lines.\nexport function convertDocStringToPlainText(docString: string): string {\n    const lines = _splitDocString(docString);\n    const output: string[] = [];\n\n    for (const line of lines) {\n        const last = output.length > 0 ? output[output.length - 1] : undefined;\n        if (_isUndefinedOrWhitespace(line) && _isUndefinedOrWhitespace(last)) {\n            continue;\n        }\n\n        output.push(line);\n    }\n\n    return output.join('\\n').trimEnd();\n}\n\ninterface RegExpReplacement {\n    exp: RegExp;\n    replacement: string;\n}\n\n// Regular expressions for one match\nconst LeadingSpaceCountRegExp = /\\S|$/;\nconst CrLfRegExp = /\\r?\\n/;\nconst NonWhitespaceRegExp = /\\S/;\nconst TildaHeaderRegExp = /^\\s*~~~+$/;\nconst PlusHeaderRegExp = /^\\s*\\+\\+\\++$/;\nconst LeadingAsteriskRegExp = /^(\\s+\\* )(.*)$/;\nconst SpaceDotDotRegExp = /^\\s*\\.\\. /;\nconst DirectiveLikeRegExp = /^\\s*\\.\\.\\s+(\\w+)::\\s*(.*)$/;\nconst DoctestRegExp = / *>>> /;\nconst DirectivesExtraNewlineRegExp = /^\\s*:(param|arg|type|return|rtype|raise|except|var|ivar|cvar|copyright|license)/;\n\nconst PotentialHeaders: RegExpReplacement[] = [\n    { exp: /^\\s*=+(\\s+=+)+$/, replacement: '=' },\n    { exp: /^\\s*-+(\\s+-+)+$/, replacement: '-' },\n    { exp: /^\\s*~+(\\s+-+)+$/, replacement: '~' },\n    { exp: /^\\s*\\++(\\s+\\++)+$/, replacement: '+' },\n];\n\n// Regular expressions for replace all\nconst WhitespaceRegExp = /\\s/g;\nconst DoubleTickRegExp = /``/g;\nconst TabRegExp = /\\t/g;\nconst TildeRegExp = /~/g;\nconst PlusRegExp = /\\+/g;\nconst UnescapedMarkdownCharsRegExp = /(?<!\\\\)([_*~[\\]])/g;\n\nconst HtmlEscapes: RegExpReplacement[] = [\n    { exp: /</g, replacement: '&lt;' },\n    { exp: />/g, replacement: '&gt;' },\n];\n\n// http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#literal-blocks\nconst LiteralBlockEmptyRegExp = /^\\s*::$/;\nconst LiteralBlockReplacements: RegExpReplacement[] = [\n    { exp: /\\s+::$/g, replacement: '' },\n    { exp: /(\\S)\\s*::$/g, replacement: '$1:' },\n    // http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#interpreted-text\n    { exp: /:[\\w_\\-+:.]+:`/g, replacement: '`' },\n    { exp: /`:[\\w_\\-+:.]+:/g, replacement: '`' },\n];\n\n// Converter is a state machine, where the current state is a function which\n// will be run (and change the state again) until completion.\ntype State = () => void;\n\nclass DocStringConverter {\n    private _builder = '';\n    private _skipAppendEmptyLine = true;\n    private _insideInlineCode = false;\n    private _appendDirectiveBlock = false;\n\n    private _state: State;\n    private _stateStack: State[] = [];\n\n    private _lines: string[];\n    private _lineNum = 0;\n\n    private _blockIndent = 0;\n\n    constructor(input: string) {\n        this._state = this._parseText;\n        this._lines = _splitDocString(input);\n    }\n\n    convert(): string {\n        while (this._currentLineOrUndefined() !== undefined) {\n            const before = this._state;\n            const beforeLine = this._lineNum;\n\n            this._state();\n\n            // Parser must make progress; either the state or line number must change.\n            if (this._state === before && this._lineNum === beforeLine) {\n                break;\n            }\n        }\n\n        // Close out any outstanding code blocks.\n        if (\n            this._state === this._parseBacktickBlock ||\n            this._state === this._parseDocTest ||\n            this._state === this._parseLiteralBlock\n        ) {\n            this._trimOutputAndAppendLine('```');\n        } else if (this._insideInlineCode) {\n            this._trimOutputAndAppendLine('`', true);\n        }\n\n        return this._builder.trim();\n    }\n\n    private _eatLine() {\n        this._lineNum++;\n    }\n\n    private _currentLineOrUndefined(): string | undefined {\n        return this._lineNum < this._lines.length ? this._lines[this._lineNum] : undefined;\n    }\n\n    private _currentLine(): string {\n        return this._currentLineOrUndefined() || '';\n    }\n\n    private _currentIndent(): number {\n        return _countLeadingSpaces(this._currentLine());\n    }\n\n    private _lineAt(i: number): string | undefined {\n        return i < this._lines.length ? this._lines[i] : undefined;\n    }\n\n    private _nextBlockIndent(): number {\n        return _countLeadingSpaces(\n            this._lines.slice(this._lineNum + 1).find((v) => !_isUndefinedOrWhitespace(v)) || ''\n        );\n    }\n\n    private _currentLineIsOutsideBlock(): boolean {\n        return this._currentIndent() < this._blockIndent;\n    }\n\n    private _currentLineWithinBlock(): string {\n        return this._currentLine().substr(this._blockIndent);\n    }\n\n    private _pushAndSetState(next: State): void {\n        if (this._state === this._parseText) {\n            this._insideInlineCode = false;\n        }\n\n        this._stateStack.push(this._state);\n        this._state = next;\n    }\n\n    private _popState(): void {\n        this._state = this._stateStack.splice(0, 1)[0];\n\n        if (this._state === this._parseText) {\n            // Terminate inline code when leaving a block.\n            this._insideInlineCode = false;\n        }\n    }\n\n    private _parseText(): void {\n        if (_isUndefinedOrWhitespace(this._currentLineOrUndefined())) {\n            this._state = this._parseEmpty;\n            return;\n        }\n\n        if (this._beginBacktickBlock()) {\n            return;\n        }\n\n        if (this._beginLiteralBlock()) {\n            return;\n        }\n\n        if (this._beginDocTest()) {\n            return;\n        }\n\n        if (this._beginDirective()) {\n            return;\n        }\n\n        // TODO: Push into Google/Numpy style list parser.\n\n        this._appendTextLine(this._escapeHtml(this._currentLine()));\n        this._eatLine();\n    }\n\n    private _escapeHtml(line: string): string {\n        HtmlEscapes.forEach((escape) => {\n            line = line.replace(escape.exp, escape.replacement);\n        });\n\n        return line;\n    }\n\n    private _appendTextLine(line: string): void {\n        line = this._preprocessTextLine(line);\n\n        // Attempt to put directives lines into their own paragraphs.\n        // This should be removed once proper list-like parsing is written.\n        if (!this._insideInlineCode && DirectivesExtraNewlineRegExp.test(line)) {\n            this._appendLine();\n        }\n\n        const parts = line.split('`');\n\n        for (let i = 0; i < parts.length; i++) {\n            let part = parts[i];\n\n            if (i > 0) {\n                this._insideInlineCode = !this._insideInlineCode;\n                this._append('`');\n            }\n\n            if (this._insideInlineCode) {\n                this._append(part);\n                continue;\n            }\n\n            if (i === 0) {\n                // Only one part, and not inside code, so check header cases.\n                if (parts.length === 1) {\n                    // Handle weird separator lines which contain random spaces.\n                    for (const expReplacement of PotentialHeaders) {\n                        if (expReplacement.exp.test(part)) {\n                            part = part.replace(WhitespaceRegExp, expReplacement.replacement);\n                            break;\n                        }\n                    }\n\n                    // Replace ReST style ~~~ header to prevent it being interpreted as a code block\n                    // (an alternative in Markdown to triple backtick blocks).\n                    if (TildaHeaderRegExp.test(part)) {\n                        this._append(part.replace(TildeRegExp, '-'));\n                        continue;\n                    }\n\n                    // Replace +++ heading too.\n                    // TODO: Handle the rest of these, and the precedence order (which depends on the\n                    // order heading lines are seen, not what the line contains).\n                    // http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#sections\n                    if (PlusHeaderRegExp.test(part)) {\n                        this._append(part.replace(PlusRegExp, '-'));\n                        continue;\n                    }\n                }\n\n                // Don't strip away asterisk-based bullet point lists.\n                //\n                // TODO: Replace this with real list parsing. This may have\n                // false positives and cause random italics when the ReST list\n                // doesn't match Markdown's specification.\n                const match = LeadingAsteriskRegExp.exec(part);\n                if (match !== null && match.length === 3) {\n                    this._append(match[1]);\n                    part = match[2];\n                }\n            }\n\n            // TODO: Find a better way to handle this; the below breaks escaped\n            // characters which appear at the beginning or end of a line.\n            // Applying this only when i == 0 or i == parts.Length-1 may work.\n\n            // http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#hyperlink-references\n            // part = RegExp.Replace(part, @\"^_+\", \"\");\n            // http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#inline-internal-targets\n            // part = RegExp.Replace(part, @\"_+$\", \"\");\n\n            // TODO: Strip footnote/citation references.\n\n            // Escape _, *, and ~, but ignore things like \":param \\*\\*kwargs:\".\n            part = part.replace(UnescapedMarkdownCharsRegExp, '\\\\$1');\n\n            this._append(part);\n        }\n\n        // Go straight to the builder so that _appendLine doesn't think\n        // we're actually trying to insert an extra blank line and skip\n        // future whitespace. Empty line deduplication is already handled\n        // because Append is used above.\n        this._builder += '\\n';\n    }\n\n    private _preprocessTextLine(line: string): string {\n        // http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#literal-blocks\n        if (LiteralBlockEmptyRegExp.test(line)) {\n            return '';\n        }\n\n        LiteralBlockReplacements.forEach((item) => (line = line.replace(item.exp, item.replacement)));\n\n        line = line.replace(DoubleTickRegExp, '`');\n        return line;\n    }\n\n    private _parseEmpty(): void {\n        if (_isUndefinedOrWhitespace(this._currentLineOrUndefined())) {\n            this._appendLine();\n            this._eatLine();\n            return;\n        }\n\n        this._state = this._parseText;\n    }\n\n    private _beginMinIndentCodeBlock(state: State): void {\n        this._appendLine('```');\n        this._pushAndSetState(state);\n        this._blockIndent = this._currentIndent();\n    }\n\n    private _beginBacktickBlock(): boolean {\n        if (this._currentLine().startsWith('```')) {\n            this._appendLine(this._currentLine());\n            this._pushAndSetState(this._parseBacktickBlock);\n            this._eatLine();\n            return true;\n        }\n        return false;\n    }\n\n    private _parseBacktickBlock(): void {\n        if (this._currentLine().startsWith('```')) {\n            this._appendLine('```');\n            this._appendLine();\n            this._popState();\n        } else {\n            this._appendLine(this._currentLine());\n        }\n\n        this._eatLine();\n    }\n\n    private _beginDocTest(): boolean {\n        if (!DoctestRegExp.test(this._currentLine())) {\n            return false;\n        }\n\n        this._beginMinIndentCodeBlock(this._parseDocTest);\n        this._appendLine(this._currentLineWithinBlock());\n        this._eatLine();\n        return true;\n    }\n\n    private _parseDocTest(): void {\n        if (this._currentLineIsOutsideBlock() || _isUndefinedOrWhitespace(this._currentLine())) {\n            this._trimOutputAndAppendLine('```');\n            this._appendLine();\n            this._popState();\n            return;\n        }\n\n        this._appendLine(this._currentLineWithinBlock());\n        this._eatLine();\n    }\n\n    private _beginLiteralBlock(): boolean {\n        // The previous line must be empty.\n        const prev = this._lineAt(this._lineNum - 1);\n        if (prev === undefined) {\n            return false;\n        } else if (!_isUndefinedOrWhitespace(prev)) {\n            return false;\n        }\n\n        // Find the previous paragraph and check that it ends with ::\n        let i = this._lineNum - 2;\n        for (; i >= 0; i--) {\n            const line = this._lineAt(i);\n            if (_isUndefinedOrWhitespace(line)) {\n                continue;\n            }\n\n            // Safe to ignore whitespace after the :: because all lines have been trimRight'd.\n            if (line!.endsWith('::')) {\n                break;\n            }\n\n            return false;\n        }\n\n        if (i < 0) {\n            return false;\n        }\n\n        // Special case: allow one-liners at the same indent level.\n        if (this._currentIndent() === 0) {\n            this._appendLine('```');\n            this._pushAndSetState(this._parseLiteralBlockSingleLine);\n            return true;\n        }\n\n        this._beginMinIndentCodeBlock(this._parseLiteralBlock);\n        return true;\n    }\n\n    private _parseLiteralBlock(): void {\n        // Slightly different than doctest, wait until the first non-empty unindented line to exit.\n        if (_isUndefinedOrWhitespace(this._currentLineOrUndefined())) {\n            this._appendLine();\n            this._eatLine();\n            return;\n        }\n\n        if (this._currentLineIsOutsideBlock()) {\n            this._trimOutputAndAppendLine('```');\n            this._appendLine();\n            this._popState();\n            return;\n        }\n\n        this._appendLine(this._currentLineWithinBlock());\n        this._eatLine();\n    }\n\n    private _parseLiteralBlockSingleLine(): void {\n        this._appendLine(this._currentLine());\n        this._appendLine('```');\n        this._appendLine();\n        this._popState();\n        this._eatLine();\n    }\n\n    private _beginDirective(): boolean {\n        if (!SpaceDotDotRegExp.test(this._currentLine())) {\n            return false;\n        }\n\n        this._pushAndSetState(this._parseDirective);\n        this._blockIndent = this._nextBlockIndent();\n        this._appendDirectiveBlock = false;\n        return true;\n    }\n\n    private _parseDirective(): void {\n        // http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html#directives\n\n        const match = DirectiveLikeRegExp.exec(this._currentLine());\n        if (match !== null && match.length === 3) {\n            const directiveType = match[1];\n            const directive = match[2];\n\n            if (directiveType === 'class') {\n                this._appendDirectiveBlock = true;\n                this._appendLine();\n                this._appendLine('```');\n                this._appendLine(directive);\n                this._appendLine('```');\n                this._appendLine();\n            }\n        }\n\n        if (this._blockIndent === 0) {\n            // This is a one-liner directive, so pop back.\n            this._popState();\n        } else {\n            this._state = this._parseDirectiveBlock;\n        }\n\n        this._eatLine();\n    }\n\n    private _parseDirectiveBlock(): void {\n        if (!_isUndefinedOrWhitespace(this._currentLineOrUndefined()) && this._currentLineIsOutsideBlock()) {\n            this._popState();\n            return;\n        }\n\n        if (this._appendDirectiveBlock) {\n            // This is a bit of a hack. This just trims the text and appends it\n            // like top-level text, rather than doing actual indent-based recursion.\n            this._appendTextLine(this._currentLine().trimLeft());\n        }\n\n        this._eatLine();\n    }\n\n    private _appendLine(line?: string): void {\n        if (!_isUndefinedOrWhitespace(line)) {\n            this._builder += line + '\\n';\n            this._skipAppendEmptyLine = false;\n        } else if (!this._skipAppendEmptyLine) {\n            this._builder += '\\n';\n            this._skipAppendEmptyLine = true;\n        }\n    }\n\n    private _append(text: string): void {\n        this._builder += text;\n        this._skipAppendEmptyLine = false;\n    }\n\n    private _trimOutputAndAppendLine(line: string, noNewLine = false): void {\n        this._builder = this._builder.trimRight();\n        this._skipAppendEmptyLine = false;\n\n        if (!noNewLine) {\n            this._appendLine();\n        }\n\n        this._appendLine(line);\n    }\n}\n\nfunction _splitDocString(docstring: string): string[] {\n    // As done by inspect.cleandoc.\n    docstring = docstring.replace(TabRegExp, ' '.repeat(8));\n\n    let lines = docstring.split(CrLfRegExp).map((v) => v.trimRight());\n    if (lines.length > 0) {\n        let first: string | undefined = lines[0].trimLeft();\n        if (first === '') {\n            first = undefined;\n        } else {\n            lines.splice(0, 1);\n        }\n\n        lines = _stripLeadingWhitespace(lines);\n\n        if (first !== undefined) {\n            lines.splice(0, 0, first);\n        }\n    }\n\n    return lines;\n}\n\nfunction _stripLeadingWhitespace(lines: string[], trim?: number): string[] {\n    const amount = trim === undefined ? _largestTrim(lines) : trim;\n    return lines.map((line) => (amount > line.length ? '' : line.substr(amount)));\n}\n\nfunction _largestTrim(lines: string[]): number {\n    const nonEmptyLines = lines.filter((s) => !_isUndefinedOrWhitespace(s));\n    const counts = nonEmptyLines.map(_countLeadingSpaces);\n    const largest = counts.length > 0 ? Math.min(...counts) : 0;\n    return largest;\n}\n\nfunction _countLeadingSpaces(s: string): number {\n    return s.search(LeadingSpaceCountRegExp);\n}\n\nfunction _isUndefinedOrWhitespace(s: string | undefined): boolean {\n    return s === undefined || !NonWhitespaceRegExp.test(s);\n}\n","/*\n * docStringUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Static methods that format and parse doc strings based on\n * the rules specified in PEP 257\n * (https://www.python.org/dev/peps/pep-0257/).\n */\n\nexport function decodeDocString(rawString: string): string {\n    // Remove carriage returns and replace tabs.\n    const unescaped = rawString.replace(/\\r/g, '').replace(/\\t/g, '        ');\n\n    // Split into lines.\n    const lines = unescaped.split('\\n');\n\n    // Determine the max indent amount.\n    let leftSpacesToRemove = Number.MAX_VALUE;\n    lines.forEach((line, index) => {\n        // First line is special.\n        if (lines.length <= 1 || index > 0) {\n            const trimmed = line.trimLeft();\n            if (trimmed) {\n                leftSpacesToRemove = Math.min(leftSpacesToRemove, line.length - trimmed.length);\n            }\n        }\n    });\n\n    // Handle the case where there were only empty lines.\n    if (leftSpacesToRemove >= Number.MAX_VALUE) {\n        leftSpacesToRemove = 0;\n    }\n\n    // Trim the lines.\n    const trimmedLines: string[] = [];\n    lines.forEach((line, index) => {\n        if (index === 0) {\n            trimmedLines.push(line.trimRight());\n        } else {\n            trimmedLines.push(line.substr(leftSpacesToRemove).trimRight());\n        }\n    });\n\n    // Strip off leading and trailing blank lines.\n    while (trimmedLines.length > 0 && trimmedLines[0].length === 0) {\n        trimmedLines.shift();\n    }\n\n    while (trimmedLines.length > 0 && trimmedLines[trimmedLines.length - 1].length === 0) {\n        trimmedLines.pop();\n    }\n\n    return trimmedLines.join('\\n');\n}\n\nexport function extractParameterDocumentation(functionDocString: string, paramName: string): string | undefined {\n    if (!functionDocString || !paramName) {\n        return undefined;\n    }\n\n    // Python doesn't have a single standard for param documentation. There are three\n    // popular styles.\n    //\n    // 1. Epytext:\n    //      @param param1: description\n    // 2. reST:\n    //      :param param1: description\n    // 3. Google (variant 1):\n    //      Args:\n    //          param1: description\n    // 4. Google (variant 2):\n    //      Args:\n    //          param1 (type): description\n\n    const docStringLines = functionDocString.split('\\n');\n    for (const line of docStringLines) {\n        const trimmedLine = line.trim();\n\n        // Check for Epytext\n        let paramOffset = trimmedLine.indexOf('@param ' + paramName);\n        if (paramOffset >= 0) {\n            return trimmedLine.substr(paramOffset + 7);\n        }\n\n        // Check for reST format\n        paramOffset = trimmedLine.indexOf(':param ' + paramName);\n        if (paramOffset >= 0) {\n            return trimmedLine.substr(paramOffset + 7);\n        }\n\n        // Check for Google (variant 1) format\n        paramOffset = trimmedLine.indexOf(paramName + ': ');\n        if (paramOffset >= 0) {\n            return trimmedLine.substr(paramOffset);\n        }\n\n        // Check for Google (variant 1) format\n        paramOffset = trimmedLine.indexOf(paramName + ' (');\n        if (paramOffset >= 0) {\n            return trimmedLine.substr(paramOffset);\n        }\n    }\n\n    return undefined;\n}\n","/*\n * importResolver.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Provides the logic for resolving imports according to the\n * runtime rules of Python.\n */\n\nimport { ConfigOptions, ExecutionEnvironment } from '../common/configOptions';\nimport { FileSystem } from '../common/fileSystem';\nimport {\n    changeAnyExtension,\n    combinePathComponents,\n    combinePaths,\n    containsPath,\n    ensureTrailingDirectorySeparator,\n    getDirectoryPath,\n    getFileExtension,\n    getFileName,\n    getFileSystemEntries,\n    getPathComponents,\n    getRelativePathComponentsFromDirectory,\n    isDirectory,\n    isFile,\n    resolvePaths,\n    stripFileExtension,\n    stripTrailingDirectorySeparator,\n} from '../common/pathUtils';\nimport { getPythonVersionStrings } from '../common/pythonVersion';\nimport { equateStringsCaseInsensitive } from '../common/stringUtils';\nimport * as StringUtils from '../common/stringUtils';\nimport { isIdentifierChar, isIdentifierStartChar } from '../parser/characters';\nimport { ImplicitImport, ImportResult, ImportType } from './importResult';\nimport * as PythonPathUtils from './pythonPathUtils';\nimport { getPyTypedInfo, PyTypedInfo } from './pyTypedUtils';\nimport { isDunderName } from './symbolNameUtils';\n\nexport interface ImportedModuleDescriptor {\n    leadingDots: number;\n    nameParts: string[];\n    hasTrailingDot?: boolean;\n    importedSymbols: string[] | undefined;\n}\n\nexport interface ModuleNameAndType {\n    moduleName: string;\n    importType: ImportType;\n    isLocalTypingsFile: boolean;\n}\n\ntype CachedImportResults = Map<string, ImportResult>;\n\nconst supportedNativeLibExtensions = ['.pyd', '.so', '.dylib'];\nconst supportedFileExtensions = ['.py', '.pyi', ...supportedNativeLibExtensions];\nconst stubsSuffix = '-stubs';\n\n// Should we allow partial resolution for third-party packages? Some use tricks\n// to populate their package namespaces, so we might be able to partially resolve\n// a multi - part import(e.g. \"a.b.c\") but not fully resolve it. If this is set to\n// false, we will have some false positives. If it is set to true, we won't report\n// errors when these partial-resolutions fail.\nconst allowPartialResolutionForThirdPartyPackages = false;\n\nexport class ImportResolver {\n    protected _configOptions: ConfigOptions;\n    private _cachedPythonSearchPaths = new Map<string, string[]>();\n    private _cachedImportResults = new Map<string, CachedImportResults>();\n    private _cachedTypeshedStdLibPath: string | undefined;\n    private _cachedTypeshedThirdPartyPath: string | undefined;\n\n    readonly fileSystem: FileSystem;\n\n    constructor(fs: FileSystem, configOptions: ConfigOptions) {\n        this.fileSystem = fs;\n        this._configOptions = configOptions;\n    }\n\n    invalidateCache() {\n        this._cachedPythonSearchPaths = new Map<string, string[]>();\n        this._cachedImportResults = new Map<string, CachedImportResults>();\n    }\n\n    // Resolves the import and returns the path if it exists, otherwise\n    // returns undefined.\n    resolveImport(\n        sourceFilePath: string,\n        execEnv: ExecutionEnvironment,\n        moduleDescriptor: ImportedModuleDescriptor\n    ): ImportResult {\n        const importName = this._formatImportName(moduleDescriptor);\n        const importFailureInfo: string[] = [];\n\n        const notFoundResult: ImportResult = {\n            importName,\n            isRelative: false,\n            isImportFound: false,\n            isNamespacePackage: false,\n            isStubPackage: false,\n            importFailureInfo,\n            resolvedPaths: [],\n            importType: ImportType.Local,\n            isStubFile: false,\n            isNativeLib: false,\n            implicitImports: [],\n            filteredImplicitImports: [],\n            nonStubImportResult: undefined,\n        };\n\n        // Is it a relative import?\n        if (moduleDescriptor.leadingDots > 0) {\n            const relativeImport = this._resolveRelativeImport(\n                sourceFilePath,\n                moduleDescriptor,\n                importName,\n                importFailureInfo\n            );\n\n            if (relativeImport) {\n                relativeImport.isRelative = true;\n                return relativeImport;\n            }\n        } else {\n            // Is it already cached?\n            const cachedResults = this._lookUpResultsInCache(execEnv, importName, moduleDescriptor.importedSymbols);\n            if (cachedResults) {\n                // In most cases, we can simply return a cached entry. However, there are cases\n                // where the cached entry refers to a previously-resolved namespace package\n                // that does not resolve the symbols specified in the module descriptor.\n                // In this case, we will ignore the cached value and run the full import\n                // resolution again to try to find a package that resolves the import.\n                const isUnresolvedNamespace =\n                    cachedResults.isImportFound &&\n                    cachedResults.isNamespacePackage &&\n                    !this._isNamespacePackageResolved(moduleDescriptor, cachedResults.implicitImports);\n\n                if (!isUnresolvedNamespace) {\n                    return cachedResults;\n                }\n            }\n\n            const bestImport = this._resolveBestAbsoluteImport(sourceFilePath, execEnv, moduleDescriptor, true);\n            if (bestImport) {\n                if (bestImport.isStubFile) {\n                    bestImport.nonStubImportResult =\n                        this._resolveBestAbsoluteImport(sourceFilePath, execEnv, moduleDescriptor, false) ||\n                        notFoundResult;\n                }\n                return this.addResultsToCache(execEnv, importName, bestImport, moduleDescriptor.importedSymbols);\n            }\n        }\n\n        return this.addResultsToCache(execEnv, importName, notFoundResult, undefined);\n    }\n\n    getCompletionSuggestions(\n        sourceFilePath: string,\n        execEnv: ExecutionEnvironment,\n        moduleDescriptor: ImportedModuleDescriptor,\n        similarityLimit: number\n    ): string[] {\n        const importFailureInfo: string[] = [];\n        const suggestions: string[] = [];\n\n        // Is it a relative import?\n        if (moduleDescriptor.leadingDots > 0) {\n            this._getCompletionSuggestionsRelative(sourceFilePath, moduleDescriptor, suggestions, similarityLimit);\n        } else {\n            // First check for a typeshed file.\n            if (moduleDescriptor.nameParts.length > 0) {\n                this._getCompletionSuggestionsTypeshedPath(\n                    execEnv,\n                    moduleDescriptor,\n                    true,\n                    suggestions,\n                    similarityLimit\n                );\n            }\n\n            // Look for it in the root directory of the execution environment.\n            this._getCompletionSuggestionsAbsolute(execEnv.root, moduleDescriptor, suggestions, similarityLimit);\n\n            for (const extraPath of execEnv.extraPaths) {\n                this._getCompletionSuggestionsAbsolute(extraPath, moduleDescriptor, suggestions, similarityLimit);\n            }\n\n            // Check for a typings file.\n            if (this._configOptions.stubPath) {\n                this._getCompletionSuggestionsAbsolute(\n                    this._configOptions.stubPath,\n                    moduleDescriptor,\n                    suggestions,\n                    similarityLimit\n                );\n            }\n\n            // Check for a typeshed file.\n            this._getCompletionSuggestionsTypeshedPath(execEnv, moduleDescriptor, false, suggestions, similarityLimit);\n\n            // Look for the import in the list of third-party packages.\n            const pythonSearchPaths = this._getPythonSearchPaths(execEnv, importFailureInfo);\n            for (const searchPath of pythonSearchPaths) {\n                this._getCompletionSuggestionsAbsolute(searchPath, moduleDescriptor, suggestions, similarityLimit);\n            }\n        }\n\n        return suggestions;\n    }\n\n    // Returns the implementation file(s) for the given stub file.\n    getSourceFilesFromStub(stubFilePath: string, execEnv: ExecutionEnvironment, _mapCompiled: boolean): string[] {\n        const sourceFilePaths: string[] = [];\n\n        // When ImportResolver resolves an import to a stub file, a second resolve is done\n        // ignoring stub files, which gives us an approximation of where the implementation\n        // for that stub is located.\n        this._cachedImportResults.forEach((map, env) => {\n            map.forEach((result) => {\n                if (result.isStubFile && result.isImportFound && result.nonStubImportResult) {\n                    if (result.resolvedPaths.some((f) => f === stubFilePath)) {\n                        if (result.nonStubImportResult.isImportFound) {\n                            const nonEmptyPaths = result.nonStubImportResult.resolvedPaths.filter((p) =>\n                                p.endsWith('.py')\n                            );\n                            sourceFilePaths.push(...nonEmptyPaths);\n                        }\n                    }\n                }\n            });\n        });\n\n        // We haven't seen an import of that stub, attempt to find the source\n        // in some other ways.\n        if (sourceFilePaths.length === 0) {\n            // Simple case where the stub and source files are next to each other.\n            const sourceFilePath = changeAnyExtension(stubFilePath, '.py');\n            if (this.fileSystem.existsSync(sourceFilePath)) {\n                sourceFilePaths.push(sourceFilePath);\n            }\n        }\n\n        if (sourceFilePaths.length === 0) {\n            // The stub and the source file may have the same name, but be located\n            // in different folder hierarchies.\n            // Example:\n            // <stubPath>\\package\\module.pyi\n            // <site-packages>\\package\\module.py\n            // We get the relative path(s) of the stub to its import root(s),\n            // in theory there can be more than one, then look for source\n            // files in all the import roots using the same relative path(s).\n            const importRootPaths = this.getImportRoots(execEnv, /* useTypeshedVersionedFolders */ true);\n\n            const relativeStubPaths: string[] = [];\n            for (const importRootPath of importRootPaths) {\n                if (containsPath(importRootPath, stubFilePath, true)) {\n                    const parts = getRelativePathComponentsFromDirectory(importRootPath, stubFilePath, true);\n\n                    // Note that relative paths have an empty parts[0]\n                    if (parts.length > 1) {\n                        // Handle the case where the symbol was resolved to a stubs package\n                        // rather than the real package. We'll strip off the \"-stubs\" suffix\n                        // in this case.\n                        if (parts[1].endsWith(stubsSuffix)) {\n                            parts[1] = parts[1].substr(0, parts[1].length - stubsSuffix.length);\n                        }\n\n                        const relativeStubPath = combinePathComponents(parts);\n                        if (relativeStubPath) {\n                            relativeStubPaths.push(relativeStubPath);\n                        }\n                    }\n                }\n            }\n\n            for (const relativeStubPath of relativeStubPaths) {\n                for (const importRootPath of importRootPaths) {\n                    const absoluteStubPath = resolvePaths(importRootPath, relativeStubPath);\n                    let absoluteSourcePath = changeAnyExtension(absoluteStubPath, '.py');\n                    if (this.fileSystem.existsSync(absoluteSourcePath)) {\n                        sourceFilePaths.push(absoluteSourcePath);\n                    } else {\n                        const filePathWithoutExtension = stripFileExtension(absoluteSourcePath);\n\n                        if (filePathWithoutExtension.endsWith('__init__')) {\n                            // Did not match: <root>/package/__init__.py\n                            // Try equivalent: <root>/package.py\n                            absoluteSourcePath =\n                                filePathWithoutExtension.substr(0, filePathWithoutExtension.length - 9) + '.py';\n                            if (this.fileSystem.existsSync(absoluteSourcePath)) {\n                                sourceFilePaths.push(absoluteSourcePath);\n                            }\n                        } else {\n                            // Did not match: <root>/package.py\n                            // Try equivalent: <root>/package/__init__.py\n                            absoluteSourcePath = combinePaths(filePathWithoutExtension, '__init__.py');\n                            if (this.fileSystem.existsSync(absoluteSourcePath)) {\n                                sourceFilePaths.push(absoluteSourcePath);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return sourceFilePaths;\n    }\n\n    // Returns the module name (of the form X.Y.Z) that needs to be imported\n    // from the current context to access the module with the specified file path.\n    // In a sense, it's performing the inverse of resolveImport.\n    getModuleNameForImport(filePath: string, execEnv: ExecutionEnvironment): ModuleNameAndType {\n        let moduleName: string | undefined;\n        let importType = ImportType.BuiltIn;\n        let isLocalTypingsFile = false;\n\n        const importFailureInfo: string[] = [];\n\n        // Is this a stdlib typeshed path?\n        const stdLibTypeshedPath = this._getTypeshedPath(true, execEnv, importFailureInfo);\n        if (stdLibTypeshedPath) {\n            moduleName = this._getModuleNameFromPath(stdLibTypeshedPath, filePath, true);\n            if (moduleName) {\n                return { moduleName, importType, isLocalTypingsFile };\n            }\n        }\n\n        // Look for it in the root directory of the execution environment.\n        moduleName = this._getModuleNameFromPath(execEnv.root, filePath);\n\n        for (const extraPath of execEnv.extraPaths) {\n            const candidateModuleName = this._getModuleNameFromPath(extraPath, filePath);\n\n            // Does this candidate look better than the previous best module name?\n            // We'll always try to use the shortest version.\n            if (!moduleName || (candidateModuleName && candidateModuleName.length < moduleName.length)) {\n                moduleName = candidateModuleName;\n                importType = ImportType.Local;\n            }\n        }\n\n        // Check for a typings file.\n        if (this._configOptions.stubPath) {\n            const candidateModuleName = this._getModuleNameFromPath(this._configOptions.stubPath, filePath);\n\n            // Does this candidate look better than the previous best module name?\n            // We'll always try to use the shortest version.\n            if (!moduleName || (candidateModuleName && candidateModuleName.length < moduleName.length)) {\n                moduleName = candidateModuleName;\n\n                // Treat the typings path as a local import so errors are reported for it.\n                importType = ImportType.Local;\n                isLocalTypingsFile = true;\n            }\n        }\n\n        // Check for a typeshed file.\n        const thirdPartyTypeshedPath = this._getTypeshedPath(false, execEnv, importFailureInfo);\n        if (thirdPartyTypeshedPath) {\n            const candidateModuleName = this._getModuleNameFromPath(thirdPartyTypeshedPath, filePath, true);\n\n            // Does this candidate look better than the previous best module name?\n            // We'll always try to use the shortest version.\n            if (!moduleName || (candidateModuleName && candidateModuleName.length < moduleName.length)) {\n                moduleName = candidateModuleName;\n                importType = ImportType.ThirdParty;\n            }\n        }\n\n        const thirdPartyTypeshedPathEx = this.getTypeshedPathEx(execEnv, importFailureInfo);\n        if (thirdPartyTypeshedPathEx) {\n            const candidateModuleName = this._getModuleNameFromPath(thirdPartyTypeshedPathEx, filePath);\n\n            // Does this candidate look better than the previous best module name?\n            // We'll always try to use the shortest version.\n            if (!moduleName || (candidateModuleName && candidateModuleName.length < moduleName.length)) {\n                moduleName = candidateModuleName;\n                importType = ImportType.ThirdParty;\n            }\n        }\n\n        // Look for the import in the list of third-party packages.\n        const pythonSearchPaths = this._getPythonSearchPaths(execEnv, importFailureInfo);\n        for (const searchPath of pythonSearchPaths) {\n            const candidateModuleName = this._getModuleNameFromPath(searchPath, filePath);\n\n            // Does this candidate look better than the previous best module name?\n            // We'll always try to use the shortest version.\n            if (!moduleName || (candidateModuleName && candidateModuleName.length < moduleName.length)) {\n                moduleName = candidateModuleName;\n                importType = ImportType.ThirdParty;\n            }\n        }\n\n        if (moduleName) {\n            return { moduleName, importType, isLocalTypingsFile };\n        }\n\n        // We didn't find any module name.\n        return { moduleName: '', importType: ImportType.Local, isLocalTypingsFile };\n    }\n\n    getTypeshedStdLibPath(execEnv: ExecutionEnvironment) {\n        const unused: string[] = [];\n        return this._getTypeshedPath(true, execEnv, unused);\n    }\n\n    getImportRoots(execEnv: ExecutionEnvironment, useTypeshedVersionedFolders: boolean) {\n        const importFailureInfo: string[] = [];\n        const roots = [];\n\n        const versionFolders = getPythonVersionStrings(execEnv.pythonVersion);\n        const stdTypeshed = this._getTypeshedPath(true, execEnv, importFailureInfo);\n        if (stdTypeshed) {\n            if (useTypeshedVersionedFolders) {\n                for (const version of versionFolders) {\n                    const path = combinePaths(stdTypeshed, version);\n                    if (this.fileSystem.existsSync(path)) {\n                        roots.push(path);\n                    }\n                }\n            } else {\n                roots.push(stdTypeshed);\n            }\n        }\n\n        roots.push(execEnv.root);\n        roots.push(...execEnv.extraPaths);\n\n        if (this._configOptions.stubPath) {\n            roots.push(this._configOptions.stubPath);\n        }\n\n        const typeshedPath = this._getTypeshedPath(false, execEnv, importFailureInfo);\n        if (typeshedPath) {\n            if (useTypeshedVersionedFolders) {\n                for (const version of versionFolders) {\n                    const path = combinePaths(typeshedPath, version);\n                    if (this.fileSystem.existsSync(path)) {\n                        roots.push(path);\n                    }\n                }\n            } else {\n                roots.push(typeshedPath);\n            }\n        }\n\n        const typeshedPathEx = this.getTypeshedPathEx(execEnv, importFailureInfo);\n        if (typeshedPathEx) {\n            roots.push(typeshedPathEx);\n        }\n\n        const pythonSearchPaths = this._getPythonSearchPaths(execEnv, importFailureInfo);\n        if (pythonSearchPaths.length > 0) {\n            roots.push(...pythonSearchPaths);\n        }\n\n        return roots;\n    }\n\n    protected addResultsToCache(\n        execEnv: ExecutionEnvironment,\n        importName: string,\n        importResult: ImportResult,\n        importedSymbols: string[] | undefined\n    ) {\n        let cacheForExecEnv = this._cachedImportResults.get(execEnv.root);\n        if (!cacheForExecEnv) {\n            cacheForExecEnv = new Map<string, ImportResult>();\n            this._cachedImportResults.set(execEnv.root, cacheForExecEnv);\n        }\n\n        cacheForExecEnv.set(importName, importResult);\n\n        return this._filterImplicitImports(importResult, importedSymbols);\n    }\n\n    // Follows import resolution algorithm defined in PEP-420:\n    // https://www.python.org/dev/peps/pep-0420/\n    protected resolveAbsoluteImport(\n        rootPath: string,\n        moduleDescriptor: ImportedModuleDescriptor,\n        importName: string,\n        importFailureInfo: string[],\n        allowPartial = false,\n        allowNativeLib = false,\n        useStubPackage = false,\n        allowPyi = true\n    ): ImportResult {\n        importFailureInfo.push(`Attempting to resolve using root path '${rootPath}'`);\n\n        // Starting at the specified path, walk the file system to find the\n        // specified module.\n        const resolvedPaths: string[] = [];\n        let dirPath = rootPath;\n        let isNamespacePackage = false;\n        let isStubPackage = false;\n        let isStubFile = false;\n        let isNativeLib = false;\n        let implicitImports: ImplicitImport[] = [];\n        let packageDirectory: string | undefined;\n\n        // Handle the \"from . import XXX\" case.\n        if (moduleDescriptor.nameParts.length === 0) {\n            const fileNameWithoutExtension = '__init__';\n            const pyFilePath = combinePaths(dirPath, fileNameWithoutExtension + '.py');\n            const pyiFilePath = combinePaths(dirPath, fileNameWithoutExtension + '.pyi');\n\n            if (allowPyi && this.fileSystem.existsSync(pyiFilePath) && isFile(this.fileSystem, pyiFilePath)) {\n                importFailureInfo.push(`Resolved import with file '${pyiFilePath}'`);\n                resolvedPaths.push(pyiFilePath);\n                isStubFile = true;\n            } else if (this.fileSystem.existsSync(pyFilePath) && isFile(this.fileSystem, pyFilePath)) {\n                importFailureInfo.push(`Resolved import with file '${pyFilePath}'`);\n                resolvedPaths.push(pyFilePath);\n            } else {\n                importFailureInfo.push(`Partially resolved import with directory '${dirPath}'`);\n                resolvedPaths.push('');\n                isNamespacePackage = true;\n            }\n\n            implicitImports = this._findImplicitImports(dirPath, [pyFilePath, pyiFilePath]);\n        } else {\n            for (let i = 0; i < moduleDescriptor.nameParts.length; i++) {\n                const isFirstPart = i === 0;\n                const isLastPart = i === moduleDescriptor.nameParts.length - 1;\n                dirPath = combinePaths(dirPath, moduleDescriptor.nameParts[i]);\n\n                if (useStubPackage && isFirstPart) {\n                    dirPath += stubsSuffix;\n                    isStubPackage = true;\n                }\n\n                const foundDirectory = this.fileSystem.existsSync(dirPath) && isDirectory(this.fileSystem, dirPath);\n\n                if (foundDirectory) {\n                    if (isFirstPart) {\n                        packageDirectory = dirPath;\n                    }\n\n                    if (!isLastPart) {\n                        // We are not at the last part, and we found a directory,\n                        // so continue to look for the next part.\n                        resolvedPaths.push('');\n                        continue;\n                    }\n\n                    // See if we can find an __init__.py[i] in this directory.\n                    const fileNameWithoutExtension = '__init__';\n                    const pyFilePath = combinePaths(dirPath, fileNameWithoutExtension + '.py');\n                    const pyiFilePath = combinePaths(dirPath, fileNameWithoutExtension + '.pyi');\n                    let foundInit = false;\n\n                    if (allowPyi && this.fileSystem.existsSync(pyiFilePath) && isFile(this.fileSystem, pyiFilePath)) {\n                        importFailureInfo.push(`Resolved import with file '${pyiFilePath}'`);\n                        resolvedPaths.push(pyiFilePath);\n                        if (isLastPart) {\n                            isStubFile = true;\n                        }\n                        foundInit = true;\n                    } else if (this.fileSystem.existsSync(pyFilePath) && isFile(this.fileSystem, pyFilePath)) {\n                        importFailureInfo.push(`Resolved import with file '${pyFilePath}'`);\n                        resolvedPaths.push(pyFilePath);\n                        foundInit = true;\n                    }\n\n                    if (foundInit) {\n                        implicitImports = this._findImplicitImports(dirPath, [pyFilePath, pyiFilePath]);\n                        break;\n                    }\n                }\n\n                // We weren't able to find a directory or we found a directory with\n                // no __init__.py[i] file. See if we can find a \".py\" or \".pyi\" file\n                // with this name.\n                let fileDirectory = stripTrailingDirectorySeparator(dirPath);\n                const fileNameWithoutExtension = getFileName(fileDirectory);\n                fileDirectory = getDirectoryPath(fileDirectory);\n                const pyFilePath = combinePaths(fileDirectory, fileNameWithoutExtension + '.py');\n                const pyiFilePath = combinePaths(fileDirectory, fileNameWithoutExtension + '.pyi');\n\n                if (allowPyi && this.fileSystem.existsSync(pyiFilePath) && isFile(this.fileSystem, pyiFilePath)) {\n                    importFailureInfo.push(`Resolved import with file '${pyiFilePath}'`);\n                    resolvedPaths.push(pyiFilePath);\n                    if (isLastPart) {\n                        isStubFile = true;\n                    }\n                } else if (this.fileSystem.existsSync(pyFilePath) && isFile(this.fileSystem, pyFilePath)) {\n                    importFailureInfo.push(`Resolved import with file '${pyFilePath}'`);\n                    resolvedPaths.push(pyFilePath);\n                } else {\n                    if (\n                        allowNativeLib &&\n                        this.fileSystem.existsSync(fileDirectory) &&\n                        isDirectory(this.fileSystem, fileDirectory)\n                    ) {\n                        const filesInDir = this._getFilesInDirectory(fileDirectory);\n                        const nativeLibFileName = filesInDir.find((f) => {\n                            // Strip off the final file extension and the part of the file name\n                            // that excludes all (multi-part) file extensions. This allows us to\n                            // handle file names like \"foo.cpython-32m.so\".\n                            const fileExtension = getFileExtension(f, /* multiDotExtension */ false).toLowerCase();\n                            const withoutExtension = stripFileExtension(f, /* multiDotExtension */ true);\n                            if (supportedNativeLibExtensions.some((ext) => ext === fileExtension)) {\n                                if (equateStringsCaseInsensitive(fileNameWithoutExtension, withoutExtension)) {\n                                    return true;\n                                }\n                            }\n\n                            return false;\n                        });\n\n                        if (nativeLibFileName) {\n                            const nativeLibPath = combinePaths(fileDirectory, nativeLibFileName);\n                            importFailureInfo.push(`Resolved import with file '${nativeLibPath}'`);\n                            resolvedPaths.push(nativeLibPath);\n                            isNativeLib = true;\n                        }\n                    }\n\n                    if (!isNativeLib && foundDirectory) {\n                        importFailureInfo.push(`Partially resolved import with directory '${dirPath}'`);\n                        resolvedPaths.push('');\n                        if (isLastPart) {\n                            implicitImports = this._findImplicitImports(dirPath, [pyFilePath, pyiFilePath]);\n                            isNamespacePackage = true;\n                        }\n                    } else {\n                        importFailureInfo.push(`Did not find file '${pyiFilePath}' or '${pyFilePath}'`);\n                    }\n                }\n                break;\n            }\n        }\n\n        let importFound: boolean;\n        if (allowPartial) {\n            importFound = resolvedPaths.length > 0;\n        } else {\n            importFound = resolvedPaths.length >= moduleDescriptor.nameParts.length;\n        }\n\n        return {\n            importName,\n            isRelative: false,\n            isNamespacePackage,\n            isStubPackage,\n            isImportFound: importFound,\n            importFailureInfo,\n            importType: ImportType.Local,\n            resolvedPaths,\n            searchPath: rootPath,\n            isStubFile,\n            isNativeLib,\n            implicitImports,\n            filteredImplicitImports: implicitImports,\n            packageDirectory,\n        };\n    }\n\n    // Intended to be overridden by subclasses to provide additional stub\n    // path capabilities. Return undefined if no extra stub path were found.\n    protected getTypeshedPathEx(execEnv: ExecutionEnvironment, importFailureInfo: string[]): string | undefined {\n        return undefined;\n    }\n\n    // Intended to be overridden by subclasses to provide additional stub\n    // resolving capabilities. Return undefined if no stubs were found for\n    // this import.\n    protected resolveImportEx(\n        sourceFilePath: string,\n        execEnv: ExecutionEnvironment,\n        moduleDescriptor: ImportedModuleDescriptor,\n        importName: string,\n        importFailureInfo: string[] = [],\n        allowPyi = true\n    ): ImportResult | undefined {\n        return undefined;\n    }\n\n    private _lookUpResultsInCache(\n        execEnv: ExecutionEnvironment,\n        importName: string,\n        importedSymbols: string[] | undefined\n    ) {\n        const cacheForExecEnv = this._cachedImportResults.get(execEnv.root);\n        if (!cacheForExecEnv) {\n            return undefined;\n        }\n\n        const cachedEntry = cacheForExecEnv.get(importName);\n        if (!cachedEntry) {\n            return undefined;\n        }\n\n        return this._filterImplicitImports(cachedEntry, importedSymbols);\n    }\n\n    // Determines whether a namespace package resolves all of the symbols\n    // requested in the module descriptor. Namespace packages have no \"__init__.py\"\n    // file, so the only way that symbols can be resolved is if submodules\n    // are present. If specific symbols were requested, make sure they\n    // are all satisfied by submodules (as listed in the implicit imports).\n    private _isNamespacePackageResolved(moduleDescriptor: ImportedModuleDescriptor, implicitImports: ImplicitImport[]) {\n        if (moduleDescriptor.importedSymbols) {\n            if (\n                !moduleDescriptor.importedSymbols.some((symbol) => {\n                    return implicitImports.some((implicitImport) => {\n                        return implicitImport.name === symbol;\n                    });\n                })\n            ) {\n                return false;\n            }\n        } else if (implicitImports.length === 0) {\n            return false;\n        }\n        return true;\n    }\n\n    private _getModuleNameFromPath(\n        containerPath: string,\n        filePath: string,\n        stripTopContainerDir = false\n    ): string | undefined {\n        containerPath = ensureTrailingDirectorySeparator(containerPath);\n        let filePathWithoutExtension = stripFileExtension(filePath);\n\n        if (!filePathWithoutExtension.startsWith(containerPath)) {\n            return undefined;\n        }\n\n        // Strip off the '/__init__' if it's present.\n        if (filePathWithoutExtension.endsWith('__init__')) {\n            filePathWithoutExtension = filePathWithoutExtension.substr(0, filePathWithoutExtension.length - 9);\n        }\n\n        const relativeFilePath = filePathWithoutExtension.substr(containerPath.length);\n        const parts = getPathComponents(relativeFilePath);\n        parts.shift();\n        if (stripTopContainerDir) {\n            if (parts.length === 0) {\n                return undefined;\n            }\n            parts.shift();\n        }\n\n        if (parts.length === 0) {\n            return undefined;\n        }\n\n        // Handle the case where the symbol was resolved to a stubs package\n        // rather than the real package. We'll strip off the \"-stubs\" suffix\n        // in this case.\n        if (parts[0].endsWith(stubsSuffix)) {\n            parts[0] = parts[0].substr(0, parts[0].length - stubsSuffix.length);\n        }\n\n        // Check whether parts contains invalid characters.\n        if (parts.some((p) => !this._isIdentifier(p))) {\n            return undefined;\n        }\n\n        return parts.join('.');\n    }\n\n    private _resolveBestAbsoluteImport(\n        sourceFilePath: string,\n        execEnv: ExecutionEnvironment,\n        moduleDescriptor: ImportedModuleDescriptor,\n        allowPyi: boolean\n    ): ImportResult | undefined {\n        const importName = this._formatImportName(moduleDescriptor);\n        const importFailureInfo: string[] = [];\n\n        // First check for a stdlib typeshed file.\n        if (allowPyi && moduleDescriptor.nameParts.length > 0) {\n            const builtInImport = this._findTypeshedPath(\n                execEnv,\n                moduleDescriptor,\n                importName,\n                /* isStdLib */ true,\n                importFailureInfo\n            );\n            if (builtInImport) {\n                builtInImport.isTypeshedFile = true;\n                return builtInImport;\n            }\n        }\n\n        if (allowPyi) {\n            // Check for a local stub file using stubPath.\n            if (this._configOptions.stubPath) {\n                importFailureInfo.push(`Looking in stubPath '${this._configOptions.stubPath}'`);\n                const typingsImport = this.resolveAbsoluteImport(\n                    this._configOptions.stubPath,\n                    moduleDescriptor,\n                    importName,\n                    importFailureInfo\n                );\n\n                if (typingsImport.isImportFound) {\n                    // We will treat typings files as \"local\" rather than \"third party\".\n                    typingsImport.importType = ImportType.Local;\n                    typingsImport.isLocalTypingsFile = true;\n                    return typingsImport;\n                }\n            }\n        }\n\n        let bestResultSoFar: ImportResult | undefined;\n\n        // Look for it in the root directory of the execution environment.\n        importFailureInfo.push(`Looking in root directory of execution environment ` + `'${execEnv.root}'`);\n        let localImport = this.resolveAbsoluteImport(\n            execEnv.root,\n            moduleDescriptor,\n            importName,\n            importFailureInfo,\n            /* allowPartial */ undefined,\n            /* allowNativeLib */ true,\n            /* useStubPackage */ undefined,\n            allowPyi\n        );\n        bestResultSoFar = localImport;\n\n        for (const extraPath of execEnv.extraPaths) {\n            importFailureInfo.push(`Looking in extraPath '${extraPath}'`);\n            localImport = this.resolveAbsoluteImport(\n                extraPath,\n                moduleDescriptor,\n                importName,\n                importFailureInfo,\n                /* allowPartial */ undefined,\n                /* allowNativeLib */ true,\n                /* useStubPackage */ undefined,\n                allowPyi\n            );\n            bestResultSoFar = this._pickBestImport(bestResultSoFar, localImport);\n        }\n\n        if (bestResultSoFar?.isImportFound) {\n            return bestResultSoFar;\n        }\n\n        // Look for the import in the list of third-party packages.\n        const pythonSearchPaths = this._getPythonSearchPaths(execEnv, importFailureInfo);\n        if (pythonSearchPaths.length > 0) {\n            for (const searchPath of pythonSearchPaths) {\n                importFailureInfo.push(`Looking in python search path '${searchPath}'`);\n\n                // Is there a \"py.typed\" file present?\n                const dirPath = combinePaths(searchPath, moduleDescriptor.nameParts[0]);\n                let pyTypedInfo: PyTypedInfo | undefined;\n                let thirdPartyImport: ImportResult | undefined;\n\n                if (allowPyi) {\n                    pyTypedInfo = getPyTypedInfo(this.fileSystem, dirPath + stubsSuffix);\n\n                    // Look for packaged stubs first. PEP 561 indicates that package authors can ship\n                    // their stubs separately from their package implementation by appending the string\n                    // '-stubs' to its top - level directory name. We'll look there first.\n                    thirdPartyImport = this.resolveAbsoluteImport(\n                        searchPath,\n                        moduleDescriptor,\n                        importName,\n                        importFailureInfo,\n                        /* allowPartial */ allowPartialResolutionForThirdPartyPackages,\n                        /* allowNativeLib */ false,\n                        /* useStubPackage */ true,\n                        allowPyi\n                    );\n                }\n\n                if (!thirdPartyImport?.isImportFound) {\n                    // Either we didn't look for a packaged stub or we looked but didn't find one.\n                    // If there was a packaged stub directory, we can stop searching unless\n                    // it happened to be marked as \"partially typed\".\n                    if (!thirdPartyImport?.packageDirectory || pyTypedInfo?.isPartiallyTyped) {\n                        pyTypedInfo = getPyTypedInfo(this.fileSystem, dirPath);\n\n                        thirdPartyImport = this.resolveAbsoluteImport(\n                            searchPath,\n                            moduleDescriptor,\n                            importName,\n                            importFailureInfo,\n                            /* allowPartial */ allowPartialResolutionForThirdPartyPackages,\n                            /* allowNativeLib */ true,\n                            /* useStubPackage */ false,\n                            allowPyi\n                        );\n                    }\n                }\n\n                if (thirdPartyImport) {\n                    thirdPartyImport.importType = ImportType.ThirdParty;\n                    thirdPartyImport.isPyTypedPresent = pyTypedInfo?.isPyTypedPresent;\n\n                    if (thirdPartyImport.isImportFound && thirdPartyImport.isStubFile) {\n                        return thirdPartyImport;\n                    }\n\n                    bestResultSoFar = this._pickBestImport(bestResultSoFar, thirdPartyImport);\n                }\n            }\n        } else {\n            importFailureInfo.push('No python interpreter search path');\n        }\n\n        const extraResults = this.resolveImportEx(\n            sourceFilePath,\n            execEnv,\n            moduleDescriptor,\n            importName,\n            importFailureInfo,\n            allowPyi\n        );\n        if (extraResults !== undefined) {\n            return extraResults;\n        }\n\n        if (allowPyi) {\n            // Check for a third-party typeshed file.\n            importFailureInfo.push(`Looking for typeshed path`);\n            const typeshedImport = this._findTypeshedPath(\n                execEnv,\n                moduleDescriptor,\n                importName,\n                /* isStdLib */ false,\n                importFailureInfo\n            );\n            if (typeshedImport) {\n                typeshedImport.isTypeshedFile = true;\n                return typeshedImport;\n            }\n        }\n\n        // We weren't able to find an exact match, so return the best\n        // partial match.\n        return bestResultSoFar;\n    }\n\n    private _pickBestImport(bestImportSoFar: ImportResult | undefined, newImport: ImportResult | undefined) {\n        if (!bestImportSoFar) {\n            return newImport;\n        }\n\n        if (!newImport) {\n            return bestImportSoFar;\n        }\n\n        if (newImport.isImportFound) {\n            // Prefer found over not found.\n            if (!bestImportSoFar.isImportFound) {\n                return newImport;\n            }\n\n            // All else equal, prefer shorter resolution paths.\n            if (bestImportSoFar.resolvedPaths.length > newImport.resolvedPaths.length) {\n                return newImport;\n            }\n        }\n\n        return bestImportSoFar;\n    }\n\n    private _isIdentifier(value: string) {\n        for (let i = 0; i < value.length; i++) {\n            if (i === 0 ? !isIdentifierStartChar(value.charCodeAt(i)) : !isIdentifierChar(value.charCodeAt(i))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private _getPythonSearchPaths(execEnv: ExecutionEnvironment, importFailureInfo: string[]) {\n        const cacheKey = execEnv.venv ? execEnv.venv : '<default>';\n\n        // Find the site packages for the configured virtual environment.\n        if (!this._cachedPythonSearchPaths.has(cacheKey)) {\n            this._cachedPythonSearchPaths.set(\n                cacheKey,\n                PythonPathUtils.findPythonSearchPaths(\n                    this.fileSystem,\n                    this._configOptions,\n                    execEnv.venv,\n                    importFailureInfo\n                ) || []\n            );\n        }\n\n        return this._cachedPythonSearchPaths.get(cacheKey)!;\n    }\n\n    private _findTypeshedPath(\n        execEnv: ExecutionEnvironment,\n        moduleDescriptor: ImportedModuleDescriptor,\n        importName: string,\n        isStdLib: boolean,\n        importFailureInfo: string[]\n    ): ImportResult | undefined {\n        importFailureInfo.push(\n            `Looking for typeshed ${\n                isStdLib ? PythonPathUtils.stdLibFolderName : PythonPathUtils.thirdPartyFolderName\n            } path`\n        );\n\n        const typeshedPath = this._getTypeshedPath(isStdLib, execEnv, importFailureInfo);\n        if (!typeshedPath) {\n            return undefined;\n        }\n\n        for (const pythonVersionString of getPythonVersionStrings(execEnv.pythonVersion)) {\n            const testPath = combinePaths(typeshedPath, pythonVersionString);\n            if (this.fileSystem.existsSync(testPath)) {\n                const importInfo = this.resolveAbsoluteImport(\n                    testPath,\n                    moduleDescriptor,\n                    importName,\n                    importFailureInfo\n                );\n                if (importInfo.isImportFound) {\n                    importInfo.importType = isStdLib ? ImportType.BuiltIn : ImportType.ThirdParty;\n                    return importInfo;\n                }\n            }\n        }\n\n        importFailureInfo.push(`Typeshed path not found`);\n        return undefined;\n    }\n\n    private _getCompletionSuggestionsTypeshedPath(\n        execEnv: ExecutionEnvironment,\n        moduleDescriptor: ImportedModuleDescriptor,\n        isStdLib: boolean,\n        suggestions: string[],\n        similarityLimit: number\n    ) {\n        const importFailureInfo: string[] = [];\n        const typeshedPath = this._getTypeshedPath(isStdLib, execEnv, importFailureInfo);\n        if (!typeshedPath) {\n            return;\n        }\n\n        for (const pythonVersionString of getPythonVersionStrings(execEnv.pythonVersion)) {\n            const testPath = combinePaths(typeshedPath, pythonVersionString);\n            if (this.fileSystem.existsSync(testPath)) {\n                this._getCompletionSuggestionsAbsolute(testPath, moduleDescriptor, suggestions, similarityLimit);\n            }\n        }\n    }\n\n    private _getTypeshedPath(isStdLib: boolean, execEnv: ExecutionEnvironment, importFailureInfo: string[]) {\n        // See if we have it cached.\n        if (isStdLib) {\n            if (this._cachedTypeshedStdLibPath !== undefined) {\n                return this._cachedTypeshedStdLibPath;\n            }\n        } else {\n            if (this._cachedTypeshedThirdPartyPath !== undefined) {\n                return this._cachedTypeshedThirdPartyPath;\n            }\n        }\n\n        let typeshedPath = '';\n\n        // Did the user specify a typeshed path? If not, we'll look in the\n        // python search paths, then in the typeshed-fallback directory.\n        if (this._configOptions.typeshedPath) {\n            const possibleTypeshedPath = this._configOptions.typeshedPath;\n            if (\n                this.fileSystem.existsSync(possibleTypeshedPath) &&\n                isDirectory(this.fileSystem, possibleTypeshedPath)\n            ) {\n                typeshedPath = possibleTypeshedPath;\n            }\n        } else {\n            const pythonSearchPaths = this._getPythonSearchPaths(execEnv, importFailureInfo);\n            for (const searchPath of pythonSearchPaths) {\n                const possibleTypeshedPath = combinePaths(searchPath, 'typeshed');\n                if (\n                    this.fileSystem.existsSync(possibleTypeshedPath) &&\n                    isDirectory(this.fileSystem, possibleTypeshedPath)\n                ) {\n                    typeshedPath = possibleTypeshedPath;\n                    break;\n                }\n            }\n        }\n\n        // If typeshed directory wasn't found in other locations, use the fallback.\n        if (!typeshedPath) {\n            typeshedPath = PythonPathUtils.getTypeShedFallbackPath(this.fileSystem) || '';\n        }\n\n        typeshedPath = PythonPathUtils.getTypeshedSubdirectory(typeshedPath, isStdLib);\n\n        if (!this.fileSystem.existsSync(typeshedPath) || !isDirectory(this.fileSystem, typeshedPath)) {\n            return undefined;\n        }\n\n        // Cache the results.\n        if (isStdLib) {\n            this._cachedTypeshedStdLibPath = typeshedPath;\n        } else {\n            this._cachedTypeshedThirdPartyPath = typeshedPath;\n        }\n\n        return typeshedPath;\n    }\n\n    private _resolveRelativeImport(\n        sourceFilePath: string,\n        moduleDescriptor: ImportedModuleDescriptor,\n        importName: string,\n        importFailureInfo: string[]\n    ): ImportResult | undefined {\n        importFailureInfo.push('Attempting to resolve relative import');\n\n        // Determine which search path this file is part of.\n        let curDir = getDirectoryPath(sourceFilePath);\n        for (let i = 1; i < moduleDescriptor.leadingDots; i++) {\n            if (curDir === '') {\n                importFailureInfo.push(`Invalid relative path '${importName}'`);\n                return undefined;\n            }\n            curDir = getDirectoryPath(curDir);\n        }\n\n        // Now try to match the module parts from the current directory location.\n        const absImport = this.resolveAbsoluteImport(curDir, moduleDescriptor, importName, importFailureInfo);\n        return this._filterImplicitImports(absImport, moduleDescriptor.importedSymbols);\n    }\n\n    private _getCompletionSuggestionsRelative(\n        sourceFilePath: string,\n        moduleDescriptor: ImportedModuleDescriptor,\n        suggestions: string[],\n        similarityLimit: number\n    ) {\n        // Determine which search path this file is part of.\n        let curDir = getDirectoryPath(sourceFilePath);\n        for (let i = 1; i < moduleDescriptor.leadingDots; i++) {\n            if (curDir === '') {\n                return;\n            }\n            curDir = getDirectoryPath(curDir);\n        }\n\n        // Now try to match the module parts from the current directory location.\n        this._getCompletionSuggestionsAbsolute(curDir, moduleDescriptor, suggestions, similarityLimit);\n    }\n\n    private _getFilesInDirectory(dirPath: string): string[] {\n        return this.fileSystem\n            .readdirEntriesSync(dirPath)\n            .filter((f) => f.isFile())\n            .map((f) => f.name);\n    }\n\n    private _getCompletionSuggestionsAbsolute(\n        rootPath: string,\n        moduleDescriptor: ImportedModuleDescriptor,\n        suggestions: string[],\n        similarityLimit: number\n    ) {\n        // Starting at the specified path, walk the file system to find the\n        // specified module.\n        let dirPath = rootPath;\n\n        // Copy the nameParts into a new directory and add an extra empty\n        // part if there is a trailing dot.\n        const nameParts = moduleDescriptor.nameParts.map((name) => name);\n        if (moduleDescriptor.hasTrailingDot) {\n            nameParts.push('');\n        }\n\n        // Handle the case where the user has typed the first\n        // dot (or multiple) in a relative path.\n        if (nameParts.length === 0) {\n            this._addFilteredSuggestions(dirPath, '', suggestions, similarityLimit);\n        } else {\n            for (let i = 0; i < nameParts.length; i++) {\n                // Provide completions only if we're on the last part\n                // of the name.\n                if (i === nameParts.length - 1) {\n                    this._addFilteredSuggestions(dirPath, nameParts[i], suggestions, similarityLimit);\n                }\n\n                dirPath = combinePaths(dirPath, nameParts[i]);\n                if (!this.fileSystem.existsSync(dirPath) || !isDirectory(this.fileSystem, dirPath)) {\n                    break;\n                }\n            }\n        }\n    }\n\n    private _addFilteredSuggestions(dirPath: string, filter: string, suggestions: string[], similarityLimit: number) {\n        const entries = getFileSystemEntries(this.fileSystem, dirPath);\n\n        entries.files.forEach((file) => {\n            // Strip multi-dot extensions to handle file names like \"foo.cpython-32m.so\". We want\n            // to detect the \".so\" but strip off the entire \".cpython-32m.so\" extension.\n            const fileExtension = getFileExtension(file, /* multiDotExtension */ false).toLowerCase();\n            const fileWithoutExtension = stripFileExtension(file, /* multiDotExtension */ true);\n\n            if (supportedFileExtensions.some((ext) => ext === fileExtension)) {\n                if (fileWithoutExtension !== '__init__') {\n                    if (\n                        !filter ||\n                        StringUtils.computeCompletionSimilarity(filter, fileWithoutExtension) >= similarityLimit\n                    ) {\n                        this._addUniqueSuggestion(fileWithoutExtension, suggestions);\n                    }\n                }\n            }\n        });\n\n        entries.directories.forEach((dir) => {\n            if (!filter || dir.startsWith(filter)) {\n                this._addUniqueSuggestion(dir, suggestions);\n            }\n        });\n    }\n\n    private _addUniqueSuggestion(suggestionToAdd: string, suggestions: string[]) {\n        if (suggestions.some((s) => s === suggestionToAdd)) {\n            return;\n        }\n\n        // Don't add directories with illegal module names.\n        if (/[.-]/.test(suggestionToAdd)) {\n            return;\n        }\n\n        // Don't add directories with dunder names like \"__pycache__\".\n        if (isDunderName(suggestionToAdd)) {\n            return;\n        }\n\n        suggestions.push(suggestionToAdd);\n    }\n\n    // Potentially modifies the ImportResult by removing some or all of the\n    // implicit import entries. Only the imported symbols should be included.\n    private _filterImplicitImports(importResult: ImportResult, importedSymbols: string[] | undefined): ImportResult {\n        if (importedSymbols === undefined) {\n            const newImportResult = Object.assign({}, importResult);\n            newImportResult.filteredImplicitImports = [];\n            return newImportResult;\n        }\n\n        if (importedSymbols.length === 0) {\n            return importResult;\n        }\n\n        if (importResult.implicitImports.length === 0) {\n            return importResult;\n        }\n\n        const filteredImplicitImports = importResult.implicitImports.filter((implicitImport) => {\n            return importedSymbols.some((sym) => sym === implicitImport.name);\n        });\n\n        if (filteredImplicitImports.length === importResult.implicitImports.length) {\n            return importResult;\n        }\n\n        const newImportResult = Object.assign({}, importResult);\n        newImportResult.filteredImplicitImports = filteredImplicitImports;\n        return newImportResult;\n    }\n\n    private _findImplicitImports(dirPath: string, exclusions: string[]): ImplicitImport[] {\n        const implicitImportMap = new Map<string, ImplicitImport>();\n\n        // Enumerate all of the files and directories in the path.\n        const entries = getFileSystemEntries(this.fileSystem, dirPath);\n\n        // Add implicit file-based modules.\n        for (const fileName of entries.files) {\n            if (fileName.endsWith('.py') || fileName.endsWith('.pyi')) {\n                const filePath = combinePaths(dirPath, fileName);\n\n                if (!exclusions.find((exclusion) => exclusion === filePath)) {\n                    const strippedFileName = stripFileExtension(fileName);\n                    const implicitImport: ImplicitImport = {\n                        isStubFile: fileName.endsWith('.pyi'),\n                        name: strippedFileName,\n                        path: filePath,\n                    };\n\n                    // Always prefer stub files over non-stub files.\n                    const entry = implicitImportMap.get(implicitImport.name);\n                    if (!entry || !entry.isStubFile) {\n                        implicitImportMap.set(implicitImport.name, implicitImport);\n                    }\n                }\n            }\n        }\n\n        // Add implicit directory-based modules.\n        for (const dirName of entries.directories) {\n            const pyFilePath = combinePaths(dirPath, dirName, '__init__.py');\n            const pyiFilePath = pyFilePath + 'i';\n            let isStubFile = false;\n            let path = '';\n\n            if (this.fileSystem.existsSync(pyiFilePath) && isFile(this.fileSystem, pyiFilePath)) {\n                isStubFile = true;\n                path = pyiFilePath;\n            } else if (this.fileSystem.existsSync(pyFilePath) && isFile(this.fileSystem, pyFilePath)) {\n                path = pyFilePath;\n            }\n\n            if (path) {\n                if (!exclusions.find((exclusion) => exclusion === path)) {\n                    const implicitImport: ImplicitImport = {\n                        isStubFile,\n                        name: dirName,\n                        path,\n                    };\n\n                    implicitImportMap.set(implicitImport.name, implicitImport);\n                }\n            }\n        }\n\n        return [...implicitImportMap.values()];\n    }\n\n    private _formatImportName(moduleDescriptor: ImportedModuleDescriptor) {\n        let name = '';\n        for (let i = 0; i < moduleDescriptor.leadingDots; i++) {\n            name += '.';\n        }\n\n        return name + moduleDescriptor.nameParts.map((part) => part).join('.');\n    }\n}\n\nexport type ImportResolverFactory = (fs: FileSystem, options: ConfigOptions) => ImportResolver;\n","/*\n * importStatementUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Utility routines for summarizing and manipulating\n * import statements in a python source file.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { TextEditAction } from '../common/editAction';\nimport { convertOffsetToPosition, convertPositionToOffset } from '../common/positionUtils';\nimport { Position } from '../common/textRange';\nimport { TextRange } from '../common/textRange';\nimport {\n    ImportAsNode,\n    ImportFromAsNode,\n    ImportFromNode,\n    ImportNode,\n    ModuleNameNode,\n    ModuleNode,\n    ParseNode,\n    ParseNodeType,\n} from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport { ImportResult, ImportType } from './importResult';\nimport * as SymbolNameUtils from './symbolNameUtils';\n\nexport interface ImportStatement {\n    node: ImportNode | ImportFromNode;\n    subnode?: ImportAsNode;\n    importResult: ImportResult | undefined;\n    resolvedPath: string | undefined;\n    moduleName: string;\n    followsNonImportStatement: boolean;\n}\n\nexport interface ImportStatements {\n    orderedImports: ImportStatement[];\n    mapByFilePath: Map<string, ImportStatement>;\n}\n\nexport const enum ImportGroup {\n    // The ordering here is important because this is the order\n    // in which PEP8 specifies that imports should be ordered.\n    BuiltIn = 0,\n    ThirdParty = 1,\n    Local = 2,\n    LocalRelative = 3,\n}\n\n// Determines which import grouping should be used when sorting imports.\nexport function getImportGroup(statement: ImportStatement): ImportGroup {\n    if (statement.importResult) {\n        if (statement.importResult.importType === ImportType.BuiltIn) {\n            return ImportGroup.BuiltIn;\n        } else if (\n            statement.importResult.importType === ImportType.ThirdParty ||\n            statement.importResult.isLocalTypingsFile\n        ) {\n            return ImportGroup.ThirdParty;\n        }\n\n        if (statement.importResult.isRelative) {\n            return ImportGroup.LocalRelative;\n        }\n\n        return ImportGroup.Local;\n    } else {\n        return ImportGroup.Local;\n    }\n}\n\n// Compares sort order of two import statements.\nexport function compareImportStatements(a: ImportStatement, b: ImportStatement) {\n    const aImportGroup = getImportGroup(a);\n    const bImportGroup = getImportGroup(b);\n\n    if (aImportGroup < bImportGroup) {\n        return -1;\n    } else if (aImportGroup > bImportGroup) {\n        return 1;\n    }\n\n    return a.moduleName < b.moduleName ? -1 : 1;\n}\n\n// Looks for top-level 'import' and 'import from' statements and provides\n// an ordered list and a map (by file path).\nexport function getTopLevelImports(parseTree: ModuleNode): ImportStatements {\n    const localImports: ImportStatements = {\n        orderedImports: [],\n        mapByFilePath: new Map<string, ImportStatement>(),\n    };\n\n    let followsNonImportStatement = false;\n    let foundFirstImportStatement = false;\n\n    parseTree.statements.forEach((statement) => {\n        if (statement.nodeType === ParseNodeType.StatementList) {\n            statement.statements.forEach((subStatement) => {\n                if (subStatement.nodeType === ParseNodeType.Import) {\n                    foundFirstImportStatement = true;\n                    _processImportNode(subStatement, localImports, followsNonImportStatement);\n                    followsNonImportStatement = false;\n                } else if (subStatement.nodeType === ParseNodeType.ImportFrom) {\n                    foundFirstImportStatement = true;\n                    _processImportFromNode(subStatement, localImports, followsNonImportStatement);\n                    followsNonImportStatement = false;\n                } else {\n                    followsNonImportStatement = foundFirstImportStatement;\n                }\n            });\n        } else {\n            followsNonImportStatement = foundFirstImportStatement;\n        }\n    });\n\n    return localImports;\n}\n\nexport function getTextEditsForAutoImportSymbolAddition(\n    symbolName: string,\n    importStatement: ImportStatement,\n    parseResults: ParseResults,\n    aliasName?: string\n) {\n    const textEditList: TextEditAction[] = [];\n\n    // Scan through the import symbols to find the right insertion point,\n    // assuming we want to keep the imports alphabetized.\n    let priorImport: ImportFromAsNode | undefined;\n\n    if (importStatement.node && importStatement.node.nodeType === ParseNodeType.ImportFrom) {\n        // Make sure we're not attempting to auto-import a symbol that\n        // already exists in the import list.\n        if (!importStatement.node.imports.some((importAs) => importAs.name.value === symbolName)) {\n            for (const curImport of importStatement.node.imports) {\n                if (curImport.name.value > symbolName) {\n                    break;\n                }\n\n                priorImport = curImport;\n            }\n\n            const insertionOffset = priorImport\n                ? TextRange.getEnd(priorImport)\n                : importStatement.node.imports.length > 0\n                ? importStatement.node.imports[0].start\n                : importStatement.node.start + importStatement.node.length;\n            const insertionPosition = convertOffsetToPosition(insertionOffset, parseResults.tokenizerOutput.lines);\n\n            const insertText = aliasName ? `${symbolName} as ${aliasName}` : symbolName;\n\n            textEditList.push({\n                range: { start: insertionPosition, end: insertionPosition },\n                replacementText: priorImport ? ', ' + insertText : insertText + ', ',\n            });\n        }\n    }\n\n    return textEditList;\n}\n\nexport function getTextEditsForAutoImportInsertion(\n    symbolName: string | undefined,\n    importStatements: ImportStatements,\n    moduleName: string,\n    importGroup: ImportGroup,\n    parseResults: ParseResults,\n    invocationPosition: Position,\n    aliasName?: string\n): TextEditAction[] {\n    const textEditList: TextEditAction[] = [];\n\n    // We need to emit a new 'from import' statement if symbolName is given. otherwise, use 'import' statement.\n    const importText = symbolName ? symbolName : moduleName;\n    const importTextWithAlias = aliasName ? `${importText} as ${aliasName}` : importText;\n    let newImportStatement = symbolName\n        ? `from ${moduleName} import ${importTextWithAlias}`\n        : `import ${importTextWithAlias}`;\n\n    let insertionPosition: Position;\n    const invocation = convertPositionToOffset(invocationPosition, parseResults.tokenizerOutput.lines)!;\n    if (importStatements.orderedImports.length > 0 && invocation >= importStatements.orderedImports[0].node.start) {\n        let insertBefore = true;\n        let insertionImport = importStatements.orderedImports[0];\n\n        // Find a good spot to insert the new import statement. Follow\n        // the PEP8 standard sorting order whereby built-in imports are\n        // followed by third-party, which are followed by local.\n        let prevImportGroup = ImportGroup.BuiltIn;\n        for (const curImport of importStatements.orderedImports) {\n            // If the import was resolved, use its import type. If it wasn't\n            // resolved, assume that it's the same import type as the previous\n            // one.\n            const curImportGroup: ImportGroup = curImport.importResult ? getImportGroup(curImport) : prevImportGroup;\n\n            if (importGroup < curImportGroup) {\n                if (!insertBefore && prevImportGroup < importGroup) {\n                    // Add an extra line to create a new group.\n                    newImportStatement = parseResults.tokenizerOutput.predominantEndOfLineSequence + newImportStatement;\n                }\n                break;\n            }\n\n            if (importGroup === curImportGroup && curImport.moduleName > moduleName) {\n                break;\n            }\n\n            // If we're about to hit the end of the import statements, don't go\n            // any further.\n            if (curImport.followsNonImportStatement) {\n                if (importGroup > prevImportGroup) {\n                    // Add an extra line to create a new group.\n                    newImportStatement = parseResults.tokenizerOutput.predominantEndOfLineSequence + newImportStatement;\n                }\n                break;\n            }\n\n            // If this is the last import, see if we need to create a new group.\n            if (curImport === importStatements.orderedImports[importStatements.orderedImports.length - 1]) {\n                if (importGroup > curImportGroup) {\n                    // Add an extra line to create a new group.\n                    newImportStatement = parseResults.tokenizerOutput.predominantEndOfLineSequence + newImportStatement;\n                }\n            }\n\n            // Are we starting a new group?\n            if (!insertBefore && importGroup < prevImportGroup && importGroup === curImportGroup) {\n                insertBefore = true;\n            } else {\n                insertBefore = false;\n            }\n\n            prevImportGroup = curImportGroup;\n            insertionImport = curImport;\n        }\n\n        if (insertionImport) {\n            if (insertBefore) {\n                newImportStatement = newImportStatement + parseResults.tokenizerOutput.predominantEndOfLineSequence;\n            } else {\n                newImportStatement = parseResults.tokenizerOutput.predominantEndOfLineSequence + newImportStatement;\n            }\n\n            insertionPosition = convertOffsetToPosition(\n                insertBefore ? insertionImport.node.start : TextRange.getEnd(insertionImport.node),\n                parseResults.tokenizerOutput.lines\n            );\n        } else {\n            insertionPosition = { line: 0, character: 0 };\n        }\n    } else {\n        // Insert at or near the top of the file. See if there's a doc string and\n        // copyright notice, etc. at the top. If so, move past those.\n        insertionPosition = { line: 0, character: 0 };\n        let addNewLineBefore = false;\n\n        for (const statement of parseResults.parseTree.statements) {\n            let stopHere = true;\n            if (statement.nodeType === ParseNodeType.StatementList && statement.statements.length === 1) {\n                const simpleStatement = statement.statements[0];\n\n                if (simpleStatement.nodeType === ParseNodeType.StringList) {\n                    // Assume that it's a file header doc string.\n                    stopHere = false;\n                } else if (simpleStatement.nodeType === ParseNodeType.Assignment) {\n                    if (simpleStatement.leftExpression.nodeType === ParseNodeType.Name) {\n                        if (SymbolNameUtils.isDunderName(simpleStatement.leftExpression.value)) {\n                            // Assume that it's an assignment of __copyright__, __author__, etc.\n                            stopHere = false;\n                        }\n                    }\n                }\n            }\n\n            if (stopHere) {\n                insertionPosition = convertOffsetToPosition(statement.start, parseResults.tokenizerOutput.lines);\n                addNewLineBefore = false;\n                break;\n            } else {\n                insertionPosition = convertOffsetToPosition(\n                    statement.start + statement.length,\n                    parseResults.tokenizerOutput.lines\n                );\n                addNewLineBefore = true;\n            }\n        }\n\n        newImportStatement +=\n            parseResults.tokenizerOutput.predominantEndOfLineSequence +\n            parseResults.tokenizerOutput.predominantEndOfLineSequence;\n\n        if (addNewLineBefore) {\n            newImportStatement = parseResults.tokenizerOutput.predominantEndOfLineSequence + newImportStatement;\n        } else {\n            newImportStatement += parseResults.tokenizerOutput.predominantEndOfLineSequence;\n        }\n    }\n\n    textEditList.push({\n        range: { start: insertionPosition, end: insertionPosition },\n        replacementText: newImportStatement,\n    });\n\n    return textEditList;\n}\n\nfunction _processImportNode(node: ImportNode, localImports: ImportStatements, followsNonImportStatement: boolean) {\n    node.list.forEach((importAsNode) => {\n        const importResult = AnalyzerNodeInfo.getImportInfo(importAsNode.module);\n        let resolvedPath: string | undefined;\n\n        if (importResult && importResult.isImportFound) {\n            resolvedPath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n        }\n\n        const localImport: ImportStatement = {\n            node,\n            subnode: importAsNode,\n            importResult,\n            resolvedPath,\n            moduleName: _formatModuleName(importAsNode.module),\n            followsNonImportStatement,\n        };\n\n        localImports.orderedImports.push(localImport);\n\n        // Add it to the map.\n        if (resolvedPath) {\n            // Don't overwrite existing import or import from statements\n            // because we always want to prefer 'import from' over 'import'\n            // in the map.\n            if (!localImports.mapByFilePath.has(resolvedPath)) {\n                localImports.mapByFilePath.set(resolvedPath, localImport);\n            }\n        }\n    });\n}\n\nfunction _processImportFromNode(\n    node: ImportFromNode,\n    localImports: ImportStatements,\n    followsNonImportStatement: boolean\n) {\n    const importResult = AnalyzerNodeInfo.getImportInfo(node.module);\n    let resolvedPath: string | undefined;\n\n    if (importResult && importResult.isImportFound) {\n        resolvedPath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n    }\n\n    const localImport: ImportStatement = {\n        node,\n        importResult,\n        resolvedPath,\n        moduleName: _formatModuleName(node.module),\n        followsNonImportStatement,\n    };\n\n    localImports.orderedImports.push(localImport);\n\n    // Add it to the map.\n    if (resolvedPath) {\n        const prevEntry = localImports.mapByFilePath.get(resolvedPath);\n        // Overwrite existing import statements because we always want to prefer\n        // 'import from' over 'import'. Also, overwrite existing 'import from' if\n        // the module name is shorter.\n        if (\n            !prevEntry ||\n            prevEntry.node.nodeType === ParseNodeType.Import ||\n            prevEntry.moduleName.length > localImport.moduleName.length\n        ) {\n            localImports.mapByFilePath.set(resolvedPath, localImport);\n        }\n    }\n}\n\nfunction _formatModuleName(node: ModuleNameNode): string {\n    let moduleName = '';\n    for (let i = 0; i < node.leadingDots; i++) {\n        moduleName = moduleName + '.';\n    }\n\n    moduleName += node.nameParts.map((part) => part.value).join('.');\n\n    return moduleName;\n}\n\nexport function getContainingImportStatement(node: ParseNode | undefined, token: CancellationToken) {\n    while (node) {\n        throwIfCancellationRequested(token);\n\n        if (node.nodeType === ParseNodeType.Import || node.nodeType === ParseNodeType.ImportFrom) {\n            break;\n        }\n\n        node = node.parent;\n    }\n\n    return node;\n}\n\nexport function getAllImportNames(node: ImportNode | ImportFromNode) {\n    if (node.nodeType === ParseNodeType.Import) {\n        const importNode = node as ImportNode;\n        return importNode.list;\n    }\n\n    const importFromNode = node as ImportFromNode;\n    return importFromNode.imports;\n}\n","/*\n * packageTypeVerifier.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Validates the public symbols exported by a package to ensure\n * that the types are complete.\n */\n\nimport { ConfigOptions, ExecutionEnvironment } from '../common/configOptions';\nimport { Diagnostic, DiagnosticAddendum, DiagnosticCategory } from '../common/diagnostic';\nimport { FileSystem } from '../common/fileSystem';\nimport { combinePaths, getDirectoryPath, getFileExtension, stripFileExtension } from '../common/pathUtils';\nimport { getEmptyRange, Range } from '../common/textRange';\nimport { DeclarationType, FunctionDeclaration, VariableDeclaration } from './declaration';\nimport { ImportedModuleDescriptor, ImportResolver } from './importResolver';\nimport { Program } from './program';\nimport { getPyTypedInfo } from './pyTypedUtils';\nimport { ScopeType } from './scope';\nimport { getScopeForNode } from './scopeUtils';\nimport { Symbol, SymbolTable } from './symbol';\nimport { isDunderName, isPrivateOrProtectedName } from './symbolNameUtils';\nimport {\n    ClassType,\n    isClass,\n    isFunction,\n    isOverloadedFunction,\n    isTypeVar,\n    isUnknown,\n    ModuleType,\n    Type,\n    TypeCategory,\n} from './types';\nimport { convertToInstance, isEllipsisType, transformTypeObjectToClass } from './typeUtils';\n\nexport enum PackageSymbolType {\n    Indeterminate,\n    Module,\n    Class,\n    Variable,\n    Constant,\n    Function,\n    Method,\n    TypeVar,\n    TypeAlias,\n}\n\nexport interface PackageSymbol {\n    name: string;\n    fullName: string;\n    symbolType: PackageSymbolType;\n}\n\nexport interface PackageModule {\n    name: string;\n    symbols: PackageSymbol[];\n}\n\nexport interface PackageTypeReport {\n    packageName: string;\n    rootDirectory: string | undefined;\n    pyTypedPath: string | undefined;\n    symbolCount: number;\n    unknownTypeCount: number;\n    missingFunctionDocStringCount: number;\n    missingClassDocStringCount: number;\n    missingDefaultParamCount: number;\n    modules: PackageModule[];\n    diagnostics: Diagnostic[];\n}\n\ninterface TypeVerificationInfo {\n    isFullyKnown: boolean;\n    diag: DiagnosticAddendum;\n\n    // For classes, the above fields apply only to base types. Field-level\n    // type information and diagnostic information are provided on a per-field\n    // basis. This allows subclasses to potentially override fields that are\n    // missing types, thus making the field properly typed. This can happen\n    // when the base class is a private class (e.g. an abstract class) but the\n    // derived class is public.\n    classFields: Map<string, TypeVerificationInfo> | undefined;\n}\n\ntype PublicSymbolMap = Map<string, string>;\n\nconst maxTypeRecursionCount = 16;\nconst diagnosticMaxDepth = 16;\nconst diagnosticMaxLineCount = 32;\n\nexport class PackageTypeVerifier {\n    private _configOptions: ConfigOptions;\n    private _execEnv: ExecutionEnvironment;\n    private _importResolver: ImportResolver;\n    private _program: Program;\n    private _typeCache = new Map<string, TypeVerificationInfo>();\n\n    constructor(private _fileSystem: FileSystem) {\n        this._configOptions = new ConfigOptions('');\n        this._execEnv = this._configOptions.findExecEnvironment('.');\n        this._importResolver = new ImportResolver(this._fileSystem, this._configOptions);\n        this._program = new Program(this._importResolver, this._configOptions);\n    }\n\n    verify(packageName: string): PackageTypeReport {\n        const trimmedPackageName = packageName.trim();\n\n        const report: PackageTypeReport = {\n            packageName: trimmedPackageName,\n            rootDirectory: this._getDirectoryForPackage(trimmedPackageName),\n            pyTypedPath: undefined,\n            symbolCount: 0,\n            unknownTypeCount: 0,\n            missingFunctionDocStringCount: 0,\n            missingClassDocStringCount: 0,\n            missingDefaultParamCount: 0,\n            modules: [],\n            diagnostics: [],\n        };\n\n        try {\n            if (!trimmedPackageName || trimmedPackageName.includes('.')) {\n                report.diagnostics.push(\n                    new Diagnostic(\n                        DiagnosticCategory.Error,\n                        `Package name \"${trimmedPackageName}\" is invalid`,\n                        getEmptyRange()\n                    )\n                );\n            } else if (!report.rootDirectory) {\n                report.diagnostics.push(\n                    new Diagnostic(\n                        DiagnosticCategory.Error,\n                        `Package \"${trimmedPackageName}\" cannot be resolved`,\n                        getEmptyRange()\n                    )\n                );\n            } else {\n                const pyTypedInfo = getPyTypedInfo(this._fileSystem, report.rootDirectory);\n                if (!pyTypedInfo.isPyTypedPresent) {\n                    report.diagnostics.push(\n                        new Diagnostic(DiagnosticCategory.Error, 'No py.typed file found', getEmptyRange())\n                    );\n                } else {\n                    report.pyTypedPath = pyTypedInfo.pyTypedPath;\n\n                    const publicModules = this._getListOfPublicModules(report.rootDirectory, trimmedPackageName);\n\n                    // Build a map of all public symbols exported by this package. We'll\n                    // use this map to determine which diagnostics to report. We don't want\n                    // to report diagnostics many times for types that include public types.\n                    const publicSymbolMap = new Map<string, string>();\n                    publicModules.forEach((moduleName) => {\n                        this._getPublicSymbolsForModule(moduleName, publicSymbolMap);\n                    });\n\n                    publicModules.forEach((moduleName) => {\n                        this._verifyTypesForModule(moduleName, publicSymbolMap, report);\n                    });\n                }\n            }\n        } catch (e) {\n            const message: string =\n                (e.stack ? e.stack.toString() : undefined) ||\n                (typeof e.message === 'string' ? e.message : undefined) ||\n                JSON.stringify(e);\n            report.diagnostics.push(\n                new Diagnostic(\n                    DiagnosticCategory.Error,\n                    `An internal error occurred while verifying types: \"${message}\"`,\n                    getEmptyRange()\n                )\n            );\n        }\n\n        return report;\n    }\n\n    static getSymbolTypeString(symbolType: PackageSymbolType): string {\n        switch (symbolType) {\n            case PackageSymbolType.Class:\n                return 'class';\n\n            case PackageSymbolType.Function:\n                return 'function';\n\n            case PackageSymbolType.Method:\n                return 'method';\n\n            case PackageSymbolType.Constant:\n                return 'constant';\n\n            case PackageSymbolType.Variable:\n                return 'variable';\n\n            case PackageSymbolType.Module:\n                return 'module';\n\n            case PackageSymbolType.TypeAlias:\n                return 'type alias';\n\n            case PackageSymbolType.TypeVar:\n                return 'type variable';\n\n            case PackageSymbolType.Indeterminate:\n                return 'symbol';\n        }\n    }\n\n    private _resolveImport(moduleName: string) {\n        const moduleDescriptor: ImportedModuleDescriptor = {\n            leadingDots: 0,\n            nameParts: moduleName.split('.'),\n            importedSymbols: [],\n        };\n        return this._importResolver.resolveImport('', this._execEnv, moduleDescriptor);\n    }\n\n    private _getPublicSymbolsForModule(moduleName: string, symbolMap: PublicSymbolMap) {\n        const importResult = this._resolveImport(moduleName);\n\n        if (importResult.isImportFound) {\n            const modulePath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n            this._program.addTrackedFiles([modulePath], /* isThirdPartyImport */ true, /* isInPyTypedPackage */ true);\n\n            const sourceFile = this._program.getBoundSourceFile(modulePath);\n\n            if (sourceFile) {\n                const module: PackageModule = {\n                    name: moduleName,\n                    symbols: [],\n                };\n\n                const parseTree = sourceFile.getParseResults()!.parseTree;\n                const moduleScope = getScopeForNode(parseTree)!;\n\n                this._getPublicSymbolsInSymbolTable(\n                    symbolMap,\n                    module,\n                    module.name,\n                    moduleScope.symbolTable,\n                    ScopeType.Module\n                );\n            }\n        }\n    }\n\n    private _getPublicSymbolsInSymbolTable(\n        symbolMap: PublicSymbolMap,\n        module: PackageModule,\n        scopeName: string,\n        symbolTable: SymbolTable,\n        scopeType: ScopeType\n    ) {\n        symbolTable.forEach((symbol, name) => {\n            if (\n                !isPrivateOrProtectedName(name) &&\n                !symbol.isExternallyHidden() &&\n                !symbol.isIgnoredForProtocolMatch() &&\n                !this._isSymbolTypeImplied(scopeType, name)\n            ) {\n                const fullName = `${scopeName}.${name}`;\n                const symbolType = this._program.getTypeForSymbol(symbol);\n                symbolMap.set(fullName, fullName);\n\n                const typedDecls = symbol.getTypedDeclarations();\n\n                // Is this a class declared within this module or class? If so, verify\n                // the symbols defined within it.\n                if (typedDecls.length > 0) {\n                    const classDecl = typedDecls.find((decl) => decl.type === DeclarationType.Class);\n                    if (classDecl) {\n                        if (isClass(symbolType)) {\n                            this._getPublicSymbolsInSymbolTable(\n                                symbolMap,\n                                module,\n                                fullName,\n                                symbolType.details.fields,\n                                ScopeType.Class\n                            );\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    private _verifyTypesForModule(moduleName: string, publicSymbolMap: PublicSymbolMap, report: PackageTypeReport) {\n        const module: PackageModule = {\n            name: moduleName,\n            symbols: [],\n        };\n        report.modules.push(module);\n\n        const importResult = this._resolveImport(moduleName);\n        if (!importResult.isImportFound) {\n            report.diagnostics.push(\n                new Diagnostic(DiagnosticCategory.Error, `Could not resolve module \"${moduleName}\"`, getEmptyRange())\n            );\n        } else if (importResult.isStubPackage) {\n            report.diagnostics.push(\n                new Diagnostic(\n                    DiagnosticCategory.Error,\n                    `No inlined types found for module \"${moduleName}\" because stub package was present`,\n                    getEmptyRange()\n                )\n            );\n        } else {\n            const modulePath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n            this._program.addTrackedFiles([modulePath], /* isThirdPartyImport */ true, /* isInPyTypedPackage */ true);\n\n            const sourceFile = this._program.getBoundSourceFile(modulePath);\n\n            if (sourceFile) {\n                const parseTree = sourceFile.getParseResults()!.parseTree;\n                const moduleScope = getScopeForNode(parseTree)!;\n\n                this._verifySymbolsInSymbolTable(\n                    report,\n                    module,\n                    module.name,\n                    moduleScope.symbolTable,\n                    ScopeType.Module,\n                    publicSymbolMap,\n                    ''\n                );\n            } else {\n                report.diagnostics.push(\n                    new Diagnostic(DiagnosticCategory.Error, `Could not bind file \"${modulePath}\"`, getEmptyRange())\n                );\n            }\n        }\n    }\n\n    // Scans the directory structure for a list of public modules\n    // within the package.\n    private _getListOfPublicModules(rootPath: string, packageName: string): string[] {\n        const publicModules: string[] = [];\n        this._addPublicModulesRecursive(rootPath, packageName, publicModules);\n\n        // Make sure modules are unique. There may be duplicates if a \".py\" and \".pyi\"\n        // exist for some modules.\n        const uniqueModules: string[] = [];\n        const moduleMap = new Map<string, string>();\n        publicModules.forEach((module) => {\n            if (!moduleMap.has(module)) {\n                uniqueModules.push(module);\n                moduleMap.set(module, module);\n            }\n        });\n\n        return uniqueModules;\n    }\n\n    private _addPublicModulesRecursive(dirPath: string, modulePath: string, publicModules: string[]) {\n        const dirEntries = this._fileSystem.readdirEntriesSync(dirPath);\n\n        dirEntries.forEach((entry) => {\n            if (entry.isFile()) {\n                const fileExtension = getFileExtension(entry.name);\n\n                if (fileExtension === '.py' || fileExtension === '.pyi') {\n                    const nameWithoutExtension = stripFileExtension(entry.name);\n\n                    if (nameWithoutExtension === '__init__') {\n                        publicModules.push(modulePath);\n                    } else {\n                        if (\n                            !isPrivateOrProtectedName(nameWithoutExtension) &&\n                            this._isLegalModulePartName(nameWithoutExtension)\n                        ) {\n                            publicModules.push(`${modulePath}.${nameWithoutExtension}`);\n                        }\n                    }\n                }\n            } else if (entry.isDirectory()) {\n                if (!isPrivateOrProtectedName(entry.name) && this._isLegalModulePartName(entry.name)) {\n                    this._addPublicModulesRecursive(\n                        combinePaths(dirPath, entry.name),\n                        `${modulePath}.${entry.name}`,\n                        publicModules\n                    );\n                }\n            }\n        });\n    }\n\n    private _isLegalModulePartName(name: string): boolean {\n        // PEP8 indicates that all module names should be lowercase\n        // with underscores. It doesn't talk about non-ASCII\n        // characters, but it appears that's the convention.\n        return !!name.match(/[a-z_]+/);\n    }\n\n    private _verifySymbolsInSymbolTable(\n        report: PackageTypeReport,\n        module: PackageModule,\n        scopeName: string,\n        symbolTable: SymbolTable,\n        scopeType: ScopeType,\n        publicSymbolMap: PublicSymbolMap,\n        currentSymbol: string\n    ) {\n        symbolTable.forEach((symbol, name) => {\n            if (\n                !isPrivateOrProtectedName(name) &&\n                !symbol.isExternallyHidden() &&\n                !symbol.isIgnoredForProtocolMatch() &&\n                !this._isSymbolTypeImplied(scopeType, name)\n            ) {\n                const fullName = `${scopeName}.${name}`;\n                const symbolType = this._program.getTypeForSymbol(symbol);\n                let errorMessage = '';\n\n                const packageSymbolType = this._getPackageSymbolType(symbol, symbolType);\n                const packageSymbolTypeText = PackageTypeVerifier.getSymbolTypeString(packageSymbolType);\n                const packageSymbol: PackageSymbol = {\n                    name,\n                    fullName,\n                    symbolType: packageSymbolType,\n                };\n                module.symbols.push(packageSymbol);\n                report.symbolCount++;\n\n                const typedDecls = symbol.getTypedDeclarations();\n\n                if (!this._isSymbolTypeImplied(scopeType, name)) {\n                    if (isUnknown(symbolType)) {\n                        if (typedDecls.length === 0) {\n                            errorMessage = `Type not declared for ${packageSymbolTypeText} \"${fullName}\"`;\n                        } else {\n                            errorMessage = `Type unknown for ${packageSymbolTypeText} \"${fullName}\"`;\n                        }\n                    } else {\n                        const diag = new DiagnosticAddendum();\n                        if (!this._validateTypeIsCompletelyKnown(symbolType, diag, publicSymbolMap, fullName, [])) {\n                            errorMessage =\n                                `Type partially unknown for ${packageSymbolTypeText} \"${fullName}\"` +\n                                diag.getString(diagnosticMaxDepth, diagnosticMaxLineCount);\n                        }\n                    }\n                }\n\n                if (errorMessage) {\n                    report.diagnostics.push(new Diagnostic(DiagnosticCategory.Error, errorMessage, getEmptyRange()));\n                    report.unknownTypeCount++;\n                }\n\n                // Is this a class declared within this module or class? If so, verify\n                // the symbols defined within it.\n                if (typedDecls.length > 0) {\n                    const classDecl = typedDecls.find((decl) => decl.type === DeclarationType.Class);\n                    if (classDecl) {\n                        if (isClass(symbolType)) {\n                            // Determine whether the class has a proper doc string.\n                            if (!symbolType.details.docString) {\n                                report.diagnostics.push(\n                                    new Diagnostic(\n                                        DiagnosticCategory.Warning,\n                                        `No docstring found for class \"${fullName}\"`,\n                                        getEmptyRange()\n                                    )\n                                );\n\n                                report.missingClassDocStringCount++;\n                            }\n\n                            this._verifySymbolsInSymbolTable(\n                                report,\n                                module,\n                                fullName,\n                                symbolType.details.fields,\n                                ScopeType.Class,\n                                publicSymbolMap,\n                                currentSymbol\n                            );\n                        }\n                    }\n\n                    const funcDecls = typedDecls.filter((decl) => decl.type === DeclarationType.Function);\n                    if (funcDecls.length > 0) {\n                        let isDocStringMissing = false;\n                        let isDefaultValueEllipsis = false;\n\n                        if (isFunction(symbolType)) {\n                            if (!symbolType.details.docString) {\n                                isDocStringMissing = true;\n                            }\n\n                            if (\n                                symbolType.details.parameters.find(\n                                    (param) => param.hasDefault && isEllipsisType(param.defaultType!)\n                                )\n                            ) {\n                                isDefaultValueEllipsis = true;\n                            }\n                        } else if (isOverloadedFunction(symbolType)) {\n                            const funcWithDocstring = symbolType.overloads.find((func) => func.details.docString);\n                            if (!funcWithDocstring) {\n                                isDocStringMissing = true;\n                            }\n\n                            symbolType.overloads.forEach((func) => {\n                                if (\n                                    func.details.parameters.find(\n                                        (param) => param.hasDefault && isEllipsisType(param.defaultType!)\n                                    )\n                                ) {\n                                    isDefaultValueEllipsis = true;\n                                }\n                            });\n                        }\n\n                        if (isDocStringMissing) {\n                            // Don't require docstrings for dunder methods.\n                            if (!isDunderName(name)) {\n                                report.diagnostics.push(\n                                    new Diagnostic(\n                                        DiagnosticCategory.Warning,\n                                        `No docstring found for function \"${fullName}\"`,\n                                        getEmptyRange()\n                                    )\n                                );\n\n                                report.missingFunctionDocStringCount++;\n                            }\n                        }\n\n                        if (isDefaultValueEllipsis) {\n                            report.diagnostics.push(\n                                new Diagnostic(\n                                    DiagnosticCategory.Warning,\n                                    `One or more default values in function \"${fullName}\" is specified as \"...\"`,\n                                    getEmptyRange()\n                                )\n                            );\n\n                            report.missingDefaultParamCount++;\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    private _pushType<T>(typeStack: string[], typeToPush: string, callback: () => T) {\n        typeStack.push(typeToPush);\n        const result = callback();\n        typeStack.pop();\n        return result;\n    }\n\n    // If the type contains a reference to a module or a class, determines\n    // whether all of the types used by that module or class are known.\n    private _validateTypeIsCompletelyKnown(\n        type: Type,\n        diag: DiagnosticAddendum,\n        publicSymbolMap: PublicSymbolMap,\n        currentSymbol: string,\n        typeStack: string[]\n    ): boolean {\n        if (typeStack.length > maxTypeRecursionCount) {\n            return true;\n        }\n\n        type = transformTypeObjectToClass(type);\n\n        switch (type.category) {\n            case TypeCategory.Unbound:\n            case TypeCategory.Any:\n            case TypeCategory.None:\n            case TypeCategory.Never:\n            case TypeCategory.TypeVar:\n                return true;\n\n            case TypeCategory.Unknown: {\n                return false;\n            }\n\n            case TypeCategory.Object: {\n                return this._validateTypeIsCompletelyKnown(\n                    type.classType,\n                    diag,\n                    publicSymbolMap,\n                    currentSymbol,\n                    typeStack\n                );\n            }\n\n            case TypeCategory.OverloadedFunction: {\n                let isKnown = true;\n                for (const overload of type.overloads) {\n                    if (\n                        !this._validateTypeIsCompletelyKnown(\n                            overload,\n                            diag.createAddendum(),\n                            publicSymbolMap,\n                            currentSymbol,\n                            typeStack\n                        )\n                    ) {\n                        isKnown = false;\n                    }\n                }\n\n                return isKnown;\n            }\n\n            case TypeCategory.Union: {\n                let isKnown = true;\n                for (const subtype of type.subtypes) {\n                    if (\n                        !this._validateTypeIsCompletelyKnown(\n                            subtype,\n                            diag.createAddendum(),\n                            publicSymbolMap,\n                            currentSymbol,\n                            typeStack\n                        )\n                    ) {\n                        isKnown = false;\n                    }\n                }\n\n                return isKnown;\n            }\n\n            case TypeCategory.Function: {\n                let isKnown = true;\n\n                type.details.parameters.forEach((param) => {\n                    // Skip nameless parameters like \"*\" and \"/\".\n                    if (param.name) {\n                        const subDiag = diag.createAddendum();\n                        if (!param.hasDeclaredType) {\n                            // Allow params (like \"self\" and \"cls\") to skip declarations because\n                            // we're able to synthesize these.\n                            const isSynthesized = isTypeVar(param.type) && param.type.details.isSynthesized;\n\n                            if (!isSynthesized) {\n                                subDiag.addMessage(`Parameter \"${param.name}\" is missing a type annotation`);\n                                isKnown = false;\n                            }\n                        } else if (isUnknown(param.type)) {\n                            subDiag.addMessage(`Type unknown for parameter \"${param.name}\"`);\n                            isKnown = false;\n                        } else if (\n                            !this._validateTypeIsCompletelyKnown(\n                                param.type,\n                                subDiag.createAddendum(),\n                                publicSymbolMap,\n                                currentSymbol,\n                                typeStack\n                            )\n                        ) {\n                            subDiag.addMessage(`Type partially unknown for parameter \"${param.name}\"`);\n                            isKnown = false;\n                        }\n                    }\n                });\n\n                if (type.details.declaredReturnType) {\n                    const subDiag = diag.createAddendum();\n                    if (isUnknown(type.details.declaredReturnType)) {\n                        subDiag.addMessage(`Return type unknown`);\n                        isKnown = false;\n                    } else if (\n                        !this._validateTypeIsCompletelyKnown(\n                            type.details.declaredReturnType,\n                            subDiag.createAddendum(),\n                            publicSymbolMap,\n                            currentSymbol,\n                            typeStack\n                        )\n                    ) {\n                        subDiag.addMessage(`Return type partially unknown`);\n                        isKnown = false;\n                    }\n                } else {\n                    // Init methods have an implied return type.\n                    if (type.details.name !== '__init__') {\n                        const subDiag = diag.createAddendum();\n                        subDiag.addMessage(`Return type annotation is missing`);\n                        isKnown = false;\n                    }\n                }\n\n                return isKnown;\n            }\n\n            case TypeCategory.Class: {\n                const typeInfo = this._validateClassTypeIsCompletelyKnown(\n                    type,\n                    publicSymbolMap,\n                    currentSymbol,\n                    typeStack\n                );\n\n                let isKnown = typeInfo.isFullyKnown;\n\n                if (currentSymbol === type.details.fullName || !publicSymbolMap.has(type.details.fullName)) {\n                    const classDiag = diag.createAddendum();\n\n                    // Add any errors for the base classes, type arguments, etc.\n                    if (!isKnown) {\n                        classDiag.addAddendum(typeInfo.diag);\n                    }\n\n                    // Add any errors for the fields.\n                    if (typeInfo.classFields) {\n                        typeInfo.classFields.forEach((info) => {\n                            if (!info.isFullyKnown) {\n                                classDiag.addAddendum(info.diag);\n                                isKnown = false;\n                            }\n                        });\n                    }\n\n                    if (!isKnown) {\n                        classDiag.addMessage(\n                            `Type partially unknown for class \"${this._program.printType(\n                                convertToInstance(type),\n                                /* expandTypeAlias */ false\n                            )}\"`\n                        );\n                    }\n                }\n\n                return isKnown;\n            }\n\n            case TypeCategory.Module: {\n                const typeInfo = this._validateModuleTypeIsCompletelyKnown(type, publicSymbolMap, typeStack);\n\n                if (!typeInfo.isFullyKnown) {\n                    diag.addAddendum(typeInfo.diag);\n                }\n\n                return typeInfo.isFullyKnown;\n            }\n        }\n    }\n\n    private _validateClassTypeIsCompletelyKnown(\n        type: ClassType,\n        publicSymbolMap: PublicSymbolMap,\n        currentSymbol: string,\n        typeStack: string[]\n    ): TypeVerificationInfo {\n        let typeInfo: TypeVerificationInfo | undefined;\n        const diag = new DiagnosticAddendum();\n\n        // Is this class is in the public symbol list and is not the class\n        // that we're explicitly excluding from the public symbol list? If\n        // so, indicate that it is fully known. Any parts of the type that\n        // are unknown will be repoted when that public symbol is analyzed.\n        if (currentSymbol !== type.details.fullName && publicSymbolMap.has(type.details.fullName)) {\n            typeInfo = {\n                isFullyKnown: true,\n                diag,\n                classFields: undefined,\n            };\n        } else {\n            // Prevent type recursion.\n            if (typeStack.some((entry) => entry === type.details.fullName)) {\n                return {\n                    isFullyKnown: true,\n                    diag,\n                    classFields: undefined,\n                };\n            }\n\n            this._pushType(typeStack, type.details.fullName, () => {\n                // See if this class has already been analyzed.\n                const cachedTypeInfo = this._typeCache.get(type.details.fullName);\n                if (cachedTypeInfo) {\n                    typeInfo = cachedTypeInfo;\n                } else if (ClassType.isBuiltIn(type)) {\n                    // Don't bother type-checking built-in types.\n                    typeInfo = {\n                        isFullyKnown: true,\n                        diag: diag,\n                        classFields: undefined,\n                    };\n                } else {\n                    // Create a dummy entry in the cache to handle recursion. We'll replace\n                    // this once we fully analyze this class type.\n                    this._typeCache.set(type.details.fullName, {\n                        isFullyKnown: true,\n                        diag: diag,\n                        classFields: undefined,\n                    });\n\n                    const classFieldMap = new Map<string, TypeVerificationInfo>();\n                    let isKnown = true;\n\n                    type.details.fields.forEach((symbol, name) => {\n                        if (\n                            !isPrivateOrProtectedName(name) &&\n                            !symbol.isExternallyHidden() &&\n                            !symbol.isIgnoredForProtocolMatch()\n                        ) {\n                            const symbolType = this._program.getTypeForSymbol(symbol);\n                            const packageSymbolType = this._getPackageSymbolType(symbol, symbolType);\n                            const symbolTypeText = PackageTypeVerifier.getSymbolTypeString(packageSymbolType);\n                            const symbolDiag = new DiagnosticAddendum();\n\n                            if (!this._isSymbolTypeImplied(ScopeType.Class, name)) {\n                                if (isUnknown(symbolType)) {\n                                    symbolDiag.addMessage(`Type unknown for ${symbolTypeText} \"${name}\"`);\n                                    diag.addAddendum(symbolDiag);\n                                } else if (\n                                    !this._validateTypeIsCompletelyKnown(\n                                        symbolType,\n                                        symbolDiag.createAddendum(),\n                                        publicSymbolMap,\n                                        currentSymbol,\n                                        typeStack\n                                    )\n                                ) {\n                                    symbolDiag.addMessage(`Type partially unknown for ${symbolTypeText} \"${name}\"`);\n                                    diag.addAddendum(symbolDiag);\n                                }\n                            }\n\n                            classFieldMap.set(name, {\n                                isFullyKnown: symbolDiag.isEmpty(),\n                                diag: symbolDiag,\n                                classFields: undefined,\n                            });\n                        }\n                    });\n\n                    // Add field information for base classes if it is not overridden by\n                    // earlier classes in the MRO.\n                    type.details.mro.forEach((mroType, index) => {\n                        // Ignore the first entry in the MRO list, which is the current class,\n                        // and we've already handled its fields above.\n                        if (index === 0) {\n                            return;\n                        }\n\n                        if (isClass(mroType)) {\n                            const mroClassInfo = this._validateClassTypeIsCompletelyKnown(\n                                mroType,\n                                publicSymbolMap,\n                                currentSymbol,\n                                typeStack\n                            );\n\n                            if (mroClassInfo.classFields) {\n                                // Determine which base class contributed this ancestor class to the MRO.\n                                // We want to determine whether that base class is a public class within\n                                // this package. If so, we'll suppress reporting of errors here because\n                                // those errors would be redundant.\n                                const baseClass = mroType.details.baseClasses.find((baseClass) => {\n                                    return (\n                                        isClass(baseClass) &&\n                                        baseClass.details.mro.some(\n                                            (baseClassMro) =>\n                                                isClass(baseClassMro) &&\n                                                ClassType.isSameGenericClass(baseClassMro, mroType)\n                                        )\n                                    );\n                                }) as ClassType | undefined;\n                                const isBaseClassPublicSymbol =\n                                    baseClass && publicSymbolMap.has(baseClass.details.fullName);\n\n                                mroClassInfo.classFields.forEach((info, name) => {\n                                    if (!classFieldMap.has(name)) {\n                                        const reportError = !info.isFullyKnown && !isBaseClassPublicSymbol;\n\n                                        const diag = new DiagnosticAddendum();\n                                        if (reportError) {\n                                            diag.addAddendum(info.diag);\n                                            diag.addMessage(\n                                                `Type partially unknown for symbol \"${name}\" defined in base class \"${this._program.printType(\n                                                    convertToInstance(mroType),\n                                                    /* expandTypeAlias */ false\n                                                )}\"`\n                                            );\n                                        }\n\n                                        classFieldMap.set(name, {\n                                            isFullyKnown: !reportError,\n                                            diag,\n                                            classFields: undefined,\n                                        });\n                                    }\n                                });\n                            }\n                        }\n                    });\n\n                    // Add information for the metaclass.\n                    if (type.details.effectiveMetaclass) {\n                        if (!isClass(type.details.effectiveMetaclass)) {\n                            diag.addMessage(`Type for metaclass is unknown`);\n                            isKnown = false;\n                        } else if (!ClassType.isBuiltIn(type.details.effectiveMetaclass)) {\n                            const metaclassInfo = this._validateClassTypeIsCompletelyKnown(\n                                type.details.effectiveMetaclass,\n                                publicSymbolMap,\n                                currentSymbol,\n                                typeStack\n                            );\n\n                            const metaclassDiag = new DiagnosticAddendum();\n                            let isMetaclassKnown = true;\n                            if (!metaclassInfo.isFullyKnown) {\n                                metaclassDiag.addAddendum(metaclassInfo.diag);\n                                isMetaclassKnown = false;\n                            }\n\n                            metaclassInfo.classFields?.forEach((info) => {\n                                if (!info.isFullyKnown) {\n                                    metaclassDiag.addAddendum(info.diag);\n                                    isMetaclassKnown = false;\n                                }\n                            });\n\n                            if (!isMetaclassKnown) {\n                                metaclassDiag.addMessage(\n                                    `Type of metaclass \"${type.details.effectiveMetaclass.details.fullName}\" is partially unknown`\n                                );\n                                diag.addAddendum(metaclassDiag);\n                                isKnown = false;\n                            }\n                        }\n                    }\n\n                    // Add information for base classes.\n                    type.details.baseClasses.forEach((baseClass, index) => {\n                        const baseClassDiag = new DiagnosticAddendum();\n                        if (!isClass(baseClass)) {\n                            baseClassDiag.addMessage(`Type unknown for base class ${index + 1}`);\n                            isKnown = false;\n                        } else if (!ClassType.isBuiltIn(baseClass)) {\n                            const classInfo = this._validateClassTypeIsCompletelyKnown(\n                                baseClass,\n                                publicSymbolMap,\n                                currentSymbol,\n                                typeStack\n                            );\n\n                            if (!classInfo.isFullyKnown) {\n                                baseClassDiag.addMessage(\n                                    `Type partially unknown for base class \"${this._program.printType(\n                                        convertToInstance(baseClass),\n                                        /* expandTypeAlias */ false\n                                    )}\"`\n                                );\n\n                                diag.addAddendum(classInfo.diag);\n                                isKnown = false;\n                            }\n                        }\n                    });\n\n                    typeInfo = {\n                        isFullyKnown: isKnown,\n                        diag,\n                        classFields: classFieldMap,\n                    };\n\n                    // Cache the information so we don't need to evaluate it multiple times.\n                    this._typeCache.set(type.details.fullName, typeInfo);\n                }\n            });\n        }\n\n        // Analyze type arguments if present to make sure they are known.\n        if (type.typeArguments) {\n            this._pushType(typeStack, type.details.fullName, () => {\n                // Make a shallow copy of the typeInfo to avoid modifying the cached version.\n                const diag = new DiagnosticAddendum();\n                typeInfo!.diag.getChildren().forEach((childDiag) => {\n                    diag.addAddendum(childDiag);\n                });\n\n                typeInfo = {\n                    isFullyKnown: typeInfo!.isFullyKnown,\n                    diag,\n                    classFields: typeInfo!.classFields,\n                };\n\n                type.typeArguments!.forEach((typeArg, index) => {\n                    const typeArgDiag = new DiagnosticAddendum();\n                    const typeVarText =\n                        index < type.details.typeParameters.length\n                            ? ` which corresponds to TypeVar ${type.details.typeParameters[index].details.name}`\n                            : '';\n\n                    if (isUnknown(typeArg)) {\n                        typeArgDiag.addMessage(`Type unknown for type argument ${index + 1}${typeVarText}`);\n                        diag.addAddendum(typeArgDiag);\n                        typeInfo!.isFullyKnown = false;\n                    } else if (\n                        !this._validateTypeIsCompletelyKnown(\n                            typeArg,\n                            typeArgDiag,\n                            publicSymbolMap,\n                            currentSymbol,\n                            typeStack\n                        )\n                    ) {\n                        typeArgDiag.addMessage(`Type partially unknown for type argument ${index + 1}${typeVarText}`);\n                        diag.addAddendum(typeArgDiag);\n                        typeInfo!.isFullyKnown = false;\n                    }\n                });\n            });\n        }\n\n        return typeInfo!;\n    }\n\n    private _validateModuleTypeIsCompletelyKnown(\n        type: ModuleType,\n        publicSymbolMap: PublicSymbolMap,\n        typeStack: string[]\n    ): TypeVerificationInfo {\n        // See if this module has already been analyzed.\n        let typeInfo = this._typeCache.get(type.moduleName);\n        if (typeInfo) {\n            return typeInfo;\n        }\n\n        const diag = new DiagnosticAddendum();\n\n        if (typeStack.length > maxTypeRecursionCount) {\n            return {\n                isFullyKnown: true,\n                diag,\n                classFields: undefined,\n            };\n        }\n\n        let isKnown = true;\n\n        type.fields.forEach((symbol, name) => {\n            if (\n                !isPrivateOrProtectedName(name) &&\n                !symbol.isExternallyHidden() &&\n                !symbol.isIgnoredForProtocolMatch() &&\n                !this._isSymbolTypeImplied(ScopeType.Module, name)\n            ) {\n                const symbolType = this._program.getTypeForSymbol(symbol);\n                const packageSymbolType = this._getPackageSymbolType(symbol, symbolType);\n                const symbolTypeText = PackageTypeVerifier.getSymbolTypeString(packageSymbolType);\n                const symbolDiag = new DiagnosticAddendum();\n\n                if (isUnknown(symbolType)) {\n                    symbolDiag.addMessage(`Type unknown for ${symbolTypeText} \"${name}\"`);\n                    diag.addAddendum(symbolDiag);\n                    isKnown = false;\n                } else if (\n                    !this._validateTypeIsCompletelyKnown(\n                        symbolType,\n                        symbolDiag.createAddendum(),\n                        publicSymbolMap,\n                        '',\n                        typeStack\n                    )\n                ) {\n                    symbolDiag.addMessage(`Type partially unknown for ${symbolTypeText} \"${name}\"`);\n                    diag.addAddendum(symbolDiag);\n                    isKnown = false;\n                }\n            }\n        });\n\n        typeInfo = {\n            isFullyKnown: isKnown,\n            diag,\n            classFields: undefined,\n        };\n\n        // Cache the information so we don't need to evaluate it multiple times.\n        this._typeCache.set(type.moduleName, typeInfo);\n\n        return typeInfo;\n    }\n\n    private _getPackageSymbolType(symbol: Symbol, type: Type): PackageSymbolType {\n        if (type.typeAliasInfo) {\n            return PackageSymbolType.TypeAlias;\n        }\n\n        switch (type.category) {\n            case TypeCategory.Class: {\n                return PackageSymbolType.Class;\n            }\n\n            case TypeCategory.Function:\n            case TypeCategory.OverloadedFunction: {\n                const funcDecl = symbol\n                    .getDeclarations()\n                    .find((decl) => decl.type === DeclarationType.Function) as FunctionDeclaration;\n                if (funcDecl && funcDecl.isMethod) {\n                    return PackageSymbolType.Method;\n                }\n\n                return PackageSymbolType.Function;\n            }\n\n            case TypeCategory.Object: {\n                const varDecl = symbol\n                    .getDeclarations()\n                    .find((decl) => decl.type === DeclarationType.Variable) as VariableDeclaration;\n                if (varDecl && (varDecl.isConstant || varDecl.isFinal)) {\n                    return PackageSymbolType.Constant;\n                }\n                return PackageSymbolType.Variable;\n            }\n\n            case TypeCategory.Module: {\n                return PackageSymbolType.Module;\n            }\n\n            case TypeCategory.TypeVar: {\n                return PackageSymbolType.TypeVar;\n            }\n\n            default: {\n                const varDecl = symbol\n                    .getDeclarations()\n                    .find((decl) => decl.type === DeclarationType.Variable) as VariableDeclaration;\n                if (varDecl) {\n                    if (varDecl.isConstant || varDecl.isFinal) {\n                        return PackageSymbolType.Constant;\n                    } else {\n                        return PackageSymbolType.Variable;\n                    }\n                }\n\n                return PackageSymbolType.Indeterminate;\n            }\n        }\n    }\n\n    private _getDirectoryForPackage(packageName: string): string | undefined {\n        const moduleDescriptor: ImportedModuleDescriptor = {\n            leadingDots: 0,\n            nameParts: [packageName],\n            importedSymbols: [],\n        };\n\n        const importResult = this._importResolver.resolveImport('', this._execEnv, moduleDescriptor);\n\n        if (importResult.isImportFound) {\n            const resolvedPath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n            return getDirectoryPath(resolvedPath);\n        }\n\n        return undefined;\n    }\n\n    private _isSymbolTypeImplied(scopeType: ScopeType, name: string) {\n        if (scopeType === ScopeType.Class) {\n            const knownClassSymbols = ['__class__', '__dict__', '__doc__', '__module__', '__slots__'];\n            return knownClassSymbols.some((sym) => sym === name);\n        } else if (scopeType === ScopeType.Module) {\n            const knownModuleSymbols = [\n                '__all__',\n                '__author__',\n                '__copyright__',\n                '__email__',\n                '__license__',\n                '__title__',\n                '__uri__',\n                '__version__',\n            ];\n            return knownModuleSymbols.some((sym) => sym === name);\n        }\n\n        return false;\n    }\n}\n","/*\n * parseTreeCleaner.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * A parse tree walker that's used to clean any analysis\n * information hanging off the parse tree. It's used when\n * dependent files have been modified and the file requires\n * reanalysis. Without this, we'd need to generate a fresh\n * parse tree from scratch.\n */\n\nimport { ModuleNode, ParseNode } from '../parser/parseNodes';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport { ParseTreeWalker } from './parseTreeWalker';\n\nexport class ParseTreeCleanerWalker extends ParseTreeWalker {\n    private _parseTree: ModuleNode;\n\n    constructor(parseTree: ModuleNode) {\n        super();\n\n        this._parseTree = parseTree;\n    }\n\n    clean() {\n        this.walk(this._parseTree);\n    }\n\n    visitNode(node: ParseNode) {\n        AnalyzerNodeInfo.cleanNodeAnalysisInfo(node);\n        return super.visitNode(node);\n    }\n}\n","/*\n * parseTreeUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Utility routines for traversing a parse tree.\n */\n\nimport { fail } from '../common/debug';\nimport { convertPositionToOffset } from '../common/positionUtils';\nimport { Position } from '../common/textRange';\nimport { TextRange } from '../common/textRange';\nimport { TextRangeCollection } from '../common/textRangeCollection';\nimport {\n    ArgumentCategory,\n    AssignmentExpressionNode,\n    ClassNode,\n    EvaluationScopeNode,\n    ExecutionScopeNode,\n    ExpressionNode,\n    FunctionNode,\n    isExpressionNode,\n    LambdaNode,\n    ModuleNode,\n    NameNode,\n    ParameterCategory,\n    ParseNode,\n    ParseNodeType,\n    StatementNode,\n    SuiteNode,\n    TypeAnnotationNode,\n} from '../parser/parseNodes';\nimport { KeywordType, OperatorType, StringTokenFlags } from '../parser/tokenizerTypes';\nimport { getScope } from './analyzerNodeInfo';\nimport { decodeDocString } from './docStringUtils';\nimport { ParseTreeWalker } from './parseTreeWalker';\n\nexport const enum PrintExpressionFlags {\n    None = 0,\n\n    // Don't use string literals for forward declarations.\n    ForwardDeclarations = 1 << 0,\n}\n\nexport function getNodeDepth(node: ParseNode): number {\n    let depth = 0;\n    let curNode: ParseNode | undefined = node;\n\n    while (curNode) {\n        depth++;\n        curNode = curNode.parent;\n    }\n\n    return depth;\n}\n\n// Returns the deepest node that contains the specified position.\nexport function findNodeByPosition(\n    node: ParseNode,\n    position: Position,\n    lines: TextRangeCollection<TextRange>\n): ParseNode | undefined {\n    const offset = convertPositionToOffset(position, lines);\n    if (offset === undefined) {\n        return undefined;\n    }\n\n    return findNodeByOffset(node, offset);\n}\n\n// Returns the deepest node that contains the specified offset.\nexport function findNodeByOffset(node: ParseNode, offset: number): ParseNode | undefined {\n    if (offset < node.start || offset > TextRange.getEnd(node)) {\n        return undefined;\n    }\n\n    const parseTreeWalker = new ParseTreeWalker();\n\n    // The range is found within this node. See if we can localize it\n    // further by checking its children.\n    const children = parseTreeWalker.visitNode(node);\n    for (const child of children) {\n        if (child) {\n            const containingChild = findNodeByOffset(child, offset);\n            if (containingChild) {\n                return containingChild;\n            }\n        }\n    }\n\n    return node;\n}\n\nexport function printExpression(node: ExpressionNode, flags = PrintExpressionFlags.None): string {\n    switch (node.nodeType) {\n        case ParseNodeType.Name: {\n            return node.value;\n        }\n\n        case ParseNodeType.MemberAccess: {\n            return printExpression(node.leftExpression, flags) + '.' + node.memberName.value;\n        }\n\n        case ParseNodeType.Call: {\n            return (\n                printExpression(node.leftExpression, flags) +\n                '(' +\n                node.arguments\n                    .map((arg) => {\n                        let argStr = '';\n                        if (arg.argumentCategory === ArgumentCategory.UnpackedList) {\n                            argStr = '*';\n                        } else if (arg.argumentCategory === ArgumentCategory.UnpackedDictionary) {\n                            argStr = '**';\n                        }\n                        if (arg.name) {\n                            argStr += arg.name.value + '=';\n                        }\n                        argStr += printExpression(arg.valueExpression, flags);\n                        return argStr;\n                    })\n                    .join(', ') +\n                ')'\n            );\n        }\n\n        case ParseNodeType.Index: {\n            return (\n                printExpression(node.baseExpression, flags) +\n                '[' +\n                node.items.items.map((item) => printExpression(item, flags)).join(', ') +\n                ']'\n            );\n        }\n\n        case ParseNodeType.UnaryOperation: {\n            return printOperator(node.operator) + ' ' + printExpression(node.expression, flags);\n        }\n\n        case ParseNodeType.BinaryOperation: {\n            return (\n                printExpression(node.leftExpression, flags) +\n                ' ' +\n                printOperator(node.operator) +\n                ' ' +\n                printExpression(node.rightExpression, flags)\n            );\n        }\n\n        case ParseNodeType.Number: {\n            let value = node.value.toString();\n            if (node.isImaginary) {\n                value += 'j';\n            }\n            return value;\n        }\n\n        case ParseNodeType.StringList: {\n            if (flags & PrintExpressionFlags.ForwardDeclarations && node.typeAnnotation) {\n                return printExpression(node.typeAnnotation, flags);\n            } else {\n                return node.strings\n                    .map((str) => {\n                        return printExpression(str, flags);\n                    })\n                    .join(' ');\n            }\n        }\n\n        case ParseNodeType.String: {\n            let exprString = '';\n            if (node.token.flags & StringTokenFlags.Raw) {\n                exprString += 'r';\n            }\n\n            if (node.token.flags & StringTokenFlags.Unicode) {\n                exprString += 'u';\n            }\n\n            if (node.token.flags & StringTokenFlags.Bytes) {\n                exprString += 'b';\n            }\n\n            if (node.token.flags & StringTokenFlags.Format) {\n                exprString += 'f';\n            }\n\n            if (node.token.flags & StringTokenFlags.Triplicate) {\n                if (node.token.flags & StringTokenFlags.SingleQuote) {\n                    exprString += `'''${node.token.escapedValue}'''`;\n                } else {\n                    exprString += `\"\"\"${node.token.escapedValue}\"\"\"`;\n                }\n            } else {\n                if (node.token.flags & StringTokenFlags.SingleQuote) {\n                    exprString += `'${node.token.escapedValue}'`;\n                } else {\n                    exprString += `\"${node.token.escapedValue}\"`;\n                }\n            }\n\n            return exprString;\n        }\n\n        case ParseNodeType.Assignment: {\n            return printExpression(node.leftExpression, flags) + ' = ' + printExpression(node.rightExpression, flags);\n        }\n\n        case ParseNodeType.AssignmentExpression: {\n            return printExpression(node.name, flags) + ' := ' + printExpression(node.rightExpression, flags);\n        }\n\n        case ParseNodeType.TypeAnnotation: {\n            return printExpression(node.valueExpression, flags) + ': ' + printExpression(node.typeAnnotation, flags);\n        }\n\n        case ParseNodeType.AugmentedAssignment: {\n            return (\n                printExpression(node.leftExpression, flags) +\n                ' ' +\n                printOperator(node.operator) +\n                ' ' +\n                printExpression(node.rightExpression, flags)\n            );\n        }\n\n        case ParseNodeType.Await: {\n            return 'await ' + printExpression(node.expression, flags);\n        }\n\n        case ParseNodeType.Ternary: {\n            return (\n                printExpression(node.ifExpression, flags) +\n                ' if ' +\n                printExpression(node.testExpression, flags) +\n                ' else ' +\n                printExpression(node.elseExpression, flags)\n            );\n        }\n\n        case ParseNodeType.List: {\n            const expressions = node.entries.map((expr) => {\n                return printExpression(expr, flags);\n            });\n            return `[${expressions.join(', ')}]`;\n        }\n\n        case ParseNodeType.Unpack: {\n            return '*' + printExpression(node.expression, flags);\n        }\n\n        case ParseNodeType.Tuple: {\n            const expressions = node.expressions.map((expr) => {\n                return printExpression(expr, flags);\n            });\n            if (expressions.length === 1) {\n                return `(${expressions[0]}, )`;\n            }\n            return `(${expressions.join(', ')})`;\n        }\n\n        case ParseNodeType.Yield: {\n            if (node.expression) {\n                return 'yield ' + printExpression(node.expression, flags);\n            } else {\n                return 'yield';\n            }\n        }\n\n        case ParseNodeType.YieldFrom: {\n            return 'yield from ' + printExpression(node.expression, flags);\n        }\n\n        case ParseNodeType.Ellipsis: {\n            return '...';\n        }\n\n        case ParseNodeType.ListComprehension: {\n            let listStr = '<ListExpression>';\n\n            if (isExpressionNode(node.expression)) {\n                listStr = printExpression(node.expression as ExpressionNode, flags);\n            } else if (node.expression.nodeType === ParseNodeType.DictionaryKeyEntry) {\n                const keyStr = printExpression(node.expression.keyExpression, flags);\n                const valueStr = printExpression(node.expression.valueExpression, flags);\n                listStr = `${keyStr}: ${valueStr}`;\n            }\n\n            return (\n                listStr +\n                ' ' +\n                node.comprehensions\n                    .map((expr) => {\n                        if (expr.nodeType === ParseNodeType.ListComprehensionFor) {\n                            return (\n                                `${expr.isAsync ? 'async ' : ''}for ` +\n                                printExpression(expr.targetExpression, flags) +\n                                ` in ${printExpression(expr.iterableExpression, flags)}`\n                            );\n                        } else {\n                            return `if ${printExpression(expr.testExpression, flags)}`;\n                        }\n                    })\n                    .join(' ')\n            );\n        }\n\n        case ParseNodeType.Slice: {\n            let result = '';\n            if (node.startValue) {\n                result += printExpression(node.startValue, flags);\n            }\n            if (node.endValue) {\n                result += ': ' + printExpression(node.endValue, flags);\n            }\n            if (node.stepValue) {\n                result += ': ' + printExpression(node.stepValue, flags);\n            }\n            return result;\n        }\n\n        case ParseNodeType.Lambda: {\n            return (\n                'lambda ' +\n                node.parameters\n                    .map((param) => {\n                        let paramStr = '';\n\n                        if (param.category === ParameterCategory.VarArgList) {\n                            paramStr += '*';\n                        } else if (param.category === ParameterCategory.VarArgDictionary) {\n                            paramStr += '**';\n                        }\n\n                        if (param.name) {\n                            paramStr += param.name.value;\n                        }\n\n                        if (param.defaultValue) {\n                            paramStr += ' = ' + printExpression(param.defaultValue, flags);\n                        }\n                        return paramStr;\n                    })\n                    .join(', ') +\n                ': ' +\n                printExpression(node.expression, flags)\n            );\n        }\n\n        case ParseNodeType.Constant: {\n            if (node.constType === KeywordType.True) {\n                return 'True';\n            } else if (node.constType === KeywordType.False) {\n                return 'False';\n            } else if (node.constType === KeywordType.Debug) {\n                return '__debug__';\n            } else if (node.constType === KeywordType.None) {\n                return 'None';\n            }\n            break;\n        }\n\n        case ParseNodeType.Dictionary: {\n            return `{ ${node.entries.map((entry) => {\n                if (entry.nodeType === ParseNodeType.DictionaryKeyEntry) {\n                    return (\n                        `${printExpression(entry.keyExpression, flags)}: ` +\n                        `${printExpression(entry.valueExpression, flags)}`\n                    );\n                } else {\n                    return printExpression(entry, flags);\n                }\n            })} }`;\n        }\n\n        case ParseNodeType.DictionaryExpandEntry: {\n            return `**${printExpression(node.expandExpression, flags)}`;\n        }\n\n        case ParseNodeType.Set: {\n            return node.entries.map((entry) => printExpression(entry, flags)).join(', ');\n        }\n    }\n\n    return '<Expression>';\n}\n\nexport function printOperator(operator: OperatorType): string {\n    const operatorMap: { [operator: number]: string } = {\n        [OperatorType.Add]: '+',\n        [OperatorType.AddEqual]: '+=',\n        [OperatorType.Assign]: '=',\n        [OperatorType.BitwiseAnd]: '&',\n        [OperatorType.BitwiseAndEqual]: '&=',\n        [OperatorType.BitwiseInvert]: '~',\n        [OperatorType.BitwiseOr]: '|',\n        [OperatorType.BitwiseOrEqual]: '|=',\n        [OperatorType.BitwiseXor]: '^',\n        [OperatorType.BitwiseXorEqual]: '^=',\n        [OperatorType.Divide]: '/',\n        [OperatorType.DivideEqual]: '/=',\n        [OperatorType.Equals]: '==',\n        [OperatorType.FloorDivide]: '//',\n        [OperatorType.FloorDivideEqual]: '//=',\n        [OperatorType.GreaterThan]: '>',\n        [OperatorType.GreaterThanOrEqual]: '>=',\n        [OperatorType.LeftShift]: '<<',\n        [OperatorType.LeftShiftEqual]: '<<=',\n        [OperatorType.LessOrGreaterThan]: '<>',\n        [OperatorType.LessThan]: '<',\n        [OperatorType.LessThanOrEqual]: '<=',\n        [OperatorType.MatrixMultiply]: '@',\n        [OperatorType.MatrixMultiplyEqual]: '@=',\n        [OperatorType.Mod]: '%',\n        [OperatorType.ModEqual]: '%=',\n        [OperatorType.Multiply]: '*',\n        [OperatorType.MultiplyEqual]: '*=',\n        [OperatorType.NotEquals]: '!=',\n        [OperatorType.Power]: '**',\n        [OperatorType.PowerEqual]: '**=',\n        [OperatorType.RightShift]: '>>',\n        [OperatorType.RightShiftEqual]: '>>=',\n        [OperatorType.Subtract]: '-',\n        [OperatorType.SubtractEqual]: '-=',\n        [OperatorType.And]: 'and',\n        [OperatorType.Or]: 'or',\n        [OperatorType.Not]: 'not',\n        [OperatorType.Is]: 'is',\n        [OperatorType.IsNot]: 'is not',\n        [OperatorType.In]: 'in',\n        [OperatorType.NotIn]: 'not in',\n    };\n\n    if (operatorMap[operator]) {\n        return operatorMap[operator];\n    }\n\n    return 'unknown';\n}\n\nexport function getEnclosingClass(node: ParseNode, stopAtFunction = false): ClassNode | undefined {\n    let curNode = node.parent;\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Class) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Module) {\n            return undefined;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Function) {\n            if (stopAtFunction) {\n                return undefined;\n            }\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\nexport function getEnclosingModule(node: ParseNode): ModuleNode {\n    let curNode = node.parent;\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Module) {\n            return curNode;\n        }\n\n        curNode = curNode.parent;\n    }\n\n    fail('Module node not found');\n    return undefined!;\n}\n\nexport function getEnclosingClassOrModule(node: ParseNode, stopAtFunction = false): ClassNode | ModuleNode | undefined {\n    let curNode = node.parent;\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Class) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Module) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Function) {\n            if (stopAtFunction) {\n                return undefined;\n            }\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\nexport function getEnclosingFunction(node: ParseNode): FunctionNode | undefined {\n    let curNode = node.parent;\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Function) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Class) {\n            return undefined;\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\nexport function getEnclosingLambda(node: ParseNode): LambdaNode | undefined {\n    let curNode = node.parent;\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Lambda) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Suite) {\n            return undefined;\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\nexport function getEnclosingClassOrFunction(node: ParseNode): FunctionNode | ClassNode | undefined {\n    let curNode = node.parent;\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Function) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Class) {\n            return curNode;\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\nexport function getEnclosingSuiteOrModule(node: ParseNode): SuiteNode | ModuleNode | undefined {\n    let curNode = node.parent;\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Suite) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Module) {\n            return curNode;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Lambda) {\n            return undefined;\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\nexport function getEvaluationNodeForAssignmentExpression(\n    node: AssignmentExpressionNode\n): LambdaNode | FunctionNode | ModuleNode | undefined {\n    // PEP 572 indicates that the evaluation node for an assignment expression\n    // target is the containing lambda, function or module, but not a class.\n    let curNode: ParseNode | undefined = getEvaluationScopeNode(node);\n\n    while (curNode !== undefined) {\n        switch (curNode.nodeType) {\n            case ParseNodeType.Function:\n            case ParseNodeType.Lambda:\n            case ParseNodeType.Module:\n                return curNode;\n\n            case ParseNodeType.Class:\n                return undefined;\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\n// Returns the parse node corresponding to the scope that is used to evaluate\n// a symbol referenced in the specified node.\nexport function getEvaluationScopeNode(node: ParseNode): EvaluationScopeNode {\n    let prevNode: ParseNode | undefined;\n    let curNode: ParseNode | undefined = node;\n    let isParamNameNode = false;\n\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Parameter && prevNode === curNode.name) {\n            // Note that we passed through a parameter name node.\n            isParamNameNode = true;\n        }\n\n        // We found a scope associated with this node. In most cases,\n        // we'll return this scope, but in a few cases we need to return\n        // the enclosing scope instead.\n        switch (curNode.nodeType) {\n            case ParseNodeType.Function: {\n                if (curNode.parameters.some((param) => param === prevNode)) {\n                    if (isParamNameNode) {\n                        if (getScope(curNode) !== undefined) {\n                            return curNode;\n                        }\n                    }\n                } else if (prevNode === curNode.suite) {\n                    if (getScope(curNode) !== undefined) {\n                        return curNode;\n                    }\n                }\n                break;\n            }\n\n            case ParseNodeType.Lambda: {\n                if (curNode.parameters.some((param) => param === prevNode)) {\n                    if (isParamNameNode) {\n                        if (getScope(curNode) !== undefined) {\n                            return curNode;\n                        }\n                    }\n                } else if (!prevNode || prevNode === curNode.expression) {\n                    if (getScope(curNode) !== undefined) {\n                        return curNode;\n                    }\n                }\n                break;\n            }\n\n            case ParseNodeType.Class: {\n                if (prevNode === curNode.suite) {\n                    if (getScope(curNode) !== undefined) {\n                        return curNode;\n                    }\n                }\n                break;\n            }\n\n            case ParseNodeType.ListComprehension:\n            case ParseNodeType.Module: {\n                if (getScope(curNode) !== undefined) {\n                    return curNode;\n                }\n            }\n        }\n\n        prevNode = curNode;\n        curNode = curNode.parent;\n    }\n\n    fail('Did not find evaluation scope');\n    return undefined!;\n}\n\n// Returns the parse node corresponding to the function or class that\n// contains the specified typeVar reference.\nexport function getTypeVarScopeNode(node: ParseNode): EvaluationScopeNode {\n    let prevNode: ParseNode | undefined;\n    let curNode: ParseNode | undefined = node;\n\n    while (curNode) {\n        switch (curNode.nodeType) {\n            case ParseNodeType.Function: {\n                if (prevNode === curNode.suite) {\n                    return curNode;\n                }\n                break;\n            }\n\n            case ParseNodeType.Class: {\n                if (prevNode === curNode.suite) {\n                    return curNode;\n                }\n                break;\n            }\n        }\n\n        prevNode = curNode;\n        curNode = curNode.parent;\n    }\n\n    return undefined!;\n}\n\n// Returns the parse node corresponding to the scope that is used\n// for executing the code referenced in the specified node.\nexport function getExecutionScopeNode(node: ParseNode): ExecutionScopeNode {\n    let evaluationScope = getEvaluationScopeNode(node);\n\n    // Classes are not considered execution scope because they are executed\n    // within the context of their containing module or function. Likewise, list\n    // comprehensions are executed within their container.\n    while (\n        evaluationScope.nodeType === ParseNodeType.Class ||\n        evaluationScope.nodeType === ParseNodeType.ListComprehension\n    ) {\n        evaluationScope = getEvaluationScopeNode(evaluationScope.parent!);\n    }\n\n    return evaluationScope;\n}\n\n// Given a node within a type annotation expression, returns the type annotation\n// node that contains it (if applicable).\nexport function getTypeAnnotationNode(node: ParseNode): TypeAnnotationNode | undefined {\n    let prevNode = node;\n    let curNode = node.parent;\n\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.TypeAnnotation) {\n            if (curNode.typeAnnotation === prevNode) {\n                return curNode;\n            }\n\n            break;\n        }\n\n        prevNode = curNode;\n        curNode = curNode.parent;\n    }\n\n    return undefined;\n}\n\n// PEP 591 spells out certain limited cases where an assignment target\n// can be annotated with a \"Final\" annotation. This function determines\n// whether Final is allowed for the specified node.\nexport function isFinalAllowedForAssignmentTarget(targetNode: ExpressionNode): boolean {\n    // Simple names always support Final.\n    if (targetNode.nodeType === ParseNodeType.Name) {\n        return true;\n    }\n\n    // Member access expressions like \"self.x\" are permitted only\n    // within __init__ methods.\n    if (targetNode.nodeType === ParseNodeType.MemberAccess) {\n        if (targetNode.leftExpression.nodeType !== ParseNodeType.Name) {\n            return false;\n        }\n\n        const classNode = getEnclosingClass(targetNode);\n        if (!classNode) {\n            return false;\n        }\n\n        const methodNode = getEnclosingFunction(targetNode);\n        if (!methodNode) {\n            return false;\n        }\n\n        if (methodNode.name.value !== '__init__') {\n            return false;\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\nexport function isNodeContainedWithin(node: ParseNode, potentialContainer: ParseNode): boolean {\n    let curNode: ParseNode | undefined = node;\n    while (curNode) {\n        if (curNode === potentialContainer) {\n            return true;\n        }\n\n        curNode = curNode.parent;\n    }\n\n    return false;\n}\n\nexport function isSuiteEmpty(node: SuiteNode): boolean {\n    for (const statement of node.statements) {\n        if (statement.nodeType === ParseNodeType.StatementList) {\n            for (const substatement of statement.statements) {\n                if (substatement.nodeType === ParseNodeType.Ellipsis) {\n                    // Allow an ellipsis\n                } else if (substatement.nodeType === ParseNodeType.StringList) {\n                    // Allow doc strings\n                } else {\n                    return false;\n                }\n            }\n        } else {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isMatchingExpression(expression1: ExpressionNode, expression2: ExpressionNode): boolean {\n    if (expression1.nodeType === ParseNodeType.Name && expression2.nodeType === ParseNodeType.Name) {\n        return expression1.value === expression2.value;\n    } else if (\n        expression1.nodeType === ParseNodeType.MemberAccess &&\n        expression2.nodeType === ParseNodeType.MemberAccess\n    ) {\n        return (\n            isMatchingExpression(expression1.leftExpression, expression2.leftExpression) &&\n            expression1.memberName.value === expression2.memberName.value\n        );\n    }\n\n    return false;\n}\n\nexport function isWithinDefaultParamInitializer(node: ParseNode) {\n    let curNode: ParseNode | undefined = node;\n    let prevNode: ParseNode | undefined;\n\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Parameter && prevNode === curNode.defaultValue) {\n            return true;\n        }\n\n        if (\n            curNode.nodeType === ParseNodeType.Lambda ||\n            curNode.nodeType === ParseNodeType.Function ||\n            curNode.nodeType === ParseNodeType.Class ||\n            curNode.nodeType === ParseNodeType.Module\n        ) {\n            return false;\n        }\n\n        prevNode = curNode;\n        curNode = curNode.parent;\n    }\n\n    return false;\n}\n\nexport function isWithinTypeAnnotation(node: ParseNode, requireQuotedAnnotation: boolean) {\n    let curNode: ParseNode | undefined = node;\n    let prevNode: ParseNode | undefined;\n    let isQuoted = false;\n\n    while (curNode) {\n        if (\n            curNode.nodeType === ParseNodeType.Parameter &&\n            (prevNode === curNode.typeAnnotation || prevNode === curNode.typeAnnotationComment)\n        ) {\n            return isQuoted || !requireQuotedAnnotation;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Function && prevNode === curNode.returnTypeAnnotation) {\n            return isQuoted || !requireQuotedAnnotation;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Function && prevNode === curNode.functionAnnotationComment) {\n            // Type comments are always considered forward declarations even though\n            // they're not \"quoted\".\n            return true;\n        }\n\n        if (curNode.nodeType === ParseNodeType.TypeAnnotation && prevNode === curNode.typeAnnotation) {\n            return isQuoted || !requireQuotedAnnotation;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Assignment && prevNode === curNode.typeAnnotationComment) {\n            // Type comments are always considered forward declarations even though\n            // they're not \"quoted\".\n            return true;\n        }\n\n        if (curNode.nodeType === ParseNodeType.StringList && prevNode === curNode.typeAnnotation) {\n            isQuoted = true;\n        }\n\n        if (\n            curNode.nodeType === ParseNodeType.Lambda ||\n            curNode.nodeType === ParseNodeType.Function ||\n            curNode.nodeType === ParseNodeType.Class ||\n            curNode.nodeType === ParseNodeType.Module\n        ) {\n            return false;\n        }\n\n        prevNode = curNode;\n        curNode = curNode.parent;\n    }\n\n    return false;\n}\n\nexport function isWithinAnnotationComment(node: ParseNode) {\n    let curNode: ParseNode | undefined = node;\n    let prevNode: ParseNode | undefined;\n\n    while (curNode) {\n        if (curNode.nodeType === ParseNodeType.Function && prevNode === curNode.functionAnnotationComment) {\n            // Type comments are always considered forward declarations even though\n            // they're not \"quoted\".\n            return true;\n        }\n\n        if (curNode.nodeType === ParseNodeType.Assignment && prevNode === curNode.typeAnnotationComment) {\n            // Type comments are always considered forward declarations even though\n            // they're not \"quoted\".\n            return true;\n        }\n\n        if (\n            curNode.nodeType === ParseNodeType.Lambda ||\n            curNode.nodeType === ParseNodeType.Function ||\n            curNode.nodeType === ParseNodeType.Class ||\n            curNode.nodeType === ParseNodeType.Module\n        ) {\n            return false;\n        }\n\n        prevNode = curNode;\n        curNode = curNode.parent;\n    }\n\n    return false;\n}\n\nexport function getDocString(statements: StatementNode[]): string | undefined {\n    // See if the first statement in the suite is a triple-quote string.\n    if (statements.length === 0) {\n        return undefined;\n    }\n\n    if (statements[0].nodeType !== ParseNodeType.StatementList) {\n        return undefined;\n    }\n\n    // If the first statement in the suite isn't a StringNode,\n    // assume there is no docString.\n    const statementList = statements[0];\n    if (statementList.statements.length === 0 || statementList.statements[0].nodeType !== ParseNodeType.StringList) {\n        return undefined;\n    }\n\n    const docStringNode = statementList.statements[0];\n    const docStringToken = docStringNode.strings[0].token;\n\n    // Ignore f-strings.\n    if ((docStringToken.flags & StringTokenFlags.Format) !== 0) {\n        return undefined;\n    }\n\n    return decodeDocString(docStringNode.strings[0].value);\n}\n\n// Sometimes a NamedTuple assignment statement is followed by a statement\n// that looks like the following:\n//    MyNamedTuple.__new__.__defaults__ = ...\n// This pattern is commonly used to set the default values that are\n// not specified in the original list.\nexport function isAssignmentToDefaultsFollowingNamedTuple(callNode: ParseNode): boolean {\n    if (\n        callNode.nodeType !== ParseNodeType.Call ||\n        !callNode.parent ||\n        callNode.parent.nodeType !== ParseNodeType.Assignment ||\n        callNode.parent.leftExpression.nodeType !== ParseNodeType.Name ||\n        !callNode.parent.parent ||\n        callNode.parent.parent.nodeType !== ParseNodeType.StatementList\n    ) {\n        return false;\n    }\n\n    const namedTupleAssignedName = callNode.parent.leftExpression.value;\n    const statementList = callNode.parent.parent;\n    if (\n        statementList.statements[0] !== callNode.parent ||\n        !statementList.parent ||\n        !(\n            statementList.parent.nodeType === ParseNodeType.Module ||\n            statementList.parent.nodeType === ParseNodeType.Suite\n        )\n    ) {\n        return false;\n    }\n\n    const moduleOrSuite = statementList.parent;\n    let statementIndex = moduleOrSuite.statements.findIndex((s) => s === statementList);\n\n    if (statementIndex < 0) {\n        return false;\n    }\n    statementIndex++;\n\n    while (statementIndex < moduleOrSuite.statements.length) {\n        const nextStatement = moduleOrSuite.statements[statementIndex];\n        if (nextStatement.nodeType !== ParseNodeType.StatementList) {\n            break;\n        }\n\n        if (nextStatement.statements[0].nodeType === ParseNodeType.StringList) {\n            // Skip over comments\n            statementIndex++;\n            continue;\n        }\n\n        if (nextStatement.statements[0].nodeType === ParseNodeType.Assignment) {\n            const assignNode = nextStatement.statements[0];\n            if (\n                assignNode.leftExpression.nodeType === ParseNodeType.MemberAccess &&\n                assignNode.leftExpression.memberName.value === '__defaults__'\n            ) {\n                const defaultTarget = assignNode.leftExpression.leftExpression;\n                if (\n                    defaultTarget.nodeType === ParseNodeType.MemberAccess &&\n                    defaultTarget.memberName.value === '__new__' &&\n                    defaultTarget.leftExpression.nodeType === ParseNodeType.Name &&\n                    defaultTarget.leftExpression.value === namedTupleAssignedName\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        break;\n    }\n\n    return false;\n}\n","/*\n * parseTreeWalker.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Class that traverses a parse tree.\n */\n\nimport { fail } from '../common/debug';\nimport {\n    ArgumentNode,\n    AssertNode,\n    AssignmentExpressionNode,\n    AssignmentNode,\n    AugmentedAssignmentNode,\n    AwaitNode,\n    BinaryOperationNode,\n    BreakNode,\n    CallNode,\n    ClassNode,\n    ConstantNode,\n    ContinueNode,\n    DecoratorNode,\n    DelNode,\n    DictionaryExpandEntryNode,\n    DictionaryKeyEntryNode,\n    DictionaryNode,\n    EllipsisNode,\n    ErrorNode,\n    ExceptNode,\n    FormatStringNode,\n    ForNode,\n    FunctionAnnotationNode,\n    FunctionNode,\n    GlobalNode,\n    IfNode,\n    ImportAsNode,\n    ImportFromAsNode,\n    ImportFromNode,\n    ImportNode,\n    IndexItemsNode,\n    IndexNode,\n    LambdaNode,\n    ListComprehensionForNode,\n    ListComprehensionIfNode,\n    ListComprehensionNode,\n    ListNode,\n    MemberAccessNode,\n    ModuleNameNode,\n    ModuleNode,\n    NameNode,\n    NonlocalNode,\n    NumberNode,\n    ParameterNode,\n    ParseNode,\n    ParseNodeArray,\n    ParseNodeType,\n    PassNode,\n    RaiseNode,\n    ReturnNode,\n    SetNode,\n    SliceNode,\n    StatementListNode,\n    StringListNode,\n    StringNode,\n    SuiteNode,\n    TernaryNode,\n    TryNode,\n    TupleNode,\n    TypeAnnotationNode,\n    UnaryOperationNode,\n    UnpackNode,\n    WhileNode,\n    WithItemNode,\n    WithNode,\n    YieldFromNode,\n    YieldNode,\n} from '../parser/parseNodes';\n\n// To use this class, create a subclass and override the\n// visitXXX methods that you want to handle.\nexport class ParseTreeWalker {\n    walk(node: ParseNode): void {\n        const childrenToWalk = this.visitNode(node);\n        if (childrenToWalk.length > 0) {\n            this.walkMultiple(childrenToWalk);\n        }\n    }\n\n    walkMultiple(nodes: ParseNodeArray) {\n        nodes.forEach((node) => {\n            if (node) {\n                this.walk(node);\n            }\n        });\n    }\n\n    // Calls the node-specific method (visitXXXX). If the method\n    // returns true, all child nodes for the node are returned.\n    // If the method returns false, we assume that the handler\n    // has already handled the child nodes, so an empty list is\n    // returned.\n    visitNode(node: ParseNode): ParseNodeArray {\n        switch (node.nodeType) {\n            case ParseNodeType.Argument:\n                if (this.visitArgument(node)) {\n                    return [node.name, node.valueExpression];\n                }\n                break;\n\n            case ParseNodeType.Assert:\n                if (this.visitAssert(node)) {\n                    return [node.testExpression, node.exceptionExpression];\n                }\n                break;\n\n            case ParseNodeType.Assignment:\n                if (this.visitAssignment(node)) {\n                    return [node.leftExpression, node.rightExpression, node.typeAnnotationComment];\n                }\n                break;\n\n            case ParseNodeType.AssignmentExpression:\n                if (this.visitAssignmentExpression(node)) {\n                    return [node.name, node.rightExpression];\n                }\n                break;\n\n            case ParseNodeType.AugmentedAssignment:\n                if (this.visitAugmentedAssignment(node)) {\n                    return [node.leftExpression, node.rightExpression];\n                }\n                break;\n\n            case ParseNodeType.Await:\n                if (this.visitAwait(node)) {\n                    return [node.expression];\n                }\n                break;\n\n            case ParseNodeType.BinaryOperation:\n                if (this.visitBinaryOperation(node)) {\n                    return [node.leftExpression, node.rightExpression];\n                }\n                break;\n\n            case ParseNodeType.Break:\n                if (this.visitBreak(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.Call:\n                if (this.visitCall(node)) {\n                    return [node.leftExpression, ...node.arguments];\n                }\n                break;\n\n            case ParseNodeType.Class:\n                if (this.visitClass(node)) {\n                    return [...node.decorators, node.name, ...node.arguments, node.suite];\n                }\n                break;\n\n            case ParseNodeType.Ternary:\n                if (this.visitTernary(node)) {\n                    return [node.ifExpression, node.testExpression, node.elseExpression];\n                }\n                break;\n\n            case ParseNodeType.Constant:\n                if (this.visitConstant(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.Continue:\n                if (this.visitContinue(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.Decorator:\n                if (this.visitDecorator(node)) {\n                    return [node.expression];\n                }\n                break;\n\n            case ParseNodeType.Del:\n                if (this.visitDel(node)) {\n                    return node.expressions;\n                }\n                break;\n\n            case ParseNodeType.Dictionary:\n                if (this.visitDictionary(node)) {\n                    return node.entries;\n                }\n                break;\n\n            case ParseNodeType.DictionaryKeyEntry:\n                if (this.visitDictionaryKeyEntry(node)) {\n                    return [node.keyExpression, node.valueExpression];\n                }\n                break;\n\n            case ParseNodeType.DictionaryExpandEntry:\n                if (this.visitDictionaryExpandEntry(node)) {\n                    return [node.expandExpression];\n                }\n                break;\n\n            case ParseNodeType.Error:\n                if (this.visitError(node)) {\n                    return [node.child];\n                }\n                break;\n\n            case ParseNodeType.If:\n                if (this.visitIf(node)) {\n                    return [node.testExpression, node.ifSuite, node.elseSuite];\n                }\n                break;\n\n            case ParseNodeType.Import:\n                if (this.visitImport(node)) {\n                    return node.list;\n                }\n                break;\n\n            case ParseNodeType.ImportAs:\n                if (this.visitImportAs(node)) {\n                    return [node.module, node.alias];\n                }\n                break;\n\n            case ParseNodeType.ImportFrom:\n                if (this.visitImportFrom(node)) {\n                    return [node.module, ...node.imports];\n                }\n                break;\n\n            case ParseNodeType.ImportFromAs:\n                if (this.visitImportFromAs(node)) {\n                    return [node.name, node.alias];\n                }\n                break;\n\n            case ParseNodeType.Index:\n                if (this.visitIndex(node)) {\n                    return [node.baseExpression, node.items];\n                }\n                break;\n\n            case ParseNodeType.IndexItems:\n                if (this.visitIndexItems(node)) {\n                    return node.items;\n                }\n                break;\n\n            case ParseNodeType.Ellipsis:\n                if (this.visitEllipsis(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.Except:\n                if (this.visitExcept(node)) {\n                    return [node.typeExpression, node.name, node.exceptSuite];\n                }\n                break;\n\n            case ParseNodeType.For:\n                if (this.visitFor(node)) {\n                    return [node.targetExpression, node.iterableExpression, node.forSuite, node.elseSuite];\n                }\n                break;\n\n            case ParseNodeType.FormatString:\n                if (this.visitFormatString(node)) {\n                    return node.expressions;\n                }\n                break;\n\n            case ParseNodeType.Function:\n                if (this.visitFunction(node)) {\n                    return [\n                        ...node.decorators,\n                        node.name,\n                        ...node.parameters,\n                        node.returnTypeAnnotation,\n                        node.functionAnnotationComment,\n                        node.suite,\n                    ];\n                }\n                break;\n\n            case ParseNodeType.FunctionAnnotation:\n                if (this.visitFunctionAnnotation(node)) {\n                    return [...node.paramTypeAnnotations, node.returnTypeAnnotation];\n                }\n                break;\n\n            case ParseNodeType.Global:\n                if (this.visitGlobal(node)) {\n                    return node.nameList;\n                }\n                break;\n\n            case ParseNodeType.Lambda:\n                if (this.visitLambda(node)) {\n                    return [...node.parameters, node.expression];\n                }\n                break;\n\n            case ParseNodeType.List:\n                if (this.visitList(node)) {\n                    return node.entries;\n                }\n                break;\n\n            case ParseNodeType.ListComprehension:\n                if (this.visitListComprehension(node)) {\n                    return [node.expression, ...node.comprehensions];\n                }\n                break;\n\n            case ParseNodeType.ListComprehensionFor:\n                if (this.visitListComprehensionFor(node)) {\n                    return [node.targetExpression, node.iterableExpression];\n                }\n                break;\n\n            case ParseNodeType.ListComprehensionIf:\n                if (this.visitListComprehensionIf(node)) {\n                    return [node.testExpression];\n                }\n                break;\n\n            case ParseNodeType.MemberAccess:\n                if (this.visitMemberAccess(node)) {\n                    return [node.leftExpression, node.memberName];\n                }\n                break;\n\n            case ParseNodeType.Module:\n                if (this.visitModule(node)) {\n                    return [...node.statements];\n                }\n                break;\n\n            case ParseNodeType.ModuleName:\n                if (this.visitModuleName(node)) {\n                    return node.nameParts;\n                }\n                break;\n\n            case ParseNodeType.Name:\n                if (this.visitName(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.Nonlocal:\n                if (this.visitNonlocal(node)) {\n                    return node.nameList;\n                }\n                break;\n\n            case ParseNodeType.Number:\n                if (this.visitNumber(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.Parameter:\n                if (this.visitParameter(node)) {\n                    return [node.name, node.typeAnnotation, node.typeAnnotationComment, node.defaultValue];\n                }\n                break;\n\n            case ParseNodeType.Pass:\n                if (this.visitPass(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.Raise:\n                if (this.visitRaise(node)) {\n                    return [node.typeExpression, node.valueExpression, node.tracebackExpression];\n                }\n                break;\n\n            case ParseNodeType.Return:\n                if (this.visitReturn(node)) {\n                    return [node.returnExpression];\n                }\n                break;\n\n            case ParseNodeType.Set:\n                if (this.visitSet(node)) {\n                    return node.entries;\n                }\n                break;\n\n            case ParseNodeType.Slice:\n                if (this.visitSlice(node)) {\n                    return [node.startValue, node.endValue, node.stepValue];\n                }\n                break;\n\n            case ParseNodeType.StatementList:\n                if (this.visitStatementList(node)) {\n                    return node.statements;\n                }\n                break;\n\n            case ParseNodeType.String:\n                if (this.visitString(node)) {\n                    return [];\n                }\n                break;\n\n            case ParseNodeType.StringList:\n                if (this.visitStringList(node)) {\n                    return [node.typeAnnotation, ...node.strings];\n                }\n                break;\n\n            case ParseNodeType.Suite:\n                if (this.visitSuite(node)) {\n                    return [...node.statements];\n                }\n                break;\n\n            case ParseNodeType.Tuple:\n                if (this.visitTuple(node)) {\n                    return node.expressions;\n                }\n                break;\n\n            case ParseNodeType.Try:\n                if (this.visitTry(node)) {\n                    return [node.trySuite, ...node.exceptClauses, node.elseSuite, node.finallySuite];\n                }\n                break;\n\n            case ParseNodeType.TypeAnnotation:\n                if (this.visitTypeAnnotation(node)) {\n                    return [node.valueExpression, node.typeAnnotation];\n                }\n                break;\n\n            case ParseNodeType.UnaryOperation:\n                if (this.visitUnaryOperation(node)) {\n                    return [node.expression];\n                }\n                break;\n\n            case ParseNodeType.Unpack:\n                if (this.visitUnpack(node)) {\n                    return [node.expression];\n                }\n                break;\n\n            case ParseNodeType.While:\n                if (this.visitWhile(node)) {\n                    return [node.testExpression, node.whileSuite, node.elseSuite];\n                }\n                break;\n\n            case ParseNodeType.With:\n                if (this.visitWith(node)) {\n                    return [...node.withItems, node.suite];\n                }\n                break;\n\n            case ParseNodeType.WithItem:\n                if (this.visitWithItem(node)) {\n                    return [node.expression, node.target];\n                }\n                break;\n\n            case ParseNodeType.Yield:\n                if (this.visitYield(node)) {\n                    return [node.expression];\n                }\n                break;\n\n            case ParseNodeType.YieldFrom:\n                if (this.visitYieldFrom(node)) {\n                    return [node.expression];\n                }\n                break;\n\n            default:\n                fail('Unexpected node type');\n                break;\n        }\n\n        return [];\n    }\n\n    // Override these methods as necessary.\n    visitArgument(node: ArgumentNode) {\n        return true;\n    }\n\n    visitAssert(node: AssertNode) {\n        return true;\n    }\n\n    visitAssignment(node: AssignmentNode) {\n        return true;\n    }\n\n    visitAssignmentExpression(node: AssignmentExpressionNode) {\n        return true;\n    }\n\n    visitAugmentedAssignment(node: AugmentedAssignmentNode) {\n        return true;\n    }\n\n    visitAwait(node: AwaitNode) {\n        return true;\n    }\n\n    visitBinaryOperation(node: BinaryOperationNode) {\n        return true;\n    }\n\n    visitBreak(node: BreakNode) {\n        return true;\n    }\n\n    visitCall(node: CallNode) {\n        return true;\n    }\n\n    visitClass(node: ClassNode) {\n        return true;\n    }\n\n    visitTernary(node: TernaryNode) {\n        return true;\n    }\n\n    visitContinue(node: ContinueNode) {\n        return true;\n    }\n\n    visitConstant(node: ConstantNode) {\n        return true;\n    }\n\n    visitDecorator(node: DecoratorNode) {\n        return true;\n    }\n\n    visitDel(node: DelNode) {\n        return true;\n    }\n\n    visitDictionary(node: DictionaryNode) {\n        return true;\n    }\n\n    visitDictionaryKeyEntry(node: DictionaryKeyEntryNode) {\n        return true;\n    }\n\n    visitDictionaryExpandEntry(node: DictionaryExpandEntryNode) {\n        return true;\n    }\n\n    visitError(node: ErrorNode) {\n        return true;\n    }\n\n    visitEllipsis(node: EllipsisNode) {\n        return true;\n    }\n\n    visitIf(node: IfNode) {\n        return true;\n    }\n\n    visitImport(node: ImportNode) {\n        return true;\n    }\n\n    visitImportAs(node: ImportAsNode) {\n        return true;\n    }\n\n    visitImportFrom(node: ImportFromNode) {\n        return true;\n    }\n\n    visitImportFromAs(node: ImportFromAsNode) {\n        return true;\n    }\n\n    visitIndex(node: IndexNode) {\n        return true;\n    }\n\n    visitIndexItems(node: IndexItemsNode) {\n        return true;\n    }\n\n    visitExcept(node: ExceptNode) {\n        return true;\n    }\n\n    visitFor(node: ForNode) {\n        return true;\n    }\n\n    visitFormatString(node: FormatStringNode) {\n        return true;\n    }\n\n    visitFunction(node: FunctionNode) {\n        return true;\n    }\n\n    visitFunctionAnnotation(node: FunctionAnnotationNode) {\n        return true;\n    }\n\n    visitGlobal(node: GlobalNode) {\n        return true;\n    }\n\n    visitLambda(node: LambdaNode) {\n        return true;\n    }\n\n    visitList(node: ListNode) {\n        return true;\n    }\n\n    visitListComprehension(node: ListComprehensionNode) {\n        return true;\n    }\n\n    visitListComprehensionFor(node: ListComprehensionForNode) {\n        return true;\n    }\n\n    visitListComprehensionIf(node: ListComprehensionIfNode) {\n        return true;\n    }\n\n    visitMemberAccess(node: MemberAccessNode) {\n        return true;\n    }\n\n    visitModule(node: ModuleNode) {\n        return true;\n    }\n\n    visitModuleName(node: ModuleNameNode) {\n        return true;\n    }\n\n    visitName(node: NameNode) {\n        return true;\n    }\n\n    visitNonlocal(node: NonlocalNode) {\n        return true;\n    }\n\n    visitNumber(node: NumberNode) {\n        return true;\n    }\n\n    visitParameter(node: ParameterNode) {\n        return true;\n    }\n\n    visitPass(node: PassNode) {\n        return true;\n    }\n\n    visitRaise(node: RaiseNode) {\n        return true;\n    }\n\n    visitReturn(node: ReturnNode) {\n        return true;\n    }\n\n    visitSet(node: SetNode) {\n        return true;\n    }\n\n    visitSlice(node: SliceNode) {\n        return true;\n    }\n\n    visitStatementList(node: StatementListNode) {\n        return true;\n    }\n\n    visitString(node: StringNode) {\n        return true;\n    }\n\n    visitStringList(node: StringListNode) {\n        return true;\n    }\n\n    visitSuite(node: SuiteNode) {\n        return true;\n    }\n\n    visitTuple(node: TupleNode) {\n        return true;\n    }\n\n    visitTry(node: TryNode) {\n        return true;\n    }\n\n    visitTypeAnnotation(node: TypeAnnotationNode) {\n        return true;\n    }\n\n    visitUnaryOperation(node: UnaryOperationNode) {\n        return true;\n    }\n\n    visitUnpack(node: UnpackNode) {\n        return true;\n    }\n\n    visitWhile(node: WhileNode) {\n        return true;\n    }\n\n    visitWith(node: WithNode) {\n        return true;\n    }\n\n    visitWithItem(node: WithItemNode) {\n        return true;\n    }\n\n    visitYield(node: YieldNode) {\n        return true;\n    }\n\n    visitYieldFrom(node: YieldFromNode) {\n        return true;\n    }\n}\n","/*\n * program.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * An object that tracks all of the source files being analyzed\n * and all of their recursive imports.\n */\n\nimport { CancellationToken, CompletionItem, DocumentSymbol, SymbolInformation } from 'vscode-languageserver';\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-textdocument';\nimport {\n    CallHierarchyIncomingCall,\n    CallHierarchyItem,\n    CallHierarchyOutgoingCall,\n    DocumentHighlight,\n    MarkupKind,\n} from 'vscode-languageserver-types';\n\nimport { OperationCanceledException, throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { ConfigOptions, ExecutionEnvironment } from '../common/configOptions';\nimport { ConsoleInterface, StandardConsole } from '../common/console';\nimport { isDebugMode } from '../common/core';\nimport { assert } from '../common/debug';\nimport { Diagnostic } from '../common/diagnostic';\nimport { FileDiagnostics } from '../common/diagnosticSink';\nimport { FileEditAction, TextEditAction } from '../common/editAction';\nimport { LanguageServiceExtension } from '../common/extensibility';\nimport { LogTracker } from '../common/logTracker';\nimport {\n    combinePaths,\n    getDirectoryPath,\n    getFileName,\n    getRelativePath,\n    makeDirectories,\n    normalizePath,\n    normalizePathCase,\n    stripFileExtension,\n} from '../common/pathUtils';\nimport { convertPositionToOffset, convertRangeToTextRange } from '../common/positionUtils';\nimport { DocumentRange, doesRangeContain, doRangesIntersect, Position, Range } from '../common/textRange';\nimport { Duration, timingStats } from '../common/timing';\nimport {\n    AutoImporter,\n    AutoImportResult,\n    buildModuleSymbolsMap,\n    ModuleSymbolMap,\n} from '../languageService/autoImporter';\nimport { CallHierarchyProvider } from '../languageService/callHierarchyProvider';\nimport { CompletionResults } from '../languageService/completionProvider';\nimport { IndexOptions, IndexResults, WorkspaceSymbolCallback } from '../languageService/documentSymbolProvider';\nimport { HoverResults } from '../languageService/hoverProvider';\nimport { ReferenceCallback, ReferencesResult } from '../languageService/referencesProvider';\nimport { SignatureHelpResults } from '../languageService/signatureHelpProvider';\nimport { ImportLookupResult } from './analyzerFileInfo';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport { CircularDependency } from './circularDependency';\nimport { ImportResolver } from './importResolver';\nimport { ImportResult, ImportType } from './importResult';\nimport { findNodeByOffset } from './parseTreeUtils';\nimport { Scope } from './scope';\nimport { getScopeForNode } from './scopeUtils';\nimport { SourceFile } from './sourceFile';\nimport { SourceMapper } from './sourceMapper';\nimport { Symbol } from './symbol';\nimport { isPrivateOrProtectedName } from './symbolNameUtils';\nimport { createTypeEvaluator, PrintTypeFlags, TypeEvaluator } from './typeEvaluator';\nimport { Type } from './types';\nimport { TypeStubWriter } from './typeStubWriter';\n\nconst _maxImportDepth = 256;\n\n// Tracks information about each source file in a program,\n// including the reason it was added to the program and any\n// dependencies that it has on other files in the program.\nexport interface SourceFileInfo {\n    // Reference to the source file\n    sourceFile: SourceFile;\n\n    // Information about the source file\n    isTypeshedFile: boolean;\n    isThirdPartyImport: boolean;\n    isThirdPartyPyTypedPresent: boolean;\n    diagnosticsVersion?: number;\n    builtinsImport?: SourceFileInfo;\n\n    // Information about why the file is included in the program\n    // and its relation to other source files in the program.\n    isTracked: boolean;\n    isOpenByClient: boolean;\n    imports: SourceFileInfo[];\n    importedBy: SourceFileInfo[];\n    shadows: SourceFileInfo[];\n    shadowedBy: SourceFileInfo[];\n}\n\nexport interface MaxAnalysisTime {\n    // Maximum number of ms to analyze when there are open files\n    // that require analysis. This number is usually kept relatively\n    // small to guarantee responsiveness during typing.\n    openFilesTimeInMs: number;\n\n    // Maximum number of ms to analyze when all open files and their\n    // dependencies have been analyzed. This number can be higher\n    // to reduce overall analysis time but needs to be short enough\n    // to remain responsive if an open file is modified.\n    noOpenFilesTimeInMs: number;\n}\n\nexport interface Indices {\n    setWorkspaceIndex(path: string, indexResults: IndexResults): void;\n    getIndex(execEnv: string): Map<string, IndexResults> | undefined;\n    setIndex(execEnv: string, path: string, indexResults: IndexResults): void;\n    reset(): void;\n}\n\ninterface UpdateImportInfo {\n    path: string;\n    isTypeshedFile: boolean;\n    isThirdPartyImport: boolean;\n    isPyTypedPresent: boolean;\n}\n\n// Container for all of the files that are being analyzed. Files\n// can fall into one or more of the following categories:\n//  Tracked - specified by the config options\n//  Referenced - part of the transitive closure\n//  Opened - temporarily opened in the editor\n//  Shadowed - implementation file that shadows a type stub file\nexport class Program {\n    private _console: ConsoleInterface;\n    private _sourceFileList: SourceFileInfo[] = [];\n    private _sourceFileMap = new Map<string, SourceFileInfo>();\n    private _allowedThirdPartyImports: string[] | undefined;\n    private _evaluator: TypeEvaluator | undefined;\n    private _configOptions: ConfigOptions;\n    private _importResolver: ImportResolver;\n    private _logTracker: LogTracker;\n    private _parsedFileCount = 0;\n\n    constructor(\n        initialImportResolver: ImportResolver,\n        initialConfigOptions: ConfigOptions,\n        console?: ConsoleInterface,\n        private _extension?: LanguageServiceExtension,\n        logTracker?: LogTracker\n    ) {\n        this._console = console || new StandardConsole();\n        this._logTracker = logTracker ?? new LogTracker(console, 'FG');\n        this._importResolver = initialImportResolver;\n        this._configOptions = initialConfigOptions;\n        this._createNewEvaluator();\n    }\n\n    get evaluator(): TypeEvaluator | undefined {\n        return this._evaluator;\n    }\n\n    setConfigOptions(configOptions: ConfigOptions) {\n        this._configOptions = configOptions;\n\n        // Create a new evaluator with the updated config options.\n        this._createNewEvaluator();\n    }\n\n    setImportResolver(importResolver: ImportResolver) {\n        this._importResolver = importResolver;\n    }\n\n    // Sets the list of tracked files that make up the program.\n    setTrackedFiles(filePaths: string[]): FileDiagnostics[] {\n        if (this._sourceFileList.length > 0) {\n            // We need to determine which files to remove from the existing file list.\n            const newFileMap = new Map<string, string>();\n            filePaths.forEach((path) => {\n                newFileMap.set(normalizePathCase(this._fs, path), path);\n            });\n\n            // Files that are not in the tracked file list are\n            // marked as no longer tracked.\n            this._sourceFileList.forEach((oldFile) => {\n                const filePath = normalizePathCase(this._fs, oldFile.sourceFile.getFilePath());\n                if (!newFileMap.has(filePath)) {\n                    oldFile.isTracked = false;\n                }\n            });\n        }\n\n        // Add the new files. Only the new items will be added.\n        this.addTrackedFiles(filePaths);\n\n        return this._removeUnneededFiles();\n    }\n\n    // By default, no third-party imports are allowed. This enables\n    // third-party imports for a specified import and its children.\n    // For example, if importNames is ['tensorflow'], then third-party\n    // (absolute) imports are allowed for 'import tensorflow',\n    // 'import tensorflow.optimizers', etc.\n    setAllowedThirdPartyImports(importNames: string[]) {\n        this._allowedThirdPartyImports = importNames;\n    }\n\n    addTrackedFiles(filePaths: string[], isThirdPartyImport = false, isInPyTypedPackage = false) {\n        filePaths.forEach((filePath) => {\n            this.addTrackedFile(filePath, isThirdPartyImport, isInPyTypedPackage);\n        });\n    }\n\n    addTrackedFile(filePath: string, isThirdPartyImport = false, isInPyTypedPackage = false): SourceFile {\n        let sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (sourceFileInfo) {\n            sourceFileInfo.isTracked = true;\n            return sourceFileInfo.sourceFile;\n        }\n\n        const importName = this._getImportNameForFile(filePath);\n        const sourceFile = new SourceFile(\n            this._fs,\n            filePath,\n            importName,\n            isThirdPartyImport,\n            isInPyTypedPackage,\n            this._console,\n            this._logTracker\n        );\n        sourceFileInfo = {\n            sourceFile,\n            isTracked: true,\n            isOpenByClient: false,\n            isTypeshedFile: false,\n            isThirdPartyImport,\n            isThirdPartyPyTypedPresent: isInPyTypedPackage,\n            diagnosticsVersion: undefined,\n            imports: [],\n            importedBy: [],\n            shadows: [],\n            shadowedBy: [],\n        };\n        this._addToSourceFileListAndMap(sourceFileInfo);\n        return sourceFile;\n    }\n\n    setFileOpened(filePath: string, version: number | null, contents: TextDocumentContentChangeEvent[]) {\n        let sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            const importName = this._getImportNameForFile(filePath);\n            const sourceFile = new SourceFile(\n                this._fs,\n                filePath,\n                importName,\n                /* isThirdPartyImport */ false,\n                /* isInPyTypedPackage */ false,\n                this._console,\n                this._logTracker\n            );\n            sourceFileInfo = {\n                sourceFile,\n                isTracked: false,\n                isOpenByClient: true,\n                isTypeshedFile: false,\n                isThirdPartyImport: false,\n                isThirdPartyPyTypedPresent: false,\n                diagnosticsVersion: undefined,\n                imports: [],\n                importedBy: [],\n                shadows: [],\n                shadowedBy: [],\n            };\n            this._addToSourceFileListAndMap(sourceFileInfo);\n        } else {\n            sourceFileInfo.isOpenByClient = true;\n\n            // Reset the diagnostic version so we force an update\n            // to the diagnostics, which can change based on whether\n            // the file is open.\n            sourceFileInfo.diagnosticsVersion = undefined;\n        }\n\n        sourceFileInfo.sourceFile.setClientVersion(version, contents);\n    }\n\n    setFileClosed(filePath: string): FileDiagnostics[] {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (sourceFileInfo) {\n            sourceFileInfo.isOpenByClient = false;\n            sourceFileInfo.sourceFile.setClientVersion(null, []);\n        }\n\n        return this._removeUnneededFiles();\n    }\n\n    markAllFilesDirty(evenIfContentsAreSame: boolean) {\n        const markDirtyMap = new Map<string, boolean>();\n\n        this._sourceFileList.forEach((sourceFileInfo) => {\n            if (evenIfContentsAreSame) {\n                sourceFileInfo.sourceFile.markDirty();\n            } else if (sourceFileInfo.sourceFile.didContentsChangeOnDisk()) {\n                sourceFileInfo.sourceFile.markDirty();\n\n                // Mark any files that depend on this file as dirty\n                // also. This will retrigger analysis of these other files.\n                this._markFileDirtyRecursive(sourceFileInfo, markDirtyMap);\n            }\n        });\n\n        if (markDirtyMap.size > 0) {\n            this._createNewEvaluator();\n        }\n    }\n\n    markFilesDirty(filePaths: string[], evenIfContentsAreSame: boolean) {\n        const markDirtyMap = new Map<string, boolean>();\n        filePaths.forEach((filePath) => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (sourceFileInfo) {\n                // If !evenIfContentsAreSame, see if the on-disk contents have\n                // changed. If the file is open, the on-disk contents don't matter\n                // because we'll receive updates directly from the client.\n                if (\n                    evenIfContentsAreSame ||\n                    (!sourceFileInfo.isOpenByClient && sourceFileInfo.sourceFile.didContentsChangeOnDisk())\n                ) {\n                    sourceFileInfo.sourceFile.markDirty();\n\n                    // Mark any files that depend on this file as dirty\n                    // also. This will retrigger analysis of these other files.\n                    this._markFileDirtyRecursive(sourceFileInfo, markDirtyMap);\n                }\n            }\n        });\n\n        if (markDirtyMap.size > 0) {\n            this._createNewEvaluator();\n        }\n    }\n\n    getFileCount() {\n        return this._sourceFileList.length;\n    }\n\n    getFilesToAnalyzeCount() {\n        let sourceFileCount = 0;\n\n        this._sourceFileList.forEach((fileInfo) => {\n            if (fileInfo.sourceFile.isCheckingRequired()) {\n                if (this._shouldCheckFile(fileInfo)) {\n                    sourceFileCount++;\n                }\n            }\n        });\n\n        return sourceFileCount;\n    }\n\n    isCheckingOnlyOpenFiles() {\n        return this._configOptions.checkOnlyOpenFiles || false;\n    }\n\n    getSourceFile(filePath: string): SourceFile | undefined {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n\n        return sourceFileInfo.sourceFile;\n    }\n\n    getBoundSourceFile(filePath: string): SourceFile | undefined {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n\n        this._bindFile(sourceFileInfo);\n        return this.getSourceFile(filePath);\n    }\n\n    // Performs parsing and analysis of any source files in the program\n    // that require it. If a limit time is specified, the operation\n    // is interrupted when the time expires. The return value indicates\n    // whether the method needs to be called again to complete the\n    // analysis. In interactive mode, the timeout is always limited\n    // to the smaller value to maintain responsiveness.\n    analyze(maxTime?: MaxAnalysisTime, token: CancellationToken = CancellationToken.None): boolean {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const elapsedTime = new Duration();\n\n            const openFiles = this._sourceFileList.filter(\n                (sf) => sf.isOpenByClient && sf.sourceFile.isCheckingRequired()\n            );\n\n            if (openFiles.length > 0) {\n                const effectiveMaxTime = maxTime ? maxTime.openFilesTimeInMs : Number.MAX_VALUE;\n\n                // Check the open files.\n                for (const sourceFileInfo of openFiles) {\n                    if (this._checkTypes(sourceFileInfo)) {\n                        if (elapsedTime.getDurationInMilliseconds() > effectiveMaxTime) {\n                            return true;\n                        }\n                    }\n                }\n\n                // If the caller specified a maxTime, return at this point\n                // since we've finalized all open files. We want to get\n                // the results to the user as quickly as possible.\n                if (maxTime !== undefined) {\n                    return true;\n                }\n            }\n\n            if (!this._configOptions.checkOnlyOpenFiles) {\n                const effectiveMaxTime = maxTime ? maxTime.noOpenFilesTimeInMs : Number.MAX_VALUE;\n\n                // Now do type parsing and analysis of the remaining.\n                for (const sourceFileInfo of this._sourceFileList) {\n                    if (!this._isUserCode(sourceFileInfo)) {\n                        continue;\n                    }\n\n                    if (this._checkTypes(sourceFileInfo)) {\n                        if (elapsedTime.getDurationInMilliseconds() > effectiveMaxTime) {\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        });\n    }\n\n    indexWorkspace(callback: (path: string, results: IndexResults) => void, token: CancellationToken) {\n        if (!this._configOptions.indexing) {\n            return;\n        }\n\n        let count = 0;\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            // Go through all workspace files to create indexing data.\n            // This will cause all files in the workspace to be parsed and bound. But\n            // _handleMemoryHighUsage will make sure we don't OOM\n            for (const sourceFileInfo of this._sourceFileList) {\n                if (!this._isUserCode(sourceFileInfo)) {\n                    continue;\n                }\n\n                this._bindFile(sourceFileInfo);\n                const results = sourceFileInfo.sourceFile.index({ indexingForAutoImportMode: false }, token);\n                if (results) {\n                    if (++count > 2000) {\n                        this._console.warn(`Workspace indexing has hit its upper limit: 2000 files`);\n                        return;\n                    }\n\n                    callback(sourceFileInfo.sourceFile.getFilePath(), results);\n                }\n\n                this._handleMemoryHighUsage();\n            }\n        });\n    }\n\n    // Prints import dependency information for each of the files in\n    // the program, skipping any typeshed files.\n    printDependencies(projectRootDir: string, verbose: boolean) {\n        const sortedFiles = this._sourceFileList\n            .filter((s) => !s.isTypeshedFile)\n            .sort((a, b) => {\n                return a.sourceFile.getFilePath() < b.sourceFile.getFilePath() ? 1 : -1;\n            });\n\n        const zeroImportFiles: SourceFile[] = [];\n\n        sortedFiles.forEach((sfInfo) => {\n            this._console.info('');\n            let filePath = sfInfo.sourceFile.getFilePath();\n            const relPath = getRelativePath(filePath, projectRootDir);\n            if (relPath) {\n                filePath = relPath;\n            }\n\n            this._console.info(`${filePath}`);\n\n            this._console.info(\n                ` Imports     ${sfInfo.imports.length} ` + `file${sfInfo.imports.length === 1 ? '' : 's'}`\n            );\n            if (verbose) {\n                sfInfo.imports.forEach((importInfo) => {\n                    this._console.info(`    ${importInfo.sourceFile.getFilePath()}`);\n                });\n            }\n\n            this._console.info(\n                ` Imported by ${sfInfo.importedBy.length} ` + `file${sfInfo.importedBy.length === 1 ? '' : 's'}`\n            );\n            if (verbose) {\n                sfInfo.importedBy.forEach((importInfo) => {\n                    this._console.info(`    ${importInfo.sourceFile.getFilePath()}`);\n                });\n            }\n\n            if (sfInfo.importedBy.length === 0) {\n                zeroImportFiles.push(sfInfo.sourceFile);\n            }\n        });\n\n        if (zeroImportFiles.length > 0) {\n            this._console.info('');\n            this._console.info(\n                `${zeroImportFiles.length} file${zeroImportFiles.length === 1 ? '' : 's'}` + ` not explicitly imported`\n            );\n            zeroImportFiles.forEach((importFile) => {\n                this._console.info(`    ${importFile.getFilePath()}`);\n            });\n        }\n    }\n\n    writeTypeStub(targetImportPath: string, targetIsSingleFile: boolean, stubPath: string, token: CancellationToken) {\n        for (const sourceFileInfo of this._sourceFileList) {\n            throwIfCancellationRequested(token);\n\n            const filePath = sourceFileInfo.sourceFile.getFilePath();\n\n            // Generate type stubs only for the files within the target path,\n            // not any files that the target module happened to import.\n            const relativePath = getRelativePath(filePath, targetImportPath);\n            if (relativePath !== undefined) {\n                let typeStubPath = normalizePath(combinePaths(stubPath, relativePath));\n\n                // If the target is a single file implementation, as opposed to\n                // a package in a directory, transform the name of the type stub\n                // to __init__.pyi because we're placing it in a directory.\n                if (targetIsSingleFile) {\n                    typeStubPath = combinePaths(getDirectoryPath(typeStubPath), '__init__.pyi');\n                } else {\n                    typeStubPath = stripFileExtension(typeStubPath) + '.pyi';\n                }\n\n                const typeStubDir = getDirectoryPath(typeStubPath);\n\n                try {\n                    makeDirectories(this._fs, typeStubDir, stubPath);\n                } catch (e) {\n                    const errMsg = `Could not create directory for '${typeStubDir}'`;\n                    throw new Error(errMsg);\n                }\n\n                this._bindFile(sourceFileInfo);\n\n                this._runEvaluatorWithCancellationToken(token, () => {\n                    const writer = new TypeStubWriter(typeStubPath, sourceFileInfo.sourceFile, this._evaluator!);\n                    writer.write();\n                });\n\n                // This operation can consume significant memory, so check\n                // for situations where we need to discard the type cache.\n                this._handleMemoryHighUsage();\n            }\n        }\n    }\n\n    getTypeForSymbol(symbol: Symbol) {\n        this._handleMemoryHighUsage();\n\n        const evaluator = this._evaluator || this._createNewEvaluator();\n        return evaluator.getEffectiveTypeOfSymbol(symbol);\n    }\n\n    printType(type: Type, expandTypeAlias: boolean): string {\n        this._handleMemoryHighUsage();\n\n        const evaluator = this._evaluator || this._createNewEvaluator();\n        return evaluator.printType(type, expandTypeAlias);\n    }\n\n    private static _getPrintTypeFlags(configOptions: ConfigOptions): PrintTypeFlags {\n        let flags = PrintTypeFlags.None;\n\n        if (configOptions.diagnosticRuleSet.printUnknownAsAny) {\n            flags |= PrintTypeFlags.PrintUnknownWithAny;\n        }\n\n        if (configOptions.diagnosticRuleSet.omitTypeArgsIfAny) {\n            flags |= PrintTypeFlags.OmitTypeArgumentsIfAny;\n        }\n\n        if (configOptions.diagnosticRuleSet.omitUnannotatedParamType) {\n            flags |= PrintTypeFlags.OmitUnannotatedParamType;\n        }\n\n        if (configOptions.diagnosticRuleSet.pep604Printing) {\n            flags |= PrintTypeFlags.PEP604;\n        }\n\n        return flags;\n    }\n\n    private get _fs() {\n        return this._importResolver.fileSystem;\n    }\n\n    private _getImportNameForFile(filePath: string) {\n        const moduleNameAndType = this._importResolver.getModuleNameForImport(\n            filePath,\n            this._configOptions.getDefaultExecEnvironment()\n        );\n        return moduleNameAndType.moduleName;\n    }\n\n    // A \"shadowed\" file is a python source file that has been added to the program because\n    // it \"shadows\" a type stub file for purposes of finding doc strings and definitions.\n    // We need to track the relationship so if the original type stub is removed from the\n    // program, we can remove the corresponding shadowed file and any files it imports.\n    private _addShadowedFile(stubFile: SourceFileInfo, shadowImplPath: string): SourceFile {\n        let shadowFileInfo = this._getSourceFileInfoFromPath(shadowImplPath);\n\n        if (!shadowFileInfo) {\n            const importName = this._getImportNameForFile(shadowImplPath);\n            const sourceFile = new SourceFile(\n                this._fs,\n                shadowImplPath,\n                importName,\n                /* isThirdPartyImport */ false,\n                /* isInPyTypedPackage */ false,\n                this._console,\n                this._logTracker\n            );\n            shadowFileInfo = {\n                sourceFile,\n                isTracked: false,\n                isOpenByClient: false,\n                isTypeshedFile: false,\n                isThirdPartyImport: false,\n                isThirdPartyPyTypedPresent: false,\n                diagnosticsVersion: undefined,\n                imports: [],\n                importedBy: [],\n                shadows: [],\n                shadowedBy: [],\n            };\n            this._addToSourceFileListAndMap(shadowFileInfo);\n        }\n\n        if (!shadowFileInfo.shadows.includes(stubFile)) {\n            shadowFileInfo.shadows.push(stubFile);\n        }\n\n        if (!stubFile.shadowedBy.includes(shadowFileInfo)) {\n            stubFile.shadowedBy.push(shadowFileInfo);\n        }\n\n        return shadowFileInfo.sourceFile;\n    }\n\n    private _createNewEvaluator() {\n        this._evaluator = createTypeEvaluator(this._lookUpImport, {\n            disableInferenceForPyTypedSources: this._configOptions.disableInferenceForPyTypedSources,\n            printTypeFlags: Program._getPrintTypeFlags(this._configOptions),\n        });\n\n        return this._evaluator;\n    }\n\n    private _parseFile(fileToParse: SourceFileInfo, content?: string) {\n        if (!this._isFileNeeded(fileToParse) || !fileToParse.sourceFile.isParseRequired()) {\n            return;\n        }\n\n        if (fileToParse.sourceFile.parse(this._configOptions, this._importResolver, content)) {\n            this._parsedFileCount++;\n            this._updateSourceFileImports(fileToParse, this._configOptions);\n        }\n\n        if (fileToParse.sourceFile.isFileDeleted()) {\n            fileToParse.isTracked = false;\n\n            // Mark any files that depend on this file as dirty\n            // also. This will retrigger analysis of these other files.\n            const markDirtyMap = new Map<string, boolean>();\n            this._markFileDirtyRecursive(fileToParse, markDirtyMap);\n\n            // Invalidate the import resolver's cache as well.\n            this._importResolver.invalidateCache();\n        }\n    }\n\n    // Binds the specified file and all of its dependencies, recursively. If\n    // it runs out of time, it returns true. If it completes, it returns false.\n    private _bindFile(fileToAnalyze: SourceFileInfo, content?: string): void {\n        if (!this._isFileNeeded(fileToAnalyze) || !fileToAnalyze.sourceFile.isBindingRequired()) {\n            return;\n        }\n\n        this._parseFile(fileToAnalyze, content);\n\n        // We need to parse and bind the builtins import first.\n        let builtinsScope: Scope | undefined;\n        if (fileToAnalyze.builtinsImport) {\n            this._bindFile(fileToAnalyze.builtinsImport);\n\n            // Get the builtins scope to pass to the binding pass.\n            const parseResults = fileToAnalyze.builtinsImport.sourceFile.getParseResults();\n            if (parseResults) {\n                builtinsScope = AnalyzerNodeInfo.getScope(parseResults.parseTree);\n                assert(builtinsScope !== undefined);\n            }\n        }\n\n        fileToAnalyze.sourceFile.bind(this._configOptions, this._lookUpImport, builtinsScope);\n    }\n\n    private _lookUpImport = (filePath: string): ImportLookupResult | undefined => {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n\n        if (sourceFileInfo.sourceFile.isBindingRequired()) {\n            // Bind the file if it's not already bound. Don't count this time\n            // against the type checker.\n            timingStats.typeCheckerTime.subtractFromTime(() => {\n                this._bindFile(sourceFileInfo);\n            });\n        }\n\n        const symbolTable = sourceFileInfo.sourceFile.getModuleSymbolTable();\n        if (!symbolTable) {\n            return undefined;\n        }\n\n        const docString = sourceFileInfo.sourceFile.getModuleDocString();\n        const parseResults = sourceFileInfo.sourceFile.getParseResults();\n\n        return {\n            symbolTable,\n            dunderAllNames: AnalyzerNodeInfo.getDunderAllNames(parseResults!.parseTree),\n            docString,\n        };\n    };\n\n    // Build a map of all modules within this program and the module-\n    // level scope that contains the symbol table for the module.\n    private _buildModuleSymbolsMap(\n        sourceFileToExclude: SourceFileInfo,\n        userFileOnly: boolean,\n        token: CancellationToken\n    ): ModuleSymbolMap {\n        // If we have library map, always use the map for library symbols.\n        return buildModuleSymbolsMap(\n            this._sourceFileList.filter(\n                (s) => s !== sourceFileToExclude && (userFileOnly ? this._isUserCode(s) : true)\n            ),\n            token\n        );\n    }\n\n    private _shouldCheckFile(fileInfo: SourceFileInfo) {\n        // Always do a full checking for a file that's open in the editor.\n        if (fileInfo.isOpenByClient) {\n            return true;\n        }\n\n        // If the file isn't currently open, only perform full checking for\n        // files that are tracked, and only if the checkOnlyOpenFiles is disabled.\n        if (!this._configOptions.checkOnlyOpenFiles && fileInfo.isTracked) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _checkTypes(fileToCheck: SourceFileInfo) {\n        return this._logTracker.log(`analyzing: ${fileToCheck.sourceFile.getFilePath()}`, (logState) => {\n            // If the file isn't needed because it was eliminated from the\n            // transitive closure or deleted, skip the file rather than wasting\n            // time on it.\n            if (!this._isFileNeeded(fileToCheck)) {\n                logState.suppress();\n                return false;\n            }\n\n            if (!fileToCheck.sourceFile.isCheckingRequired()) {\n                logState.suppress();\n                return false;\n            }\n\n            if (!this._shouldCheckFile(fileToCheck)) {\n                logState.suppress();\n                return false;\n            }\n\n            this._bindFile(fileToCheck);\n\n            fileToCheck.sourceFile.check(this._evaluator!);\n\n            // For very large programs, we may need to discard the evaluator and\n            // its cached types to avoid running out of heap space.\n            this._handleMemoryHighUsage();\n\n            // Detect import cycles that involve the file.\n            if (this._configOptions.diagnosticRuleSet.reportImportCycles !== 'none') {\n                // Don't detect import cycles when doing type stub generation. Some\n                // third-party modules are pretty convoluted.\n                if (!this._allowedThirdPartyImports) {\n                    // We need to force all of the files to be parsed and build\n                    // a closure map for the files.\n                    const closureMap = new Map<string, SourceFileInfo>();\n                    this._getImportsRecursive(fileToCheck, closureMap, 0);\n\n                    closureMap.forEach((file) => {\n                        timingStats.cycleDetectionTime.timeOperation(() => {\n                            this._detectAndReportImportCycles(file);\n                        });\n                    });\n                }\n            }\n\n            return true;\n        });\n    }\n\n    // Builds a map of files that includes the specified file and all of the files\n    // it imports (recursively) and ensures that all such files. If any of these files\n    // have already been checked (they and their recursive imports have completed the\n    // check phase), they are not included in the results.\n    private _getImportsRecursive(\n        file: SourceFileInfo,\n        closureMap: Map<string, SourceFileInfo>,\n        recursionCount: number\n    ) {\n        // If the file is already in the closure map, we found a cyclical\n        // dependency. Don't recur further.\n        const filePath = normalizePathCase(this._fs, file.sourceFile.getFilePath());\n        if (closureMap.has(filePath)) {\n            return;\n        }\n\n        // If the import chain is too long, emit an error. Otherwise we\n        // risk blowing the stack.\n        if (recursionCount > _maxImportDepth) {\n            file.sourceFile.setHitMaxImportDepth(_maxImportDepth);\n            return;\n        }\n\n        // Add the file to the closure map.\n        closureMap.set(filePath, file);\n\n        // Recursively add the file's imports.\n        for (const importedFileInfo of file.imports) {\n            this._getImportsRecursive(importedFileInfo, closureMap, recursionCount + 1);\n        }\n    }\n\n    private _detectAndReportImportCycles(\n        sourceFileInfo: SourceFileInfo,\n        dependencyChain: SourceFileInfo[] = [],\n        dependencyMap = new Map<string, boolean>()\n    ): void {\n        // Don't bother checking for typestub files or third-party files.\n        if (sourceFileInfo.sourceFile.isStubFile() || sourceFileInfo.isThirdPartyImport) {\n            return;\n        }\n\n        const filePath = normalizePathCase(this._fs, sourceFileInfo.sourceFile.getFilePath());\n        if (dependencyMap.has(filePath)) {\n            // Look for chains at least two in length. A file that contains\n            // an \"import . from X\" will technically create a cycle with\n            // itself, but those are not interesting to report.\n            if (dependencyChain.length > 1 && sourceFileInfo === dependencyChain[0]) {\n                this._logImportCycle(dependencyChain);\n            }\n        } else {\n            // If we've already checked this dependency along\n            // some other path, we can skip it.\n            if (dependencyMap.has(filePath)) {\n                return;\n            }\n\n            // We use both a map (for fast lookups) and a list\n            // (for ordering information). Set the dependency map\n            // entry to true to indicate that we're actively exploring\n            // that dependency.\n            dependencyMap.set(filePath, true);\n            dependencyChain.push(sourceFileInfo);\n\n            for (const imp of sourceFileInfo.imports) {\n                this._detectAndReportImportCycles(imp, dependencyChain, dependencyMap);\n            }\n\n            // Set the dependencyMap entry to false to indicate that we have\n            // already explored this file and don't need to explore it again.\n            dependencyMap.set(filePath, false);\n            dependencyChain.pop();\n        }\n    }\n\n    private _logImportCycle(dependencyChain: SourceFileInfo[]) {\n        const circDep = new CircularDependency();\n        dependencyChain.forEach((sourceFileInfo) => {\n            circDep.appendPath(sourceFileInfo.sourceFile.getFilePath());\n        });\n\n        circDep.normalizeOrder();\n        const firstFilePath = circDep.getPaths()[0];\n        const firstSourceFile = this._getSourceFileInfoFromPath(firstFilePath)!;\n        assert(firstSourceFile !== undefined);\n        firstSourceFile.sourceFile.addCircularDependency(circDep);\n    }\n\n    private _markFileDirtyRecursive(sourceFileInfo: SourceFileInfo, markMap: Map<string, boolean>) {\n        const filePath = normalizePathCase(this._fs, sourceFileInfo.sourceFile.getFilePath());\n\n        // Don't mark it again if it's already been visited.\n        if (!markMap.has(filePath)) {\n            sourceFileInfo.sourceFile.markReanalysisRequired();\n            markMap.set(filePath, true);\n\n            sourceFileInfo.importedBy.forEach((dep) => {\n                this._markFileDirtyRecursive(dep, markMap);\n            });\n        }\n    }\n\n    getTextOnRange(filePath: string, range: Range, token: CancellationToken): string | undefined {\n        const sourceFileInfo = this._sourceFileMap.get(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n\n        const sourceFile = sourceFileInfo.sourceFile;\n        const fileContents = sourceFile.getFileContents();\n        if (fileContents === undefined) {\n            // this only works with opened file\n            return undefined;\n        }\n\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            this._parseFile(sourceFileInfo);\n\n            const parseTree = sourceFile.getParseResults()!;\n            const textRange = convertRangeToTextRange(range, parseTree.tokenizerOutput.lines);\n            if (!textRange) {\n                return undefined;\n            }\n\n            return fileContents.substr(textRange.start, textRange.length);\n        });\n    }\n\n    getAutoImports(\n        filePath: string,\n        range: Range,\n        similarityLimit: number,\n        nameMap: Map<string, string> | undefined,\n        libraryMap: Map<string, IndexResults> | undefined,\n        token: CancellationToken\n    ): AutoImportResult[] {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return [];\n        }\n\n        const sourceFile = sourceFileInfo.sourceFile;\n        const fileContents = sourceFile.getFileContents();\n        if (fileContents === undefined) {\n            // this only works with opened file\n            return [];\n        }\n\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            this._bindFile(sourceFileInfo);\n\n            const parseTree = sourceFile.getParseResults()!;\n            const textRange = convertRangeToTextRange(range, parseTree.tokenizerOutput.lines);\n            if (!textRange) {\n                return [];\n            }\n\n            const currentNode = findNodeByOffset(parseTree.parseTree, textRange.start);\n            if (!currentNode) {\n                return [];\n            }\n\n            const writtenWord = fileContents.substr(textRange.start, textRange.length);\n            const map = this._buildModuleSymbolsMap(sourceFileInfo, !!libraryMap, token);\n            const autoImporter = new AutoImporter(\n                this._configOptions.findExecEnvironment(filePath),\n                this._importResolver,\n                parseTree,\n                range.start,\n                [],\n                map,\n                libraryMap\n            );\n\n            // Filter out any name that is already defined in the current scope.\n            const results: AutoImportResult[] = [];\n\n            const currentScope = getScopeForNode(currentNode);\n            if (currentScope) {\n                const translatedWord = nameMap?.get(writtenWord);\n                if (translatedWord) {\n                    // No filter is needed since we only do exact match.\n                    const exactMatch = 1;\n                    results.push(\n                        ...autoImporter.getAutoImportCandidates(translatedWord, exactMatch, writtenWord, token)\n                    );\n                }\n\n                results.push(\n                    ...autoImporter\n                        .getAutoImportCandidates(writtenWord, similarityLimit, undefined, token)\n                        .filter((r) => !currentScope.lookUpSymbolRecursive(r.name))\n                );\n            }\n\n            return results;\n        });\n    }\n\n    getDiagnostics(options: ConfigOptions): FileDiagnostics[] {\n        const fileDiagnostics: FileDiagnostics[] = this._removeUnneededFiles();\n\n        this._sourceFileList.forEach((sourceFileInfo) => {\n            if (this._shouldCheckFile(sourceFileInfo)) {\n                const diagnostics = sourceFileInfo.sourceFile.getDiagnostics(\n                    options,\n                    sourceFileInfo.diagnosticsVersion\n                );\n                if (diagnostics !== undefined) {\n                    fileDiagnostics.push({\n                        filePath: sourceFileInfo.sourceFile.getFilePath(),\n                        diagnostics,\n                    });\n\n                    // Update the cached diagnosticsVersion so we can determine\n                    // whether there are any updates next time we call getDiagnostics.\n                    sourceFileInfo.diagnosticsVersion = sourceFileInfo.sourceFile.getDiagnosticVersion();\n                }\n            } else if (\n                !sourceFileInfo.isOpenByClient &&\n                options.checkOnlyOpenFiles &&\n                sourceFileInfo.diagnosticsVersion !== undefined\n            ) {\n                // This condition occurs when the user switches from workspace to\n                // \"open files only\" mode. Clear all diagnostics for this file.\n                fileDiagnostics.push({\n                    filePath: sourceFileInfo.sourceFile.getFilePath(),\n                    diagnostics: [],\n                });\n                sourceFileInfo.diagnosticsVersion = undefined;\n            }\n        });\n\n        return fileDiagnostics;\n    }\n\n    getDiagnosticsForRange(filePath: string, range: Range): Diagnostic[] {\n        const sourceFile = this.getSourceFile(filePath);\n        if (!sourceFile) {\n            return [];\n        }\n\n        const unfilteredDiagnostics = sourceFile.getDiagnostics(this._configOptions);\n        if (!unfilteredDiagnostics) {\n            return [];\n        }\n\n        return unfilteredDiagnostics.filter((diag) => {\n            return doRangesIntersect(diag.range, range);\n        });\n    }\n\n    getDefinitionsForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): DocumentRange[] | undefined {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return undefined;\n            }\n\n            this._bindFile(sourceFileInfo);\n\n            const execEnv = this._configOptions.findExecEnvironment(filePath);\n            return sourceFileInfo.sourceFile.getDefinitionsForPosition(\n                this._createSourceMapper(execEnv),\n                position,\n                this._evaluator!,\n                token\n            );\n        });\n    }\n\n    reportReferencesForPosition(\n        filePath: string,\n        position: Position,\n        includeDeclaration: boolean,\n        reporter: ReferenceCallback,\n        token: CancellationToken\n    ) {\n        this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return;\n            }\n\n            const invokedFromUserFile = this._isUserCode(sourceFileInfo);\n            this._bindFile(sourceFileInfo);\n\n            const execEnv = this._configOptions.findExecEnvironment(filePath);\n            const referencesResult = sourceFileInfo.sourceFile.getDeclarationForPosition(\n                this._createSourceMapper(execEnv),\n                position,\n                this._evaluator!,\n                reporter,\n                token\n            );\n\n            if (!referencesResult) {\n                return;\n            }\n\n            // Do we need to do a global search as well?\n            if (referencesResult.requiresGlobalSearch) {\n                for (const curSourceFileInfo of this._sourceFileList) {\n                    throwIfCancellationRequested(token);\n\n                    // \"Find all references\" will only include references from user code\n                    // unless the file is explicitly opened in the editor or it is invoked from non user files.\n                    if (\n                        curSourceFileInfo.isOpenByClient ||\n                        !invokedFromUserFile ||\n                        this._isUserCode(curSourceFileInfo)\n                    ) {\n                        this._bindFile(curSourceFileInfo);\n\n                        curSourceFileInfo.sourceFile.addReferences(\n                            referencesResult,\n                            includeDeclaration,\n                            this._evaluator!,\n                            token\n                        );\n                    }\n\n                    // This operation can consume significant memory, so check\n                    // for situations where we need to discard the type cache.\n                    this._handleMemoryHighUsage();\n                }\n\n                // Make sure to include declarations regardless where they are defined\n                // if includeDeclaration is set.\n                if (includeDeclaration) {\n                    for (const decl of referencesResult.declarations) {\n                        throwIfCancellationRequested(token);\n\n                        if (referencesResult.locations.some((l) => l.path === decl.path)) {\n                            // Already included.\n                            continue;\n                        }\n\n                        const declFileInfo = this._getSourceFileInfoFromPath(decl.path);\n                        if (!declFileInfo) {\n                            // The file the declaration belongs to doesn't belong to the program.\n                            continue;\n                        }\n\n                        const tempResult = new ReferencesResult(\n                            referencesResult.requiresGlobalSearch,\n                            referencesResult.nodeAtOffset,\n                            referencesResult.symbolName,\n                            referencesResult.declarations\n                        );\n\n                        declFileInfo.sourceFile.addReferences(tempResult, includeDeclaration, this._evaluator!, token);\n                        for (const loc of tempResult.locations) {\n                            // Include declarations only. And throw away any references\n                            if (loc.path === decl.path && doesRangeContain(decl.range, loc.range)) {\n                                referencesResult.addLocations(loc);\n                            }\n                        }\n                    }\n                }\n            } else {\n                sourceFileInfo.sourceFile.addReferences(referencesResult, includeDeclaration, this._evaluator!, token);\n            }\n        });\n    }\n\n    getFileIndex(filePath: string, options: IndexOptions, token: CancellationToken): IndexResults | undefined {\n        if (options.indexingForAutoImportMode) {\n            // Memory optimization. We only want to hold onto symbols\n            // usable outside when importSymbolsOnly is on.\n            const name = stripFileExtension(getFileName(filePath));\n            if (isPrivateOrProtectedName(name)) {\n                return undefined;\n            }\n        }\n\n        this._handleMemoryHighUsage();\n\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return undefined;\n            }\n\n            let content: string | undefined = undefined;\n            if (\n                options.indexingForAutoImportMode &&\n                !sourceFileInfo.sourceFile.isStubFile() &&\n                sourceFileInfo.sourceFile.getClientVersion() === undefined\n            ) {\n                try {\n                    // Perf optimization. if py file doesn't contain __all__\n                    // No need to parse and bind.\n                    content = this._fs.readFileSync(filePath, 'utf8');\n                    if (content.indexOf('__all__') < 0) {\n                        return undefined;\n                    }\n                } catch (error) {\n                    content = undefined;\n                }\n            }\n\n            this._bindFile(sourceFileInfo, content);\n            return sourceFileInfo.sourceFile.index(options, token);\n        });\n    }\n\n    addSymbolsForDocument(filePath: string, symbolList: DocumentSymbol[], token: CancellationToken) {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (sourceFileInfo) {\n                if (!sourceFileInfo.sourceFile.getCachedIndexResults()) {\n                    // If we already have cached index for this file, no need to bind this file.\n                    this._bindFile(sourceFileInfo);\n                }\n\n                sourceFileInfo.sourceFile.addHierarchicalSymbolsForDocument(symbolList, token);\n            }\n        });\n    }\n\n    reportSymbolsForWorkspace(query: string, reporter: WorkspaceSymbolCallback, token: CancellationToken) {\n        this._runEvaluatorWithCancellationToken(token, () => {\n            // Don't do a search if the query is empty. We'll return\n            // too many results in this case.\n            if (!query) {\n                return;\n            }\n\n            // \"Workspace symbols\" searches symbols only from user code.\n            for (const sourceFileInfo of this._sourceFileList) {\n                if (!this._isUserCode(sourceFileInfo)) {\n                    continue;\n                }\n\n                if (!sourceFileInfo.sourceFile.getCachedIndexResults()) {\n                    // If we already have cached index for this file, no need to bind this file.\n                    this._bindFile(sourceFileInfo);\n                }\n\n                const symbolList = sourceFileInfo.sourceFile.getSymbolsForDocument(query, token);\n                if (symbolList.length > 0) {\n                    reporter(symbolList);\n                }\n\n                // This operation can consume significant memory, so check\n                // for situations where we need to discard the type cache.\n                this._handleMemoryHighUsage();\n            }\n        });\n    }\n\n    getHoverForPosition(\n        filePath: string,\n        position: Position,\n        format: MarkupKind,\n        token: CancellationToken\n    ): HoverResults | undefined {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return undefined;\n            }\n\n            this._bindFile(sourceFileInfo);\n\n            const execEnv = this._configOptions.findExecEnvironment(filePath);\n            return sourceFileInfo.sourceFile.getHoverForPosition(\n                this._createSourceMapper(execEnv, /* mapCompiled */ true),\n                position,\n                format,\n                this._evaluator!,\n                token\n            );\n        });\n    }\n\n    getDocumentHighlight(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): DocumentHighlight[] | undefined {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return undefined;\n            }\n\n            this._bindFile(sourceFileInfo);\n\n            const execEnv = this._configOptions.findExecEnvironment(filePath);\n            return sourceFileInfo.sourceFile.getDocumentHighlight(\n                this._createSourceMapper(execEnv),\n                position,\n                this._evaluator!,\n                token\n            );\n        });\n    }\n\n    getSignatureHelpForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): SignatureHelpResults | undefined {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return undefined;\n            }\n\n            this._bindFile(sourceFileInfo);\n\n            return sourceFileInfo.sourceFile.getSignatureHelpForPosition(\n                position,\n                this._lookUpImport,\n                this._evaluator!,\n                token\n            );\n        });\n    }\n\n    async getCompletionsForPosition(\n        filePath: string,\n        position: Position,\n        workspacePath: string,\n        format: MarkupKind,\n        libraryMap: Map<string, IndexResults> | undefined,\n        token: CancellationToken\n    ): Promise<CompletionResults | undefined> {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n\n        const completionResult = this._logTracker.log(\n            `completion at ${filePath}:${position.line}:${position.character}`,\n            (ls) => {\n                const result = this._runEvaluatorWithCancellationToken(token, () => {\n                    this._bindFile(sourceFileInfo);\n\n                    const execEnv = this._configOptions.findExecEnvironment(filePath);\n                    return sourceFileInfo.sourceFile.getCompletionsForPosition(\n                        position,\n                        workspacePath,\n                        this._configOptions,\n                        this._importResolver,\n                        this._lookUpImport,\n                        this._evaluator!,\n                        format,\n                        this._createSourceMapper(execEnv, /* mapCompiled */ true),\n                        libraryMap,\n                        () => this._buildModuleSymbolsMap(sourceFileInfo, !!libraryMap, token),\n                        token\n                    );\n                });\n\n                ls.add(`found ${result?.completionList?.items.length ?? 'null'} items`);\n                return result;\n            }\n        );\n\n        if (!completionResult?.completionList || !this._extension?.completionListExtension) {\n            return completionResult;\n        }\n\n        const pr = sourceFileInfo.sourceFile.getParseResults();\n        const content = sourceFileInfo.sourceFile.getFileContents();\n        if (pr?.parseTree && content !== undefined) {\n            const offset = convertPositionToOffset(position, pr.tokenizerOutput.lines);\n            if (offset !== undefined) {\n                completionResult.completionList = await this._extension.completionListExtension.updateCompletionList(\n                    completionResult.completionList,\n                    pr.parseTree,\n                    content,\n                    offset,\n                    this._configOptions,\n                    token\n                );\n            }\n        }\n\n        return completionResult;\n    }\n\n    resolveCompletionItem(\n        filePath: string,\n        completionItem: CompletionItem,\n        format: MarkupKind,\n        libraryMap: Map<string, IndexResults> | undefined,\n        token: CancellationToken\n    ) {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return;\n            }\n\n            this._bindFile(sourceFileInfo);\n\n            const execEnv = this._configOptions.findExecEnvironment(filePath);\n            sourceFileInfo.sourceFile.resolveCompletionItem(\n                this._configOptions,\n                this._importResolver,\n                this._lookUpImport,\n                this._evaluator!,\n                format,\n                this._createSourceMapper(execEnv, /* mapCompiled */ true),\n                libraryMap,\n                () => this._buildModuleSymbolsMap(sourceFileInfo, !!libraryMap, token),\n                completionItem,\n                token\n            );\n        });\n    }\n\n    renameSymbolAtPosition(\n        filePath: string,\n        position: Position,\n        newName: string,\n        token: CancellationToken\n    ): FileEditAction[] | undefined {\n        return this._runEvaluatorWithCancellationToken(token, () => {\n            const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n            if (!sourceFileInfo) {\n                return undefined;\n            }\n\n            this._bindFile(sourceFileInfo);\n\n            const execEnv = this._configOptions.findExecEnvironment(filePath);\n            const referencesResult = sourceFileInfo.sourceFile.getDeclarationForPosition(\n                this._createSourceMapper(execEnv),\n                position,\n                this._evaluator!,\n                undefined,\n                token\n            );\n\n            if (!referencesResult) {\n                return undefined;\n            }\n\n            if (referencesResult.declarations.some((d) => !this._isUserCode(this._getSourceFileInfoFromPath(d.path)))) {\n                // Some declarations come from non-user code, so do not allow rename\n                return undefined;\n            }\n\n            if (referencesResult.declarations.length === 0) {\n                // There is no symbol we can rename\n                return undefined;\n            }\n\n            // Do we need to do a global search as well?\n            if (referencesResult.requiresGlobalSearch) {\n                for (const curSourceFileInfo of this._sourceFileList) {\n                    // Make sure we only add user code to the references to prevent us\n                    // from accidentally changing third party library or type stub.\n                    if (this._isUserCode(curSourceFileInfo)) {\n                        this._bindFile(curSourceFileInfo);\n\n                        curSourceFileInfo.sourceFile.addReferences(referencesResult, true, this._evaluator!, token);\n                    }\n\n                    // This operation can consume significant memory, so check\n                    // for situations where we need to discard the type cache.\n                    this._handleMemoryHighUsage();\n                }\n            } else if (this._isUserCode(sourceFileInfo)) {\n                sourceFileInfo.sourceFile.addReferences(referencesResult, true, this._evaluator!, token);\n            }\n\n            const editActions: FileEditAction[] = [];\n\n            referencesResult.locations.forEach((loc) => {\n                editActions.push({\n                    filePath: loc.path,\n                    range: loc.range,\n                    replacementText: newName,\n                });\n            });\n\n            return editActions;\n        });\n    }\n\n    getCallForPosition(filePath: string, position: Position, token: CancellationToken): CallHierarchyItem | undefined {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n        this._bindFile(sourceFileInfo);\n\n        const execEnv = this._configOptions.findExecEnvironment(filePath);\n        const referencesResult = sourceFileInfo.sourceFile.getDeclarationForPosition(\n            this._createSourceMapper(execEnv),\n            position,\n            this._evaluator!,\n            undefined,\n            token\n        );\n\n        if (!referencesResult || referencesResult.declarations.length === 0) {\n            return undefined;\n        }\n\n        const targetDecl = CallHierarchyProvider.getTargetDeclaration(\n            referencesResult.declarations,\n            referencesResult.nodeAtOffset\n        );\n\n        return CallHierarchyProvider.getCallForDeclaration(\n            referencesResult.symbolName,\n            targetDecl,\n            this._evaluator!,\n            token\n        );\n    }\n\n    getIncomingCallsForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): CallHierarchyIncomingCall[] | undefined {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n        this._bindFile(sourceFileInfo);\n\n        const execEnv = this._configOptions.findExecEnvironment(filePath);\n        const referencesResult = sourceFileInfo.sourceFile.getDeclarationForPosition(\n            this._createSourceMapper(execEnv),\n            position,\n            this._evaluator!,\n            undefined,\n            token\n        );\n\n        if (!referencesResult || referencesResult.declarations.length === 0) {\n            return undefined;\n        }\n\n        const targetDecl = CallHierarchyProvider.getTargetDeclaration(\n            referencesResult.declarations,\n            referencesResult.nodeAtOffset\n        );\n        let items: CallHierarchyIncomingCall[] = [];\n\n        for (const curSourceFileInfo of this._sourceFileList) {\n            if (this._isUserCode(curSourceFileInfo) || curSourceFileInfo.isOpenByClient) {\n                this._bindFile(curSourceFileInfo);\n\n                const itemsToAdd = CallHierarchyProvider.getIncomingCallsForDeclaration(\n                    curSourceFileInfo.sourceFile.getFilePath(),\n                    referencesResult.symbolName,\n                    targetDecl,\n                    curSourceFileInfo.sourceFile.getParseResults()!,\n                    this._evaluator!,\n                    token\n                );\n\n                if (itemsToAdd) {\n                    items = items.concat(...itemsToAdd);\n                }\n\n                // This operation can consume significant memory, so check\n                // for situations where we need to discard the type cache.\n                this._handleMemoryHighUsage();\n            }\n        }\n\n        return items;\n    }\n\n    getOutgoingCallsForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): CallHierarchyOutgoingCall[] | undefined {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n        this._bindFile(sourceFileInfo);\n\n        const execEnv = this._configOptions.findExecEnvironment(filePath);\n        const referencesResult = sourceFileInfo.sourceFile.getDeclarationForPosition(\n            this._createSourceMapper(execEnv),\n            position,\n            this._evaluator!,\n            undefined,\n            token\n        );\n\n        if (!referencesResult || referencesResult.declarations.length === 0) {\n            return undefined;\n        }\n        const targetDecl = CallHierarchyProvider.getTargetDeclaration(\n            referencesResult.declarations,\n            referencesResult.nodeAtOffset\n        );\n\n        return CallHierarchyProvider.getOutgoingCallsForDeclaration(\n            targetDecl,\n            sourceFileInfo.sourceFile.getParseResults()!,\n            this._evaluator!,\n            token\n        );\n    }\n\n    performQuickAction(\n        filePath: string,\n        command: string,\n        args: any[],\n        token: CancellationToken\n    ): TextEditAction[] | undefined {\n        const sourceFileInfo = this._getSourceFileInfoFromPath(filePath);\n        if (!sourceFileInfo) {\n            return undefined;\n        }\n\n        this._bindFile(sourceFileInfo);\n\n        return sourceFileInfo.sourceFile.performQuickAction(command, args, token);\n    }\n\n    private _handleMemoryHighUsage() {\n        const typeCacheSize = this._evaluator!.getTypeCacheSize();\n\n        // If the type cache size has exceeded a high-water mark, query the heap usage.\n        // Don't bother doing this until we hit this point because the heap usage may not\n        // drop immediately after we empty the cache due to garbage collection timing.\n        if (typeCacheSize > 750000 || this._parsedFileCount > 1000) {\n            const heapSizeInMb = Math.round(process.memoryUsage().heapUsed / (1024 * 1024));\n\n            // Don't allow the heap to get close to the 2GB limit imposed by\n            // the OS when running Node in a 32-bit process.\n            if (heapSizeInMb > 1536) {\n                this._console.info(`Emptying type cache to avoid heap overflow. Heap size used: ${heapSizeInMb}MB`);\n                this._createNewEvaluator();\n                this._discardCachedParseResults();\n                this._parsedFileCount = 0;\n            }\n        }\n    }\n\n    // Discards all cached parse results and file contents to free up memory.\n    // It does not discard cached index results or diagnostics for files.\n    private _discardCachedParseResults() {\n        for (const sourceFileInfo of this._sourceFileList) {\n            sourceFileInfo.sourceFile.dropParseAndBindInfo();\n        }\n    }\n\n    private _isUserCode(fileInfo: SourceFileInfo | undefined) {\n        return fileInfo && fileInfo.isTracked && !fileInfo.isThirdPartyImport && !fileInfo.isTypeshedFile;\n    }\n\n    // Wrapper function that should be used when invoking this._evaluator\n    // with a cancellation token. It handles cancellation exceptions and\n    // any other unexpected exceptions.\n    private _runEvaluatorWithCancellationToken<T>(token: CancellationToken | undefined, callback: () => T): T {\n        try {\n            // Don't support cancellation in debug mode because cancellation\n            // checks and exceptions interfere with debugging.\n            if (token && !isDebugMode()) {\n                return this._evaluator!.runWithCancellationToken(token, callback);\n            } else {\n                return callback();\n            }\n        } catch (e) {\n            // An unexpected exception occurred, potentially leaving the current evaluator\n            // in an inconsistent state. Discard it and replace it with a fresh one. It is\n            // Cancellation exceptions are known to handle this correctly.\n            if (!(e instanceof OperationCanceledException)) {\n                this._createNewEvaluator();\n            }\n            throw e;\n        }\n    }\n\n    // Returns a list of empty file diagnostic entries for the files\n    // that have been removed. This is needed to clear out the\n    // errors for files that have been deleted or closed.\n    private _removeUnneededFiles(): FileDiagnostics[] {\n        const fileDiagnostics: FileDiagnostics[] = [];\n\n        // If a file is no longer tracked, opened or shadowed, it can\n        // be removed from the program.\n        for (let i = 0; i < this._sourceFileList.length; ) {\n            const fileInfo = this._sourceFileList[i];\n            if (!this._isFileNeeded(fileInfo)) {\n                fileDiagnostics.push({\n                    filePath: fileInfo.sourceFile.getFilePath(),\n                    diagnostics: [],\n                });\n\n                fileInfo.sourceFile.prepareForClose();\n                this._removeSourceFileFromListAndMap(fileInfo.sourceFile.getFilePath(), i);\n\n                // Unlink any imports and remove them from the list if\n                // they are no longer referenced.\n                fileInfo.imports.forEach((importedFile) => {\n                    const indexToRemove = importedFile.importedBy.findIndex((fi) => fi === fileInfo);\n                    assert(indexToRemove >= 0);\n                    importedFile.importedBy.splice(indexToRemove, 1);\n\n                    // See if we need to remove the imported file because it\n                    // is no longer needed. If its index is >= i, it will be\n                    // removed when we get to it.\n                    if (!this._isFileNeeded(importedFile)) {\n                        const indexToRemove = this._sourceFileList.findIndex((fi) => fi === importedFile);\n                        if (indexToRemove >= 0 && indexToRemove < i) {\n                            fileDiagnostics.push({\n                                filePath: importedFile.sourceFile.getFilePath(),\n                                diagnostics: [],\n                            });\n\n                            importedFile.sourceFile.prepareForClose();\n                            this._removeSourceFileFromListAndMap(importedFile.sourceFile.getFilePath(), indexToRemove);\n                            i--;\n                        }\n                    }\n                });\n\n                // Remove any shadowed files corresponding to this file.\n                fileInfo.shadowedBy.forEach((shadowedFile) => {\n                    shadowedFile.shadows = shadowedFile.shadows.filter((f) => f !== fileInfo);\n                });\n                fileInfo.shadowedBy = [];\n            } else {\n                // If we're showing the user errors only for open files, clear\n                // out the errors for the now-closed file.\n                if (!this._shouldCheckFile(fileInfo) && fileInfo.diagnosticsVersion !== undefined) {\n                    fileDiagnostics.push({\n                        filePath: fileInfo.sourceFile.getFilePath(),\n                        diagnostics: [],\n                    });\n                    fileInfo.diagnosticsVersion = undefined;\n                }\n\n                i++;\n            }\n        }\n\n        return fileDiagnostics;\n    }\n\n    private _isFileNeeded(fileInfo: SourceFileInfo) {\n        if (fileInfo.sourceFile.isFileDeleted()) {\n            return false;\n        }\n\n        if (fileInfo.isTracked || fileInfo.isOpenByClient) {\n            return true;\n        }\n\n        if (fileInfo.shadows.length > 0) {\n            return true;\n        }\n\n        if (fileInfo.importedBy.length === 0) {\n            return false;\n        }\n\n        // It's possible for a cycle of files to be imported\n        // by a tracked file but then abandoned. The import cycle\n        // will keep the entire group \"alive\" if we don't detect\n        // the condition and garbage collect them.\n        return this._isImportNeededRecursive(fileInfo, new Map<string, boolean>());\n    }\n\n    private _isImportNeededRecursive(fileInfo: SourceFileInfo, recursionMap: Map<string, boolean>) {\n        if (fileInfo.isTracked || fileInfo.isOpenByClient || fileInfo.shadows.length > 0) {\n            return true;\n        }\n\n        const filePath = normalizePathCase(this._fs, fileInfo.sourceFile.getFilePath());\n\n        // Avoid infinite recursion.\n        if (recursionMap.has(filePath)) {\n            return false;\n        }\n\n        recursionMap.set(filePath, true);\n\n        for (const importerInfo of fileInfo.importedBy) {\n            if (this._isImportNeededRecursive(importerInfo, recursionMap)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private _createSourceMapper(execEnv: ExecutionEnvironment, mapCompiled?: boolean) {\n        const sourceMapper = new SourceMapper(\n            this._importResolver,\n            execEnv,\n            this._evaluator!,\n            (stubFilePath: string, implFilePath: string) => {\n                const stubFileInfo = this._getSourceFileInfoFromPath(stubFilePath);\n                if (!stubFileInfo) {\n                    return undefined;\n                }\n                this._addShadowedFile(stubFileInfo, implFilePath);\n                return this.getBoundSourceFile(implFilePath);\n            },\n            mapCompiled ?? false\n        );\n        return sourceMapper;\n    }\n\n    private _isImportAllowed(importer: SourceFileInfo, importResult: ImportResult, isImportStubFile: boolean): boolean {\n        // Don't import native libs. We don't want to track these files,\n        // and we definitely don't want to attempt to parse them.\n        if (importResult.isNativeLib) {\n            return false;\n        }\n\n        let thirdPartyImportAllowed =\n            this._configOptions.useLibraryCodeForTypes ||\n            (importResult.importType === ImportType.ThirdParty && !!importResult.isPyTypedPresent) ||\n            (importResult.importType === ImportType.Local && importer.isThirdPartyPyTypedPresent);\n\n        if (\n            importResult.importType === ImportType.ThirdParty ||\n            (importer.isThirdPartyImport && importResult.importType === ImportType.Local)\n        ) {\n            if (this._allowedThirdPartyImports) {\n                if (importResult.isRelative) {\n                    // If it's a relative import, we'll allow it because the\n                    // importer was already deemed to be allowed.\n                    thirdPartyImportAllowed = true;\n                } else if (\n                    this._allowedThirdPartyImports.some((importName: string) => {\n                        // If this import name is the one that was explicitly\n                        // allowed or is a child of that import name,\n                        // it's considered allowed.\n                        if (importResult.importName === importName) {\n                            return true;\n                        }\n\n                        if (importResult.importName.startsWith(importName + '.')) {\n                            return true;\n                        }\n\n                        return false;\n                    })\n                ) {\n                    thirdPartyImportAllowed = true;\n                }\n            }\n\n            // Some libraries ship with stub files that import from non-stubs. Don't\n            // explore those.\n            // Don't explore any third-party files unless they're type stub files\n            // or we've been told explicitly that third-party imports are OK.\n            if (!isImportStubFile) {\n                return thirdPartyImportAllowed;\n            }\n        }\n\n        return true;\n    }\n\n    private _updateSourceFileImports(sourceFileInfo: SourceFileInfo, options: ConfigOptions): SourceFileInfo[] {\n        const filesAdded: SourceFileInfo[] = [];\n\n        // Get the new list of imports and see if it changed from the last\n        // list of imports for this file.\n        const imports = sourceFileInfo.sourceFile.getImports();\n\n        // Create a local function that determines whether the import should\n        // be considered a \"third-party import\" and whether it is coming from\n        // a third-party package that claims to be typed. An import is\n        // considered third-party if it is external to the importer\n        // or is internal but the importer is itself a third-party package.\n        const getThirdPartyImportInfo = (importResult: ImportResult) => {\n            let isThirdPartyImport = false;\n            let isPyTypedPresent = false;\n\n            if (importResult.importType === ImportType.ThirdParty) {\n                isThirdPartyImport = true;\n                if (importResult.isPyTypedPresent) {\n                    isPyTypedPresent = true;\n                }\n            } else if (sourceFileInfo.isThirdPartyImport && importResult.importType === ImportType.Local) {\n                isThirdPartyImport = true;\n                if (sourceFileInfo.isThirdPartyPyTypedPresent) {\n                    isPyTypedPresent = true;\n                }\n            }\n\n            return {\n                isThirdPartyImport,\n                isPyTypedPresent,\n            };\n        };\n\n        // Create a map of unique imports, since imports can appear more than once.\n        const newImportPathMap = new Map<string, UpdateImportInfo>();\n        imports.forEach((importResult) => {\n            if (importResult.isImportFound) {\n                if (this._isImportAllowed(sourceFileInfo, importResult, importResult.isStubFile)) {\n                    if (importResult.resolvedPaths.length > 0) {\n                        const filePath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n                        if (filePath) {\n                            const thirdPartyTypeInfo = getThirdPartyImportInfo(importResult);\n                            newImportPathMap.set(normalizePathCase(this._fs, filePath), {\n                                path: filePath,\n                                isTypeshedFile: !!importResult.isTypeshedFile,\n                                isThirdPartyImport: thirdPartyTypeInfo.isThirdPartyImport,\n                                isPyTypedPresent: thirdPartyTypeInfo.isPyTypedPresent,\n                            });\n                        }\n                    }\n                }\n\n                importResult.filteredImplicitImports.forEach((implicitImport) => {\n                    if (this._isImportAllowed(sourceFileInfo, importResult, implicitImport.isStubFile)) {\n                        const thirdPartyTypeInfo = getThirdPartyImportInfo(importResult);\n                        newImportPathMap.set(normalizePathCase(this._fs, implicitImport.path), {\n                            path: implicitImport.path,\n                            isTypeshedFile: !!importResult.isTypeshedFile,\n                            isThirdPartyImport: thirdPartyTypeInfo.isThirdPartyImport,\n                            isPyTypedPresent: thirdPartyTypeInfo.isPyTypedPresent,\n                        });\n                    }\n                });\n            } else if (options.verboseOutput) {\n                this._console.info(\n                    `Could not import '${importResult.importName}' ` +\n                        `in file '${sourceFileInfo.sourceFile.getFilePath()}'`\n                );\n                if (importResult.importFailureInfo) {\n                    importResult.importFailureInfo.forEach((diag) => {\n                        this._console.info(`  ${diag}`);\n                    });\n                }\n            }\n        });\n\n        const updatedImportMap = new Map<string, SourceFileInfo>();\n        sourceFileInfo.imports.forEach((importInfo) => {\n            const oldFilePath = normalizePathCase(this._fs, importInfo.sourceFile.getFilePath());\n\n            // A previous import was removed.\n            if (!newImportPathMap.has(oldFilePath)) {\n                importInfo.importedBy = importInfo.importedBy.filter(\n                    (fi) =>\n                        normalizePathCase(this._fs, fi.sourceFile.getFilePath()) !==\n                        normalizePathCase(this._fs, sourceFileInfo.sourceFile.getFilePath())\n                );\n            } else {\n                updatedImportMap.set(oldFilePath, importInfo);\n            }\n        });\n\n        // See if there are any new imports to be added.\n        newImportPathMap.forEach((importInfo, normalizedImportPath) => {\n            if (!updatedImportMap.has(normalizedImportPath)) {\n                // We found a new import to add. See if it's already part\n                // of the program.\n                let importedFileInfo: SourceFileInfo;\n                if (this._getSourceFileInfoFromPath(importInfo.path)) {\n                    importedFileInfo = this._getSourceFileInfoFromPath(importInfo.path)!;\n                } else {\n                    const importName = this._getImportNameForFile(importInfo.path);\n                    const sourceFile = new SourceFile(\n                        this._fs,\n                        importInfo.path,\n                        importName,\n                        importInfo.isThirdPartyImport,\n                        importInfo.isPyTypedPresent,\n                        this._console,\n                        this._logTracker\n                    );\n                    importedFileInfo = {\n                        sourceFile,\n                        isTracked: false,\n                        isOpenByClient: false,\n                        isTypeshedFile: importInfo.isTypeshedFile,\n                        isThirdPartyImport: importInfo.isThirdPartyImport,\n                        isThirdPartyPyTypedPresent: importInfo.isPyTypedPresent,\n                        diagnosticsVersion: undefined,\n                        imports: [],\n                        importedBy: [],\n                        shadows: [],\n                        shadowedBy: [],\n                    };\n\n                    this._addToSourceFileListAndMap(importedFileInfo);\n                    filesAdded.push(importedFileInfo);\n                }\n\n                importedFileInfo.importedBy.push(sourceFileInfo);\n                updatedImportMap.set(normalizedImportPath, importedFileInfo);\n            }\n        });\n\n        // Update the imports list. It should now map the set of imports\n        // specified by the source file.\n        sourceFileInfo.imports = [];\n        newImportPathMap.forEach((_, path) => {\n            if (this._getSourceFileInfoFromPath(path)) {\n                sourceFileInfo.imports.push(this._getSourceFileInfoFromPath(path)!);\n            }\n        });\n\n        // Resolve the builtins import for the file. This needs to be\n        // analyzed before the file can be analyzed.\n        sourceFileInfo.builtinsImport = undefined;\n        const builtinsImport = sourceFileInfo.sourceFile.getBuiltinsImport();\n        if (builtinsImport && builtinsImport.isImportFound) {\n            const resolvedBuiltinsPath = builtinsImport.resolvedPaths[builtinsImport.resolvedPaths.length - 1];\n            sourceFileInfo.builtinsImport = this._getSourceFileInfoFromPath(resolvedBuiltinsPath);\n        }\n\n        return filesAdded;\n    }\n\n    private _getSourceFileInfoFromPath(filePath: string): SourceFileInfo | undefined {\n        return this._sourceFileMap.get(normalizePathCase(this._fs, filePath));\n    }\n\n    private _removeSourceFileFromListAndMap(filePath: string, indexToRemove: number) {\n        this._sourceFileMap.delete(normalizePathCase(this._fs, filePath));\n        this._sourceFileList.splice(indexToRemove, 1);\n    }\n\n    private _addToSourceFileListAndMap(fileInfo: SourceFileInfo) {\n        const filePath = normalizePathCase(this._fs, fileInfo.sourceFile.getFilePath());\n\n        // We should never add a file with the same path twice.\n        assert(!this._sourceFileMap.has(filePath));\n\n        this._sourceFileList.push(fileInfo);\n        this._sourceFileMap.set(filePath, fileInfo);\n    }\n}\n","/*\n * pyTypedUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Parser for py.typed files.\n */\n\nimport { FileSystem } from '../common/fileSystem';\nimport { combinePaths, isDirectory, isFile } from '../common/pathUtils';\n\nexport interface PyTypedInfo {\n    isPyTypedPresent: boolean;\n    pyTypedPath: string | undefined;\n    isPartiallyTyped: boolean;\n}\n\nconst _pyTypedFileName = 'py.typed';\n\nexport function getPyTypedInfo(fileSystem: FileSystem, dirPath: string): PyTypedInfo {\n    let isPyTypedPresent = false;\n    let isPartiallyTyped = false;\n    let pyTypedPath: string | undefined;\n    const publicModules: string[] = [];\n\n    if (fileSystem.existsSync(dirPath) && isDirectory(fileSystem, dirPath)) {\n        pyTypedPath = combinePaths(dirPath, _pyTypedFileName);\n\n        if (fileSystem.existsSync(dirPath) && isFile(fileSystem, pyTypedPath)) {\n            isPyTypedPresent = true;\n\n            // Read the contents of the file as text.\n            const fileStats = fileSystem.statSync(pyTypedPath);\n\n            // Do a quick sanity check on the size before we attempt to read it. This\n            // file should always be really small - typically zero bytes in length.\n            if (fileStats.size > 0 && fileStats.size < 64 * 1024) {\n                const pyTypedContents = fileSystem.readFileSync(pyTypedPath, 'utf8');\n\n                // PEP 561 doesn't specify the format of \"py.typed\" in any detail other than\n                // to say that \"If a stub package is partial it MUST include partial\\n in a top\n                // level py.typed file.\"\n                if (pyTypedContents.match(/partial\\n/) || pyTypedContents.match(/partial\\r\\n/)) {\n                    isPartiallyTyped = true;\n                }\n            }\n        }\n    }\n\n    return {\n        isPyTypedPresent,\n        pyTypedPath: isPyTypedPresent ? pyTypedPath : undefined,\n        isPartiallyTyped,\n    };\n}\n","/*\n * pythonPathUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Utility routines used to resolve various paths in python.\n */\n\nimport * as child_process from 'child_process';\n\nimport { ConfigOptions } from '../common/configOptions';\nimport { FileSystem } from '../common/fileSystem';\nimport * as pathConsts from '../common/pathConsts';\nimport {\n    combinePaths,\n    containsPath,\n    ensureTrailingDirectorySeparator,\n    getDirectoryPath,\n    getFileSystemEntries,\n    isDirectory,\n    normalizePath,\n} from '../common/pathUtils';\n\ninterface PythonPathResult {\n    paths: string[];\n    prefix: string;\n}\n\nconst cachedSearchPaths = new Map<string, PythonPathResult>();\n\nexport const stdLibFolderName = 'stdlib';\nexport const thirdPartyFolderName = 'third_party';\n\nexport function getTypeShedFallbackPath(fs: FileSystem) {\n    let moduleDirectory = fs.getModulePath();\n    if (!moduleDirectory) {\n        return undefined;\n    }\n\n    moduleDirectory = getDirectoryPath(ensureTrailingDirectorySeparator(normalizePath(moduleDirectory)));\n\n    const typeshedPath = combinePaths(moduleDirectory, pathConsts.typeshedFallback);\n    if (fs.existsSync(typeshedPath)) {\n        return typeshedPath;\n    }\n\n    // In the debug version of Pyright, the code is one level\n    // deeper, so we need to look one level up for the typeshed fallback.\n    const debugTypeshedPath = combinePaths(getDirectoryPath(moduleDirectory), pathConsts.typeshedFallback);\n    if (fs.existsSync(debugTypeshedPath)) {\n        return debugTypeshedPath;\n    }\n\n    return undefined;\n}\n\nexport function getTypeshedSubdirectory(typeshedPath: string, isStdLib: boolean) {\n    return combinePaths(typeshedPath, isStdLib ? stdLibFolderName : thirdPartyFolderName);\n}\n\nexport function findPythonSearchPaths(\n    fs: FileSystem,\n    configOptions: ConfigOptions,\n    venv: string | undefined,\n    importFailureInfo: string[],\n    includeWatchPathsOnly?: boolean | undefined,\n    workspaceRoot?: string | undefined\n): string[] | undefined {\n    importFailureInfo.push('Finding python search paths');\n\n    let venvPath: string | undefined;\n    if (venv !== undefined) {\n        if (configOptions.venvPath) {\n            venvPath = combinePaths(configOptions.venvPath, venv);\n        }\n    } else if (configOptions.defaultVenv) {\n        if (configOptions.venvPath) {\n            venvPath = combinePaths(configOptions.venvPath, configOptions.defaultVenv);\n        }\n    }\n\n    if (venvPath) {\n        let libPath = combinePaths(venvPath, pathConsts.lib);\n        if (fs.existsSync(libPath)) {\n            importFailureInfo.push(`Found path '${libPath}'; looking for ${pathConsts.sitePackages}`);\n        } else {\n            importFailureInfo.push(`Did not find '${libPath}'; trying 'Lib' instead`);\n            libPath = combinePaths(venvPath, 'Lib');\n            if (fs.existsSync(libPath)) {\n                importFailureInfo.push(`Found path '${libPath}'; looking for ${pathConsts.sitePackages}`);\n            } else {\n                importFailureInfo.push(`Did not find '${libPath}'`);\n                libPath = '';\n            }\n        }\n\n        if (libPath) {\n            const sitePackagesPath = combinePaths(libPath, pathConsts.sitePackages);\n            if (fs.existsSync(sitePackagesPath)) {\n                importFailureInfo.push(`Found path '${sitePackagesPath}'`);\n                return [sitePackagesPath];\n            } else {\n                importFailureInfo.push(`Did not find '${sitePackagesPath}', so looking for python subdirectory`);\n            }\n\n            // We didn't find a site-packages directory directly in the lib\n            // directory. Scan for a \"python*\" directory instead.\n            const entries = getFileSystemEntries(fs, libPath);\n            for (let i = 0; i < entries.directories.length; i++) {\n                const dirName = entries.directories[i];\n                if (dirName.startsWith('python')) {\n                    const dirPath = combinePaths(libPath, dirName, pathConsts.sitePackages);\n                    if (fs.existsSync(dirPath)) {\n                        importFailureInfo.push(`Found path '${dirPath}'`);\n                        return [dirPath];\n                    } else {\n                        importFailureInfo.push(`Path '${dirPath}' is not a valid directory`);\n                    }\n                }\n            }\n        }\n\n        importFailureInfo.push(`Did not find '${pathConsts.sitePackages}'. Falling back on python interpreter.`);\n    }\n\n    // Fall back on the python interpreter.\n    const pathResult = getPythonPathFromPythonInterpreter(fs, configOptions.pythonPath, importFailureInfo);\n    if (includeWatchPathsOnly && workspaceRoot) {\n        const paths = pathResult.paths.filter(\n            (p) => !containsPath(workspaceRoot, p, true) || containsPath(pathResult.prefix, p, true)\n        );\n\n        return paths;\n    }\n\n    return pathResult.paths;\n}\n\nfunction getPathResultFromInterpreter(\n    fs: FileSystem,\n    interpreter: string,\n    importFailureInfo: string[]\n): PythonPathResult | undefined {\n    const result: PythonPathResult = {\n        paths: [],\n        prefix: '',\n    };\n\n    try {\n        const commandLineArgs: string[] = [\n            '-c',\n            'import sys, json; json.dump(dict(path=sys.path, prefix=sys.prefix), sys.stdout)',\n        ];\n\n        importFailureInfo.push(`Executing interpreter: '${interpreter}'`);\n        const execOutput = child_process.execFileSync(interpreter, commandLineArgs, { encoding: 'utf8' });\n\n        // Parse the execOutput. It should be a JSON-encoded array of paths.\n        try {\n            const execSplit = JSON.parse(execOutput);\n            for (let execSplitEntry of execSplit.path) {\n                execSplitEntry = execSplitEntry.trim();\n                if (execSplitEntry) {\n                    const normalizedPath = normalizePath(execSplitEntry);\n                    // Make sure the path exists and is a directory. We don't currently\n                    // support zip files and other formats.\n                    if (fs.existsSync(normalizedPath) && isDirectory(fs, normalizedPath)) {\n                        result.paths.push(normalizedPath);\n                    } else {\n                        importFailureInfo.push(`Skipping '${normalizedPath}' because it is not a valid directory`);\n                    }\n                }\n            }\n\n            result.prefix = execSplit.prefix;\n\n            if (result.paths.length === 0) {\n                importFailureInfo.push(`Found no valid directories`);\n            }\n        } catch (err) {\n            importFailureInfo.push(`Could not parse output: '${execOutput}'`);\n            throw err;\n        }\n    } catch {\n        return undefined;\n    }\n\n    return result;\n}\n\nexport function getPythonPathFromPythonInterpreter(\n    fs: FileSystem,\n    interpreterPath: string | undefined,\n    importFailureInfo: string[]\n): PythonPathResult {\n    const searchKey = interpreterPath || '';\n\n    // If we've seen this request before, return the cached results.\n    const cachedPath = cachedSearchPaths.get(searchKey);\n    if (cachedPath) {\n        return cachedPath;\n    }\n\n    let result: PythonPathResult | undefined;\n\n    if (interpreterPath) {\n        result = getPathResultFromInterpreter(fs, interpreterPath, importFailureInfo);\n    } else {\n        // On non-Windows platforms, always default to python3 first. We want to\n        // avoid this on Windows because it might invoke a script that displays\n        // a dialog box indicating that python can be downloaded from the app store.\n        if (process.platform !== 'win32') {\n            result = getPathResultFromInterpreter(fs, 'python3', importFailureInfo);\n        }\n\n        // On some platforms, 'python3' might not exist. Try 'python' instead.\n        if (!result) {\n            result = getPathResultFromInterpreter(fs, 'python', importFailureInfo);\n        }\n    }\n\n    if (!result) {\n        result = {\n            paths: [],\n            prefix: '',\n        };\n    }\n\n    cachedSearchPaths.set(searchKey, result);\n    importFailureInfo.push(`Received ${result.paths.length} paths from interpreter`);\n    result.paths.forEach((path) => {\n        importFailureInfo.push(`  ${path}`);\n    });\n\n    return result;\n}\n\nexport function isPythonBinary(p: string): boolean {\n    p = p.trim();\n    return p === 'python' || p === 'python3';\n}\n","/*\n * scope.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Represents an evaluation scope and its defined symbols.\n * It also contains a link to a parent scope (except for the\n * top-most built-in scope).\n */\n\nimport { fail } from '../common/debug';\nimport { DeclarationType } from './declaration';\nimport { Symbol, SymbolFlags, SymbolTable } from './symbol';\n\nexport const enum ScopeType {\n    // Used for list comprehension nodes.\n    ListComprehension,\n\n    // Function scopes are used for lambdas and functions.\n    Function,\n\n    // Class scopes are used for classes.\n    Class,\n\n    // Module scopes are used for modules.\n    Module,\n\n    // Built-in scopes are used for all ambient symbols provided\n    // by the Python environment.\n    Builtin,\n}\n\nexport const enum NameBindingType {\n    // With \"nonlocal\" keyword\n    Nonlocal,\n\n    // With \"global\" keyword\n    Global,\n}\n\n// Provides information for recursive scope lookups.\nexport interface SymbolWithScope {\n    // Found symbol\n    symbol: Symbol;\n\n    // Scope in which symbol was found\n    scope: Scope;\n\n    // Indicates that the recursion needed to proceed\n    // outside of the module's scope into the builtins\n    // scope.\n    isOutsideCallerModule: boolean;\n\n    // Indicates that the recursion needed to proceed\n    // to a scope that is beyond the current execution\n    // scope. An execution scope is defined as a function\n    // or a module. Classes are not considered execution\n    // scopes because they are \"executed\" immediately as\n    // part of the scope in which they are contained.\n    isBeyondExecutionScope: boolean;\n}\n\nexport class Scope {\n    // The scope type, as defined in the enumeration.\n    readonly type: ScopeType;\n\n    // The next scope in the hierarchy or undefined if it's the\n    // top-most scope.\n    readonly parent?: Scope;\n\n    // Association between names and symbols.\n    readonly symbolTable: SymbolTable = new Map<string, Symbol>();\n\n    // Names within this scope that are bound to other scopes\n    // (either nonlocal or global).\n    readonly notLocalBindings = new Map<string, NameBindingType>();\n\n    constructor(type: ScopeType, parent?: Scope) {\n        this.type = type;\n        this.parent = parent;\n    }\n\n    getGlobalScope(): Scope {\n        let curScope: Scope | undefined = this;\n        while (curScope) {\n            if (curScope.type === ScopeType.Module || curScope.type === ScopeType.Builtin) {\n                return curScope;\n            }\n\n            curScope = curScope.parent;\n        }\n\n        fail('failed to find scope');\n        return this;\n    }\n\n    // Independently-executable scopes are those that are executed independently\n    // of their parent scopes. Classes are executed in the context of their parent\n    // scope, so they don't fit this category.\n    isIndependentlyExecutable(): boolean {\n        return this.type === ScopeType.Module || this.type === ScopeType.Function;\n    }\n\n    lookUpSymbol(name: string): Symbol | undefined {\n        return this.symbolTable.get(name);\n    }\n\n    lookUpSymbolRecursive(name: string): SymbolWithScope | undefined {\n        return this._lookUpSymbolRecursiveInternal(\n            name,\n            /* isOutsideCallerModule */ false,\n            /* isBeyondExecutionScope */ false\n        );\n    }\n\n    addSymbol(name: string, flags: SymbolFlags): Symbol {\n        const symbol = new Symbol(flags);\n        this.symbolTable.set(name, symbol);\n        return symbol;\n    }\n\n    getBindingType(name: string) {\n        return this.notLocalBindings.get(name);\n    }\n\n    setBindingType(name: string, bindingType: NameBindingType) {\n        return this.notLocalBindings.set(name, bindingType);\n    }\n\n    private _lookUpSymbolRecursiveInternal(\n        name: string,\n        isOutsideCallerModule: boolean,\n        isBeyondExecutionScope: boolean\n    ): SymbolWithScope | undefined {\n        const symbol = this.symbolTable.get(name);\n\n        if (symbol) {\n            // If we're searching outside of the original caller's module (global) scope,\n            // hide any names that are not meant to be visible to importers.\n            if (isOutsideCallerModule && symbol.isExternallyHidden()) {\n                return undefined;\n            }\n\n            // If the symbol is a class variable that is defined only in terms of\n            // member accesses, it is not accessible directly by name, so hide it.\n            const decls = symbol.getDeclarations();\n            if (\n                decls.length === 0 ||\n                decls.some((decl) => decl.type !== DeclarationType.Variable || !decl.isDefinedByMemberAccess)\n            ) {\n                return {\n                    symbol,\n                    isOutsideCallerModule,\n                    isBeyondExecutionScope,\n                    scope: this,\n                };\n            }\n        }\n\n        let parentScope: Scope | undefined;\n        if (this.notLocalBindings.get(name) === NameBindingType.Global) {\n            parentScope = this.getGlobalScope();\n        } else {\n            parentScope = this.parent;\n        }\n\n        if (parentScope) {\n            // If our recursion is about to take us outside the scope of the current\n            // module (i.e. into a built-in scope), indicate as such with the second\n            // parameter.\n            return parentScope._lookUpSymbolRecursiveInternal(\n                name,\n                isOutsideCallerModule || this.type === ScopeType.Module,\n                isBeyondExecutionScope || this.isIndependentlyExecutable()\n            );\n        }\n\n        return undefined;\n    }\n}\n","/*\n * scopeUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Static utility methods related to scopes and their related\n * symbol tables.\n */\n\nimport { ParseNode } from '../parser/parseNodes';\nimport { getScope } from './analyzerNodeInfo';\nimport { getEvaluationScopeNode } from './parseTreeUtils';\nimport { Scope, ScopeType } from './scope';\n\nexport function getBuiltInScope(currentScope: Scope): Scope {\n    // Starting at the current scope, find the built-in scope, which should\n    // be the top-most parent.\n    let builtInScope = currentScope;\n\n    while (builtInScope.type !== ScopeType.Builtin) {\n        builtInScope = builtInScope.parent!;\n    }\n\n    return builtInScope;\n}\n\n// Locates the evaluation scope associated with the specified parse node.\nexport function getScopeForNode(node: ParseNode): Scope | undefined {\n    const scopeNode = getEvaluationScopeNode(node);\n    return getScope(scopeNode);\n}\n","/*\n * service.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * A persistent service that is able to analyze a collection of\n * Python files.\n */\n\nimport {\n    AbstractCancellationTokenSource,\n    CancellationToken,\n    CompletionItem,\n    DocumentSymbol,\n    SymbolInformation,\n} from 'vscode-languageserver';\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-textdocument';\nimport {\n    CallHierarchyIncomingCall,\n    CallHierarchyItem,\n    CallHierarchyOutgoingCall,\n    DocumentHighlight,\n    MarkupKind,\n} from 'vscode-languageserver-types';\n\nimport { BackgroundAnalysisBase } from '../backgroundAnalysisBase';\nimport { createBackgroundThreadCancellationTokenSource } from '../common/cancellationUtils';\nimport { CommandLineOptions } from '../common/commandLineOptions';\nimport { ConfigOptions } from '../common/configOptions';\nimport { ConsoleInterface, log, LogLevel, StandardConsole } from '../common/console';\nimport { Diagnostic } from '../common/diagnostic';\nimport { FileEditAction, TextEditAction } from '../common/editAction';\nimport { LanguageServiceExtension } from '../common/extensibility';\nimport { FileSystem, FileWatcher, ignoredWatchEventFunction } from '../common/fileSystem';\nimport {\n    combinePaths,\n    FileSpec,\n    forEachAncestorDirectory,\n    getDirectoryPath,\n    getFileName,\n    getFileSpec,\n    getFileSystemEntries,\n    isDirectory,\n    normalizePath,\n    stripFileExtension,\n} from '../common/pathUtils';\nimport { DocumentRange, Position, Range } from '../common/textRange';\nimport { timingStats } from '../common/timing';\nimport { CompletionResults } from '../languageService/completionProvider';\nimport { IndexResults, WorkspaceSymbolCallback } from '../languageService/documentSymbolProvider';\nimport { HoverResults } from '../languageService/hoverProvider';\nimport { ReferenceCallback } from '../languageService/referencesProvider';\nimport { SignatureHelpResults } from '../languageService/signatureHelpProvider';\nimport { AnalysisCompleteCallback } from './analysis';\nimport { BackgroundAnalysisProgram, BackgroundAnalysisProgramFactory } from './backgroundAnalysisProgram';\nimport { ImportedModuleDescriptor, ImportResolver, ImportResolverFactory } from './importResolver';\nimport { MaxAnalysisTime } from './program';\nimport { findPythonSearchPaths, getPythonPathFromPythonInterpreter } from './pythonPathUtils';\n\nexport const configFileNames = ['pyrightconfig.json', 'mspythonconfig.json'];\n\n// How long since the last user activity should we wait until running\n// the analyzer on any files that have not yet been analyzed?\nconst _userActivityBackoffTimeInMs = 250;\n\nexport class AnalyzerService {\n    private _instanceName: string;\n    private _importResolverFactory: ImportResolverFactory;\n    private _executionRootPath: string;\n    private _typeStubTargetPath: string | undefined;\n    private _typeStubTargetIsSingleFile = false;\n    private _console: ConsoleInterface;\n    private _sourceFileWatcher: FileWatcher | undefined;\n    private _reloadConfigTimer: any;\n    private _libraryReanalysisTimer: any;\n    private _configFilePath: string | undefined;\n    private _configFileWatcher: FileWatcher | undefined;\n    private _libraryFileWatcher: FileWatcher | undefined;\n    private _onCompletionCallback: AnalysisCompleteCallback | undefined;\n    private _commandLineOptions: CommandLineOptions | undefined;\n    private _analyzeTimer: any;\n    private _requireTrackedFileUpdate = true;\n    private _lastUserInteractionTime = Date.now();\n    private _extension: LanguageServiceExtension | undefined;\n    private _backgroundAnalysisProgram: BackgroundAnalysisProgram;\n    private _backgroundAnalysisCancellationSource: AbstractCancellationTokenSource | undefined;\n    private _maxAnalysisTimeInForeground?: MaxAnalysisTime;\n    private _backgroundAnalysisProgramFactory?: BackgroundAnalysisProgramFactory;\n    private _disposed = false;\n\n    constructor(\n        instanceName: string,\n        fs: FileSystem,\n        console?: ConsoleInterface,\n        importResolverFactory?: ImportResolverFactory,\n        configOptions?: ConfigOptions,\n        extension?: LanguageServiceExtension,\n        backgroundAnalysis?: BackgroundAnalysisBase,\n        maxAnalysisTime?: MaxAnalysisTime,\n        backgroundAnalysisProgramFactory?: BackgroundAnalysisProgramFactory\n    ) {\n        this._instanceName = instanceName;\n        this._console = console || new StandardConsole();\n        this._executionRootPath = '';\n        this._extension = extension;\n        this._importResolverFactory = importResolverFactory || AnalyzerService.createImportResolver;\n        this._maxAnalysisTimeInForeground = maxAnalysisTime;\n        this._backgroundAnalysisProgramFactory = backgroundAnalysisProgramFactory;\n\n        configOptions = configOptions ?? new ConfigOptions(process.cwd());\n        const importResolver = this._importResolverFactory(fs, configOptions);\n\n        this._backgroundAnalysisProgram =\n            backgroundAnalysisProgramFactory !== undefined\n                ? backgroundAnalysisProgramFactory(\n                      this._console,\n                      configOptions,\n                      importResolver,\n                      this._extension,\n                      backgroundAnalysis,\n                      this._maxAnalysisTimeInForeground\n                  )\n                : new BackgroundAnalysisProgram(\n                      this._console,\n                      configOptions,\n                      importResolver,\n                      this._extension,\n                      backgroundAnalysis,\n                      this._maxAnalysisTimeInForeground\n                  );\n    }\n\n    clone(instanceName: string, backgroundAnalysis?: BackgroundAnalysisBase): AnalyzerService {\n        return new AnalyzerService(\n            instanceName,\n            this._fs,\n            this._console,\n            this._importResolverFactory,\n            this._backgroundAnalysisProgram.configOptions,\n            this._extension,\n            backgroundAnalysis,\n            this._maxAnalysisTimeInForeground,\n            this._backgroundAnalysisProgramFactory\n        );\n    }\n\n    dispose() {\n        this._disposed = true;\n        this._removeSourceFileWatchers();\n        this._removeConfigFileWatcher();\n        this._removeLibraryFileWatcher();\n        this._clearReloadConfigTimer();\n        this._clearReanalysisTimer();\n        this._clearLibraryReanalysisTimer();\n    }\n\n    get backgroundAnalysisProgram(): BackgroundAnalysisProgram {\n        return this._backgroundAnalysisProgram;\n    }\n\n    static createImportResolver(fs: FileSystem, options: ConfigOptions): ImportResolver {\n        return new ImportResolver(fs, options);\n    }\n\n    setCompletionCallback(callback: AnalysisCompleteCallback | undefined): void {\n        this._onCompletionCallback = callback;\n        this._backgroundAnalysisProgram.setCompletionCallback(callback);\n    }\n\n    setOptions(commandLineOptions: CommandLineOptions, reanalyze = true): void {\n        this._commandLineOptions = commandLineOptions;\n\n        const configOptions = this._getConfigOptions(commandLineOptions);\n\n        if (configOptions.pythonPath) {\n            // Make sure we have default python environment set.\n            configOptions.ensureDefaultPythonVersion(configOptions.pythonPath, this._console);\n        }\n\n        configOptions.ensureDefaultPythonPlatform(this._console);\n\n        this._backgroundAnalysisProgram.setConfigOptions(configOptions);\n\n        this._executionRootPath = normalizePath(\n            combinePaths(commandLineOptions.executionRoot, configOptions.projectRoot)\n        );\n        this._applyConfigOptions(reanalyze);\n    }\n\n    setFileOpened(path: string, version: number | null, contents: string) {\n        this._backgroundAnalysisProgram.setFileOpened(path, version, contents);\n        this._scheduleReanalysis(false);\n    }\n\n    updateOpenFileContents(path: string, version: number | null, contents: TextDocumentContentChangeEvent[]) {\n        this._backgroundAnalysisProgram.updateOpenFileContents(path, version, contents);\n        this._scheduleReanalysis(false);\n    }\n\n    test_setIndexing(\n        workspaceIndices: Map<string, IndexResults>,\n        libraryIndices: Map<string, Map<string, IndexResults>>\n    ) {\n        this._backgroundAnalysisProgram.test_setIndexing(workspaceIndices, libraryIndices);\n    }\n\n    startIndexing() {\n        this._backgroundAnalysisProgram.startIndexing();\n    }\n\n    setFileClosed(path: string) {\n        this._backgroundAnalysisProgram.setFileClosed(path);\n        this._scheduleReanalysis(false);\n    }\n\n    getParseResult(path: string) {\n        return this._program.getBoundSourceFile(path)?.getParseResults();\n    }\n\n    getTextOnRange(filePath: string, range: Range, token: CancellationToken) {\n        return this._program.getTextOnRange(filePath, range, token);\n    }\n\n    getAutoImports(\n        filePath: string,\n        range: Range,\n        similarityLimit: number,\n        nameMap: Map<string, string> | undefined,\n        token: CancellationToken\n    ) {\n        return this._program.getAutoImports(\n            filePath,\n            range,\n            similarityLimit,\n            nameMap,\n            this._backgroundAnalysisProgram.getIndexing(filePath),\n            token\n        );\n    }\n\n    getDefinitionForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): DocumentRange[] | undefined {\n        return this._program.getDefinitionsForPosition(filePath, position, token);\n    }\n\n    reportReferencesForPosition(\n        filePath: string,\n        position: Position,\n        includeDeclaration: boolean,\n        reporter: ReferenceCallback,\n        token: CancellationToken\n    ) {\n        this._program.reportReferencesForPosition(filePath, position, includeDeclaration, reporter, token);\n    }\n\n    addSymbolsForDocument(filePath: string, symbolList: DocumentSymbol[], token: CancellationToken) {\n        this._program.addSymbolsForDocument(filePath, symbolList, token);\n    }\n\n    reportSymbolsForWorkspace(query: string, reporter: WorkspaceSymbolCallback, token: CancellationToken) {\n        this._program.reportSymbolsForWorkspace(query, reporter, token);\n    }\n\n    getHoverForPosition(\n        filePath: string,\n        position: Position,\n        format: MarkupKind,\n        token: CancellationToken\n    ): HoverResults | undefined {\n        return this._program.getHoverForPosition(filePath, position, format, token);\n    }\n\n    getDocumentHighlight(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): DocumentHighlight[] | undefined {\n        return this._program.getDocumentHighlight(filePath, position, token);\n    }\n\n    getSignatureHelpForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): SignatureHelpResults | undefined {\n        return this._program.getSignatureHelpForPosition(filePath, position, token);\n    }\n\n    getCompletionsForPosition(\n        filePath: string,\n        position: Position,\n        workspacePath: string,\n        format: MarkupKind,\n        token: CancellationToken\n    ): Promise<CompletionResults | undefined> {\n        return this._program.getCompletionsForPosition(\n            filePath,\n            position,\n            workspacePath,\n            format,\n            this._backgroundAnalysisProgram.getIndexing(filePath),\n            token\n        );\n    }\n\n    resolveCompletionItem(\n        filePath: string,\n        completionItem: CompletionItem,\n        format: MarkupKind,\n        token: CancellationToken\n    ) {\n        this._program.resolveCompletionItem(\n            filePath,\n            completionItem,\n            format,\n            this._backgroundAnalysisProgram.getIndexing(filePath),\n            token\n        );\n    }\n\n    performQuickAction(\n        filePath: string,\n        command: string,\n        args: any[],\n        token: CancellationToken\n    ): TextEditAction[] | undefined {\n        return this._program.performQuickAction(filePath, command, args, token);\n    }\n\n    renameSymbolAtPosition(\n        filePath: string,\n        position: Position,\n        newName: string,\n        token: CancellationToken\n    ): FileEditAction[] | undefined {\n        return this._program.renameSymbolAtPosition(filePath, position, newName, token);\n    }\n\n    getCallForPosition(filePath: string, position: Position, token: CancellationToken): CallHierarchyItem | undefined {\n        return this._program.getCallForPosition(filePath, position, token);\n    }\n\n    getIncomingCallsForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): CallHierarchyIncomingCall[] | undefined {\n        return this._program.getIncomingCallsForPosition(filePath, position, token);\n    }\n\n    getOutgoingCallsForPosition(\n        filePath: string,\n        position: Position,\n        token: CancellationToken\n    ): CallHierarchyOutgoingCall[] | undefined {\n        return this._program.getOutgoingCallsForPosition(filePath, position, token);\n    }\n\n    printStats() {\n        this._console.info('');\n        this._console.info('Analysis stats');\n\n        const fileCount = this._program.getFileCount();\n        this._console.info('Total files analyzed: ' + fileCount.toString());\n    }\n\n    printDependencies(verbose: boolean) {\n        this._program.printDependencies(this._executionRootPath, verbose);\n    }\n\n    getDiagnosticsForRange(filePath: string, range: Range, token: CancellationToken): Promise<Diagnostic[]> {\n        return this._backgroundAnalysisProgram.getDiagnosticsForRange(filePath, range, token);\n    }\n\n    getConfigOptions() {\n        return this._configOptions;\n    }\n\n    getImportResolver(): ImportResolver {\n        return this._backgroundAnalysisProgram.importResolver;\n    }\n\n    recordUserInteractionTime() {\n        this._lastUserInteractionTime = Date.now();\n\n        // If we have a pending timer for reanalysis, cancel it\n        // and reschedule for some time in the future.\n        if (this._analyzeTimer) {\n            this._scheduleReanalysis(false);\n        }\n    }\n\n    // test only APIs\n    get test_program() {\n        return this._program;\n    }\n\n    test_getConfigOptions(commandLineOptions: CommandLineOptions): ConfigOptions {\n        return this._getConfigOptions(commandLineOptions);\n    }\n\n    test_getFileNamesFromFileSpecs(): string[] {\n        return this._getFileNamesFromFileSpecs();\n    }\n\n    // Calculates the effective options based on the command-line options,\n    // an optional config file, and default values.\n    private _getConfigOptions(commandLineOptions: CommandLineOptions): ConfigOptions {\n        let projectRoot = commandLineOptions.executionRoot;\n        let configFilePath: string | undefined;\n\n        if (commandLineOptions.configFilePath) {\n            // If the config file path was specified, determine whether it's\n            // a directory (in which case the default config file name is assumed)\n            // or a file.\n            configFilePath = combinePaths(\n                commandLineOptions.executionRoot,\n                normalizePath(commandLineOptions.configFilePath)\n            );\n            if (!this._fs.existsSync(configFilePath)) {\n                this._console.info(`Configuration file not found at ${configFilePath}.`);\n                configFilePath = commandLineOptions.executionRoot;\n            } else {\n                if (configFilePath.toLowerCase().endsWith('.json')) {\n                    projectRoot = getDirectoryPath(configFilePath);\n                } else {\n                    projectRoot = configFilePath;\n                    configFilePath = this._findConfigFile(configFilePath);\n                    if (!configFilePath) {\n                        this._console.info(`Configuration file not found at ${projectRoot}.`);\n                    }\n                }\n            }\n        } else if (projectRoot) {\n            configFilePath = this._findConfigFileHereOrUp(projectRoot);\n            if (configFilePath) {\n                projectRoot = getDirectoryPath(configFilePath);\n            } else {\n                this._console.info(`No configuration file found.`);\n                configFilePath = undefined;\n            }\n        }\n\n        const configOptions = new ConfigOptions(projectRoot, this._typeCheckingMode);\n        const defaultExcludes = ['**/node_modules', '**/__pycache__', '.git'];\n\n        if (commandLineOptions.fileSpecs.length > 0) {\n            commandLineOptions.fileSpecs.forEach((fileSpec) => {\n                configOptions.include.push(getFileSpec(projectRoot, fileSpec));\n            });\n        } else if (!configFilePath) {\n            // If no config file was found and there are no explicit include\n            // paths specified, assume the caller wants to include all source\n            // files under the execution root path.\n            if (commandLineOptions.executionRoot) {\n                configOptions.include.push(getFileSpec(commandLineOptions.executionRoot, '.'));\n\n                // Add a few common excludes to avoid long scan times.\n                defaultExcludes.forEach((exclude) => {\n                    configOptions.exclude.push(getFileSpec(commandLineOptions.executionRoot, exclude));\n                });\n            }\n        }\n\n        this._configFilePath = configFilePath;\n\n        // If we found a config file, parse it to compute the effective options.\n        if (configFilePath) {\n            this._console.info(`Loading configuration file at ${configFilePath}`);\n            const configJsonObj = this._parseConfigFile(configFilePath);\n            if (configJsonObj) {\n                configOptions.initializeFromJson(\n                    configJsonObj,\n                    this._typeCheckingMode,\n                    this._console,\n                    commandLineOptions.diagnosticSeverityOverrides,\n                    commandLineOptions.pythonPath,\n                    commandLineOptions.fileSpecs.length > 0\n                );\n\n                const configFileDir = getDirectoryPath(configFilePath);\n\n                // If no include paths were provided, assume that all files within\n                // the project should be included.\n                if (configOptions.include.length === 0) {\n                    this._console.info(`No include entries specified; assuming ${configFileDir}`);\n                    configOptions.include.push(getFileSpec(configFileDir, '.'));\n                }\n\n                // If there was no explicit set of excludes, add a few common ones to avoid long scan times.\n                if (configOptions.exclude.length === 0) {\n                    defaultExcludes.forEach((exclude) => {\n                        this._console.info(`Auto-excluding ${exclude}`);\n                        configOptions.exclude.push(getFileSpec(configFileDir, exclude));\n                    });\n\n                    if (configOptions.autoExcludeVenv === undefined) {\n                        configOptions.autoExcludeVenv = true;\n                    }\n                }\n\n                // If the user has defined execution environments, then we ignore\n                // autoSearchPaths, extraPaths and leave it up to them to set\n                // extraPaths on the execution environments.\n                if (configOptions.executionEnvironments.length === 0) {\n                    configOptions.addExecEnvironmentForExtraPaths(\n                        this._fs,\n                        commandLineOptions.autoSearchPaths || false,\n                        commandLineOptions.extraPaths || []\n                    );\n                }\n            }\n        } else {\n            configOptions.addExecEnvironmentForExtraPaths(\n                this._fs,\n                commandLineOptions.autoSearchPaths || false,\n                commandLineOptions.extraPaths || []\n            );\n\n            configOptions.autoExcludeVenv = true;\n            configOptions.applyDiagnosticOverrides(commandLineOptions.diagnosticSeverityOverrides);\n        }\n\n        const reportDuplicateSetting = (settingName: string, configValue: number | string | boolean) => {\n            const settingSource = commandLineOptions.fromVsCodeExtension\n                ? 'the client settings'\n                : 'a command-line option';\n            this._console.warn(\n                `The ${settingName} has been specified in both the config file and ` +\n                    `${settingSource}. The value in the config file (${configValue}) ` +\n                    `will take precedence`\n            );\n        };\n\n        // Apply the command-line options if the corresponding\n        // item wasn't already set in the config file. Report any\n        // duplicates.\n        if (commandLineOptions.venvPath) {\n            if (!configOptions.venvPath) {\n                configOptions.venvPath = commandLineOptions.venvPath;\n            } else {\n                reportDuplicateSetting('venvPath', configOptions.venvPath);\n            }\n        }\n\n        if (commandLineOptions.pythonPath) {\n            this._console.info(\n                `Setting pythonPath for service \"${this._instanceName}\": ` + `\"${commandLineOptions.pythonPath}\"`\n            );\n            configOptions.pythonPath = commandLineOptions.pythonPath;\n        }\n\n        if (commandLineOptions.typeshedPath) {\n            if (!configOptions.typeshedPath) {\n                configOptions.typeshedPath = commandLineOptions.typeshedPath;\n            } else {\n                reportDuplicateSetting('typeshedPath', configOptions.typeshedPath);\n            }\n        }\n\n        configOptions.verboseOutput = commandLineOptions.verboseOutput ?? configOptions.verboseOutput;\n        configOptions.checkOnlyOpenFiles = !!commandLineOptions.checkOnlyOpenFiles;\n        configOptions.autoImportCompletions = !!commandLineOptions.autoImportCompletions;\n        configOptions.indexing = !!commandLineOptions.indexing;\n\n        // If useLibraryCodeForTypes was not specified in the config, allow the settings\n        // or command line to override it.\n        if (configOptions.useLibraryCodeForTypes === undefined) {\n            configOptions.useLibraryCodeForTypes = !!commandLineOptions.useLibraryCodeForTypes;\n        } else if (commandLineOptions.useLibraryCodeForTypes !== undefined) {\n            reportDuplicateSetting('useLibraryCodeForTypes', configOptions.useLibraryCodeForTypes);\n        }\n\n        // If there was no stub path specified, use a default path.\n        if (commandLineOptions.stubPath) {\n            if (!configOptions.stubPath) {\n                configOptions.stubPath = commandLineOptions.stubPath;\n            } else {\n                reportDuplicateSetting('stubPath', configOptions.stubPath);\n            }\n        } else {\n            if (!configOptions.stubPath) {\n                configOptions.stubPath = normalizePath(combinePaths(configOptions.projectRoot, 'typings'));\n            }\n        }\n\n        // Do some sanity checks on the specified settings and report missing\n        // or inconsistent information.\n        if (configOptions.venvPath) {\n            if (!this._fs.existsSync(configOptions.venvPath) || !isDirectory(this._fs, configOptions.venvPath)) {\n                this._console.error(`venvPath ${configOptions.venvPath} is not a valid directory.`);\n            }\n\n            // venvPath without defaultVenv means it won't do anything while resolveImport.\n            // so first, try to set defaultVenv from existing configOption if it is null. if both are null,\n            // then, resolveImport won't consider venv\n            configOptions.defaultVenv = configOptions.defaultVenv ?? this._configOptions.defaultVenv;\n            if (configOptions.defaultVenv) {\n                const fullVenvPath = combinePaths(configOptions.venvPath, configOptions.defaultVenv);\n\n                if (!this._fs.existsSync(fullVenvPath) || !isDirectory(this._fs, fullVenvPath)) {\n                    this._console.error(\n                        `venv ${configOptions.defaultVenv} subdirectory not found ` +\n                            `in venv path ${configOptions.venvPath}.`\n                    );\n                } else {\n                    const importFailureInfo: string[] = [];\n                    if (findPythonSearchPaths(this._fs, configOptions, undefined, importFailureInfo) === undefined) {\n                        this._console.error(\n                            `site-packages directory cannot be located for venvPath ` +\n                                `${configOptions.venvPath} and venv ${configOptions.defaultVenv}.`\n                        );\n\n                        if (configOptions.verboseOutput) {\n                            importFailureInfo.forEach((diag) => {\n                                this._console.error(`  ${diag}`);\n                            });\n                        }\n                    }\n                }\n            }\n        } else {\n            const importFailureInfo: string[] = [];\n            const pythonPaths = getPythonPathFromPythonInterpreter(\n                this._fs,\n                configOptions.pythonPath,\n                importFailureInfo\n            ).paths;\n            if (pythonPaths.length === 0) {\n                const logLevel = configOptions.verboseOutput ? LogLevel.Error : LogLevel.Log;\n                if (commandLineOptions.fromVsCodeExtension || configOptions.verboseOutput) {\n                    log(this._console, logLevel, `No search paths found for configured python interpreter.`);\n                }\n            } else {\n                if (commandLineOptions.fromVsCodeExtension || configOptions.verboseOutput) {\n                    const logLevel = configOptions.verboseOutput ? LogLevel.Info : LogLevel.Log;\n                    log(this._console, logLevel, `Search paths found for configured python interpreter:`);\n                    pythonPaths.forEach((path) => {\n                        log(this._console, logLevel, `  ${path}`);\n                    });\n                }\n            }\n\n            if (configOptions.verboseOutput) {\n                if (importFailureInfo.length > 0) {\n                    this._console.info(`When attempting to get search paths from python interpreter:`);\n                    importFailureInfo.forEach((diag) => {\n                        this._console.info(`  ${diag}`);\n                    });\n                }\n            }\n        }\n\n        // Is there a reference to a venv? If so, there needs to be a valid venvPath.\n        if (configOptions.defaultVenv || configOptions.executionEnvironments.find((e) => !!e.venv)) {\n            if (!configOptions.venvPath) {\n                this._console.warn(`venvPath not specified, so venv settings will be ignored.`);\n            }\n        }\n\n        if (configOptions.typeshedPath) {\n            if (\n                !this._fs.existsSync(configOptions.typeshedPath) ||\n                !isDirectory(this._fs, configOptions.typeshedPath)\n            ) {\n                this._console.error(`typeshedPath ${configOptions.typeshedPath} is not a valid directory.`);\n            }\n        }\n\n        if (configOptions.stubPath) {\n            if (!this._fs.existsSync(configOptions.stubPath) || !isDirectory(this._fs, configOptions.stubPath)) {\n                this._console.error(`stubPath ${configOptions.stubPath} is not a valid directory.`);\n            }\n        }\n\n        return configOptions;\n    }\n\n    writeTypeStub(token: CancellationToken): void {\n        const typingsSubdirPath = this._getTypeStubFolder();\n\n        this._program.writeTypeStub(\n            this._typeStubTargetPath!,\n            this._typeStubTargetIsSingleFile,\n            typingsSubdirPath,\n            token\n        );\n    }\n\n    writeTypeStubInBackground(token: CancellationToken): Promise<any> {\n        const typingsSubdirPath = this._getTypeStubFolder();\n\n        return this._backgroundAnalysisProgram.writeTypeStub(\n            this._typeStubTargetPath!,\n            this._typeStubTargetIsSingleFile,\n            typingsSubdirPath,\n            token\n        );\n    }\n\n    // This is called after a new type stub has been created. It allows\n    // us to invalidate caches and force reanalysis of files that potentially\n    // are affected by the appearance of a new type stub.\n    invalidateAndForceReanalysis() {\n        // Mark all files with one or more errors dirty.\n        this._backgroundAnalysisProgram.invalidateAndForceReanalysis();\n    }\n\n    // Forces the service to stop all analysis, discard all its caches,\n    // and research for files.\n    restart() {\n        this._applyConfigOptions();\n\n        this._backgroundAnalysisProgram.restart();\n    }\n\n    private get _fs() {\n        return this._backgroundAnalysisProgram.importResolver.fileSystem;\n    }\n\n    private get _program() {\n        return this._backgroundAnalysisProgram.program;\n    }\n\n    private get _configOptions() {\n        return this._backgroundAnalysisProgram.configOptions;\n    }\n\n    private get _watchForSourceChanges() {\n        return !!this._commandLineOptions?.watchForSourceChanges;\n    }\n\n    private get _watchForLibraryChanges() {\n        return !!this._commandLineOptions?.watchForLibraryChanges;\n    }\n\n    private get _typeCheckingMode() {\n        return this._commandLineOptions?.typeCheckingMode;\n    }\n\n    private get _verboseOutput(): boolean {\n        return !!this._configOptions.verboseOutput;\n    }\n\n    private get _typeStubTargetImportName() {\n        return this._commandLineOptions?.typeStubTargetImportName;\n    }\n\n    private _getTypeStubFolder() {\n        const stubPath = this._configOptions.stubPath;\n        if (!this._typeStubTargetPath || !this._typeStubTargetImportName) {\n            const errMsg = `Import '${this._typeStubTargetImportName}'` + ` could not be resolved`;\n            this._console.error(errMsg);\n            throw new Error(errMsg);\n        }\n        if (!stubPath) {\n            // We should never get here because we always generate a\n            // default typings path if none was specified.\n            const errMsg = 'No typings path was specified';\n            this._console.info(errMsg);\n            throw new Error(errMsg);\n        }\n        const typeStubInputTargetParts = this._typeStubTargetImportName.split('.');\n        if (typeStubInputTargetParts[0].length === 0) {\n            // We should never get here because the import resolution\n            // would have failed.\n            const errMsg = `Import '${this._typeStubTargetImportName}'` + ` could not be resolved`;\n            this._console.error(errMsg);\n            throw new Error(errMsg);\n        }\n        try {\n            // Generate a new typings directory if necessary.\n            if (!this._fs.existsSync(stubPath)) {\n                this._fs.mkdirSync(stubPath);\n            }\n        } catch (e) {\n            const errMsg = `Could not create typings directory '${stubPath}'`;\n            this._console.error(errMsg);\n            throw new Error(errMsg);\n        }\n        // Generate a typings subdirectory.\n        const typingsSubdirPath = combinePaths(stubPath, typeStubInputTargetParts[0]);\n        try {\n            // Generate a new typings subdirectory if necessary.\n            if (!this._fs.existsSync(typingsSubdirPath)) {\n                this._fs.mkdirSync(typingsSubdirPath);\n            }\n        } catch (e) {\n            const errMsg = `Could not create typings subdirectory '${typingsSubdirPath}'`;\n            this._console.error(errMsg);\n            throw new Error(errMsg);\n        }\n        return typingsSubdirPath;\n    }\n\n    private _findConfigFileHereOrUp(searchPath: string): string | undefined {\n        return forEachAncestorDirectory(searchPath, (ancestor) => this._findConfigFile(ancestor));\n    }\n\n    private _findConfigFile(searchPath: string): string | undefined {\n        for (const name of configFileNames) {\n            const fileName = combinePaths(searchPath, name);\n            if (this._fs.existsSync(fileName)) {\n                return fileName;\n            }\n        }\n        return undefined;\n    }\n\n    private _parseConfigFile(configPath: string): any | undefined {\n        let configContents = '';\n        let parseAttemptCount = 0;\n\n        while (true) {\n            // Attempt to read the config file contents.\n            try {\n                configContents = this._fs.readFileSync(configPath, 'utf8');\n            } catch {\n                this._console.error(`Config file \"${configPath}\" could not be read.`);\n                this._reportConfigParseError();\n                return undefined;\n            }\n\n            // Attempt to parse the config file.\n            let configObj: any;\n            let parseFailed = false;\n            try {\n                configObj = JSON.parse(configContents);\n                return configObj;\n            } catch {\n                parseFailed = true;\n            }\n\n            if (!parseFailed) {\n                break;\n            }\n\n            // If we attempt to read the config file immediately after it\n            // was saved, it may have been partially written when we read it,\n            // resulting in parse errors. We'll give it a little more time and\n            // try again.\n            if (parseAttemptCount++ >= 5) {\n                this._console.error(`Config file \"${configPath}\" could not be parsed. Verify that JSON is correct.`);\n                this._reportConfigParseError();\n                return undefined;\n            }\n        }\n    }\n\n    private _getFileNamesFromFileSpecs(): string[] {\n        // Use a map to generate a list of unique files.\n        const fileMap = new Map<string, string>();\n\n        timingStats.findFilesTime.timeOperation(() => {\n            const matchedFiles = this._matchFiles(this._configOptions.include, this._configOptions.exclude);\n\n            for (const file of matchedFiles) {\n                fileMap.set(file, file);\n            }\n        });\n\n        return [...fileMap.values()];\n    }\n\n    // If markFilesDirtyUnconditionally is true, we need to reparse\n    // and reanalyze all files in the program. If false, we will\n    // reparse and reanalyze only those files whose on-disk contents\n    // have changed. Unconditional dirtying is needed in the case where\n    // configuration options have changed.\n    private _updateTrackedFileList(markFilesDirtyUnconditionally: boolean) {\n        // Are we in type stub generation mode? If so, we need to search\n        // for a different set of files.\n        if (this._typeStubTargetImportName) {\n            const execEnv = this._configOptions.findExecEnvironment(this._executionRootPath);\n            const moduleDescriptor: ImportedModuleDescriptor = {\n                leadingDots: 0,\n                nameParts: this._typeStubTargetImportName.split('.'),\n                importedSymbols: [],\n            };\n\n            const importResult = this._backgroundAnalysisProgram.importResolver.resolveImport(\n                '',\n                execEnv,\n                moduleDescriptor\n            );\n\n            if (importResult.isImportFound) {\n                const filesToImport: string[] = [];\n\n                // Namespace packages resolve to a directory name, so\n                // don't include those.\n                const resolvedPath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n\n                // Get the directory that contains the root package.\n                let targetPath = getDirectoryPath(resolvedPath);\n                let prevResolvedPath = resolvedPath;\n                for (let i = importResult.resolvedPaths.length - 2; i >= 0; i--) {\n                    const resolvedPath = importResult.resolvedPaths[i];\n                    if (resolvedPath) {\n                        targetPath = getDirectoryPath(resolvedPath);\n                        prevResolvedPath = resolvedPath;\n                    } else {\n                        // If there was no file corresponding to this portion\n                        // of the name path, assume that it's contained\n                        // within its parent directory.\n                        targetPath = getDirectoryPath(prevResolvedPath);\n                        prevResolvedPath = targetPath;\n                    }\n                }\n\n                if (isDirectory(this._fs, targetPath)) {\n                    this._typeStubTargetPath = targetPath;\n                }\n\n                if (!resolvedPath) {\n                    this._typeStubTargetIsSingleFile = false;\n                } else {\n                    filesToImport.push(resolvedPath);\n                    this._typeStubTargetIsSingleFile =\n                        importResult.resolvedPaths.length === 1 &&\n                        stripFileExtension(getFileName(importResult.resolvedPaths[0])) !== '__init__';\n                }\n\n                // Add the implicit import paths.\n                importResult.filteredImplicitImports.forEach((implicitImport) => {\n                    filesToImport.push(implicitImport.path);\n                });\n\n                this._backgroundAnalysisProgram.setAllowedThirdPartyImports([this._typeStubTargetImportName]);\n                this._backgroundAnalysisProgram.setTrackedFiles(filesToImport);\n            } else {\n                this._console.error(`Import '${this._typeStubTargetImportName}' not found`);\n            }\n        } else {\n            let fileList: string[] = [];\n            this._console.info(`Searching for source files`);\n            fileList = this._getFileNamesFromFileSpecs();\n\n            this._backgroundAnalysisProgram.setTrackedFiles(fileList);\n            this._backgroundAnalysisProgram.markAllFilesDirty(markFilesDirtyUnconditionally);\n\n            if (fileList.length === 0) {\n                this._console.info(`No source files found.`);\n            } else {\n                this._console.info(`Found ${fileList.length} ` + `source ${fileList.length === 1 ? 'file' : 'files'}`);\n            }\n        }\n\n        this._requireTrackedFileUpdate = false;\n    }\n\n    private _isInExcludePath(path: string, excludePaths: FileSpec[]) {\n        return !!excludePaths.find((excl) => excl.regExp.test(path));\n    }\n\n    private _matchFiles(include: FileSpec[], exclude: FileSpec[]): string[] {\n        const includeFileRegex = /\\.pyi?$/;\n        const envMarkers = [['bin', 'activate'], ['Scripts', 'activate'], ['pyvenv.cfg']];\n        const results: string[] = [];\n\n        const visitDirectory = (absolutePath: string, includeRegExp: RegExp) => {\n            if (this._configOptions.autoExcludeVenv) {\n                if (envMarkers.some((f) => this._fs.existsSync(combinePaths(absolutePath, ...f)))) {\n                    this._console.info(`Auto-excluding ${absolutePath}`);\n                    return;\n                }\n            }\n\n            const { files, directories } = getFileSystemEntries(this._fs, absolutePath);\n\n            for (const file of files) {\n                const filePath = combinePaths(absolutePath, file);\n\n                if (includeRegExp.test(filePath)) {\n                    if (!this._isInExcludePath(filePath, exclude) && includeFileRegex.test(filePath)) {\n                        results.push(filePath);\n                    }\n                }\n            }\n\n            for (const directory of directories) {\n                const dirPath = combinePaths(absolutePath, directory);\n                if (includeRegExp.test(dirPath)) {\n                    if (!this._isInExcludePath(dirPath, exclude)) {\n                        visitDirectory(dirPath, includeRegExp);\n                    }\n                }\n            }\n        };\n\n        include.forEach((includeSpec) => {\n            let foundFileSpec = false;\n\n            if (!this._isInExcludePath(includeSpec.wildcardRoot, exclude)) {\n                try {\n                    const stat = this._fs.statSync(includeSpec.wildcardRoot);\n                    if (stat.isFile()) {\n                        if (includeFileRegex.test(includeSpec.wildcardRoot)) {\n                            results.push(includeSpec.wildcardRoot);\n                            foundFileSpec = true;\n                        }\n                    } else if (stat.isDirectory()) {\n                        visitDirectory(includeSpec.wildcardRoot, includeSpec.regExp);\n                        foundFileSpec = true;\n                    }\n                } catch {\n                    // Ignore the exception.\n                }\n            }\n\n            if (!foundFileSpec) {\n                this._console.error(`File or directory \"${includeSpec.wildcardRoot}\" does not exist.`);\n            }\n        });\n\n        return results;\n    }\n\n    private _removeSourceFileWatchers() {\n        if (this._sourceFileWatcher) {\n            this._sourceFileWatcher.close();\n            this._sourceFileWatcher = undefined;\n        }\n    }\n\n    private _updateSourceFileWatchers() {\n        this._removeSourceFileWatchers();\n\n        this._backgroundAnalysisProgram.invalidateCache();\n\n        if (!this._watchForSourceChanges) {\n            return;\n        }\n\n        if (this._configOptions.include.length > 0) {\n            const fileList = this._configOptions.include.map((spec) => {\n                return combinePaths(this._executionRootPath, spec.wildcardRoot);\n            });\n\n            try {\n                if (this._verboseOutput) {\n                    this._console.info(`Adding fs watcher for directories:\\n ${fileList.join('\\n')}`);\n                }\n\n                const isIgnored = ignoredWatchEventFunction(fileList);\n                this._sourceFileWatcher = this._fs.createFileSystemWatcher(fileList, (event, path) => {\n                    if (isIgnored(path)) {\n                        return;\n                    }\n\n                    if (this._verboseOutput) {\n                        this._console.info(`SourceFile: Received fs event '${event}' for path '${path}'`);\n                    }\n\n                    // Delete comes in as a change event, so try to distinguish here.\n                    if (event === 'change' && this._fs.existsSync(path)) {\n                        this._backgroundAnalysisProgram.markFilesDirty([path], false);\n                        this._scheduleReanalysis(false);\n                    } else {\n                        // Determine if this is an add or delete event related to a temporary\n                        // file. Some tools (like auto-formatters) create temporary files\n                        // alongside the original file and name them \"x.py.<temp-id>.py\" where\n                        // <temp-id> is a 32-character random string of hex digits. We don't\n                        // want these events to trigger a full reanalysis.\n                        const fileName = getFileName(path);\n                        const fileNameSplit = fileName.split('.');\n                        let isTemporaryFile = false;\n                        if (fileNameSplit.length === 4) {\n                            if (fileNameSplit[3] === fileNameSplit[1] && fileNameSplit[2].length === 32) {\n                                isTemporaryFile = true;\n                            }\n                        }\n\n                        if (!isTemporaryFile) {\n                            // Added/deleted/renamed files impact imports,\n                            // clear the import resolver cache and reanalyze everything.\n                            this.invalidateAndForceReanalysis();\n                            this._scheduleReanalysis(true);\n                        }\n                    }\n                });\n            } catch {\n                this._console.error(`Exception caught when installing fs watcher for:\\n ${fileList.join('\\n')}`);\n            }\n        }\n    }\n\n    private _removeLibraryFileWatcher() {\n        if (this._libraryFileWatcher) {\n            this._libraryFileWatcher.close();\n            this._libraryFileWatcher = undefined;\n        }\n    }\n\n    private _updateLibraryFileWatcher() {\n        this._removeLibraryFileWatcher();\n\n        this._backgroundAnalysisProgram.invalidateCache();\n\n        if (!this._watchForLibraryChanges) {\n            return;\n        }\n\n        // Watch the library paths for package install/uninstall.\n        const importFailureInfo: string[] = [];\n        const watchList = findPythonSearchPaths(\n            this._fs,\n            this._backgroundAnalysisProgram.configOptions,\n            undefined,\n            importFailureInfo,\n            true,\n            this._executionRootPath\n        );\n\n        if (watchList && watchList.length > 0) {\n            try {\n                if (this._verboseOutput) {\n                    this._console.info(`Adding fs watcher for library directories:\\n ${watchList.join('\\n')}`);\n                }\n                const isIgnored = ignoredWatchEventFunction(watchList);\n                this._libraryFileWatcher = this._fs.createFileSystemWatcher(watchList, (event, path) => {\n                    if (isIgnored(path)) {\n                        return;\n                    }\n\n                    if (this._verboseOutput) {\n                        this._console.info(`LibraryFile: Received fs event '${event}' for path '${path}'}'`);\n                    }\n\n                    this._scheduleLibraryAnalysis();\n                });\n            } catch {\n                this._console.error(`Exception caught when installing fs watcher for:\\n ${watchList.join('\\n')}`);\n            }\n        }\n    }\n\n    private _clearLibraryReanalysisTimer() {\n        if (this._libraryReanalysisTimer) {\n            clearTimeout(this._libraryReanalysisTimer);\n            this._libraryReanalysisTimer = undefined;\n            this._backgroundAnalysisProgram?.cancelIndexing();\n        }\n    }\n\n    private _scheduleLibraryAnalysis() {\n        if (this._disposed) {\n            // Already disposed.\n            return;\n        }\n\n        this._clearLibraryReanalysisTimer();\n\n        // Wait for a little while, since library changes\n        // tend to happen in big batches when packages\n        // are installed or uninstalled.\n        this._libraryReanalysisTimer = setTimeout(() => {\n            this._clearLibraryReanalysisTimer();\n\n            // Invalidate import resolver, mark all files dirty unconditionally,\n            // and reanalyze.\n            this.invalidateAndForceReanalysis();\n            this._scheduleReanalysis(false);\n        }, 1000);\n    }\n\n    private _removeConfigFileWatcher() {\n        if (this._configFileWatcher) {\n            this._configFileWatcher.close();\n            this._configFileWatcher = undefined;\n        }\n    }\n\n    private _updateConfigFileWatcher() {\n        this._removeConfigFileWatcher();\n\n        if (this._configFilePath) {\n            this._configFileWatcher = this._fs.createFileSystemWatcher([this._configFilePath], (event) => {\n                if (this._verboseOutput) {\n                    this._console.info(`Received fs event '${event}' for config file`);\n                }\n                this._scheduleReloadConfigFile();\n            });\n        } else if (this._executionRootPath) {\n            this._configFileWatcher = this._fs.createFileSystemWatcher([this._executionRootPath], (event, path) => {\n                if (event === 'add' || event === 'change') {\n                    const fileName = getFileName(path);\n                    if (fileName && configFileNames.some((name) => name === fileName)) {\n                        if (this._verboseOutput) {\n                            this._console.info(`Received fs event '${event}' for config file`);\n                        }\n                        if (this._commandLineOptions) {\n                            this.setOptions(this._commandLineOptions);\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    private _clearReloadConfigTimer() {\n        if (this._reloadConfigTimer) {\n            clearTimeout(this._reloadConfigTimer);\n            this._reloadConfigTimer = undefined;\n        }\n    }\n\n    private _scheduleReloadConfigFile() {\n        this._clearReloadConfigTimer();\n\n        // Wait for a little while after we receive the\n        // change update event because it may take a while\n        // for the file to be written out. Plus, there may\n        // be multiple changes.\n        this._reloadConfigTimer = setTimeout(() => {\n            this._clearReloadConfigTimer();\n            this._reloadConfigFile();\n        }, 100);\n    }\n\n    private _reloadConfigFile() {\n        this._updateConfigFileWatcher();\n\n        if (this._configFilePath) {\n            this._console.info(`Reloading configuration file at ${this._configFilePath}`);\n\n            // We can't just reload config file when it is changed; we need to consider\n            // command line options as well to construct new config Options.\n            const configOptions = this._getConfigOptions(this._commandLineOptions!);\n            this._backgroundAnalysisProgram.setConfigOptions(configOptions);\n\n            this._applyConfigOptions();\n        }\n    }\n\n    private _applyConfigOptions(reanalyze = true) {\n        // Allocate a new import resolver because the old one has information\n        // cached based on the previous config options.\n        const importResolver = this._importResolverFactory(this._fs, this._backgroundAnalysisProgram.configOptions);\n        this._backgroundAnalysisProgram.setImportResolver(importResolver);\n\n        this._updateLibraryFileWatcher();\n        this._updateConfigFileWatcher();\n        this._updateSourceFileWatchers();\n        this._updateTrackedFileList(true);\n\n        if (reanalyze) {\n            this._scheduleReanalysis(false);\n        }\n    }\n\n    private _clearReanalysisTimer() {\n        if (this._analyzeTimer) {\n            clearTimeout(this._analyzeTimer);\n            this._analyzeTimer = undefined;\n        }\n    }\n\n    private _scheduleReanalysis(requireTrackedFileUpdate: boolean) {\n        if (this._disposed) {\n            // already disposed\n            return;\n        }\n\n        if (requireTrackedFileUpdate) {\n            this._requireTrackedFileUpdate = true;\n        }\n\n        this._backgroundAnalysisCancellationSource?.cancel();\n\n        // Remove any existing analysis timer.\n        this._clearReanalysisTimer();\n\n        // How long has it been since the user interacted with the service?\n        // If the user is actively typing, back off to let him or her finish.\n        const timeSinceLastUserInteractionInMs = Date.now() - this._lastUserInteractionTime;\n        const minBackoffTimeInMs = _userActivityBackoffTimeInMs;\n\n        // We choose a small non-zero value here. If this value\n        // is too small (like zero), the VS Code extension becomes\n        // unresponsive during heavy analysis. If this number is too\n        // large, analysis takes longer.\n        const minTimeBetweenAnalysisPassesInMs = 20;\n\n        const timeUntilNextAnalysisInMs = Math.max(\n            minBackoffTimeInMs - timeSinceLastUserInteractionInMs,\n            minTimeBetweenAnalysisPassesInMs\n        );\n\n        // Schedule a new timer.\n        this._analyzeTimer = setTimeout(() => {\n            this._analyzeTimer = undefined;\n\n            if (this._requireTrackedFileUpdate) {\n                this._updateTrackedFileList(false);\n            }\n\n            // This creates a cancellation source only if it actually gets used.\n            this._backgroundAnalysisCancellationSource = createBackgroundThreadCancellationTokenSource();\n            const moreToAnalyze = this._backgroundAnalysisProgram.startAnalysis(\n                this._backgroundAnalysisCancellationSource.token\n            );\n            if (moreToAnalyze) {\n                this._scheduleReanalysis(false);\n            }\n        }, timeUntilNextAnalysisInMs);\n    }\n\n    private _reportConfigParseError() {\n        if (this._onCompletionCallback) {\n            this._onCompletionCallback({\n                diagnostics: [],\n                filesInProgram: 0,\n                filesRequiringAnalysis: 0,\n                checkingOnlyOpenFiles: true,\n                fatalErrorOccurred: false,\n                configParseErrorOccurred: true,\n                elapsedTime: 0,\n            });\n        }\n    }\n}\n","/*\n * sourceFile.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Class that represents a single python source file.\n */\n\nimport {\n    CancellationToken,\n    CompletionItem,\n    DocumentHighlight,\n    DocumentSymbol,\n    MarkupKind,\n} from 'vscode-languageserver';\nimport { TextDocument, TextDocumentContentChangeEvent } from 'vscode-languageserver-textdocument';\nimport { isMainThread } from 'worker_threads';\n\nimport * as SymbolNameUtils from '../analyzer/symbolNameUtils';\nimport { OperationCanceledException } from '../common/cancellationUtils';\nimport { ConfigOptions, ExecutionEnvironment, getBasicDiagnosticRuleSet } from '../common/configOptions';\nimport { ConsoleInterface, StandardConsole } from '../common/console';\nimport { assert } from '../common/debug';\nimport { convertLevelToCategory, Diagnostic, DiagnosticCategory } from '../common/diagnostic';\nimport { DiagnosticSink, TextRangeDiagnosticSink } from '../common/diagnosticSink';\nimport { TextEditAction } from '../common/editAction';\nimport { FileSystem } from '../common/fileSystem';\nimport { LogTracker } from '../common/logTracker';\nimport { getFileName, normalizeSlashes, stripFileExtension } from '../common/pathUtils';\nimport * as StringUtils from '../common/stringUtils';\nimport { DocumentRange, getEmptyRange, Position, TextRange } from '../common/textRange';\nimport { TextRangeCollection } from '../common/textRangeCollection';\nimport { timingStats } from '../common/timing';\nimport { ModuleSymbolMap } from '../languageService/autoImporter';\nimport { CompletionResults } from '../languageService/completionProvider';\nimport { CompletionItemData, CompletionProvider } from '../languageService/completionProvider';\nimport { DefinitionProvider } from '../languageService/definitionProvider';\nimport { DocumentHighlightProvider } from '../languageService/documentHighlightProvider';\nimport { DocumentSymbolProvider, IndexOptions, IndexResults } from '../languageService/documentSymbolProvider';\nimport { HoverProvider, HoverResults } from '../languageService/hoverProvider';\nimport { performQuickAction } from '../languageService/quickActions';\nimport { ReferenceCallback, ReferencesProvider, ReferencesResult } from '../languageService/referencesProvider';\nimport { SignatureHelpProvider, SignatureHelpResults } from '../languageService/signatureHelpProvider';\nimport { Localizer } from '../localization/localize';\nimport { ModuleNode } from '../parser/parseNodes';\nimport { ModuleImport, ParseOptions, Parser, ParseResults } from '../parser/parser';\nimport { Token } from '../parser/tokenizerTypes';\nimport { AnalyzerFileInfo, ImportLookup } from './analyzerFileInfo';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport { Binder, BinderResults } from './binder';\nimport { Checker } from './checker';\nimport { CircularDependency } from './circularDependency';\nimport * as CommentUtils from './commentUtils';\nimport { ImportResolver } from './importResolver';\nimport { ImportResult } from './importResult';\nimport { ParseTreeCleanerWalker } from './parseTreeCleaner';\nimport { Scope } from './scope';\nimport { SourceMapper } from './sourceMapper';\nimport { SymbolTable } from './symbol';\nimport { TestWalker } from './testWalker';\nimport { TypeEvaluator } from './typeEvaluator';\n\nconst _maxImportCyclesPerFile = 4;\n\ninterface ResolveImportResult {\n    imports: ImportResult[];\n    builtinsImportResult?: ImportResult;\n    typingModulePath?: string;\n    typeshedModulePath?: string;\n    collectionsModulePath?: string;\n}\n\nexport class SourceFile {\n    // Console interface to use for debugging.\n    private _console: ConsoleInterface;\n\n    // File path on disk.\n    private readonly _filePath: string;\n\n    // Period-delimited import path for the module.\n    private readonly _moduleName: string;\n\n    // True if file is a type-hint (.pyi) file versus a python\n    // (.py) file.\n    private readonly _isStubFile: boolean;\n\n    // True if the file was imported as a third-party import.\n    private readonly _isThirdPartyImport: boolean;\n\n    // True if the file is the \"typing.pyi\" file, which needs\n    // special-case handling.\n    private readonly _isTypingStubFile: boolean;\n\n    // True if the file is the \"typing_extensions.pyi\" file, which needs\n    // special-case handling.\n    private readonly _isTypingExtensionsStubFile: boolean;\n\n    // True if the file one of the other built-in stub files\n    // that require special-case handling: \"collections.pyi\",\n    // \"dataclasses.pyi\", \"abc.pyi\", \"asyncio/coroutines.pyi\".\n    private readonly _isBuiltInStubFile: boolean;\n\n    // True if the file is part of a package that contains a\n    // \"py.typed\" file.\n    private readonly _isThirdPartyPyTypedPresent: boolean;\n\n    // True if the file appears to have been deleted.\n    private _isFileDeleted = false;\n\n    // Number that is incremented every time the diagnostics\n    // are updated.\n    private _diagnosticVersion = 0;\n\n    // Generation count of the file contents. When the contents\n    // change, this is incremented.\n    private _fileContentsVersion = 0;\n\n    // Length and hash of the file the last time it was read from disk.\n    private _lastFileContentLength: number | undefined = undefined;\n    private _lastFileContentHash: number | undefined = undefined;\n\n    // Client's version of the file. Undefined implies that contents\n    // need to be read from disk.\n    private _clientDocument?: TextDocument;\n\n    // Version of file contents that have been analyzed.\n    private _analyzedFileContentsVersion = -1;\n\n    // Do we need to walk the parse tree and clean\n    // the binder information hanging from it?\n    private _parseTreeNeedsCleaning = false;\n\n    private _parseResults?: ParseResults;\n    private _moduleSymbolTable?: SymbolTable;\n    private _binderResults?: BinderResults;\n    private _cachedIndexResults?: IndexResults;\n\n    // Reentrancy check for binding.\n    private _isBindingInProgress = false;\n\n    // Diagnostics generated during different phases of analysis.\n    private _parseDiagnostics: Diagnostic[] = [];\n    private _bindDiagnostics: Diagnostic[] = [];\n    private _checkerDiagnostics: Diagnostic[] = [];\n\n    // Settings that control which diagnostics should be output.\n    private _diagnosticRuleSet = getBasicDiagnosticRuleSet();\n\n    // Circular dependencies that have been reported in this file.\n    private _circularDependencies: CircularDependency[] = [];\n\n    // Did we hit the maximum import depth?\n    private _hitMaxImportDepth?: number;\n\n    // Do we need to perform a binding step?\n    private _isBindingNeeded = true;\n\n    // Do we have valid diagnostic results from a checking pass?\n    private _isCheckingNeeded = true;\n\n    // Do we need to perform an indexing step?\n    private _indexingNeeded = true;\n\n    // Information about implicit and explicit imports from this file.\n    private _imports?: ImportResult[];\n    private _builtinsImport?: ImportResult;\n    private _typingModulePath?: string;\n    private _typeshedModulePath?: string;\n    private _collectionsModulePath?: string;\n\n    private _logTracker: LogTracker;\n    readonly fileSystem: FileSystem;\n\n    constructor(\n        fs: FileSystem,\n        filePath: string,\n        moduleName: string,\n        isThirdPartyImport: boolean,\n        isThirdPartyPyTypedPresent: boolean,\n        console?: ConsoleInterface,\n        logTracker?: LogTracker\n    ) {\n        this.fileSystem = fs;\n        this._console = console || new StandardConsole();\n        this._filePath = filePath;\n        this._moduleName = moduleName;\n        this._isStubFile = filePath.endsWith('.pyi');\n        this._isThirdPartyImport = isThirdPartyImport;\n        this._isThirdPartyPyTypedPresent = isThirdPartyPyTypedPresent;\n        const fileName = getFileName(filePath);\n        this._isTypingStubFile =\n            this._isStubFile && (fileName === 'typing.pyi' || fileName === 'typing_extensions.pyi');\n        this._isTypingExtensionsStubFile = this._isStubFile && fileName === 'typing_extensions.pyi';\n\n        this._isBuiltInStubFile = false;\n        if (this._isStubFile) {\n            if (\n                this._filePath.endsWith(normalizeSlashes('/collections/__init__.pyi')) ||\n                this._filePath.endsWith(normalizeSlashes('/asyncio/futures.pyi')) ||\n                fileName === 'builtins.pyi' ||\n                fileName === '_importlib_modulespec.pyi' ||\n                fileName === 'dataclasses.pyi' ||\n                fileName === 'abc.pyi' ||\n                fileName === 'enum.pyi' ||\n                fileName === 'queue.pyi' ||\n                fileName === 'types.pyi'\n            ) {\n                this._isBuiltInStubFile = true;\n            }\n        }\n\n        // 'FG' or 'BG' based on current thread.\n        this._logTracker = logTracker ?? new LogTracker(console, isMainThread ? 'FG' : 'BG');\n    }\n\n    getFilePath(): string {\n        return this._filePath;\n    }\n\n    getDiagnosticVersion(): number {\n        return this._diagnosticVersion;\n    }\n\n    isStubFile() {\n        return this._isStubFile;\n    }\n\n    // Returns a list of cached diagnostics from the latest analysis job.\n    // If the prevVersion is specified, the method returns undefined if\n    // the diagnostics haven't changed.\n    getDiagnostics(options: ConfigOptions, prevDiagnosticVersion?: number): Diagnostic[] | undefined {\n        if (this._diagnosticVersion === prevDiagnosticVersion) {\n            return undefined;\n        }\n\n        let includeWarningsAndErrors = true;\n\n        // If a file was imported as a third-party file, don't report\n        // any errors for it. The user can't fix them anyway.\n        if (this._isThirdPartyImport) {\n            includeWarningsAndErrors = false;\n        }\n\n        let diagList: Diagnostic[] = [];\n        diagList = diagList.concat(this._parseDiagnostics, this._bindDiagnostics, this._checkerDiagnostics);\n\n        // Filter the diagnostics based on \"type: ignore\" lines.\n        if (options.diagnosticRuleSet.enableTypeIgnoreComments) {\n            const typeIgnoreLines = this._parseResults ? this._parseResults.tokenizerOutput.typeIgnoreLines : {};\n            if (Object.keys(typeIgnoreLines).length > 0) {\n                diagList = diagList.filter((d) => {\n                    if (d.category !== DiagnosticCategory.UnusedCode) {\n                        for (let line = d.range.start.line; line <= d.range.end.line; line++) {\n                            if (typeIgnoreLines[line]) {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return true;\n                });\n            }\n        }\n\n        if (options.diagnosticRuleSet.reportImportCycles !== 'none' && this._circularDependencies.length > 0) {\n            const category = convertLevelToCategory(options.diagnosticRuleSet.reportImportCycles);\n\n            this._circularDependencies.forEach((cirDep) => {\n                diagList.push(\n                    new Diagnostic(\n                        category,\n                        Localizer.Diagnostic.importCycleDetected() +\n                            '\\n' +\n                            cirDep\n                                .getPaths()\n                                .map((path) => '  ' + path)\n                                .join('\\n'),\n                        getEmptyRange()\n                    )\n                );\n            });\n        }\n\n        if (this._hitMaxImportDepth !== undefined) {\n            diagList.push(\n                new Diagnostic(\n                    DiagnosticCategory.Error,\n                    Localizer.Diagnostic.importDepthExceeded().format({ depth: this._hitMaxImportDepth }),\n                    getEmptyRange()\n                )\n            );\n        }\n\n        // If the file is in the ignore list, clear the diagnostic list.\n        if (options.ignore.find((ignoreFileSpec) => ignoreFileSpec.regExp.test(this._filePath))) {\n            diagList = [];\n        }\n\n        // If there is a \"type: ignore\" comment at the top of the file, clear\n        // the diagnostic list.\n        if (options.diagnosticRuleSet.enableTypeIgnoreComments) {\n            if (this._parseResults && this._parseResults.tokenizerOutput.typeIgnoreAll) {\n                diagList = [];\n            }\n        }\n\n        // If we're not returning any diagnostics, filter out all of\n        // the errors and warnings, leaving only the unreachable code\n        // diagnostics.\n        if (!includeWarningsAndErrors) {\n            diagList = diagList.filter((diag) => diag.category === DiagnosticCategory.UnusedCode);\n        }\n\n        return diagList;\n    }\n\n    getImports(): ImportResult[] {\n        return this._imports || [];\n    }\n\n    getBuiltinsImport(): ImportResult | undefined {\n        return this._builtinsImport;\n    }\n\n    getModuleSymbolTable(): SymbolTable | undefined {\n        return this._moduleSymbolTable;\n    }\n\n    getModuleDocString(): string | undefined {\n        return this._binderResults ? this._binderResults.moduleDocString : undefined;\n    }\n\n    // Indicates whether the contents of the file have changed since\n    // the last analysis was performed.\n    didContentsChangeOnDisk(): boolean {\n        // If this is an open file any content changes will be\n        // provided through the editor. We can assume contents\n        // didn't change without us knowing about them.\n        if (this._clientDocument) {\n            return false;\n        }\n\n        // If the file was never read previously, no need to check for a change.\n        if (this._lastFileContentLength === undefined) {\n            return false;\n        }\n\n        // Read in the latest file contents and see if the hash matches\n        // that of the previous contents.\n        try {\n            // Read the file's contents.\n            const fileContents = this.fileSystem.readFileSync(this._filePath, 'utf8');\n\n            if (fileContents.length !== this._lastFileContentLength) {\n                return true;\n            }\n\n            if (StringUtils.hashString(fileContents) !== this._lastFileContentHash) {\n                return true;\n            }\n        } catch (error) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Drop parse and binding info to save memory. It is used\n    // in cases where memory is low. When info is needed, the file\n    // will be re-parsed and rebound.\n    dropParseAndBindInfo(): void {\n        this._parseResults = undefined;\n        this._moduleSymbolTable = undefined;\n        this._isBindingNeeded = true;\n        this._binderResults = undefined;\n    }\n\n    markDirty(): void {\n        this._fileContentsVersion++;\n        this._isCheckingNeeded = true;\n        this._isBindingNeeded = true;\n        this._indexingNeeded = true;\n        this._moduleSymbolTable = undefined;\n        this._binderResults = undefined;\n        this._cachedIndexResults = undefined;\n    }\n\n    markReanalysisRequired(): void {\n        // Keep the parse info, but reset the analysis to the beginning.\n        this._isCheckingNeeded = true;\n\n        // If the file contains a wildcard import or __all__ symbols,\n        // we need to rebind because a dependent import may have changed.\n        if (this._parseResults) {\n            if (\n                this._parseResults.containsWildcardImport ||\n                AnalyzerNodeInfo.getDunderAllNames(this._parseResults.parseTree)\n            ) {\n                this._parseTreeNeedsCleaning = true;\n                this._isBindingNeeded = true;\n                this._indexingNeeded = true;\n                this._moduleSymbolTable = undefined;\n                this._binderResults = undefined;\n                this._cachedIndexResults = undefined;\n            }\n        }\n    }\n\n    getClientVersion() {\n        return this._clientDocument?.version;\n    }\n\n    getFileContents() {\n        return this._clientDocument?.getText();\n    }\n\n    setClientVersion(version: number | null, contents: TextDocumentContentChangeEvent[]): void {\n        if (version === null) {\n            this._clientDocument = undefined;\n        } else {\n            if (!this._clientDocument) {\n                this._clientDocument = TextDocument.create(this._filePath, 'python', version, '');\n            }\n            this._clientDocument = TextDocument.update(this._clientDocument, contents, version);\n            this.markDirty();\n        }\n    }\n\n    prepareForClose() {\n        // Nothing to do currently.\n    }\n\n    isFileDeleted() {\n        return this._isFileDeleted;\n    }\n\n    isParseRequired() {\n        return !this._parseResults || this._analyzedFileContentsVersion !== this._fileContentsVersion;\n    }\n\n    isBindingRequired() {\n        if (this._isBindingInProgress) {\n            return false;\n        }\n\n        if (this.isParseRequired()) {\n            return true;\n        }\n\n        return this._isBindingNeeded;\n    }\n\n    isIndexingRequired() {\n        return this._indexingNeeded;\n    }\n\n    isCheckingRequired() {\n        return this._isCheckingNeeded;\n    }\n\n    getParseResults(): ParseResults | undefined {\n        if (!this.isParseRequired()) {\n            return this._parseResults;\n        }\n\n        return undefined;\n    }\n\n    getCachedIndexResults(): IndexResults | undefined {\n        return this._cachedIndexResults;\n    }\n\n    cacheIndexResults(indexResults: IndexResults) {\n        this._cachedIndexResults = indexResults;\n    }\n\n    // Adds a new circular dependency for this file but only if\n    // it hasn't already been added.\n    addCircularDependency(circDependency: CircularDependency) {\n        let updatedDependencyList = false;\n\n        // Some topologies can result in a massive number of cycles. We'll cut it off.\n        if (this._circularDependencies.length < _maxImportCyclesPerFile) {\n            if (!this._circularDependencies.some((dep) => dep.isEqual(circDependency))) {\n                this._circularDependencies.push(circDependency);\n                updatedDependencyList = true;\n            }\n        }\n\n        if (updatedDependencyList) {\n            this._diagnosticVersion++;\n        }\n    }\n\n    setHitMaxImportDepth(maxImportDepth: number) {\n        this._hitMaxImportDepth = maxImportDepth;\n    }\n\n    // Parse the file and update the state. Callers should wait for completion\n    // (or at least cancel) prior to calling again. It returns true if a parse\n    // was required and false if the parse information was up to date already.\n    parse(configOptions: ConfigOptions, importResolver: ImportResolver, content?: string): boolean {\n        return this._logTracker.log(`parsing: ${this._filePath}`, (logState) => {\n            // If the file is already parsed, we can skip.\n            if (!this.isParseRequired()) {\n                logState.suppress();\n                return false;\n            }\n\n            const diagSink = new DiagnosticSink();\n            let fileContents = this.getFileContents();\n            if (fileContents === undefined) {\n                try {\n                    const elapsedTime = timingStats.readFileTime.timeOperation(() => {\n                        // Read the file's contents.\n                        fileContents = content ?? this.fileSystem.readFileSync(this._filePath, 'utf8');\n\n                        // Remember the length and hash for comparison purposes.\n                        this._lastFileContentLength = fileContents.length;\n                        this._lastFileContentHash = StringUtils.hashString(fileContents);\n                    });\n                    logState.add(`fs read ${elapsedTime}ms`);\n                } catch (error) {\n                    diagSink.addError(`Source file could not be read`, getEmptyRange());\n                    fileContents = '';\n\n                    if (!this.fileSystem.existsSync(this._filePath)) {\n                        this._isFileDeleted = true;\n                    }\n                }\n            }\n\n            // Use the configuration options to determine the environment in which\n            // this source file will be executed.\n            const execEnvironment = configOptions.findExecEnvironment(this._filePath);\n\n            const parseOptions = new ParseOptions();\n            if (this._filePath.endsWith('pyi')) {\n                parseOptions.isStubFile = true;\n            }\n            parseOptions.pythonVersion = execEnvironment.pythonVersion;\n\n            try {\n                // Parse the token stream, building the abstract syntax tree.\n                const parser = new Parser();\n                const parseResults = parser.parseSourceFile(fileContents!, parseOptions, diagSink);\n                assert(parseResults !== undefined && parseResults.tokenizerOutput !== undefined);\n                this._parseResults = parseResults;\n\n                // Resolve imports.\n                timingStats.resolveImportsTime.timeOperation(() => {\n                    const importResult = this._resolveImports(\n                        importResolver,\n                        parseResults.importedModules,\n                        execEnvironment\n                    );\n\n                    this._imports = importResult.imports;\n                    this._builtinsImport = importResult.builtinsImportResult;\n                    this._typingModulePath = importResult.typingModulePath;\n                    this._typeshedModulePath = importResult.typeshedModulePath;\n                    this._collectionsModulePath = importResult.collectionsModulePath;\n\n                    this._parseDiagnostics = diagSink.fetchAndClear();\n                });\n\n                // Is this file in a \"strict\" path?\n                const useStrict =\n                    configOptions.strict.find((strictFileSpec) => strictFileSpec.regExp.test(this._filePath)) !==\n                    undefined;\n\n                this._diagnosticRuleSet = CommentUtils.getFileLevelDirectives(\n                    this._parseResults.tokenizerOutput.tokens,\n                    configOptions.diagnosticRuleSet,\n                    useStrict\n                );\n            } catch (e) {\n                const message: string =\n                    (e.stack ? e.stack.toString() : undefined) ||\n                    (typeof e.message === 'string' ? e.message : undefined) ||\n                    JSON.stringify(e);\n                this._console.error(\n                    Localizer.Diagnostic.internalParseError().format({ file: this.getFilePath(), message })\n                );\n\n                // Create dummy parse results.\n                this._parseResults = {\n                    text: '',\n                    parseTree: ModuleNode.create({ start: 0, length: 0 }),\n                    importedModules: [],\n                    futureImports: new Map<string, boolean>(),\n                    tokenizerOutput: {\n                        tokens: new TextRangeCollection<Token>([]),\n                        lines: new TextRangeCollection<TextRange>([]),\n                        typeIgnoreAll: false,\n                        typeIgnoreLines: {},\n                        predominantEndOfLineSequence: '\\n',\n                        predominantTabSequence: '    ',\n                        predominantSingleQuoteCharacter: \"'\",\n                    },\n                    containsWildcardImport: false,\n                };\n                this._imports = undefined;\n                this._builtinsImport = undefined;\n\n                const diagSink = new DiagnosticSink();\n                diagSink.addError(\n                    Localizer.Diagnostic.internalParseError().format({ file: this.getFilePath(), message }),\n                    getEmptyRange()\n                );\n                this._parseDiagnostics = diagSink.fetchAndClear();\n\n                // Do not rethrow the exception, swallow it here. Callers are not\n                // prepared to handle an exception.\n            }\n\n            this._analyzedFileContentsVersion = this._fileContentsVersion;\n            this._indexingNeeded = true;\n            this._isBindingNeeded = true;\n            this._isCheckingNeeded = true;\n            this._parseTreeNeedsCleaning = false;\n            this._hitMaxImportDepth = undefined;\n            this._diagnosticVersion++;\n\n            return true;\n        });\n    }\n\n    index(options: IndexOptions, token: CancellationToken): IndexResults | undefined {\n        return this._logTracker.log(`indexing: ${this._filePath}`, (ls) => {\n            // If we have no completed analysis job, there's nothing to do.\n            if (!this._parseResults || !this.isIndexingRequired()) {\n                ls.suppress();\n                return undefined;\n            }\n\n            this._indexingNeeded = false;\n            const symbols = DocumentSymbolProvider.indexSymbols(this._parseResults, options, token);\n            ls.add(`found ${symbols.length}`);\n\n            const name = stripFileExtension(getFileName(this._filePath));\n            const privateOrProtected = SymbolNameUtils.isPrivateOrProtectedName(name);\n            return { privateOrProtected, symbols };\n        });\n    }\n\n    getDefinitionsForPosition(\n        sourceMapper: SourceMapper,\n        position: Position,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): DocumentRange[] | undefined {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults) {\n            return undefined;\n        }\n\n        return DefinitionProvider.getDefinitionsForPosition(\n            sourceMapper,\n            this._parseResults,\n            position,\n            evaluator,\n            token\n        );\n    }\n\n    getDeclarationForPosition(\n        sourceMapper: SourceMapper,\n        position: Position,\n        evaluator: TypeEvaluator,\n        reporter: ReferenceCallback | undefined,\n        token: CancellationToken\n    ): ReferencesResult | undefined {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults) {\n            return undefined;\n        }\n\n        return ReferencesProvider.getDeclarationForPosition(\n            sourceMapper,\n            this._parseResults,\n            this._filePath,\n            position,\n            evaluator,\n            reporter,\n            token\n        );\n    }\n\n    addReferences(\n        referencesResult: ReferencesResult,\n        includeDeclaration: boolean,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): void {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults) {\n            return;\n        }\n\n        ReferencesProvider.addReferences(\n            this._parseResults,\n            this._filePath,\n            referencesResult,\n            includeDeclaration,\n            evaluator,\n            token\n        );\n    }\n\n    addHierarchicalSymbolsForDocument(symbolList: DocumentSymbol[], token: CancellationToken) {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults && !this._cachedIndexResults) {\n            return;\n        }\n\n        DocumentSymbolProvider.addHierarchicalSymbolsForDocument(\n            this.getCachedIndexResults(),\n            this._parseResults,\n            symbolList,\n            token\n        );\n    }\n\n    getSymbolsForDocument(query: string, token: CancellationToken) {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults && !this._cachedIndexResults) {\n            return [];\n        }\n\n        return DocumentSymbolProvider.getSymbolsForDocument(\n            this.getCachedIndexResults(),\n            this._parseResults,\n            this._filePath,\n            query,\n            token\n        );\n    }\n\n    getHoverForPosition(\n        sourceMapper: SourceMapper,\n        position: Position,\n        format: MarkupKind,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): HoverResults | undefined {\n        // If this file hasn't been bound, no hover info is available.\n        if (this._isBindingNeeded || !this._parseResults) {\n            return undefined;\n        }\n\n        return HoverProvider.getHoverForPosition(sourceMapper, this._parseResults, position, format, evaluator, token);\n    }\n\n    getDocumentHighlight(\n        sourceMapper: SourceMapper,\n        position: Position,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): DocumentHighlight[] | undefined {\n        // If this file hasn't been bound, no hover info is available.\n        if (this._isBindingNeeded || !this._parseResults) {\n            return undefined;\n        }\n\n        return DocumentHighlightProvider.getDocumentHighlight(this._parseResults, position, evaluator, token);\n    }\n\n    getSignatureHelpForPosition(\n        position: Position,\n        importLookup: ImportLookup,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): SignatureHelpResults | undefined {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults) {\n            return undefined;\n        }\n\n        return SignatureHelpProvider.getSignatureHelpForPosition(this._parseResults, position, evaluator, token);\n    }\n\n    getCompletionsForPosition(\n        position: Position,\n        workspacePath: string,\n        configOptions: ConfigOptions,\n        importResolver: ImportResolver,\n        importLookup: ImportLookup,\n        evaluator: TypeEvaluator,\n        format: MarkupKind,\n        sourceMapper: SourceMapper,\n        libraryMap: Map<string, IndexResults> | undefined,\n        moduleSymbolsCallback: () => ModuleSymbolMap,\n        token: CancellationToken\n    ): CompletionResults | undefined {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults) {\n            return undefined;\n        }\n\n        // This command should be called only for open files, in which\n        // case we should have the file contents already loaded.\n        const fileContents = this.getFileContents();\n        if (fileContents === undefined) {\n            return undefined;\n        }\n\n        const completionProvider = new CompletionProvider(\n            workspacePath,\n            this._parseResults,\n            fileContents,\n            importResolver,\n            position,\n            this._filePath,\n            configOptions,\n            importLookup,\n            evaluator,\n            format,\n            sourceMapper,\n            libraryMap,\n            moduleSymbolsCallback,\n            token\n        );\n\n        return completionProvider.getCompletionsForPosition();\n    }\n\n    resolveCompletionItem(\n        configOptions: ConfigOptions,\n        importResolver: ImportResolver,\n        importLookup: ImportLookup,\n        evaluator: TypeEvaluator,\n        format: MarkupKind,\n        sourceMapper: SourceMapper,\n        libraryMap: Map<string, IndexResults> | undefined,\n        moduleSymbolsCallback: () => ModuleSymbolMap,\n        completionItem: CompletionItem,\n        token: CancellationToken\n    ) {\n        const fileContents = this.getFileContents();\n        if (!this._parseResults || fileContents === undefined) {\n            return;\n        }\n\n        const completionData = completionItem.data as CompletionItemData;\n        const completionProvider = new CompletionProvider(\n            completionData.workspacePath,\n            this._parseResults,\n            fileContents,\n            importResolver,\n            completionData.position,\n            this._filePath,\n            configOptions,\n            importLookup,\n            evaluator,\n            format,\n            sourceMapper,\n            libraryMap,\n            moduleSymbolsCallback,\n            token\n        );\n\n        completionProvider.resolveCompletionItem(completionItem);\n    }\n\n    performQuickAction(command: string, args: any[], token: CancellationToken): TextEditAction[] | undefined {\n        // If we have no completed analysis job, there's nothing to do.\n        if (!this._parseResults) {\n            return undefined;\n        }\n\n        // This command should be called only for open files, in which\n        // case we should have the file contents already loaded.\n        if (this.getClientVersion() === undefined) {\n            return undefined;\n        }\n\n        return performQuickAction(command, args, this._parseResults, token);\n    }\n\n    bind(configOptions: ConfigOptions, importLookup: ImportLookup, builtinsScope: Scope | undefined) {\n        assert(!this.isParseRequired());\n        assert(this.isBindingRequired());\n        assert(!this._isBindingInProgress);\n        assert(this._parseResults !== undefined);\n\n        return this._logTracker.log(`binding: ${this._filePath}`, () => {\n            try {\n                // Perform name binding.\n                timingStats.bindTime.timeOperation(() => {\n                    this._cleanParseTreeIfRequired();\n\n                    const fileInfo = this._buildFileInfo(\n                        configOptions,\n                        this._parseResults!.text,\n                        importLookup,\n                        builtinsScope\n                    );\n                    AnalyzerNodeInfo.setFileInfo(this._parseResults!.parseTree, fileInfo);\n\n                    const binder = new Binder(fileInfo);\n                    this._isBindingInProgress = true;\n                    this._binderResults = binder.bindModule(this._parseResults!.parseTree);\n\n                    // If we're in \"test mode\" (used for unit testing), run an additional\n                    // \"test walker\" over the parse tree to validate its internal consistency.\n                    if (configOptions.internalTestMode) {\n                        const testWalker = new TestWalker();\n                        testWalker.walk(this._parseResults!.parseTree);\n                    }\n\n                    this._bindDiagnostics = fileInfo.diagnosticSink.fetchAndClear();\n                    const moduleScope = AnalyzerNodeInfo.getScope(this._parseResults!.parseTree);\n                    assert(moduleScope !== undefined);\n                    this._moduleSymbolTable = moduleScope!.symbolTable;\n                });\n            } catch (e) {\n                const message: string =\n                    (e.stack ? e.stack.toString() : undefined) ||\n                    (typeof e.message === 'string' ? e.message : undefined) ||\n                    JSON.stringify(e);\n                this._console.error(\n                    Localizer.Diagnostic.internalBindError().format({ file: this.getFilePath(), message })\n                );\n\n                const diagSink = new DiagnosticSink();\n                diagSink.addError(\n                    Localizer.Diagnostic.internalBindError().format({ file: this.getFilePath(), message }),\n                    getEmptyRange()\n                );\n                this._bindDiagnostics = diagSink.fetchAndClear();\n\n                // Do not rethrow the exception, swallow it here. Callers are not\n                // prepared to handle an exception.\n            } finally {\n                this._isBindingInProgress = false;\n            }\n\n            // Prepare for the next stage of the analysis.\n            this._diagnosticVersion++;\n            this._isCheckingNeeded = true;\n            this._indexingNeeded = true;\n            this._isBindingNeeded = false;\n        });\n    }\n\n    check(evaluator: TypeEvaluator) {\n        assert(!this.isParseRequired());\n        assert(!this.isBindingRequired());\n        assert(!this._isBindingInProgress);\n        assert(this.isCheckingRequired());\n        assert(this._parseResults !== undefined);\n\n        return this._logTracker.log(`checking: ${this._filePath}`, () => {\n            try {\n                timingStats.typeCheckerTime.timeOperation(() => {\n                    const checker = new Checker(this._parseResults!.parseTree, evaluator);\n                    checker.check();\n                    this._isCheckingNeeded = false;\n\n                    const fileInfo = AnalyzerNodeInfo.getFileInfo(this._parseResults!.parseTree)!;\n                    this._checkerDiagnostics = fileInfo.diagnosticSink.fetchAndClear();\n                });\n            } catch (e) {\n                const isCancellation = OperationCanceledException.is(e);\n                if (!isCancellation) {\n                    const message: string =\n                        (e.stack ? e.stack.toString() : undefined) ||\n                        (typeof e.message === 'string' ? e.message : undefined) ||\n                        JSON.stringify(e);\n                    this._console.error(\n                        Localizer.Diagnostic.internalTypeCheckingError().format({ file: this.getFilePath(), message })\n                    );\n                    const diagSink = new DiagnosticSink();\n                    diagSink.addError(\n                        Localizer.Diagnostic.internalTypeCheckingError().format({ file: this.getFilePath(), message }),\n                        getEmptyRange()\n                    );\n\n                    this._checkerDiagnostics = diagSink.fetchAndClear();\n\n                    // Mark the file as complete so we don't get into an infinite loop.\n                    this._isCheckingNeeded = false;\n                }\n\n                throw e;\n            } finally {\n                // Clear any circular dependencies associated with this file.\n                // These will be detected by the program module and associated\n                // with the source file right before it is finalized.\n                this._circularDependencies = [];\n                this._diagnosticVersion++;\n            }\n        });\n    }\n\n    private _buildFileInfo(\n        configOptions: ConfigOptions,\n        fileContents: string,\n        importLookup: ImportLookup,\n        builtinsScope?: Scope\n    ) {\n        assert(this._parseResults !== undefined);\n        const analysisDiagnostics = new TextRangeDiagnosticSink(this._parseResults!.tokenizerOutput.lines);\n\n        const fileInfo: AnalyzerFileInfo = {\n            importLookup,\n            futureImports: this._parseResults!.futureImports,\n            builtinsScope,\n            typingModulePath: this._typingModulePath,\n            typeshedModulePath: this._typeshedModulePath,\n            collectionsModulePath: this._collectionsModulePath,\n            diagnosticSink: analysisDiagnostics,\n            executionEnvironment: configOptions.findExecEnvironment(this._filePath),\n            diagnosticRuleSet: this._diagnosticRuleSet,\n            fileContents,\n            lines: this._parseResults!.tokenizerOutput.lines,\n            filePath: this._filePath,\n            moduleName: this._moduleName,\n            isStubFile: this._isStubFile,\n            isTypingStubFile: this._isTypingStubFile,\n            isTypingExtensionsStubFile: this._isTypingExtensionsStubFile,\n            isBuiltInStubFile: this._isBuiltInStubFile,\n            isInPyTypedPackage: this._isThirdPartyPyTypedPresent,\n            accessedSymbolMap: new Map<number, true>(),\n        };\n        return fileInfo;\n    }\n\n    private _cleanParseTreeIfRequired() {\n        if (this._parseResults) {\n            if (this._parseTreeNeedsCleaning) {\n                const cleanerWalker = new ParseTreeCleanerWalker(this._parseResults.parseTree);\n                cleanerWalker.clean();\n                this._parseTreeNeedsCleaning = false;\n            }\n        }\n    }\n\n    private _resolveImports(\n        importResolver: ImportResolver,\n        moduleImports: ModuleImport[],\n        execEnv: ExecutionEnvironment\n    ): ResolveImportResult {\n        const imports: ImportResult[] = [];\n\n        // Always include an implicit import of the builtins module.\n        let builtinsImportResult: ImportResult | undefined = importResolver.resolveImport(this._filePath, execEnv, {\n            leadingDots: 0,\n            nameParts: ['builtins'],\n            importedSymbols: undefined,\n        });\n\n        // Avoid importing builtins from the builtins.pyi file itself.\n        if (\n            builtinsImportResult.resolvedPaths.length === 0 ||\n            builtinsImportResult.resolvedPaths[0] !== this.getFilePath()\n        ) {\n            imports.push(builtinsImportResult);\n        } else {\n            builtinsImportResult = undefined;\n        }\n\n        // Always include an implicit import of the typing module.\n        const typingImportResult: ImportResult | undefined = importResolver.resolveImport(this._filePath, execEnv, {\n            leadingDots: 0,\n            nameParts: ['typing'],\n            importedSymbols: undefined,\n        });\n\n        // Avoid importing typing from the typing.pyi file itself.\n        let typingModulePath: string | undefined;\n        if (\n            typingImportResult.resolvedPaths.length === 0 ||\n            typingImportResult.resolvedPaths[0] !== this.getFilePath()\n        ) {\n            imports.push(typingImportResult);\n            typingModulePath = typingImportResult.resolvedPaths[0];\n        }\n\n        // Always include an implicit import of the _typeshed module.\n        const typeshedImportResult: ImportResult | undefined = importResolver.resolveImport(this._filePath, execEnv, {\n            leadingDots: 0,\n            nameParts: ['_typeshed'],\n            importedSymbols: undefined,\n        });\n\n        let typeshedModulePath: string | undefined;\n        if (\n            typeshedImportResult.resolvedPaths.length === 0 ||\n            typeshedImportResult.resolvedPaths[0] !== this.getFilePath()\n        ) {\n            imports.push(typeshedImportResult);\n            typeshedModulePath = typeshedImportResult.resolvedPaths[0];\n        }\n\n        let collectionsModulePath: string | undefined;\n\n        for (const moduleImport of moduleImports) {\n            const importResult = importResolver.resolveImport(this._filePath, execEnv, {\n                leadingDots: moduleImport.leadingDots,\n                nameParts: moduleImport.nameParts,\n                importedSymbols: moduleImport.importedSymbols,\n            });\n\n            // If the file imports the stdlib 'collections' module, stash\n            // away its file path. The type analyzer may need this to\n            // access types defined in the collections module.\n            if (importResult.isImportFound && importResult.isTypeshedFile) {\n                if (moduleImport.nameParts.length >= 1 && moduleImport.nameParts[0] === 'collections') {\n                    collectionsModulePath = importResult.resolvedPaths[importResult.resolvedPaths.length - 1];\n                }\n            }\n\n            imports.push(importResult);\n\n            // Associate the import results with the module import\n            // name node in the parse tree so we can access it later\n            // (for hover and definition support).\n            AnalyzerNodeInfo.setImportInfo(moduleImport.nameNode, importResult);\n        }\n\n        return {\n            imports,\n            builtinsImportResult,\n            typingModulePath,\n            typeshedModulePath,\n            collectionsModulePath,\n        };\n    }\n}\n","/*\n * sourceMapper.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Logic that maps a (.pyi) stub to its (.py) implementation source file.\n */\n\nimport * as AnalyzerNodeInfo from '../analyzer/analyzerNodeInfo';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { ExecutionEnvironment } from '../common/configOptions';\nimport { getAnyExtensionFromPath } from '../common/pathUtils';\nimport { ClassNode, ModuleNode, ParseNode } from '../parser/parseNodes';\nimport { ClassDeclaration, Declaration, DeclarationType, FunctionDeclaration } from './declaration';\nimport { ImportResolver } from './importResolver';\nimport { SourceFile } from './sourceFile';\nimport { TypeEvaluator } from './typeEvaluator';\n\n// Creates and binds a shadowed file within the program.\nexport type ShadowFileBinder = (stubFilePath: string, implFilePath: string) => SourceFile | undefined;\n\nexport class SourceMapper {\n    constructor(\n        private _importResolver: ImportResolver,\n        private _execEnv: ExecutionEnvironment,\n        private _evaluator: TypeEvaluator,\n        private _fileBinder: ShadowFileBinder,\n        private _mapCompiled: boolean\n    ) {}\n\n    public findModules(stubFilePath: string): ModuleNode[] {\n        const sourceFiles = this._getBoundSourceFiles(stubFilePath);\n        return sourceFiles.map((sf) => sf.getParseResults()?.parseTree).filter(_isDefined);\n    }\n\n    public findDeclarations(stubDecl: Declaration): Declaration[] {\n        if (stubDecl.type === DeclarationType.Class) {\n            return this.findClassDeclarations(stubDecl);\n        } else if (stubDecl.type === DeclarationType.Function) {\n            return this.findFunctionDeclarations(stubDecl);\n        }\n\n        return [];\n    }\n\n    public findClassDeclarations(stubDecl: ClassDeclaration): ClassDeclaration[] {\n        const className = this._getFullClassName(stubDecl.node);\n\n        const sourceFiles = this._getBoundSourceFiles(stubDecl.path);\n        return sourceFiles.flatMap((sourceFile) => this._findClassDeclarations(sourceFile, className));\n    }\n\n    public findFunctionDeclarations(stubDecl: FunctionDeclaration): FunctionDeclaration[] {\n        const functionName = stubDecl.node.name.value;\n        const sourceFiles = this._getBoundSourceFiles(stubDecl.path);\n\n        if (stubDecl.isMethod) {\n            const classNode = ParseTreeUtils.getEnclosingClass(stubDecl.node);\n            if (classNode === undefined) {\n                return [];\n            }\n\n            const className = this._getFullClassName(classNode);\n\n            return sourceFiles.flatMap((sourceFile) =>\n                this._findMethodDeclarations(sourceFile, className, functionName)\n            );\n        } else {\n            return sourceFiles.flatMap((sourceFile) => this._findFunctionDeclarations(sourceFile, functionName));\n        }\n    }\n\n    private _findMethodDeclarations(\n        sourceFile: SourceFile,\n        className: string,\n        functionName: string\n    ): FunctionDeclaration[] {\n        const result: FunctionDeclaration[] = [];\n\n        const classDecls = this._findClassDeclarations(sourceFile, className);\n\n        for (const classDecl of classDecls) {\n            const methodDecls = this._lookUpSymbolDeclarations(classDecl.node, functionName);\n            for (const methodDecl of methodDecls) {\n                if (methodDecl.type === DeclarationType.Function && methodDecl.isMethod) {\n                    result.push(methodDecl);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    private _findFunctionDeclarations(sourceFile: SourceFile, functionName: string): FunctionDeclaration[] {\n        const result: FunctionDeclaration[] = [];\n\n        const functionDecls = this._lookUpSymbolDeclarations(sourceFile.getParseResults()?.parseTree, functionName);\n\n        for (const functionDecl of functionDecls) {\n            if (functionDecl.type === DeclarationType.Function) {\n                result.push(functionDecl);\n            } else if (functionDecl.type === DeclarationType.Alias) {\n                const resolvedDecl = this._evaluator.resolveAliasDeclaration(\n                    functionDecl,\n                    /* resolveLocalNames */ true\n                );\n                if (resolvedDecl) {\n                    if (resolvedDecl.type === DeclarationType.Function) {\n                        if (isStubFile(resolvedDecl.path)) {\n                            result.push(...this.findFunctionDeclarations(resolvedDecl));\n                        } else {\n                            result.push(resolvedDecl);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    private _findClassDeclarations(sourceFile: SourceFile, fullClassName: string): ClassDeclaration[] {\n        let result: ClassDeclaration[] = [];\n\n        // fullClassName is period delimited, for example: 'OuterClass.InnerClass'\n        const parentNode = sourceFile.getParseResults()?.parseTree;\n        if (parentNode) {\n            let classNameParts = fullClassName.split('.');\n            if (classNameParts.length > 0) {\n                result = this._findClassDeclarationsUnderNode(sourceFile, classNameParts[0], parentNode);\n                classNameParts = classNameParts.slice(1);\n            }\n\n            for (const classNamePart of classNameParts) {\n                result = this._findClassDeclarationsUnderClass(sourceFile, classNamePart, result);\n            }\n        }\n\n        return result;\n    }\n\n    private _findClassDeclarationsUnderClass(\n        sourceFile: SourceFile,\n        className: string,\n        parentClassDecls: ClassDeclaration[]\n    ): ClassDeclaration[] {\n        return parentClassDecls.flatMap((parentDecl) =>\n            this._findClassDeclarationsUnderNode(sourceFile, className, parentDecl.node)\n        );\n    }\n\n    private _findClassDeclarationsUnderNode(\n        sourceFile: SourceFile,\n        className: string,\n        parentNode: ParseNode\n    ): ClassDeclaration[] {\n        const result: ClassDeclaration[] = [];\n\n        for (const decl of this._lookUpSymbolDeclarations(parentNode, className)) {\n            if (decl.type === DeclarationType.Class) {\n                result.push(decl);\n            }\n        }\n\n        return result;\n    }\n\n    private _lookUpSymbolDeclarations(node: ParseNode | undefined, symbolName: string): Declaration[] {\n        if (node === undefined) {\n            return [];\n        }\n\n        const moduleScope = AnalyzerNodeInfo.getScope(node);\n        const symbol = moduleScope?.lookUpSymbol(symbolName);\n        const decls = symbol?.getDeclarations();\n\n        return decls ?? [];\n    }\n\n    private _getFullClassName(node: ClassNode) {\n        const fullName: string[] = [];\n\n        let current: ClassNode | undefined = node;\n        while (current !== undefined) {\n            fullName.push(current.name.value);\n            current = ParseTreeUtils.getEnclosingClass(current);\n        }\n\n        return fullName.reverse().join('.');\n    }\n\n    private _getBoundSourceFiles(stubFilePath: string): SourceFile[] {\n        const paths = this._importResolver.getSourceFilesFromStub(stubFilePath, this._execEnv, this._mapCompiled);\n        return paths.map((fp) => this._fileBinder(stubFilePath, fp)).filter(_isDefined);\n    }\n}\n\nexport function isStubFile(filePath: string): boolean {\n    return getAnyExtensionFromPath(filePath, ['.pyi'], /* ignoreCase */ false) === '.pyi';\n}\n\nfunction _isDefined<T>(element: T | undefined): element is T {\n    return element !== undefined;\n}\n","/*\n * staticExpressions.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Collection of static methods that operate on expressions\n * (parse node trees).\n */\n\nimport { ExecutionEnvironment, PythonPlatform } from '../common/configOptions';\nimport { ExpressionNode, NameNode, NumberNode, ParseNodeType, TupleNode } from '../parser/parseNodes';\nimport { KeywordType, OperatorType } from '../parser/tokenizerTypes';\n\n// Returns undefined if the expression cannot be evaluated\n// statically as a bool value or true/false if it can.\nexport function evaluateStaticBoolExpression(\n    node: ExpressionNode,\n    execEnv: ExecutionEnvironment,\n    typingImportAliases?: string[]\n): boolean | undefined {\n    if (node.nodeType === ParseNodeType.UnaryOperation) {\n        if (node.operator === OperatorType.Or || node.operator === OperatorType.And) {\n            const value = evaluateStaticBoolLikeExpression(node.expression, execEnv);\n            if (value !== undefined) {\n                return !value;\n            }\n        }\n    } else if (node.nodeType === ParseNodeType.BinaryOperation) {\n        // Is it an OR or AND expression?\n        if (node.operator === OperatorType.Or || node.operator === OperatorType.And) {\n            const leftValue = evaluateStaticBoolExpression(node.leftExpression, execEnv);\n            const rightValue = evaluateStaticBoolExpression(node.rightExpression, execEnv);\n\n            if (leftValue === undefined || rightValue === undefined) {\n                return undefined;\n            }\n\n            if (node.operator === OperatorType.Or) {\n                return leftValue || rightValue;\n            } else {\n                return leftValue && rightValue;\n            }\n        }\n\n        if (_isSysVersionInfoExpression(node.leftExpression) && node.rightExpression.nodeType === ParseNodeType.Tuple) {\n            // Handle the special case of \"sys.version_info >= (3, x)\"\n            const comparisonVersion = _convertTupleToVersion(node.rightExpression);\n            return _evaluateNumericBinaryOperation(node.operator, execEnv.pythonVersion, comparisonVersion);\n        } else if (\n            node.leftExpression.nodeType === ParseNodeType.Index &&\n            _isSysVersionInfoExpression(node.leftExpression.baseExpression) &&\n            node.leftExpression.items.items.length === 1 &&\n            node.leftExpression.items.items[0].nodeType === ParseNodeType.Number &&\n            !node.leftExpression.items.items[0].isImaginary &&\n            node.leftExpression.items.items[0].value === 0 &&\n            node.rightExpression.nodeType === ParseNodeType.Number\n        ) {\n            // Handle the special case of \"sys.version_info[0] >= X\"\n            return _evaluateNumericBinaryOperation(\n                node.operator,\n                Math.floor(execEnv.pythonVersion / 256),\n                node.rightExpression.value\n            );\n        } else if (\n            _isSysPlatformInfoExpression(node.leftExpression) &&\n            node.rightExpression.nodeType === ParseNodeType.StringList\n        ) {\n            // Handle the special case of \"sys.platform != 'X'\"\n            const comparisonPlatform = node.rightExpression.strings.map((s) => s.value).join('');\n            const expectedPlatformName = _getExpectedPlatformNameFromPlatform(execEnv);\n            return _evaluateStringBinaryOperation(node.operator, expectedPlatformName || '', comparisonPlatform);\n        } else if (\n            _isOsNameInfoExpression(node.leftExpression) &&\n            node.rightExpression.nodeType === ParseNodeType.StringList\n        ) {\n            // Handle the special case of \"os.name == 'X'\"\n            const comparisonOsName = node.rightExpression.strings.map((s) => s.value).join('');\n            const expectedOsName = _getExpectedOsNameFromPlatform(execEnv);\n            if (expectedOsName !== undefined) {\n                return _evaluateStringBinaryOperation(node.operator, expectedOsName, comparisonOsName);\n            }\n        }\n    } else if (node.nodeType === ParseNodeType.Constant) {\n        if (node.constType === KeywordType.True) {\n            return true;\n        } else if (node.constType === KeywordType.False) {\n            return false;\n        }\n    } else if (node.nodeType === ParseNodeType.Name) {\n        if (node.value === 'TYPE_CHECKING') {\n            return true;\n        }\n    } else if (\n        typingImportAliases &&\n        node.nodeType === ParseNodeType.MemberAccess &&\n        node.memberName.value === 'TYPE_CHECKING' &&\n        node.leftExpression.nodeType === ParseNodeType.Name &&\n        typingImportAliases.some((alias) => alias === (node.leftExpression as NameNode).value)\n    ) {\n        return true;\n    }\n\n    return undefined;\n}\n\n// Similar to evaluateStaticBoolExpression except that it handles\n// other non-bool values that are statically falsy or truthy\n// (like \"None\").\nexport function evaluateStaticBoolLikeExpression(\n    node: ExpressionNode,\n    execEnv: ExecutionEnvironment,\n    typingImportAliases?: string[]\n): boolean | undefined {\n    if (node.nodeType === ParseNodeType.Constant) {\n        if (node.constType === KeywordType.None) {\n            return false;\n        }\n    }\n\n    return evaluateStaticBoolExpression(node, execEnv, typingImportAliases);\n}\n\nfunction _convertTupleToVersion(node: TupleNode): number | undefined {\n    let comparisonVersion: number | undefined;\n    // Ignore patch versions.\n    if (node.expressions.length >= 2) {\n        if (\n            node.expressions[0].nodeType === ParseNodeType.Number &&\n            !node.expressions[0].isImaginary &&\n            node.expressions[1].nodeType === ParseNodeType.Number &&\n            !node.expressions[1].isImaginary\n        ) {\n            const majorVersion = node.expressions[0];\n            const minorVersion = node.expressions[1];\n            comparisonVersion = majorVersion.value * 256 + minorVersion.value;\n        }\n    } else if (node.expressions.length === 1) {\n        const majorVersion = node.expressions[0] as NumberNode;\n        comparisonVersion = majorVersion.value * 256;\n    }\n\n    return comparisonVersion;\n}\n\nfunction _evaluateNumericBinaryOperation(\n    operatorType: OperatorType,\n    leftValue: number | undefined,\n    rightValue: number | undefined\n): any | undefined {\n    if (leftValue !== undefined && rightValue !== undefined) {\n        if (operatorType === OperatorType.LessThan) {\n            return leftValue < rightValue;\n        } else if (operatorType === OperatorType.LessThanOrEqual) {\n            return leftValue <= rightValue;\n        } else if (operatorType === OperatorType.GreaterThan) {\n            return leftValue > rightValue;\n        } else if (operatorType === OperatorType.GreaterThanOrEqual) {\n            return leftValue >= rightValue;\n        } else if (operatorType === OperatorType.Equals) {\n            return leftValue === rightValue;\n        } else if (operatorType === OperatorType.NotEquals) {\n            return leftValue !== rightValue;\n        }\n    }\n\n    return undefined;\n}\n\nfunction _evaluateStringBinaryOperation(\n    operatorType: OperatorType,\n    leftValue: string | undefined,\n    rightValue: string | undefined\n): any | undefined {\n    if (leftValue !== undefined && rightValue !== undefined) {\n        if (operatorType === OperatorType.Equals) {\n            return leftValue === rightValue;\n        } else if (operatorType === OperatorType.NotEquals) {\n            return leftValue !== rightValue;\n        }\n    }\n\n    return undefined;\n}\n\nfunction _isSysVersionInfoExpression(node: ExpressionNode): boolean {\n    if (node.nodeType === ParseNodeType.MemberAccess) {\n        if (\n            node.leftExpression.nodeType === ParseNodeType.Name &&\n            node.leftExpression.value === 'sys' &&\n            node.memberName.value === 'version_info'\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction _isSysPlatformInfoExpression(node: ExpressionNode): boolean {\n    if (node.nodeType === ParseNodeType.MemberAccess) {\n        if (\n            node.leftExpression.nodeType === ParseNodeType.Name &&\n            node.leftExpression.value === 'sys' &&\n            node.memberName.value === 'platform'\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction _isOsNameInfoExpression(node: ExpressionNode): boolean {\n    if (node.nodeType === ParseNodeType.MemberAccess) {\n        if (\n            node.leftExpression.nodeType === ParseNodeType.Name &&\n            node.leftExpression.value === 'os' &&\n            node.memberName.value === 'name'\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction _getExpectedPlatformNameFromPlatform(execEnv: ExecutionEnvironment): string | undefined {\n    if (execEnv.pythonPlatform === PythonPlatform.Darwin) {\n        return 'darwin';\n    } else if (execEnv.pythonPlatform === PythonPlatform.Windows) {\n        return 'win32';\n    } else if (execEnv.pythonPlatform === PythonPlatform.Linux) {\n        return 'linux';\n    }\n\n    return undefined;\n}\n\nfunction _getExpectedOsNameFromPlatform(execEnv: ExecutionEnvironment): string | undefined {\n    if (execEnv.pythonPlatform === PythonPlatform.Darwin) {\n        return 'posix';\n    } else if (execEnv.pythonPlatform === PythonPlatform.Windows) {\n        return 'nt';\n    } else if (execEnv.pythonPlatform === PythonPlatform.Linux) {\n        return 'posix';\n    }\n\n    return undefined;\n}\n","/*\n * symbol.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Represents an association between a name and the type\n * (or multiple types) that the symbol is associated with\n * in the program.\n */\n\nimport { Declaration, DeclarationType } from './declaration';\nimport { areDeclarationsSame, hasTypeForDeclaration } from './declarationUtils';\nimport { Type } from './types';\n\nexport const enum SymbolFlags {\n    None = 0,\n\n    // Indicates that the symbol is unbound at the start of\n    // execution. Some symbols are initialized by the module\n    // loader, so they are bound even before the first statement\n    // in the module is executed.\n    InitiallyUnbound = 1 << 0,\n\n    // Indicates that the symbol is not visible from other files.\n    // Used for module-level symbols.\n    ExternallyHidden = 1 << 1,\n\n    // Indicates that the symbol is a class member of a class.\n    ClassMember = 1 << 2,\n\n    // Indicates that the symbol is an instance member of a class.\n    InstanceMember = 1 << 3,\n\n    // Indicates that the symbol is considered \"private\" to the\n    // class and should not be accessed outside or overridden.\n    PrivateMember = 1 << 5,\n\n    // Indicates that the symbol is not considered for protocol\n    // matching. This applies to some built-in symbols like __class__.\n    IgnoredForProtocolMatch = 1 << 6,\n\n    // Indicates that the symbol is a ClassVar, so it cannot be\n    // set when accessed through a class instance.\n    ClassVar = 1 << 7,\n}\n\nlet nextSymbolId = 1;\nfunction getUniqueSymbolId() {\n    return nextSymbolId++;\n}\n\n// Symbol ID that indicates that there is no specific symbol.\nexport const indeterminateSymbolId = 0;\n\nexport class Symbol {\n    // Information about the node that declared the value -\n    // i.e. where the editor will take the user if \"show definition\"\n    // is selected. Multiple declarations can exist for variables,\n    // properties, and functions (in the case of @overload).\n    private _declarations?: Declaration[];\n\n    // Flags that provide information about the symbol.\n    private _flags: SymbolFlags;\n\n    // Unique numeric ID for each symbol allocated.\n    readonly id: number;\n\n    // Symbols that are completely synthesized (i.e. have no\n    // corresponding declarations in the program) can have\n    // a specified type.\n    private _synthesizedType?: Type;\n\n    constructor(flags = SymbolFlags.ClassMember) {\n        this.id = getUniqueSymbolId();\n        this._flags = flags;\n    }\n\n    static createWithType(flags: SymbolFlags, type: Type) {\n        const newSymbol = new Symbol(flags);\n        newSymbol._synthesizedType = type;\n        return newSymbol;\n    }\n\n    isInitiallyUnbound() {\n        return !!(this._flags & SymbolFlags.InitiallyUnbound);\n    }\n\n    setIsExternallyHidden() {\n        this._flags |= SymbolFlags.ExternallyHidden;\n    }\n\n    isExternallyHidden() {\n        return !!(this._flags & SymbolFlags.ExternallyHidden);\n    }\n\n    setIsIgnoredForProtocolMatch() {\n        this._flags |= SymbolFlags.IgnoredForProtocolMatch;\n    }\n\n    isIgnoredForProtocolMatch() {\n        return !!(this._flags & SymbolFlags.IgnoredForProtocolMatch);\n    }\n\n    setIsClassMember() {\n        this._flags |= SymbolFlags.ClassMember;\n    }\n\n    isClassMember() {\n        return !!(this._flags & SymbolFlags.ClassMember);\n    }\n\n    setIsInstanceMember() {\n        this._flags |= SymbolFlags.InstanceMember;\n    }\n\n    isInstanceMember() {\n        return !!(this._flags & SymbolFlags.InstanceMember);\n    }\n\n    setIsClassVar() {\n        this._flags |= SymbolFlags.ClassVar;\n    }\n\n    isClassVar() {\n        return !!(this._flags & SymbolFlags.ClassVar);\n    }\n\n    setIsPrivateMember() {\n        this._flags |= SymbolFlags.PrivateMember;\n    }\n\n    isPrivateMember() {\n        return !!(this._flags & SymbolFlags.PrivateMember);\n    }\n\n    addDeclaration(declaration: Declaration) {\n        if (this._declarations) {\n            // See if this node was already identified as a declaration. If so,\n            // replace it. Otherwise, add it as a new declaration to the end of\n            // the list.\n            const declIndex = this._declarations.findIndex((decl) => areDeclarationsSame(decl, declaration));\n            if (declIndex < 0) {\n                this._declarations.push(declaration);\n\n                // If there is more than one declaration for a symbol, we will\n                // assume it is not a type alias.\n                this._declarations.forEach((decl) => {\n                    if (decl.type === DeclarationType.Variable && decl.typeAliasName) {\n                        delete decl.typeAliasName;\n                    }\n                });\n            } else {\n                // If the new declaration has a defined type, it should replace\n                // the existing one.\n                const curDecl = this._declarations[declIndex];\n                if (hasTypeForDeclaration(declaration)) {\n                    this._declarations[declIndex] = declaration;\n                    if (curDecl.type === DeclarationType.Variable && declaration.type === DeclarationType.Variable) {\n                        if (!declaration.inferredTypeSource && curDecl.inferredTypeSource) {\n                            declaration.inferredTypeSource = curDecl.inferredTypeSource;\n                        }\n                    }\n                } else if (declaration.type === DeclarationType.Variable) {\n                    // If it's marked \"final\" or \"type alias\", this should be reflected\n                    // in the existing declaration. Likewise, if the existing declaration\n                    // doesn't have a type source, add it.\n                    if (curDecl.type === DeclarationType.Variable) {\n                        if (declaration.isFinal) {\n                            curDecl.isFinal = true;\n                        }\n\n                        if (declaration.typeAliasAnnotation) {\n                            curDecl.typeAliasAnnotation = declaration.typeAliasAnnotation;\n                        }\n\n                        if (!curDecl.inferredTypeSource && declaration.inferredTypeSource) {\n                            curDecl.inferredTypeSource = declaration.inferredTypeSource;\n                        }\n                    }\n                }\n            }\n        } else {\n            this._declarations = [declaration];\n        }\n    }\n\n    hasDeclarations() {\n        return this._declarations ? this._declarations.length > 0 : false;\n    }\n\n    getDeclarations() {\n        return this._declarations ? this._declarations : [];\n    }\n\n    hasTypedDeclarations() {\n        // We'll treat an synthesized type as an implicit declaration.\n        if (this._synthesizedType) {\n            return true;\n        }\n\n        return this.getDeclarations().some((decl) => hasTypeForDeclaration(decl));\n    }\n\n    getTypedDeclarations() {\n        return this.getDeclarations().filter((decl) => hasTypeForDeclaration(decl));\n    }\n\n    getSynthesizedType() {\n        return this._synthesizedType;\n    }\n}\n\n// Maps names to symbol information.\nexport type SymbolTable = Map<string, Symbol>;\n","/*\n * symbolNameUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Static methods that apply to symbols or symbol names.\n */\n\nconst _constantRegEx = /^[A-Z0-9_]+$/;\nconst _underscoreOnlyRegEx = /^[_]+$/;\n\n// Private symbol names start with a double underscore.\nexport function isPrivateName(name: string) {\n    return name.length > 2 && name.startsWith('__') && !name.endsWith('__');\n}\n\n// Protected symbol names start with a single underscore.\nexport function isProtectedName(name: string) {\n    return name.length > 1 && name.startsWith('_') && !name.startsWith('__');\n}\n\nexport function isPrivateOrProtectedName(name: string) {\n    return isPrivateName(name) || isProtectedName(name);\n}\n\n// \"Dunder\" names start and end with two underscores.\nexport function isDunderName(name: string) {\n    return name.length > 4 && name.startsWith('__') && name.endsWith('__');\n}\n\n// Constants are all-caps with possible numbers and underscores.\nexport function isConstantName(name: string) {\n    return !!name.match(_constantRegEx) && !name.match(_underscoreOnlyRegEx);\n}\n","/*\n * symbolUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Collection of functions that operate on Symbol objects.\n */\n\nimport { ParseNodeType } from '../parser/parseNodes';\nimport { Declaration, DeclarationType } from './declaration';\nimport { isFinalVariableDeclaration } from './declarationUtils';\nimport { Symbol, SymbolTable } from './symbol';\n\nexport function getLastTypedDeclaredForSymbol(symbol: Symbol): Declaration | undefined {\n    const typedDecls = symbol.getTypedDeclarations();\n\n    if (typedDecls.length > 0) {\n        return typedDecls[typedDecls.length - 1];\n    }\n\n    return undefined;\n}\n\n// Within TypedDict classes, member variables are not accessible as\n// normal attributes. Instead, they are accessed through index operations.\nexport function isTypedDictMemberAccessedThroughIndex(symbol: Symbol): boolean {\n    const typedDecls = symbol.getTypedDeclarations();\n\n    if (typedDecls.length > 0) {\n        const lastDecl = typedDecls[typedDecls.length - 1];\n        if (lastDecl.type === DeclarationType.Variable) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function isFinalVariable(symbol: Symbol): boolean {\n    return symbol.getDeclarations().some((decl) => isFinalVariableDeclaration(decl));\n}\n","/*\n * testWalker.ts\n *\n * Walks a parse tree to validate internal consistency and completeness.\n */\n\nimport { ParseTreeWalker } from '../analyzer/parseTreeWalker';\nimport { fail } from '../common/debug';\nimport { TextRange } from '../common/textRange';\nimport { ParseNode, ParseNodeArray, ParseNodeType } from '../parser/parseNodes';\n\nexport class TestWalker extends ParseTreeWalker {\n    constructor() {\n        super();\n    }\n\n    visitNode(node: ParseNode) {\n        const children = super.visitNode(node);\n        this._verifyParentChildLinks(node, children);\n        this._verifyChildRanges(node, children);\n\n        return children;\n    }\n\n    // Make sure that all of the children point to their parent.\n    private _verifyParentChildLinks(node: ParseNode, children: ParseNodeArray) {\n        children.forEach((child) => {\n            if (child) {\n                if (child.parent !== node) {\n                    fail(\n                        `Child node ${child.nodeType} does not ` + `contain a reference to its parent ${node.nodeType}`\n                    );\n                }\n            }\n        });\n    }\n\n    // Verify that:\n    //      Children are all contained within the parent\n    //      Children have non-overlapping ranges\n    //      Children are listed in increasing order\n    private _verifyChildRanges(node: ParseNode, children: ParseNodeArray) {\n        let prevNode: ParseNode | undefined;\n\n        children.forEach((child) => {\n            if (child) {\n                let skipCheck = false;\n\n                // There are a few exceptions we need to deal with here. Comment\n                // annotations can occur outside of an assignment node's range.\n                if (node.nodeType === ParseNodeType.Assignment) {\n                    if (child === node.typeAnnotationComment) {\n                        skipCheck = true;\n                    }\n                }\n\n                if (node.nodeType === ParseNodeType.StringList) {\n                    if (child === node.typeAnnotation) {\n                        skipCheck = true;\n                    }\n                }\n\n                if (!skipCheck) {\n                    // Make sure the child is contained within the parent.\n                    if (child.start < node.start || TextRange.getEnd(child) > TextRange.getEnd(node)) {\n                        fail(`Child node ${child.nodeType} is not ` + `contained within its parent ${node.nodeType}`);\n                    }\n                    if (prevNode) {\n                        // Make sure the child is after the previous child.\n                        if (child.start < TextRange.getEnd(prevNode)) {\n                            // Special-case the function annotation which can \"bleed\" into the suite.\n                            if (prevNode.nodeType !== ParseNodeType.FunctionAnnotation) {\n                                fail(`Child node is not after previous child node`);\n                            }\n                        }\n                    }\n\n                    prevNode = child;\n                }\n            }\n        });\n    }\n}\n","/*\n * typeCache.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Module used by the type evaluator that caches computed types\n * and stores them by node ID.\n */\n\nimport { assert } from '../common/debug';\nimport { ParseNode } from '../parser/parseNodes';\nimport { Type } from './types';\n\n// A type cache maps node IDs to types or pseudo-type objects.\nexport type TypeCache = Map<number, CachedType | undefined>;\n\n// An entry within the cache is either a type or an \"incomplete type\"\n// object that refers to a type.\nexport type CachedType = Type | IncompleteType;\n\nexport interface IncompleteType {\n    isIncompleteType?: true;\n\n    // Type computed so far\n    type: Type | undefined;\n\n    // Array of incomplete subtypes that have been computed so far\n    // (used for loops)\n    incompleteSubtypes: (Type | undefined)[];\n\n    // Tracks whether something has changed since this cache entry\n    // was written that might change the incomplete type; if this\n    // doesn't match the global \"incomplete generation count\", this\n    // cached value is stale\n    generationCount: number;\n}\n\n// Define a user type guard function for IncompleteType.\nexport function isIncompleteType(cachedType: CachedType): cachedType is IncompleteType {\n    return !!(cachedType as IncompleteType).isIncompleteType;\n}\n\n// Define an interface to track speculative entries that need to\n// be cleaned up when they go out of scope.\ninterface TypeCacheEntry {\n    cache: TypeCache;\n    id: number;\n}\n\ninterface SpeculativeContext {\n    speculativeRootNode: ParseNode;\n    entriesToUndo: TypeCacheEntry[];\n}\n\n// This class maintains a stack of \"speculative type contexts\". When\n// a context is popped off the stack, all of the speculative type cache\n// entries that were created within that context are removed from the\n// corresponding type caches because they are no longer valid.\nexport class SpeculativeTypeTracker {\n    private _speculativeContextStack: SpeculativeContext[] = [];\n\n    enterSpeculativeContext(speculativeRootNode: ParseNode) {\n        this._speculativeContextStack.push({ speculativeRootNode, entriesToUndo: [] });\n    }\n\n    leaveSpeculativeContext() {\n        assert(this._speculativeContextStack.length > 0);\n        const context = this._speculativeContextStack.pop();\n\n        // Delete all of the speculative type cache entries\n        // that were tracked in this context.\n        context!.entriesToUndo.forEach((entry) => {\n            entry.cache.delete(entry.id);\n        });\n    }\n\n    isSpeculative() {\n        return this._speculativeContextStack.length > 0;\n    }\n\n    getSpeculativeRootNode() {\n        const stackDepth = this._speculativeContextStack.length;\n        if (stackDepth > 0) {\n            // Return the speculative node associated with the most\n            // recent context pushed onto the stack.\n            return this._speculativeContextStack[stackDepth - 1].speculativeRootNode;\n        }\n\n        return undefined;\n    }\n\n    trackEntry(cache: TypeCache, id: number) {\n        const stackSize = this._speculativeContextStack.length;\n        if (stackSize > 0) {\n            this._speculativeContextStack[stackSize - 1].entriesToUndo.push({\n                cache,\n                id,\n            });\n        }\n    }\n\n    // Temporarily disables speculative mode, clearing the stack\n    // of speculative contexts. It returns the stack so the caller\n    // can later restore it by calling enableSpeculativeMode.\n    disableSpeculativeMode() {\n        const stack = this._speculativeContextStack;\n        this._speculativeContextStack = [];\n        return stack;\n    }\n\n    enableSpeculativeMode(stack: SpeculativeContext[]) {\n        assert(this._speculativeContextStack.length === 0);\n        this._speculativeContextStack = stack;\n    }\n}\n\n// This class tracks a list of cache entries that need to be\n// undone because they were based on an \"incomplete type\" -\n// a type that is calculated during code flow analysis and\n// is incomplete because not all paths have been exhaustively\n// explored.\nexport class IncompleteTypeTracker {\n    private _entriesToUndo: TypeCacheEntry[] = [];\n    private _requiresUndo = false;\n\n    trackEntry(cache: TypeCache, id: number) {\n        if (this._requiresUndo) {\n            this._entriesToUndo.push({\n                cache,\n                id,\n            });\n        }\n    }\n\n    leaveIncompleteTypeMode() {\n        this._entriesToUndo.forEach((entry) => {\n            entry.cache.delete(entry.id);\n        });\n\n        this._requiresUndo = false;\n        this._entriesToUndo = [];\n    }\n\n    enterIncompleteTypeMode() {\n        // Note that subsequent types are based on incomplete\n        // type information and should be tracked and ultimately\n        // removed from the cache.\n        this._requiresUndo = true;\n    }\n\n    isIncompleteTypeMode() {\n        return this._requiresUndo;\n    }\n}\n","/*\n * typeDocStringUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Logic that obtains the doc string for types by looking\n * at the declaration in the type stub, and if needed, in\n * the source file.\n */\n\nimport { ClassDeclaration, DeclarationBase, DeclarationType, FunctionDeclaration } from '../analyzer/declaration';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { isStubFile, SourceMapper } from '../analyzer/sourceMapper';\nimport { ClassType, FunctionType, ModuleType, OverloadedFunctionType } from '../analyzer/types';\nimport { ModuleNode } from '../parser/parseNodes';\n\nexport function getOverloadedFunctionDocStrings(\n    type: OverloadedFunctionType,\n    resolvedDecl: DeclarationBase | undefined,\n    sourceMapper: SourceMapper\n) {\n    const docStrings: string[] = [];\n    if (type.overloads.some((o) => o.details.docString)) {\n        type.overloads.forEach((overload) => {\n            if (overload.details.docString) {\n                docStrings.push(overload.details.docString);\n            }\n        });\n    } else if (resolvedDecl && isStubFile(resolvedDecl.path) && resolvedDecl.type === DeclarationType.Function) {\n        const implDecls = sourceMapper.findFunctionDeclarations(resolvedDecl as FunctionDeclaration);\n        const docString = _getFunctionOrClassDeclDocString(implDecls);\n        if (docString) {\n            docStrings.push(docString);\n        }\n    }\n    return docStrings;\n}\n\nexport function getModuleDocString(\n    type: ModuleType,\n    resolvedDecl: DeclarationBase | undefined,\n    sourceMapper: SourceMapper\n) {\n    let docString = type.docString;\n    if (!docString) {\n        if (resolvedDecl && isStubFile(resolvedDecl.path)) {\n            const modules = sourceMapper.findModules(resolvedDecl.path);\n            docString = _getModuleNodeDocString(modules);\n        }\n    }\n    return docString;\n}\n\nexport function getClassDocString(\n    type: ClassType,\n    resolvedDecl: DeclarationBase | undefined,\n    sourceMapper: SourceMapper\n) {\n    let docString = type.details.docString;\n    if (!docString) {\n        if (resolvedDecl && isStubFile(resolvedDecl.path) && resolvedDecl.type === DeclarationType.Class) {\n            const implDecls = sourceMapper.findClassDeclarations(resolvedDecl as ClassDeclaration);\n            docString = _getFunctionOrClassDeclDocString(implDecls);\n        }\n    }\n    return docString;\n}\n\nexport function getFunctionDocStringFromType(type: FunctionType, sourceMapper: SourceMapper) {\n    let docString = type.details.docString;\n    if (!docString && type.details.declaration) {\n        docString = getFunctionDocStringFromDeclaration(type.details.declaration, sourceMapper);\n    }\n    return docString;\n}\n\nexport function getFunctionDocStringFromDeclaration(resolvedDecl: FunctionDeclaration, sourceMapper: SourceMapper) {\n    let docString = _getFunctionOrClassDeclDocString([resolvedDecl]);\n    if (!docString && isStubFile(resolvedDecl.path)) {\n        const implDecls = sourceMapper.findFunctionDeclarations(resolvedDecl);\n        docString = _getFunctionOrClassDeclDocString(implDecls);\n    }\n    return docString;\n}\n\nfunction _getFunctionOrClassDeclDocString(decls: FunctionDeclaration[] | ClassDeclaration[]): string | undefined {\n    for (const decl of decls) {\n        const docString = ParseTreeUtils.getDocString(decl.node?.suite?.statements);\n        if (docString) {\n            return docString;\n        }\n    }\n\n    return undefined;\n}\n\nfunction _getModuleNodeDocString(modules: ModuleNode[]): string | undefined {\n    for (const module of modules) {\n        if (module.statements) {\n            const docString = ParseTreeUtils.getDocString(module.statements);\n            if (docString) {\n                return docString;\n            }\n        }\n    }\n\n    return undefined;\n}\n","/*\n * typeEvaluator.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Module that evaluates types of parse tree nodes within\n * a program.\n *\n * Note: This is a gargantuan module - much larger than I would\n * normally create. It is written this way primarily for performance,\n * with the internal methods having access to the full closure of\n * the createTypeEvaluator function. This is the same approach\n * taken by the TypeScript compiler.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport { Commands } from '../commands/commands';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { DiagnosticLevel } from '../common/configOptions';\nimport { assert, fail } from '../common/debug';\nimport { AddMissingOptionalToParamAction, Diagnostic, DiagnosticAddendum } from '../common/diagnostic';\nimport { DiagnosticRule } from '../common/diagnosticRules';\nimport { convertOffsetsToRange } from '../common/positionUtils';\nimport { PythonVersion } from '../common/pythonVersion';\nimport { getEmptyRange, TextRange } from '../common/textRange';\nimport { TextRangeCollection } from '../common/textRangeCollection';\nimport { Localizer } from '../localization/localize';\nimport {\n    ArgumentCategory,\n    ArgumentNode,\n    AssignmentNode,\n    AugmentedAssignmentNode,\n    BinaryOperationNode,\n    CallNode,\n    ClassNode,\n    ConstantNode,\n    DecoratorNode,\n    DictionaryNode,\n    ExceptNode,\n    ExpressionNode,\n    ForNode,\n    FunctionNode,\n    ImportAsNode,\n    ImportFromAsNode,\n    ImportFromNode,\n    IndexItemsNode,\n    IndexNode,\n    isExpressionNode,\n    LambdaNode,\n    ListComprehensionNode,\n    ListNode,\n    MemberAccessNode,\n    NameNode,\n    ParameterCategory,\n    ParameterNode,\n    ParseNode,\n    ParseNodeType,\n    RaiseNode,\n    SetNode,\n    SliceNode,\n    StringListNode,\n    TernaryNode,\n    TupleNode,\n    TypeAnnotationNode,\n    UnaryOperationNode,\n    WithItemNode,\n    YieldFromNode,\n    YieldNode,\n} from '../parser/parseNodes';\nimport { ParseOptions, Parser } from '../parser/parser';\nimport { KeywordType, OperatorType, StringTokenFlags, Token, TokenType } from '../parser/tokenizerTypes';\nimport * as DeclarationUtils from './aliasDeclarationUtils';\nimport { AnalyzerFileInfo, ImportLookup } from './analyzerFileInfo';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport {\n    createKeyForReference,\n    FlowAssignment,\n    FlowAssignmentAlias,\n    FlowCall,\n    FlowCondition,\n    FlowFlags,\n    FlowLabel,\n    FlowNode,\n    FlowPostFinally,\n    FlowPreFinallyGate,\n    FlowWildcardImport,\n    isCodeFlowSupportedForReference,\n} from './codeFlow';\nimport {\n    AliasDeclaration,\n    ClassDeclaration,\n    Declaration,\n    DeclarationType,\n    FunctionDeclaration,\n    ModuleLoaderActions,\n    VariableDeclaration,\n} from './declaration';\nimport { isExplicitTypeAliasDeclaration, isPossibleTypeAliasDeclaration } from './declarationUtils';\nimport * as ParseTreeUtils from './parseTreeUtils';\nimport { ScopeType } from './scope';\nimport * as ScopeUtils from './scopeUtils';\nimport { evaluateStaticBoolExpression } from './staticExpressions';\nimport { indeterminateSymbolId, Symbol, SymbolFlags } from './symbol';\nimport { isConstantName, isPrivateOrProtectedName } from './symbolNameUtils';\nimport { getLastTypedDeclaredForSymbol, isFinalVariable } from './symbolUtils';\nimport {\n    CachedType,\n    IncompleteType,\n    IncompleteTypeTracker,\n    isIncompleteType,\n    SpeculativeTypeTracker,\n    TypeCache,\n} from './typeCache';\nimport {\n    AnyType,\n    ClassType,\n    ClassTypeFlags,\n    combineTypes,\n    DataClassEntry,\n    EnumLiteral,\n    FunctionParameter,\n    FunctionType,\n    FunctionTypeFlags,\n    InheritanceChain,\n    isAnyOrUnknown,\n    isClass,\n    isFunction,\n    isModule,\n    isNever,\n    isNone,\n    isObject,\n    isPossiblyUnbound,\n    isSameWithoutLiteralValue,\n    isTypeSame,\n    isTypeVar,\n    isUnbound,\n    isUnionableType,\n    isUnknown,\n    LiteralValue,\n    maxTypeRecursionCount,\n    ModuleType,\n    NeverType,\n    NoneType,\n    ObjectType,\n    OverloadedFunctionType,\n    ParamSpecEntry,\n    removeNoneFromUnion,\n    removeUnbound,\n    Type,\n    TypeBase,\n    TypeCategory,\n    TypedDictEntry,\n    TypeSourceId,\n    TypeVarType,\n    UnboundType,\n    UnknownType,\n} from './types';\nimport {\n    addTypeVarsToListIfUnique,\n    areTypesSame,\n    buildTypeVarMapFromSpecializedClass,\n    CanAssignFlags,\n    canBeFalsy,\n    canBeTruthy,\n    ClassMember,\n    ClassMemberLookupFlags,\n    computeMroLinearization,\n    convertToInstance,\n    convertToInstantiable,\n    derivesFromClassRecursive,\n    doForSubtypes,\n    enumerateLiteralsForType,\n    getConcreteTypeFromTypeVar,\n    getDeclaredGeneratorReturnType,\n    getDeclaredGeneratorSendType,\n    getSpecializedTupleType,\n    getTypeVarArgumentsRecursive,\n    isEllipsisType,\n    isLiteralType,\n    isNoReturnType,\n    isOptionalType,\n    isParamSpecType,\n    isPartlyUnknown,\n    isProperty,\n    isTupleClass,\n    isTypeAliasPlaceholder,\n    isTypeAliasRecursive,\n    lookUpClassMember,\n    lookUpObjectMember,\n    makeTypeVarsConcrete,\n    partiallySpecializeType,\n    printLiteralValue,\n    removeFalsinessFromType,\n    removeTruthinessFromType,\n    requiresSpecialization,\n    requiresTypeArguments,\n    selfSpecializeClassType,\n    setTypeArgumentsRecursive,\n    specializeType,\n    stripFirstParameter,\n    stripLiteralValue,\n    transformPossibleRecursiveTypeAlias,\n    transformTypeObjectToClass,\n} from './typeUtils';\nimport { TypeVarMap } from './typeVarMap';\n\ninterface TypeResult {\n    type: Type;\n    node: ExpressionNode;\n\n    unpackedType?: Type;\n    typeList?: TypeResult[];\n    isResolutionCyclical?: boolean;\n    expectedTypeDiagAddendum?: DiagnosticAddendum;\n\n    // Used for the output of \"super\" calls used on the LHS of\n    // a member access. Normally the type of the LHS is the same\n    // as the class or object used to bind the member, but the\n    // \"super\" call can specify a different class or object to\n    // bind.\n    bindToType?: ClassType | ObjectType;\n}\n\ninterface EffectiveTypeResult {\n    type: Type;\n    isResolutionCyclical: boolean;\n}\n\ninterface FunctionArgument {\n    argumentCategory: ArgumentCategory;\n    node?: ArgumentNode;\n    name?: NameNode;\n    type?: Type;\n    valueExpression?: ExpressionNode;\n    active?: boolean;\n}\n\ninterface ValidateArgTypeParams {\n    paramType: Type;\n    requiresTypeVarMatching: boolean;\n    argument: FunctionArgument;\n    errorNode: ExpressionNode;\n    paramName?: string;\n}\n\ninterface ClassMemberLookup {\n    // Type of value.\n    type: Type;\n\n    // True if class member, false otherwise.\n    isClassMember: boolean;\n}\n\n// Used to determine whether an abstract method has been\n// overridden by a non-abstract method.\ninterface AbstractMethod {\n    symbol: Symbol;\n    symbolName: string;\n    classType: Type;\n    isAbstract: boolean;\n}\n\ntype TypeNarrowingCallback = (type: Type) => Type | undefined;\n\nexport const enum EvaluatorFlags {\n    None = 0,\n\n    // Interpret an ellipsis type annotation to mean \"Any\".\n    ConvertEllipsisToAny = 1 << 0,\n\n    // Normally a generic named type is specialized with \"Any\"\n    // types. This flag indicates that specialization shouldn't take\n    // place.\n    DoNotSpecialize = 1 << 1,\n\n    // Allow forward references. Don't report unbound errors.\n    AllowForwardReferences = 1 << 2,\n\n    // Skip the check for unknown arguments.\n    DoNotCheckForUnknownArgs = 1 << 4,\n\n    // Treat string literal as a type.\n    EvaluateStringLiteralAsType = 1 << 5,\n\n    // 'Final' is not allowed in this context.\n    FinalDisallowed = 1 << 6,\n\n    // A ParamSpec isn't allowed in this context.\n    ParamSpecDisallowed = 1 << 7,\n\n    // Expression is expected to be a type (class) rather\n    // than an instance (object)\n    ExpectingType = 1 << 8,\n\n    // The Tuple type allows the use of a tuple literal\n    // expression \"()\" as a type argument. When this appears\n    // as a type argument in other contexts, it's illegal.\n    AllowEmptyTupleAsType = 1 << 9,\n\n    // Interpret an ellipsis type annotation to mean \"Unknown\".\n    ConvertEllipsisToUnknown = 1 << 10,\n\n    // The Generic class type is allowed in this context. It is\n    // normally not allowed if ExpectingType is set.\n    GenericClassTypeAllowed = 1 << 11,\n\n    // In most cases where ExpectingType is set, generic classes\n    // with missing type args are reported to the user, but there\n    // are cases where it is legitimate to leave off missing\n    // type args, such as with the \"bound\" parameter in a TypeArg.\n    AllowMissingTypeArgs = 1 << 12,\n\n    // TypeVars within this expression must not refer to type vars\n    // used in an outer scope that.\n    DisallowTypeVarsWithScopeId = 1 << 13,\n\n    // TypeVars within this expression must refer to type vars\n    // used in an outer scope that.\n    DisallowTypeVarsWithoutScopeId = 1 << 14,\n\n    // TypeVars within this expression that are otherwise not\n    // associated with an outer scope should be associated with\n    // the containing function's scope.\n    AssociateTypeVarsWithCurrentScope = 1 << 15,\n}\n\ninterface EvaluatorUsage {\n    method: 'get' | 'set' | 'del';\n\n    // Used only for set methods\n    setType?: Type;\n    setErrorNode?: ExpressionNode;\n    setExpectedTypeDiag?: DiagnosticAddendum;\n}\n\ninterface AliasMapEntry {\n    alias: string;\n    module: 'builtins' | 'collections' | 'self';\n}\n\nexport const enum MemberAccessFlags {\n    None = 0,\n\n    // By default, both class and instance members are considered.\n    // Set this flag to skip the instance members.\n    SkipInstanceMembers = 1 << 0,\n\n    // By default, members of base classes are also searched.\n    // Set this flag to consider only the specified class' members.\n    SkipBaseClasses = 1 << 1,\n\n    // Do not include the \"object\" base class in the search.\n    SkipObjectBaseClass = 1 << 2,\n\n    // By default, if the class has a __getattribute__ or __getattr__\n    // magic method, it is assumed to have any member.\n    SkipGetAttributeCheck = 1 << 3,\n\n    // Consider writes to symbols flagged as ClassVars as an error.\n    DisallowClassVarWrites = 1 << 4,\n\n    // Allow classes to be bound to instance methods. This is used for\n    // metaclass methods.\n    TreatAsClassMethod = 1 << 5,\n\n    // This set of flags is appropriate for looking up methods.\n    SkipForMethodLookup = SkipInstanceMembers | SkipGetAttributeCheck,\n}\n\nexport const enum PrintTypeFlags {\n    None = 0,\n\n    // Avoid printing \"Unknown\" and always use \"Any\" instead.\n    PrintUnknownWithAny = 1 << 0,\n\n    // Omit type arguments for generic classes if they are \"Any\".\n    OmitTypeArgumentsIfAny = 1 << 1,\n\n    // Omit printing type for param if type is not specified.\n    OmitUnannotatedParamType = 1 << 2,\n\n    // Print Union and Optional in PEP 604 format.\n    PEP604 = 1 << 3,\n}\n\ninterface ParamAssignmentInfo {\n    argsNeeded: number;\n    argsReceived: number;\n}\n\nexport type SetAnalysisChangedCallback = (reason: string) => void;\n\nconst arithmeticOperatorMap: { [operator: number]: [string, string] } = {\n    [OperatorType.Add]: ['__add__', '__radd__'],\n    [OperatorType.Subtract]: ['__sub__', '__rsub__'],\n    [OperatorType.Multiply]: ['__mul__', '__rmul__'],\n    [OperatorType.FloorDivide]: ['__floordiv__', '__rfloordiv__'],\n    [OperatorType.Divide]: ['__truediv__', '__rtruediv__'],\n    [OperatorType.Mod]: ['__mod__', '__rmod__'],\n    [OperatorType.Power]: ['__pow__', '__rpow__'],\n    [OperatorType.MatrixMultiply]: ['__matmul__', '__rmatmul__'],\n};\n\nconst bitwiseOperatorMap: { [operator: number]: [string, string] } = {\n    [OperatorType.BitwiseAnd]: ['__and__', '__rand__'],\n    [OperatorType.BitwiseOr]: ['__or__', '__ror__'],\n    [OperatorType.BitwiseXor]: ['__xor__', '__rxor__'],\n    [OperatorType.LeftShift]: ['__lshift__', '__rlshift__'],\n    [OperatorType.RightShift]: ['__rshift__', '__rrshift__'],\n};\n\nconst comparisonOperatorMap: { [operator: number]: [string, string] } = {\n    [OperatorType.Equals]: ['__eq__', '__ne__'],\n    [OperatorType.NotEquals]: ['__ne__', '__eq__'],\n    [OperatorType.LessThan]: ['__lt__', '__gt__'],\n    [OperatorType.LessThanOrEqual]: ['__le__', '__ge__'],\n    [OperatorType.GreaterThan]: ['__gt__', '__lt__'],\n    [OperatorType.GreaterThanOrEqual]: ['__ge__', '__le__'],\n};\n\nconst booleanOperatorMap: { [operator: number]: boolean } = {\n    [OperatorType.And]: true,\n    [OperatorType.Or]: true,\n    [OperatorType.Is]: true,\n    [OperatorType.IsNot]: true,\n    [OperatorType.In]: true,\n    [OperatorType.NotIn]: true,\n};\n\n// This table contains the names of several built-in types that\n// are not subscriptable at runtime on older versions of Python.\n// It lists the first version of Python where subscripting is\n// allowed.\nconst nonSubscriptableBuiltinTypes: { [builtinName: string]: PythonVersion } = {\n    'asyncio.futures.Future': PythonVersion.V3_9,\n    'builtins.dict': PythonVersion.V3_9,\n    'builtins.frozenset': PythonVersion.V3_9,\n    'builtins.list': PythonVersion.V3_9,\n    'builtins._PathLike': PythonVersion.V3_9,\n    'builtins.set': PythonVersion.V3_9,\n    'builtins.tuple': PythonVersion.V3_9,\n    'collections.ChainMap': PythonVersion.V3_9,\n    'collections.Counter': PythonVersion.V3_9,\n    'collections.DefaultDict': PythonVersion.V3_9,\n    'collections.deque': PythonVersion.V3_9,\n    'collections.OrderedDict': PythonVersion.V3_9,\n    'queue.Queue': PythonVersion.V3_9,\n};\n\nexport interface ClassTypeResult {\n    classType: ClassType;\n    decoratedType: Type;\n}\n\nexport interface FunctionTypeResult {\n    functionType: FunctionType;\n    decoratedType: Type;\n}\n\nexport interface CallSignature {\n    type: FunctionType;\n    activeParam?: FunctionParameter;\n}\n\nexport interface CallSignatureInfo {\n    signatures: CallSignature[];\n    callNode: CallNode;\n}\n\nexport interface CallResult {\n    returnType?: Type;\n    argumentErrors: boolean;\n    activeParam?: FunctionParameter;\n}\n\nexport interface TypeEvaluator {\n    runWithCancellationToken<T>(token: CancellationToken, callback: () => T): T;\n\n    getType: (node: ExpressionNode) => Type | undefined;\n    getTypeOfClass: (node: ClassNode) => ClassTypeResult | undefined;\n    getTypeOfFunction: (node: FunctionNode) => FunctionTypeResult | undefined;\n    evaluateTypesForStatement: (node: ParseNode) => void;\n\n    getDeclaredTypeForExpression: (expression: ExpressionNode) => Type | undefined;\n    verifyRaiseExceptionType: (node: RaiseNode) => void;\n    verifyDeleteExpression: (node: ExpressionNode) => void;\n\n    isAfterNodeReachable: (node: ParseNode) => boolean;\n    isNodeReachable: (node: ParseNode) => boolean;\n    suppressDiagnostics: (callback: () => void) => void;\n\n    getDeclarationsForNameNode: (node: NameNode) => Declaration[] | undefined;\n    getTypeForDeclaration: (declaration: Declaration) => Type | undefined;\n    resolveAliasDeclaration: (declaration: Declaration, resolveLocalNames: boolean) => Declaration | undefined;\n    getTypeFromIterable: (\n        type: Type,\n        isAsync: boolean,\n        errorNode: ParseNode | undefined,\n        supportGetItem: boolean\n    ) => Type;\n    getTypedDictMembersForClass: (classType: ClassType) => Map<string, TypedDictEntry>;\n    getGetterTypeFromProperty: (propertyClass: ClassType, inferTypeIfNeeded: boolean) => Type | undefined;\n    markNamesAccessed: (node: ParseNode, names: string[]) => void;\n\n    getEffectiveTypeOfSymbol: (symbol: Symbol) => Type;\n    getFunctionDeclaredReturnType: (node: FunctionNode) => Type | undefined;\n    getFunctionInferredReturnType: (type: FunctionType) => Type;\n    getBuiltInType: (node: ParseNode, name: string) => Type;\n    getTypeOfMember: (member: ClassMember) => Type;\n    bindFunctionToClassOrObject: (\n        baseType: ClassType | ObjectType | undefined,\n        memberType: Type,\n        treatAsClassMember: boolean\n    ) => Type | undefined;\n    getBoundMethod: (\n        classType: ClassType,\n        memberName: string,\n        treatAsClassMember: boolean\n    ) => FunctionType | OverloadedFunctionType | undefined;\n    getCallSignatureInfo: (\n        node: ParseNode,\n        insertionOffset: number,\n        tokens: TextRangeCollection<Token>\n    ) => CallSignatureInfo | undefined;\n    getTypeAnnotationForParameter: (node: FunctionNode, paramIndex: number) => ExpressionNode | undefined;\n\n    canAssignType: (\n        destType: Type,\n        srcType: Type,\n        diag: DiagnosticAddendum,\n        typeVarMap?: TypeVarMap,\n        flags?: CanAssignFlags\n    ) => boolean;\n    canOverrideMethod: (baseMethod: Type, overrideMethod: FunctionType, diag: DiagnosticAddendum) => boolean;\n\n    addError: (message: string, node: ParseNode) => Diagnostic | undefined;\n    addWarning: (message: string, node: ParseNode) => Diagnostic | undefined;\n    addInformation: (message: string, node: ParseNode) => Diagnostic | undefined;\n    addUnusedCode: (node: ParseNode, textRange: TextRange) => void;\n\n    addDiagnostic: (\n        diagLevel: DiagnosticLevel,\n        rule: string,\n        message: string,\n        node: ParseNode\n    ) => Diagnostic | undefined;\n    addDiagnosticForTextRange: (\n        fileInfo: AnalyzerFileInfo,\n        diagLevel: DiagnosticLevel,\n        rule: string,\n        message: string,\n        range: TextRange\n    ) => Diagnostic | undefined;\n\n    printType: (type: Type, expandTypeAlias: boolean) => string;\n    printFunctionParts: (type: FunctionType) => [string[], string];\n\n    getTypeCacheSize: () => number;\n}\n\ninterface CodeFlowAnalyzer {\n    getTypeFromCodeFlow: (\n        reference: NameNode | MemberAccessNode,\n        targetSymbolId: number,\n        initialType: Type | undefined\n    ) => FlowNodeTypeResult;\n}\n\ninterface FlowNodeTypeResult {\n    type: Type | undefined;\n    isIncomplete: boolean;\n    generationCount?: number;\n    incompleteType?: Type;\n    incompleteSubtypes?: (Type | undefined)[];\n}\n\ninterface SymbolResolutionStackEntry {\n    // The symbol ID and declaration being resolved.\n    symbolId: number;\n    declaration: Declaration;\n\n    // Initially true, it's set to false if a recursion\n    // is detected.\n    isResultValid: boolean;\n\n    // Some limited forms of recursion are allowed. In these\n    // cases, a partially-constructed type can be registered.\n    partialType?: Type;\n}\n\ninterface ReturnTypeInferenceContext {\n    functionNode: FunctionNode;\n    codeFlowAnalyzer: CodeFlowAnalyzer;\n}\n\n// How many levels deep should we attempt to infer return\n// types based on call-site argument types? The deeper we go,\n// the more types we may be able to infer, but the worse the\n// performance.\nconst maxReturnTypeInferenceStackSize = 3;\n\n// How many entries in a list, set, or dict should we examine\n// when inferring the type? We need to cut it off at some point\n// to avoid excessive computation.\nconst maxEntriesToUseForInference = 64;\n\n// Maximum number of unioned subtypes for an inferred type (e.g.\n// a list) before the type is considered an \"Any\".\nconst maxSubtypesForInferredType = 64;\n\nexport interface EvaluatorOptions {\n    disableInferenceForPyTypedSources: boolean;\n    printTypeFlags: PrintTypeFlags;\n}\n\nexport function createTypeEvaluator(importLookup: ImportLookup, evaluatorOptions: EvaluatorOptions): TypeEvaluator {\n    const symbolResolutionStack: SymbolResolutionStackEntry[] = [];\n    const isReachableRecursionMap = new Map<number, true>();\n    const functionRecursionMap = new Map<number, true>();\n    const callIsNoReturnCache = new Map<number, boolean>();\n    const codeFlowAnalyzerCache = new Map<number, CodeFlowAnalyzer>();\n    const typeCache: TypeCache = new Map<number, CachedType>();\n    const speculativeTypeTracker = new SpeculativeTypeTracker();\n    const incompleteTypeTracker = new IncompleteTypeTracker();\n    let cancellationToken: CancellationToken | undefined;\n    let isDiagnosticSuppressed = false;\n    let flowIncompleteGeneration = 1;\n    let noneType: Type | undefined;\n\n    const returnTypeInferenceContextStack: ReturnTypeInferenceContext[] = [];\n    let returnTypeInferenceTypeCache: TypeCache | undefined;\n\n    function runWithCancellationToken<T>(token: CancellationToken, callback: () => T): T {\n        try {\n            cancellationToken = token;\n            return callback();\n        } finally {\n            cancellationToken = undefined;\n        }\n    }\n\n    function checkForCancellation() {\n        if (cancellationToken) {\n            throwIfCancellationRequested(cancellationToken);\n        }\n    }\n\n    function getTypeCacheSize(): number {\n        return typeCache.size;\n    }\n\n    function readTypeCache(node: ParseNode): Type | undefined {\n        let cachedType: CachedType | undefined;\n\n        // Should we use a temporary cache associated with a contextual\n        // analysis of a function, contextualized based on call-site argument types?\n        if (returnTypeInferenceTypeCache && isNodeInReturnTypeInferenceContext(node)) {\n            cachedType = returnTypeInferenceTypeCache.get(node.id);\n        } else {\n            cachedType = typeCache.get(node.id);\n        }\n\n        if (cachedType === undefined) {\n            return undefined;\n        }\n\n        assert(!isIncompleteType(cachedType));\n        return cachedType as Type;\n    }\n\n    function writeTypeCache(node: ParseNode, type: Type) {\n        // Should we use a temporary cache associated with a contextual\n        // analysis of a function, contextualized based on call-site argument types?\n        const typeCacheToUse =\n            returnTypeInferenceTypeCache && isNodeInReturnTypeInferenceContext(node)\n                ? returnTypeInferenceTypeCache\n                : typeCache;\n\n        typeCacheToUse.set(node.id, type);\n\n        // If the entry is located within a part of the parse tree that is currently being\n        // \"speculatively\" evaluated, track it so we delete the cached entry when we leave\n        // this speculative context.\n        const speculativeNode = speculativeTypeTracker.getSpeculativeRootNode();\n        if (speculativeNode && ParseTreeUtils.isNodeContainedWithin(node, speculativeNode)) {\n            speculativeTypeTracker.trackEntry(typeCacheToUse, node.id);\n        }\n\n        incompleteTypeTracker.trackEntry(typeCacheToUse, node.id);\n    }\n\n    function deleteTypeCacheEntry(node: ParseNode) {\n        const typeCacheToUse =\n            returnTypeInferenceTypeCache && isNodeInReturnTypeInferenceContext(node)\n                ? returnTypeInferenceTypeCache\n                : typeCache;\n\n        typeCacheToUse.delete(node.id);\n    }\n\n    // Determines whether the specified node is contained within\n    // the function node corresponding to the function that we\n    // are currently analyzing in the context of parameter types\n    // defined by a call site.\n    function isNodeInReturnTypeInferenceContext(node: ParseNode) {\n        const stackSize = returnTypeInferenceContextStack.length;\n        if (stackSize === 0) {\n            return false;\n        }\n\n        const contextNode = returnTypeInferenceContextStack[stackSize - 1];\n\n        let curNode: ParseNode | undefined = node;\n        while (curNode) {\n            if (curNode === contextNode.functionNode) {\n                return true;\n            }\n            curNode = curNode.parent;\n        }\n\n        return false;\n    }\n\n    function getCodeFlowAnalyzerForReturnTypeInferenceContext() {\n        const stackSize = returnTypeInferenceContextStack.length;\n        assert(stackSize > 0);\n        const contextNode = returnTypeInferenceContextStack[stackSize - 1];\n        return contextNode.codeFlowAnalyzer;\n    }\n\n    function getIndexOfSymbolResolution(symbol: Symbol, declaration: Declaration) {\n        return symbolResolutionStack.findIndex(\n            (entry) => entry.symbolId === symbol.id && entry.declaration === declaration\n        );\n    }\n\n    function pushSymbolResolution(symbol: Symbol, declaration: Declaration) {\n        const index = getIndexOfSymbolResolution(symbol, declaration);\n        if (index >= 0) {\n            // Mark all of the entries between these two as invalid.\n            for (let i = index + 1; i < symbolResolutionStack.length; i++) {\n                symbolResolutionStack[i].isResultValid = false;\n            }\n            return false;\n        }\n\n        symbolResolutionStack.push({\n            symbolId: symbol.id,\n            declaration,\n            isResultValid: true,\n        });\n        return true;\n    }\n\n    function popSymbolResolution(symbol: Symbol) {\n        const poppedEntry = symbolResolutionStack.pop()!;\n        assert(poppedEntry.symbolId === symbol.id);\n        return poppedEntry.isResultValid;\n    }\n\n    function setSymbolResolutionPartialType(symbol: Symbol, declaration: Declaration, type: Type) {\n        const index = getIndexOfSymbolResolution(symbol, declaration);\n        if (index >= 0) {\n            symbolResolutionStack[index].partialType = type;\n        }\n    }\n\n    function getSymbolResolutionPartialType(symbol: Symbol, declaration: Declaration): Type | undefined {\n        const index = getIndexOfSymbolResolution(symbol, declaration);\n        if (index >= 0) {\n            return symbolResolutionStack[index].partialType;\n        }\n\n        return undefined;\n    }\n\n    // Determines the type of the specified node by evaluating it in\n    // context, logging any errors in the process. This may require the\n    // type of surrounding statements to be evaluated.\n    function getType(node: ExpressionNode): Type | undefined {\n        evaluateTypesForExpressionInContext(node);\n\n        // We assume here that the type for the node in question\n        // will be populated in the cache. Some nodes don't have\n        // defined types (e.g. a raw list comprehension outside\n        // of its containing list), so we'll return undefined in those\n        // cases.\n        return readTypeCache(node);\n    }\n\n    function getTypeOfExpression(node: ExpressionNode, expectedType?: Type, flags = EvaluatorFlags.None): TypeResult {\n        // Is this type already cached?\n        const cachedType = readTypeCache(node);\n        if (cachedType) {\n            return { type: cachedType, node };\n        }\n\n        // This is a frequently-called routine, so it's a good place to call\n        // the cancellation check. If the operation is canceled, an exception\n        // will be thrown at this point.\n        checkForCancellation();\n\n        expectedType = transformPossibleRecursiveTypeAlias(expectedType);\n\n        // If we haven't already fetched the \"NoneType\" definition from the\n        // _typeshed stub, do so here. It would be better to fetch this when it's\n        // needed in canAssignType, but we don't have access to the parse tree\n        // at that point.\n        if (!noneType) {\n            noneType = getTypeshedType(node, 'NoneType') || AnyType.create();\n        }\n\n        let typeResult: TypeResult | undefined;\n        let reportExpectingTypeErrors = (flags & EvaluatorFlags.ExpectingType) !== 0;\n\n        switch (node.nodeType) {\n            case ParseNodeType.Name: {\n                typeResult = getTypeFromName(node, flags);\n                break;\n            }\n\n            case ParseNodeType.MemberAccess: {\n                typeResult = getTypeFromMemberAccess(node, flags);\n                break;\n            }\n\n            case ParseNodeType.Index: {\n                typeResult = getTypeFromIndex(node, flags);\n                break;\n            }\n\n            case ParseNodeType.Call: {\n                typeResult = getTypeFromCall(node, expectedType, flags);\n                break;\n            }\n\n            case ParseNodeType.Tuple: {\n                typeResult = getTypeFromTuple(node, expectedType);\n                break;\n            }\n\n            case ParseNodeType.Constant: {\n                typeResult = getTypeFromConstant(node, flags);\n                break;\n            }\n\n            case ParseNodeType.StringList: {\n                const expectingType =\n                    (flags & EvaluatorFlags.EvaluateStringLiteralAsType) !== 0 && !isAnnotationLiteralValue(node);\n\n                if (expectingType) {\n                    if (node.typeAnnotation) {\n                        typeResult = getTypeOfExpression(\n                            node.typeAnnotation,\n                            undefined,\n                            flags | EvaluatorFlags.AllowForwardReferences | EvaluatorFlags.ExpectingType\n                        );\n                    } else if (!node.typeAnnotation && node.strings.length === 1) {\n                        // We didn't know at parse time that this string node was going\n                        // to be evaluated as a forward-referenced type. We need\n                        // to re-invoke the parser at this stage.\n                        const expr = parseStringAsTypeAnnotation(node);\n                        if (expr) {\n                            typeResult = getTypeOfExpression(\n                                expr,\n                                undefined,\n                                flags | EvaluatorFlags.AllowForwardReferences | EvaluatorFlags.ExpectingType\n                            );\n                        }\n                    }\n\n                    if (!typeResult) {\n                        const fileInfo = getFileInfo(node);\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.expectedTypeNotString(),\n                            node\n                        );\n                        typeResult = { node, type: UnknownType.create() };\n                    }\n\n                    // Don't report expecting type errors again. We will have already\n                    // reported them when analyzing the contents of the string.\n                    reportExpectingTypeErrors = false;\n                } else {\n                    // Evaluate the format string expressions in this context.\n                    node.strings.forEach((str) => {\n                        if (str.nodeType === ParseNodeType.FormatString) {\n                            str.expressions.forEach((expr) => {\n                                getTypeOfExpression(expr);\n                            });\n                        }\n                    });\n\n                    const isBytes = (node.strings[0].token.flags & StringTokenFlags.Bytes) !== 0;\n\n                    // Don't create a literal type if it's an f-string.\n                    if (node.strings.some((str) => str.nodeType === ParseNodeType.FormatString)) {\n                        typeResult = {\n                            node,\n                            type: getBuiltInObject(node, isBytes ? 'bytes' : 'str'),\n                        };\n                    } else {\n                        typeResult = {\n                            node,\n                            type: cloneBuiltinObjectWithLiteral(\n                                node,\n                                isBytes ? 'bytes' : 'str',\n                                node.strings.map((s) => s.value).join('')\n                            ),\n                        };\n                    }\n                }\n                break;\n            }\n\n            case ParseNodeType.Number: {\n                if (node.isImaginary) {\n                    typeResult = { node, type: getBuiltInObject(node, 'complex') };\n                } else if (node.isInteger) {\n                    typeResult = { node, type: cloneBuiltinObjectWithLiteral(node, 'int', node.value) };\n                } else {\n                    typeResult = { node, type: getBuiltInObject(node, 'float') };\n                }\n                break;\n            }\n\n            case ParseNodeType.Ellipsis: {\n                if ((flags & EvaluatorFlags.ConvertEllipsisToAny) !== 0) {\n                    typeResult = { type: AnyType.create(true), node };\n                } else if ((flags & EvaluatorFlags.ConvertEllipsisToUnknown) !== 0) {\n                    typeResult = { type: UnknownType.create(), node };\n                } else {\n                    const ellipsisType = getBuiltInObject(node, 'ellipsis') || AnyType.create();\n                    typeResult = { type: ellipsisType, node };\n                }\n                break;\n            }\n\n            case ParseNodeType.UnaryOperation: {\n                typeResult = getTypeFromUnaryOperation(node, expectedType);\n                break;\n            }\n\n            case ParseNodeType.BinaryOperation: {\n                typeResult = getTypeFromBinaryOperation(node, expectedType, flags);\n                break;\n            }\n\n            case ParseNodeType.AugmentedAssignment: {\n                const type = getTypeFromAugmentedAssignment(node, expectedType);\n                assignTypeToExpression(node.destExpression, type, node.rightExpression);\n                typeResult = { type, node };\n                break;\n            }\n\n            case ParseNodeType.List: {\n                typeResult = getTypeFromList(node, expectedType);\n                break;\n            }\n\n            case ParseNodeType.Slice: {\n                typeResult = getTypeFromSlice(node);\n                break;\n            }\n\n            case ParseNodeType.Await: {\n                typeResult = getTypeOfExpression(node.expression, undefined, flags);\n                typeResult = {\n                    type: getTypeFromAwaitable(typeResult.type, node.expression),\n                    node,\n                };\n                break;\n            }\n\n            case ParseNodeType.Ternary: {\n                typeResult = getTypeFromTernary(node, flags, expectedType);\n                break;\n            }\n\n            case ParseNodeType.ListComprehension: {\n                typeResult = getTypeFromListComprehension(node);\n                break;\n            }\n\n            case ParseNodeType.Dictionary: {\n                typeResult = getTypeFromDictionary(node, expectedType);\n                break;\n            }\n\n            case ParseNodeType.Lambda: {\n                typeResult = getTypeFromLambda(node, expectedType);\n                break;\n            }\n\n            case ParseNodeType.Set: {\n                typeResult = getTypeFromSet(node, expectedType);\n                break;\n            }\n\n            case ParseNodeType.Assignment: {\n                typeResult = getTypeOfExpression(node.rightExpression);\n                assignTypeToExpression(node.leftExpression, typeResult.type, node.rightExpression);\n                break;\n            }\n\n            case ParseNodeType.AssignmentExpression: {\n                typeResult = getTypeOfExpression(node.rightExpression);\n                assignTypeToExpression(node.name, typeResult.type, node.rightExpression);\n                break;\n            }\n\n            case ParseNodeType.Yield: {\n                typeResult = getTypeFromYield(node);\n                break;\n            }\n\n            case ParseNodeType.YieldFrom: {\n                typeResult = getTypeFromYieldFrom(node);\n                break;\n            }\n\n            case ParseNodeType.Unpack: {\n                const iterType = getTypeOfExpression(node.expression, expectedType).type;\n                const type = getTypeFromIterable(iterType, /* isAsync */ false, node, /* supportGetItem */ false);\n                typeResult = { type, unpackedType: iterType, node };\n                break;\n            }\n\n            case ParseNodeType.TypeAnnotation: {\n                typeResult = getTypeOfExpression(\n                    node.typeAnnotation,\n                    undefined,\n                    EvaluatorFlags.EvaluateStringLiteralAsType |\n                        EvaluatorFlags.ParamSpecDisallowed |\n                        EvaluatorFlags.ExpectingType\n                );\n                break;\n            }\n\n            case ParseNodeType.Error: {\n                // Evaluate the child expression as best we can so the\n                // type information is cached for the completion handler.\n                suppressDiagnostics(() => {\n                    if (node.child) {\n                        getTypeOfExpression(node.child);\n                    }\n                });\n                typeResult = { type: UnknownType.create(), node };\n                break;\n            }\n        }\n\n        if (!typeResult) {\n            // We shouldn't get here. If we do, report an error.\n            fail(`Unhandled expression type '${ParseTreeUtils.printExpression(node)}'`);\n        }\n\n        if (reportExpectingTypeErrors) {\n            const resultType = transformTypeObjectToClass(typeResult.type);\n            if (!TypeBase.isInstantiable(resultType)) {\n                const isEmptyTuple =\n                    isObject(resultType) &&\n                    isTupleClass(resultType.classType) &&\n                    resultType.classType.typeArguments?.length === 0;\n\n                if ((flags & EvaluatorFlags.AllowEmptyTupleAsType) === 0 || !isEmptyTuple) {\n                    addExpectedClassDiagnostic(typeResult.type, node);\n                }\n            }\n        }\n\n        // Don't update the type cache with an unbound type that results from\n        // a resolution cycle. The cache will be updated when the stack unwinds\n        // and the type is fully evaluated.\n        if (!typeResult.isResolutionCyclical && !isTypeAliasPlaceholder(typeResult.type)) {\n            writeTypeCache(node, typeResult.type);\n        }\n\n        return typeResult;\n    }\n\n    function isAnnotationEvaluationPostponed(fileInfo: AnalyzerFileInfo) {\n        return fileInfo.futureImports.get('annotations') !== undefined || fileInfo.isStubFile;\n    }\n\n    function getTypeOfAnnotation(node: ExpressionNode, allowFinal = false, associateTypeVarsWithScope = false): Type {\n        const fileInfo = getFileInfo(node);\n\n        // Special-case the typing.pyi file, which contains some special\n        // types that the type analyzer needs to interpret differently.\n        if (fileInfo.isTypingStubFile || fileInfo.isTypingExtensionsStubFile) {\n            const specialType = handleTypingStubTypeAnnotation(node);\n            if (specialType) {\n                writeTypeCache(node, specialType);\n                return specialType;\n            }\n        }\n\n        let evaluatorFlags =\n            EvaluatorFlags.ExpectingType |\n            EvaluatorFlags.ConvertEllipsisToAny |\n            EvaluatorFlags.EvaluateStringLiteralAsType |\n            EvaluatorFlags.ParamSpecDisallowed;\n\n        if (isAnnotationEvaluationPostponed(fileInfo)) {\n            evaluatorFlags |= EvaluatorFlags.AllowForwardReferences;\n        }\n\n        if (associateTypeVarsWithScope) {\n            evaluatorFlags |= EvaluatorFlags.AssociateTypeVarsWithCurrentScope;\n        } else {\n            evaluatorFlags |= EvaluatorFlags.DisallowTypeVarsWithoutScopeId;\n        }\n\n        // If the annotation is part of a comment, allow forward references\n        // even if it's not enclosed in quotes.\n        if (node?.parent?.nodeType === ParseNodeType.Assignment && node.parent.typeAnnotationComment === node) {\n            evaluatorFlags |= EvaluatorFlags.AllowForwardReferences;\n        } else if (node?.parent?.nodeType === ParseNodeType.FunctionAnnotation) {\n            if (node.parent.returnTypeAnnotation === node || node.parent.paramTypeAnnotations.some((n) => n === node)) {\n                evaluatorFlags |= EvaluatorFlags.AllowForwardReferences;\n            }\n        } else if (node?.parent?.nodeType === ParseNodeType.Parameter) {\n            if (node.parent.typeAnnotationComment === node) {\n                evaluatorFlags |= EvaluatorFlags.AllowForwardReferences;\n            }\n        }\n\n        if (!allowFinal) {\n            evaluatorFlags |= EvaluatorFlags.FinalDisallowed;\n        }\n\n        const classType = getTypeOfExpression(node, /* expectedType */ undefined, evaluatorFlags).type;\n\n        return convertToInstance(classType);\n    }\n\n    function getTypeFromDecorator(node: DecoratorNode, functionOrClassType: Type): Type {\n        const decoratorTypeResult = getTypeOfExpression(node.expression);\n\n        const argList = [\n            {\n                argumentCategory: ArgumentCategory.Simple,\n                type: functionOrClassType,\n            },\n        ];\n\n        return getTypeFromCallWithBaseType(\n            node,\n            argList,\n            decoratorTypeResult,\n            undefined,\n            EvaluatorFlags.DoNotCheckForUnknownArgs | EvaluatorFlags.DoNotSpecialize\n        ).type;\n    }\n\n    // Gets a member type from an object and if it's a function binds\n    // it to the object. If bindToClass is undefined, the binding is done\n    // using the objectType parameter. Callers can specify these separately\n    // to handle the case where we're fetching the object member from a\n    // metaclass but binding to the class.\n    function getTypeFromObjectMember(\n        errorNode: ExpressionNode,\n        objectType: ObjectType,\n        memberName: string,\n        usage: EvaluatorUsage,\n        diag: DiagnosticAddendum,\n        memberAccessFlags = MemberAccessFlags.None,\n        bindToType?: ClassType | ObjectType\n    ): Type | undefined {\n        const memberInfo = getTypeFromClassMemberName(\n            errorNode,\n            objectType.classType,\n            memberName,\n            usage,\n            diag,\n            memberAccessFlags | MemberAccessFlags.DisallowClassVarWrites\n        );\n\n        let resultType = memberInfo ? memberInfo.type : undefined;\n        if (resultType) {\n            if (\n                resultType.category === TypeCategory.Function ||\n                resultType.category === TypeCategory.OverloadedFunction\n            ) {\n                if (memberInfo!.isClassMember) {\n                    resultType = bindFunctionToClassOrObject(\n                        bindToType || objectType,\n                        resultType,\n                        (memberAccessFlags & MemberAccessFlags.TreatAsClassMethod) !== 0,\n                        errorNode\n                    );\n                }\n            }\n        }\n\n        return resultType;\n    }\n\n    // Gets a member type from a class and if it's a function binds\n    // it to the object.\n    function getTypeFromClassMember(\n        errorNode: ExpressionNode,\n        classType: ClassType,\n        memberName: string,\n        usage: EvaluatorUsage,\n        diag: DiagnosticAddendum,\n        memberAccessFlags = MemberAccessFlags.None\n    ): Type | undefined {\n        let memberInfo = getTypeFromClassMemberName(\n            errorNode,\n            classType,\n            memberName,\n            usage,\n            diag,\n            memberAccessFlags | MemberAccessFlags.SkipInstanceMembers | MemberAccessFlags.SkipGetAttributeCheck\n        );\n        let isMetaclassMember = false;\n\n        // If it wasn't found on the class, see if it's part of the metaclass.\n        if (!memberInfo) {\n            const metaclass = classType.details.effectiveMetaclass;\n            if (metaclass && isClass(metaclass)) {\n                memberInfo = getTypeFromClassMemberName(\n                    errorNode,\n                    metaclass,\n                    memberName,\n                    usage,\n                    new DiagnosticAddendum(),\n                    memberAccessFlags\n                );\n                isMetaclassMember = true;\n            }\n        }\n\n        let resultType = memberInfo ? memberInfo.type : undefined;\n        if (resultType) {\n            if (\n                resultType.category === TypeCategory.Function ||\n                resultType.category === TypeCategory.OverloadedFunction\n            ) {\n                if (memberInfo!.isClassMember) {\n                    resultType = bindFunctionToClassOrObject(\n                        classType,\n                        resultType,\n                        /* treatAsClassMember */ isMetaclassMember,\n                        errorNode\n                    );\n                }\n            }\n        }\n\n        return resultType;\n    }\n\n    function getBoundMethod(\n        classType: ClassType,\n        memberName: string,\n        treatAsClassMember: boolean\n    ): FunctionType | OverloadedFunctionType | undefined {\n        classType = ClassType.getAliasClass(classType);\n\n        const memberInfo = lookUpClassMember(\n            classType,\n            memberName,\n            ClassMemberLookupFlags.SkipInstanceVariables | ClassMemberLookupFlags.SkipObjectBaseClass\n        );\n\n        if (memberInfo) {\n            const unboundMethodType = getTypeOfMember(memberInfo);\n            if (\n                unboundMethodType.category === TypeCategory.Function ||\n                unboundMethodType.category === TypeCategory.OverloadedFunction\n            ) {\n                const boundMethod = bindFunctionToClassOrObject(\n                    ObjectType.create(classType),\n                    unboundMethodType,\n                    treatAsClassMember\n                );\n\n                if (boundMethod) {\n                    if (\n                        boundMethod.category === TypeCategory.Function ||\n                        boundMethod.category === TypeCategory.OverloadedFunction\n                    ) {\n                        return boundMethod;\n                    }\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    function getTypeAnnotationForParameter(node: FunctionNode, paramIndex: number): ExpressionNode | undefined {\n        if (paramIndex >= node.parameters.length) {\n            return undefined;\n        }\n\n        const param = node.parameters[paramIndex];\n        if (param.typeAnnotation) {\n            return param.typeAnnotation;\n        } else if (param.typeAnnotationComment) {\n            return param.typeAnnotationComment;\n        }\n\n        if (!node.functionAnnotationComment || node.functionAnnotationComment.isParamListEllipsis) {\n            return undefined;\n        }\n\n        // We may need to skip the first parameter if this is a method.\n        const containingClassNode = ParseTreeUtils.getEnclosingClass(node, true);\n        const functionFlags = getFunctionFlagsFromDecorators(node, !!containingClassNode);\n\n        let firstCommentAnnotationIndex = 0;\n        if (containingClassNode && (functionFlags & FunctionTypeFlags.StaticMethod) === 0) {\n            firstCommentAnnotationIndex = 1;\n        }\n\n        const paramAnnotations = node.functionAnnotationComment.paramTypeAnnotations;\n        const adjIndex = paramIndex - firstCommentAnnotationIndex;\n        if (adjIndex < 0 || adjIndex >= paramAnnotations.length) {\n            return undefined;\n        }\n\n        return paramAnnotations[adjIndex];\n    }\n\n    // Returns the signature(s) associated with a call node that contains\n    // the specified node. It also returns the index of the argument\n    // that contains the node.\n    function getCallSignatureInfo(\n        node: ParseNode,\n        insertionOffset: number,\n        tokens: TextRangeCollection<Token>\n    ): CallSignatureInfo | undefined {\n        // Find the call node that contains the specified node.\n        let curNode: ParseNode | undefined = node;\n        let callNode: CallNode | undefined;\n        while (curNode !== undefined) {\n            if (curNode.nodeType === ParseNodeType.Call) {\n                callNode = curNode;\n                break;\n            }\n            curNode = curNode.parent;\n        }\n\n        if (!callNode || !callNode.arguments) {\n            return undefined;\n        }\n\n        const index = tokens.getItemAtPosition(callNode.leftExpression.start);\n        if (index >= 0 && index + 1 < tokens.count) {\n            const token = tokens.getItemAt(index + 1);\n            if (token.type === TokenType.OpenParenthesis && insertionOffset < TextRange.getEnd(token)) {\n                // position must be after '('\n                return undefined;\n            }\n        }\n\n        if (insertionOffset >= TextRange.getEnd(callNode)) {\n            return undefined;\n        }\n\n        const exprNode = callNode.leftExpression;\n        const callType = getType(exprNode);\n        if (callType === undefined) {\n            return undefined;\n        }\n\n        const argList: FunctionArgument[] = [];\n        let addedActive = false;\n        let previousCategory = ArgumentCategory.Simple;\n\n        // Empty arguments do not enter the AST as nodes, but instead are left blank.\n        // Instead, we detect when we appear to be between two known arguments or at the\n        // end of the argument list and insert a fake argument of an unknown type to have\n        // something to match later.\n        function addFakeArg() {\n            argList.push({\n                argumentCategory: previousCategory,\n                type: UnknownType.create(),\n                active: true,\n            });\n        }\n\n        callNode.arguments.forEach((arg) => {\n            let active = false;\n\n            if (!addedActive) {\n                // Calculate the argument's bounds including whitespace and colons.\n                let start = arg.start;\n                const startTokenIndex = tokens.getItemAtPosition(start);\n                if (startTokenIndex >= 0) {\n                    start = TextRange.getEnd(tokens.getItemAt(startTokenIndex - 1));\n                }\n\n                let end = TextRange.getEnd(arg);\n                const endTokenIndex = tokens.getItemAtPosition(end);\n                if (endTokenIndex >= 0) {\n                    // Find the true end of the argument by searching for the\n                    // terminating comma or parenthesis.\n                    for (let i = endTokenIndex; i < tokens.count; i++) {\n                        const tok = tokens.getItemAt(i);\n\n                        switch (tok.type) {\n                            case TokenType.Comma:\n                            case TokenType.CloseParenthesis:\n                                break;\n                            default:\n                                continue;\n                        }\n\n                        end = TextRange.getEnd(tok);\n                        break;\n                    }\n                }\n\n                if (insertionOffset < end) {\n                    if (insertionOffset >= start) {\n                        active = true;\n                    } else {\n                        addFakeArg();\n                    }\n                    addedActive = true;\n                }\n            }\n\n            previousCategory = arg.argumentCategory;\n\n            argList.push({\n                valueExpression: arg.valueExpression,\n                argumentCategory: arg.argumentCategory,\n                name: arg.name,\n                active: active,\n            });\n        });\n\n        if (!addedActive) {\n            addFakeArg();\n        }\n\n        const signatures: CallSignature[] = [];\n\n        function addOneFunctionToSignature(type: FunctionType) {\n            let callResult: CallResult | undefined;\n\n            useSpeculativeMode(callNode!, () => {\n                callResult = validateFunctionArguments(\n                    exprNode,\n                    argList,\n                    type,\n                    new TypeVarMap(),\n                    /* skipUnknownArgCheck */ true,\n                    /* inferReturnTypeIfNeeded */ true,\n                    /* expectedType */ undefined\n                );\n            });\n\n            signatures.push({\n                type,\n                activeParam: callResult?.activeParam,\n            });\n        }\n\n        function addFunctionToSignature(type: FunctionType | OverloadedFunctionType) {\n            if (type.category === TypeCategory.Function) {\n                addOneFunctionToSignature(type);\n            } else {\n                type.overloads.forEach(addOneFunctionToSignature);\n            }\n        }\n\n        doForSubtypes(callType, (subtype) => {\n            switch (subtype.category) {\n                case TypeCategory.Function:\n                case TypeCategory.OverloadedFunction: {\n                    addFunctionToSignature(subtype);\n                    break;\n                }\n\n                case TypeCategory.Class: {\n                    let methodType: FunctionType | OverloadedFunctionType | undefined;\n\n                    // Try to get the __init__ method first because it typically has\n                    // more type information than __new__.\n                    methodType = getBoundMethod(subtype, '__init__', /* treatAsClassMember */ false);\n\n                    if (!methodType) {\n                        // If there was no __init__ method, use the __new__ method\n                        // instead.\n                        methodType = getBoundMethod(subtype, '__new__', /* treatAsClassMember */ true);\n                    }\n\n                    if (methodType) {\n                        addFunctionToSignature(methodType);\n                    }\n                    break;\n                }\n\n                case TypeCategory.Object: {\n                    const methodType = getBoundMethod(subtype.classType, '__call__', /* treatAsClassMember */ false);\n                    if (methodType) {\n                        addFunctionToSignature(methodType);\n                    }\n                    break;\n                }\n            }\n\n            return undefined;\n        });\n\n        if (signatures.length === 0) {\n            return undefined;\n        }\n\n        return {\n            callNode,\n            signatures,\n        };\n    }\n\n    // Determines whether the specified expression is an explicit TypeAlias declaration.\n    function isDeclaredTypeAlias(expression: ExpressionNode): boolean {\n        if (expression.nodeType === ParseNodeType.TypeAnnotation) {\n            if (expression.valueExpression.nodeType === ParseNodeType.Name) {\n                const symbolWithScope = lookUpSymbolRecursive(\n                    expression,\n                    expression.valueExpression.value,\n                    /* honorCodeFlow */ false\n                );\n                if (symbolWithScope) {\n                    const symbol = symbolWithScope.symbol;\n                    return symbol.getDeclarations().find((decl) => isExplicitTypeAliasDeclaration(decl)) !== undefined;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // Determines whether the specified expression is possibly an implicit type alias.\n    // In Python, type aliases look the same as simple assignments, but we use some heuristics\n    // to tell them apart.\n    function isPossibleImplicitTypeAlias(expression: ExpressionNode): boolean {\n        if (expression.nodeType === ParseNodeType.Name) {\n            const symbolWithScope = lookUpSymbolRecursive(expression, expression.value, /* honorCodeFlow */ false);\n            if (symbolWithScope) {\n                const symbol = symbolWithScope.symbol;\n                return symbol.getDeclarations().find((decl) => isPossibleTypeAliasDeclaration(decl)) !== undefined;\n            }\n        }\n\n        return false;\n    }\n\n    // Determines whether the specified expression is a symbol with a declared type\n    // (either a simple name or a member variable). If so, the type is returned.\n    function getDeclaredTypeForExpression(expression: ExpressionNode): Type | undefined {\n        let symbol: Symbol | undefined;\n        let classOrObjectBase: ClassType | ObjectType | undefined;\n        let memberAccessClass: Type | undefined;\n\n        switch (expression.nodeType) {\n            case ParseNodeType.Name: {\n                const symbolWithScope = lookUpSymbolRecursive(expression, expression.value, /* honorCodeFlow */ true);\n                if (symbolWithScope) {\n                    symbol = symbolWithScope.symbol;\n                }\n                break;\n            }\n\n            case ParseNodeType.TypeAnnotation: {\n                return getDeclaredTypeForExpression(expression.valueExpression);\n            }\n\n            case ParseNodeType.MemberAccess: {\n                const baseType = makeTypeVarsConcrete(getTypeOfExpression(expression.leftExpression).type);\n                let classMemberInfo: ClassMember | undefined;\n\n                if (isObject(baseType)) {\n                    classMemberInfo = lookUpObjectMember(\n                        baseType,\n                        expression.memberName.value,\n                        ClassMemberLookupFlags.DeclaredTypesOnly\n                    );\n                    classOrObjectBase = baseType;\n                    memberAccessClass = classMemberInfo?.classType;\n                } else if (isClass(baseType)) {\n                    classMemberInfo = lookUpClassMember(\n                        baseType,\n                        expression.memberName.value,\n                        ClassMemberLookupFlags.SkipInstanceVariables | ClassMemberLookupFlags.DeclaredTypesOnly\n                    );\n                    classOrObjectBase = baseType;\n                    memberAccessClass = classMemberInfo?.classType;\n                }\n\n                if (classMemberInfo) {\n                    symbol = classMemberInfo.symbol;\n                }\n                break;\n            }\n\n            case ParseNodeType.Index: {\n                const baseType = getDeclaredTypeForExpression(expression.baseExpression);\n                if (baseType && isObject(baseType)) {\n                    const setItemMember = lookUpClassMember(baseType.classType, '__setitem__');\n                    if (setItemMember) {\n                        const setItemType = getTypeOfMember(setItemMember);\n                        if (setItemType.category === TypeCategory.Function) {\n                            const boundFunction = bindFunctionToClassOrObject(\n                                baseType,\n                                setItemType,\n                                /* treatAsClassMember */ false,\n                                expression\n                            );\n                            if (boundFunction && boundFunction.category === TypeCategory.Function) {\n                                if (boundFunction.details.parameters.length === 2) {\n                                    const paramType = FunctionType.getEffectiveParameterType(boundFunction, 1);\n                                    if (!isAnyOrUnknown(paramType)) {\n                                        return paramType;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                break;\n            }\n        }\n\n        if (symbol) {\n            let declaredType = getDeclaredTypeOfSymbol(symbol);\n            if (declaredType) {\n                // If it's a property, we need to get the fset type.\n                if (isProperty(declaredType)) {\n                    const setterInfo = lookUpClassMember((declaredType as ObjectType).classType, 'fset');\n                    const setter = setterInfo ? getTypeOfMember(setterInfo) : undefined;\n                    if (!setter || setter.category !== TypeCategory.Function || setter.details.parameters.length < 2) {\n                        return undefined;\n                    }\n\n                    declaredType = setter.details.parameters[1].type;\n                }\n\n                if (classOrObjectBase) {\n                    if (memberAccessClass && isClass(memberAccessClass)) {\n                        declaredType = partiallySpecializeType(declaredType, memberAccessClass);\n                    }\n\n                    declaredType = bindFunctionToClassOrObject(\n                        classOrObjectBase,\n                        declaredType,\n                        /* treatAsClassMember */ false,\n                        expression\n                    );\n                }\n\n                return declaredType;\n            }\n        }\n\n        return undefined;\n    }\n\n    // Applies an \"await\" operation to the specified type and returns\n    // the result. According to PEP 492, await operates on:\n    // 1) a generator object\n    // 2) an Awaitable (object that provides an __await__ that\n    //    returns a generator object)\n    // If errorNode is undefined, no errors are reported.\n    function getTypeFromAwaitable(type: Type, errorNode?: ParseNode): Type {\n        return doForSubtypes(type, (subtype) => {\n            if (isAnyOrUnknown(subtype)) {\n                return subtype;\n            }\n\n            const generatorReturnType = getReturnTypeFromGenerator(subtype);\n            if (generatorReturnType) {\n                return generatorReturnType;\n            }\n\n            if (isObject(subtype)) {\n                const awaitReturnType = getSpecializedReturnType(subtype, '__await__', errorNode);\n                if (awaitReturnType) {\n                    if (isAnyOrUnknown(awaitReturnType)) {\n                        return awaitReturnType;\n                    }\n\n                    if (isObject(awaitReturnType)) {\n                        const iterReturnType = getSpecializedReturnType(awaitReturnType, '__iter__', errorNode);\n\n                        if (iterReturnType) {\n                            const generatorReturnType = getReturnTypeFromGenerator(awaitReturnType);\n                            if (generatorReturnType) {\n                                return generatorReturnType;\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (errorNode) {\n                const fileInfo = getFileInfo(errorNode);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.typeNotAwaitable().format({ type: printType(subtype) }),\n                    errorNode\n                );\n            }\n\n            return UnknownType.create();\n        });\n    }\n\n    // Validates that the type is iterable and returns the iterated type.\n    // If errorNode is undefined, no errors are reported.\n    function getTypeFromIterable(\n        type: Type,\n        isAsync: boolean,\n        errorNode: ParseNode | undefined,\n        supportGetItem: boolean\n    ): Type {\n        const iterMethodName = isAsync ? '__aiter__' : '__iter__';\n        const nextMethodName = isAsync ? '__anext__' : '__next__';\n        const getItemMethodName = supportGetItem ? '__getitem__' : '';\n\n        type = makeTypeVarsConcrete(type);\n\n        if (type.category === TypeCategory.Union && type.subtypes.some((t) => isNone(t))) {\n            if (errorNode) {\n                addDiagnostic(\n                    getFileInfo(errorNode).diagnosticRuleSet.reportOptionalIterable,\n                    DiagnosticRule.reportOptionalIterable,\n                    Localizer.Diagnostic.noneNotIterable(),\n                    errorNode\n                );\n            }\n            type = removeNoneFromUnion(type);\n        }\n\n        const getIteratorReturnType = (\n            objType: ObjectType,\n            metaclass: ClassType | undefined,\n            diag: DiagnosticAddendum\n        ): Type | undefined => {\n            const iterReturnType = metaclass\n                ? getSpecializedReturnTypeForMetaclassMethod(metaclass, objType.classType, iterMethodName, errorNode)\n                : getSpecializedReturnType(objType, iterMethodName, errorNode);\n            if (!iterReturnType) {\n                // There was no __iter__. See if we can fall back to\n                // the __getitem__ method instead.\n                if (getItemMethodName) {\n                    const getItemReturnType = getSpecializedReturnType(objType, getItemMethodName, errorNode);\n                    if (getItemReturnType) {\n                        return getItemReturnType;\n                    }\n                }\n\n                diag.addMessage(Localizer.Diagnostic.methodNotDefined().format({ name: iterMethodName }));\n            } else {\n                if (isAnyOrUnknown(iterReturnType)) {\n                    return iterReturnType;\n                }\n\n                if (isObject(iterReturnType)) {\n                    const nextReturnType = getSpecializedReturnType(iterReturnType, nextMethodName, errorNode);\n\n                    if (!nextReturnType) {\n                        diag.addMessage(\n                            Localizer.Diagnostic.methodNotDefinedOnType().format({\n                                name: nextMethodName,\n                                type: printType(iterReturnType),\n                            })\n                        );\n                    } else {\n                        if (!isAsync) {\n                            return nextReturnType;\n                        }\n\n                        // If it's an async iteration, there's an implicit\n                        // 'await' operator applied.\n                        return getTypeFromAwaitable(nextReturnType, errorNode);\n                    }\n                } else {\n                    diag.addMessage(Localizer.Diagnostic.methodReturnsNonObject().format({ name: iterMethodName }));\n                }\n            }\n\n            return undefined;\n        };\n\n        return doForSubtypes(type, (subtype) => {\n            if (isAnyOrUnknown(subtype)) {\n                return subtype;\n            }\n\n            subtype = getClassFromPotentialTypeObject(subtype);\n\n            const diag = new DiagnosticAddendum();\n            if (isAnyOrUnknown(subtype)) {\n                return subtype;\n            } else if (isObject(subtype)) {\n                const returnType = getIteratorReturnType(subtype, undefined, diag);\n                if (returnType) {\n                    return returnType;\n                }\n            } else if (isClass(subtype)) {\n                // Handle the case where the class itself is iterable.\n                // This is true for classes that derive from Enum, for example.\n                const metaclassType = subtype.details.effectiveMetaclass;\n                if (metaclassType && isClass(metaclassType)) {\n                    const returnType = getIteratorReturnType(ObjectType.create(subtype), metaclassType, diag);\n                    if (returnType) {\n                        return returnType;\n                    }\n                }\n            }\n\n            if (errorNode) {\n                addDiagnostic(\n                    getFileInfo(errorNode).diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.typeNotIterable().format({ type: printType(subtype) }) + diag.getString(),\n                    errorNode\n                );\n            }\n\n            return UnknownType.create();\n        });\n    }\n\n    // Validates fields for compatibility with a dataclass and synthesizes\n    // an appropriate __new__ and __init__ methods plus a __dataclass_fields__\n    // class variable.\n    function synthesizeDataClassMethods(node: ClassNode, classType: ClassType, skipSynthesizeInit: boolean) {\n        assert(ClassType.isDataClass(classType));\n\n        const newType = FunctionType.createInstance(\n            '__new__',\n            '',\n            FunctionTypeFlags.ConstructorMethod | FunctionTypeFlags.SynthesizedMethod\n        );\n        const initType = FunctionType.createInstance('__init__', '', FunctionTypeFlags.SynthesizedMethod);\n\n        FunctionType.addParameter(newType, {\n            category: ParameterCategory.Simple,\n            name: 'cls',\n            type: classType,\n            hasDeclaredType: true,\n        });\n        FunctionType.addDefaultParameters(newType);\n        newType.details.declaredReturnType = ObjectType.create(classType);\n\n        const selfParam: FunctionParameter = {\n            category: ParameterCategory.Simple,\n            name: 'self',\n            type: ObjectType.create(classType),\n            hasDeclaredType: true,\n        };\n        FunctionType.addParameter(initType, selfParam);\n        initType.details.declaredReturnType = NoneType.createInstance();\n\n        // Maintain a list of all dataclass entries (including\n        // those from inherited classes) plus a list of only those\n        // entries added by this class.\n        const localDataClassEntries: DataClassEntry[] = [];\n        const fullDataClassEntries: DataClassEntry[] = [];\n        const allAncestorsKnown = addInheritedDataClassEntries(classType, fullDataClassEntries);\n\n        if (!allAncestorsKnown) {\n            // If one or more ancestor classes have an unknown type, we cannot\n            // safely determine the parameter list, so we'll accept any parameters\n            // to avoid a false positive.\n            FunctionType.addDefaultParameters(initType);\n        }\n\n        // Maintain a list of \"type evaluators\".\n        type TypeEvaluator = () => Type;\n        const localEntryTypeEvaluator: { entry: DataClassEntry; evaluator: TypeEvaluator }[] = [];\n\n        node.suite.statements.forEach((statementList) => {\n            if (statementList.nodeType === ParseNodeType.StatementList) {\n                statementList.statements.forEach((statement) => {\n                    let variableNameNode: NameNode | undefined;\n                    let variableTypeEvaluator: TypeEvaluator | undefined;\n                    let hasDefaultValue = false;\n                    let includeInInit = true;\n\n                    if (statement.nodeType === ParseNodeType.Assignment) {\n                        if (\n                            statement.leftExpression.nodeType === ParseNodeType.TypeAnnotation &&\n                            statement.leftExpression.valueExpression.nodeType === ParseNodeType.Name\n                        ) {\n                            variableNameNode = statement.leftExpression.valueExpression;\n                            variableTypeEvaluator = () =>\n                                getTypeOfAnnotation(\n                                    (statement.leftExpression as TypeAnnotationNode).typeAnnotation,\n                                    /* allowFinal */ true\n                                );\n                        }\n\n                        hasDefaultValue = true;\n\n                        // If the RHS of the assignment is assigning a field instance where the\n                        // \"init\" parameter is set to false, do not include it in the init method.\n                        if (statement.rightExpression.nodeType === ParseNodeType.Call) {\n                            const callType = getTypeOfExpression(statement.rightExpression.leftExpression).type;\n                            if (\n                                callType.category === TypeCategory.OverloadedFunction &&\n                                callType.overloads[0].details.builtInName === 'field'\n                            ) {\n                                const initArg = statement.rightExpression.arguments.find(\n                                    (arg) => arg.name?.value === 'init'\n                                );\n                                if (initArg && initArg.valueExpression) {\n                                    const value = evaluateStaticBoolExpression(\n                                        initArg.valueExpression,\n                                        getFileInfo(node).executionEnvironment\n                                    );\n                                    if (value === false) {\n                                        includeInInit = false;\n                                    }\n                                }\n\n                                hasDefaultValue = statement.rightExpression.arguments.some(\n                                    (arg) => arg.name?.value === 'default' || arg.name?.value === 'default_factory'\n                                );\n                            }\n                        }\n                    } else if (statement.nodeType === ParseNodeType.TypeAnnotation) {\n                        if (statement.valueExpression.nodeType === ParseNodeType.Name) {\n                            variableNameNode = statement.valueExpression;\n                            variableTypeEvaluator = () =>\n                                getTypeOfAnnotation(statement.typeAnnotation, /* allowFinal */ true);\n                        }\n                    }\n\n                    if (variableNameNode && variableTypeEvaluator) {\n                        const variableName = variableNameNode.value;\n\n                        // Don't include class vars. PEP 557 indicates that they shouldn't\n                        // be considered data class entries.\n                        const variableSymbol = classType.details.fields.get(variableName);\n                        if (!variableSymbol?.isClassVar()) {\n                            // Create a new data class entry, but defer evaluation of the type until\n                            // we've compiled the full list of data class entries for this class. This\n                            // allows us to handle circular references in types.\n                            const dataClassEntry: DataClassEntry = {\n                                name: variableName,\n                                hasDefault: hasDefaultValue,\n                                includeInInit,\n                                type: UnknownType.create(),\n                            };\n                            localEntryTypeEvaluator.push({ entry: dataClassEntry, evaluator: variableTypeEvaluator });\n\n                            // Add the new entry to the local entry list.\n                            let insertIndex = localDataClassEntries.findIndex((e) => e.name === variableName);\n                            if (insertIndex >= 0) {\n                                localDataClassEntries[insertIndex] = dataClassEntry;\n                            } else {\n                                localDataClassEntries.push(dataClassEntry);\n                            }\n\n                            // Add the new entry to the full entry list.\n                            insertIndex = fullDataClassEntries.findIndex((p) => p.name === variableName);\n                            if (insertIndex >= 0) {\n                                fullDataClassEntries[insertIndex] = dataClassEntry;\n                            } else {\n                                fullDataClassEntries.push(dataClassEntry);\n                                insertIndex = fullDataClassEntries.length - 1;\n                            }\n\n                            // If we've already seen a entry with a default value defined,\n                            // all subsequent entries must also have default values.\n                            const firstDefaultValueIndex = fullDataClassEntries.findIndex(\n                                (p) => p.hasDefault && p.includeInInit\n                            );\n                            if (\n                                includeInInit &&\n                                !hasDefaultValue &&\n                                firstDefaultValueIndex >= 0 &&\n                                firstDefaultValueIndex < insertIndex\n                            ) {\n                                addError(Localizer.Diagnostic.dataClassFieldWithDefault(), variableNameNode);\n                            }\n                        }\n                    }\n                });\n            }\n        });\n\n        classType.details.dataClassEntries = localDataClassEntries;\n\n        // Now that the dataClassEntries field has been set with a complete list\n        // of local data class entries for this class, perform deferred type\n        // evaluations. This could involve circular type dependencies, so it's\n        // required that the list be complete (even if types are not yet accurate)\n        // before we perform the type evaluations.\n        localEntryTypeEvaluator.forEach((entryEvaluator) => {\n            entryEvaluator.entry.type = entryEvaluator.evaluator();\n        });\n\n        const symbolTable = classType.details.fields;\n        if (!skipSynthesizeInit && allAncestorsKnown) {\n            fullDataClassEntries.forEach((entry) => {\n                if (entry.includeInInit) {\n                    const functionParam: FunctionParameter = {\n                        category: ParameterCategory.Simple,\n                        name: entry.name,\n                        hasDefault: entry.hasDefault,\n                        type: entry.type,\n                        hasDeclaredType: true,\n                    };\n\n                    FunctionType.addParameter(initType, functionParam);\n                }\n            });\n\n            symbolTable.set('__init__', Symbol.createWithType(SymbolFlags.ClassMember, initType));\n            symbolTable.set('__new__', Symbol.createWithType(SymbolFlags.ClassMember, newType));\n        }\n\n        // Synthesize comparison operators.\n        ['__eq__', '__ne__', '__lt__', '__le__', '__gt__', '__ge__'].forEach((operator) => {\n            const operatorMethod = FunctionType.createInstance(operator, '', FunctionTypeFlags.SynthesizedMethod);\n            FunctionType.addParameter(operatorMethod, selfParam);\n            FunctionType.addParameter(operatorMethod, {\n                category: ParameterCategory.Simple,\n                name: 'x',\n                type:\n                    operator === '__eq__' || operator === '__ne__'\n                        ? getBuiltInObject(node, 'object')\n                        : ObjectType.create(classType),\n                hasDeclaredType: true,\n            });\n            operatorMethod.details.declaredReturnType = getBuiltInObject(node, 'bool');\n            symbolTable.set(operator, Symbol.createWithType(SymbolFlags.ClassMember, operatorMethod));\n        });\n\n        let dictType = getBuiltInType(node, 'Dict');\n        if (isClass(dictType)) {\n            dictType = ObjectType.create(\n                ClassType.cloneForSpecialization(\n                    dictType,\n                    [getBuiltInObject(node, 'str'), AnyType.create()],\n                    /* isTypeArgumentExplicit */ true\n                )\n            );\n        }\n        symbolTable.set('__dataclass_fields__', Symbol.createWithType(SymbolFlags.ClassMember, dictType));\n\n        // If this dataclass derived from a NamedTuple, update the NamedTuple with\n        // the specialized entry types.\n        updateNamedTupleBaseClass(\n            classType,\n            fullDataClassEntries.map((entry) => entry.type),\n            /* isTypeArgumentExplicit */ true\n        );\n    }\n\n    function synthesizeTypedDictClassMethods(node: ClassNode | ExpressionNode, classType: ClassType) {\n        assert(ClassType.isTypedDictClass(classType));\n\n        // Synthesize a __new__ method.\n        const newType = FunctionType.createInstance(\n            '__new__',\n            '',\n            FunctionTypeFlags.ConstructorMethod | FunctionTypeFlags.SynthesizedMethod\n        );\n        FunctionType.addParameter(newType, {\n            category: ParameterCategory.Simple,\n            name: 'cls',\n            type: classType,\n            hasDeclaredType: true,\n        });\n        FunctionType.addDefaultParameters(newType);\n        newType.details.declaredReturnType = ObjectType.create(classType);\n\n        // Synthesize an __init__ method.\n        const initType = FunctionType.createInstance('__init__', '', FunctionTypeFlags.SynthesizedMethod);\n        FunctionType.addParameter(initType, {\n            category: ParameterCategory.Simple,\n            name: 'self',\n            type: ObjectType.create(classType),\n            hasDeclaredType: true,\n        });\n        initType.details.declaredReturnType = NoneType.createInstance();\n\n        // All parameters must be named, so insert an empty \"*\".\n        FunctionType.addParameter(initType, {\n            category: ParameterCategory.VarArgList,\n            type: AnyType.create(),\n            hasDeclaredType: true,\n        });\n\n        const entries = getTypedDictMembersForClass(classType);\n        entries.forEach((entry, name) => {\n            FunctionType.addParameter(initType, {\n                category: ParameterCategory.Simple,\n                name,\n                hasDefault: !entry.isRequired,\n                type: entry.valueType,\n                hasDeclaredType: true,\n            });\n        });\n\n        const symbolTable = classType.details.fields;\n        symbolTable.set('__init__', Symbol.createWithType(SymbolFlags.ClassMember, initType));\n        symbolTable.set('__new__', Symbol.createWithType(SymbolFlags.ClassMember, newType));\n\n        const strClass = getBuiltInType(node, 'str');\n\n        // Synthesize a \"get\", pop, and setdefault method for each named entry.\n        if (isClass(strClass)) {\n            const selfParam: FunctionParameter = {\n                category: ParameterCategory.Simple,\n                name: 'self',\n                type: ObjectType.create(classType),\n                hasDeclaredType: true,\n            };\n            const defaultTypeVar = TypeVarType.createInstance(\n                `__${classType.details.name}_default`,\n                /* isParamSpec */ false\n            );\n\n            const createGetMethod = (keyType: Type, valueType: Type) => {\n                const getOverload = FunctionType.createInstance(\n                    'get',\n                    '',\n                    FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.Overloaded\n                );\n                FunctionType.addParameter(getOverload, selfParam);\n                FunctionType.addParameter(getOverload, {\n                    category: ParameterCategory.Simple,\n                    name: 'k',\n                    type: keyType,\n                    hasDeclaredType: true,\n                });\n                FunctionType.addParameter(getOverload, {\n                    category: ParameterCategory.Simple,\n                    name: 'default',\n                    type: valueType,\n                    hasDeclaredType: true,\n                    hasDefault: true,\n                });\n                getOverload.details.declaredReturnType = valueType;\n                return getOverload;\n            };\n\n            const createPopMethods = (keyType: Type, valueType: Type) => {\n                const keyParam: FunctionParameter = {\n                    category: ParameterCategory.Simple,\n                    name: 'k',\n                    type: keyType,\n                    hasDeclaredType: true,\n                };\n\n                const popOverload1 = FunctionType.createInstance(\n                    'pop',\n                    '',\n                    FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.Overloaded\n                );\n                FunctionType.addParameter(popOverload1, selfParam);\n                FunctionType.addParameter(popOverload1, keyParam);\n                popOverload1.details.declaredReturnType = valueType;\n\n                const popOverload2 = FunctionType.createInstance(\n                    'pop',\n                    '',\n                    FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.Overloaded\n                );\n                FunctionType.addParameter(popOverload2, selfParam);\n                FunctionType.addParameter(popOverload2, keyParam);\n                FunctionType.addParameter(popOverload2, {\n                    category: ParameterCategory.Simple,\n                    name: 'default',\n                    hasDeclaredType: true,\n                    type: defaultTypeVar,\n                    hasDefault: true,\n                });\n                popOverload2.details.declaredReturnType = combineTypes([valueType, defaultTypeVar]);\n                return [popOverload1, popOverload2];\n            };\n\n            const createSetDefaultMethod = (keyType: Type, valueType: Type) => {\n                const setDefaultOverload = FunctionType.createInstance(\n                    'setdefault',\n                    '',\n                    FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.Overloaded\n                );\n                FunctionType.addParameter(setDefaultOverload, selfParam);\n                FunctionType.addParameter(setDefaultOverload, {\n                    category: ParameterCategory.Simple,\n                    name: 'k',\n                    hasDeclaredType: true,\n                    type: keyType,\n                });\n                FunctionType.addParameter(setDefaultOverload, {\n                    category: ParameterCategory.Simple,\n                    name: 'default',\n                    hasDeclaredType: true,\n                    type: defaultTypeVar,\n                    hasDefault: true,\n                });\n                setDefaultOverload.details.declaredReturnType = combineTypes([valueType, defaultTypeVar]);\n                return setDefaultOverload;\n            };\n\n            const createDelItemMethod = (keyType: Type) => {\n                const delItemOverload = FunctionType.createInstance(\n                    'delitem',\n                    '',\n                    FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.Overloaded\n                );\n                FunctionType.addParameter(delItemOverload, selfParam);\n                FunctionType.addParameter(delItemOverload, {\n                    category: ParameterCategory.Simple,\n                    name: 'k',\n                    hasDeclaredType: true,\n                    type: keyType,\n                });\n                delItemOverload.details.declaredReturnType = NoneType.createInstance();\n                return delItemOverload;\n            };\n\n            const getOverloads: FunctionType[] = [];\n            const popOverloads: FunctionType[] = [];\n            const setDefaultOverloads: FunctionType[] = [];\n\n            entries.forEach((entry, name) => {\n                const nameLiteralType = ObjectType.create(ClassType.cloneWithLiteral(strClass, name));\n\n                getOverloads.push(createGetMethod(nameLiteralType, entry.valueType));\n                popOverloads.push(...createPopMethods(nameLiteralType, entry.valueType));\n                setDefaultOverloads.push(createSetDefaultMethod(nameLiteralType, entry.valueType));\n            });\n\n            // Provide a final overload that handles the general case where the key is\n            // a str but the literal value isn't known.\n            const strType = ObjectType.create(strClass);\n            getOverloads.push(createGetMethod(strType, AnyType.create()));\n            popOverloads.push(...createPopMethods(strType, AnyType.create()));\n            setDefaultOverloads.push(createSetDefaultMethod(strType, AnyType.create()));\n\n            symbolTable.set(\n                'get',\n                Symbol.createWithType(SymbolFlags.ClassMember, OverloadedFunctionType.create(getOverloads))\n            );\n            symbolTable.set(\n                'pop',\n                Symbol.createWithType(SymbolFlags.ClassMember, OverloadedFunctionType.create(popOverloads))\n            );\n            symbolTable.set(\n                'setdefault',\n                Symbol.createWithType(SymbolFlags.ClassMember, OverloadedFunctionType.create(setDefaultOverloads))\n            );\n            symbolTable.set(\n                '__delitem__',\n                Symbol.createWithType(SymbolFlags.ClassMember, createDelItemMethod(strType))\n            );\n        }\n    }\n\n    function getTypingType(node: ParseNode, symbolName: string): Type | undefined {\n        const fileInfo = getFileInfo(node);\n        return getTypeFromTypeshedModule(symbolName, fileInfo.typingModulePath);\n    }\n\n    function getTypeshedType(node: ParseNode, symbolName: string): Type | undefined {\n        const fileInfo = getFileInfo(node);\n        return getTypeFromTypeshedModule(symbolName, fileInfo.typeshedModulePath);\n    }\n\n    function getTypeFromTypeshedModule(symbolName: string, importPath: string | undefined) {\n        if (!importPath) {\n            return undefined;\n        }\n\n        const lookupResult = importLookup(importPath);\n        if (!lookupResult) {\n            return undefined;\n        }\n\n        const symbol = lookupResult.symbolTable.get(symbolName);\n        if (!symbol) {\n            return undefined;\n        }\n\n        return getEffectiveTypeOfSymbol(symbol);\n    }\n\n    function isNodeReachable(node: ParseNode): boolean {\n        const flowNode = AnalyzerNodeInfo.getFlowNode(node);\n        if (!flowNode) {\n            return false;\n        }\n\n        return isFlowNodeReachable(flowNode);\n    }\n\n    function isAfterNodeReachable(node: ParseNode): boolean {\n        const returnFlowNode = AnalyzerNodeInfo.getAfterFlowNode(node);\n        if (!returnFlowNode) {\n            return false;\n        }\n\n        return isFlowNodeReachable(returnFlowNode);\n    }\n\n    // Determines whether there is a code flow path from sourceNode to sinkNode.\n    function isFlowPathBetweenNodes(sourceNode: ParseNode, sinkNode: ParseNode) {\n        const sourceFlowNode = AnalyzerNodeInfo.getFlowNode(sourceNode);\n        const sinkFlowNode = AnalyzerNodeInfo.getFlowNode(sinkNode);\n        if (!sourceFlowNode || !sinkFlowNode) {\n            return false;\n        }\n        if (sourceFlowNode === sinkFlowNode) {\n            return true;\n        }\n\n        return isFlowNodeReachable(sinkFlowNode, sourceFlowNode);\n    }\n\n    // Determines whether the specified string literal is part\n    // of a Literal['xxx'] statement. If so, we will not treat\n    // the string as a normal forward-declared type annotation.\n    function isAnnotationLiteralValue(node: StringListNode): boolean {\n        if (node.parent && node.parent.nodeType === ParseNodeType.IndexItems) {\n            const indexItemsNode = node.parent;\n            if (indexItemsNode.parent && indexItemsNode.parent.nodeType === ParseNodeType.Index) {\n                const indexNode = indexItemsNode.parent;\n                const baseType = getTypeOfExpression(indexNode.baseExpression).type;\n                if (baseType && isClass(baseType)) {\n                    if (ClassType.isSpecialBuiltIn(baseType, 'Literal')) {\n                        return true;\n                    }\n                }\n            }\n        }\n\n        return false;\n    }\n\n    function addInformation(message: string, node: ParseNode, range?: TextRange) {\n        return addDiagnosticWithSuppressionCheck('information', message, node, range);\n    }\n\n    function addWarning(message: string, node: ParseNode, range?: TextRange) {\n        return addDiagnosticWithSuppressionCheck('warning', message, node, range);\n    }\n\n    function addError(message: string, node: ParseNode, range?: TextRange) {\n        return addDiagnosticWithSuppressionCheck('error', message, node, range);\n    }\n\n    function addUnusedCode(node: ParseNode, textRange: TextRange) {\n        if (!isDiagnosticSuppressedForNode(node)) {\n            const fileInfo = getFileInfo(node);\n            fileInfo.diagnosticSink.addUnusedCodeWithTextRange(Localizer.Diagnostic.unreachableCode(), textRange);\n        }\n    }\n\n    function addDiagnosticWithSuppressionCheck(\n        diagLevel: DiagnosticLevel,\n        message: string,\n        node: ParseNode,\n        range?: TextRange\n    ) {\n        if (!isDiagnosticSuppressedForNode(node)) {\n            const fileInfo = getFileInfo(node);\n            return fileInfo.diagnosticSink.addDiagnosticWithTextRange(diagLevel, message, range || node);\n        }\n\n        return undefined;\n    }\n\n    function isDiagnosticSuppressedForNode(node: ParseNode) {\n        return isDiagnosticSuppressed || isSpeculativeMode(node) || incompleteTypeTracker.isIncompleteTypeMode();\n    }\n\n    function addDiagnostic(diagLevel: DiagnosticLevel, rule: string, message: string, node: ParseNode) {\n        if (diagLevel === 'none') {\n            return undefined;\n        }\n\n        const diagnostic = addDiagnosticWithSuppressionCheck(diagLevel, message, node);\n        if (diagnostic) {\n            diagnostic.setRule(rule);\n        }\n\n        return diagnostic;\n    }\n\n    function addDiagnosticForTextRange(\n        fileInfo: AnalyzerFileInfo,\n        diagLevel: DiagnosticLevel,\n        rule: string,\n        message: string,\n        range: TextRange\n    ) {\n        if (diagLevel === 'none') {\n            return undefined;\n        }\n\n        const diagnostic = fileInfo.diagnosticSink.addDiagnosticWithTextRange(diagLevel, message, range);\n        diagnostic.setRule(rule);\n\n        return diagnostic;\n    }\n\n    function addExpectedClassDiagnostic(type: Type, node: ParseNode) {\n        const fileInfo = getFileInfo(node);\n        const diag = new DiagnosticAddendum();\n        if (type.category === TypeCategory.Union) {\n            type.subtypes.forEach((subtype) => {\n                if (!TypeBase.isInstantiable(subtype)) {\n                    diag.addMessage(Localizer.DiagnosticAddendum.typeNotClass().format({ type: printType(subtype) }));\n                }\n            });\n        }\n\n        addDiagnostic(\n            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n            DiagnosticRule.reportGeneralTypeIssues,\n            Localizer.Diagnostic.typeExpectedClass().format({ type: printType(type) }) + diag.getString(),\n            node\n        );\n    }\n\n    function assignTypeToNameNode(\n        nameNode: NameNode,\n        type: Type,\n        srcExpression?: ParseNode,\n        expectedTypeDiagAddendum?: DiagnosticAddendum\n    ) {\n        const nameValue = nameNode.value;\n\n        const symbolWithScope = lookUpSymbolRecursive(nameNode, nameValue, /* honorCodeFlow */ false);\n        if (!symbolWithScope) {\n            // This can happen when we are evaluating a piece of code that was\n            // determined to be unreachable by the binder.\n            return;\n        }\n\n        const declarations = symbolWithScope.symbol.getDeclarations();\n        const declaredType = getDeclaredTypeOfSymbol(symbolWithScope.symbol);\n        const fileInfo = getFileInfo(nameNode);\n\n        // We found an existing declared type. Make sure the type is assignable.\n        let destType = type;\n        if (declaredType && srcExpression) {\n            let diagAddendum = new DiagnosticAddendum();\n\n            if (!canAssignType(declaredType, type, diagAddendum)) {\n                // If there was an expected type mismatch, use that diagnostic\n                // addendum because it will be more informative.\n                if (expectedTypeDiagAddendum) {\n                    diagAddendum = expectedTypeDiagAddendum;\n                }\n\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.typeAssignmentMismatch().format({\n                        sourceType: printType(type),\n                        destType: printType(declaredType),\n                    }) + diagAddendum.getString(),\n                    srcExpression || nameNode\n                );\n\n                // If the user has requested that no general type issues be\n                // reported, don't replace the destType with the declaredType\n                // because they won't understand why subsequent errors are\n                // generated.\n                if (fileInfo.diagnosticRuleSet.reportGeneralTypeIssues !== 'none') {\n                    destType = declaredType;\n                }\n            } else {\n                // Constrain the resulting type to match the declared type.\n                destType = narrowTypeBasedOnAssignment(declaredType, type);\n            }\n        } else {\n            // If this is a member name (within a class scope) and the member name\n            // appears to be a constant, use the strict source type. If it's a member\n            // variable that can be overridden by a child class, use the more general\n            // version by stripping off the literal.\n            const scope = ScopeUtils.getScopeForNode(nameNode);\n            if (scope?.type === ScopeType.Class) {\n                const isConstant = isConstantName(nameValue);\n                const isPrivate = isPrivateOrProtectedName(nameValue);\n\n                if (\n                    TypeBase.isInstance(destType) &&\n                    !isConstant &&\n                    (!isPrivate || getFileInfo(nameNode).diagnosticRuleSet.reportPrivateUsage === 'none')\n                ) {\n                    destType = stripLiteralValue(destType);\n                }\n            }\n        }\n\n        const varDecl: Declaration | undefined = declarations.find((decl) => decl.type === DeclarationType.Variable);\n\n        if (varDecl && varDecl.type === DeclarationType.Variable && srcExpression) {\n            if (varDecl.isConstant) {\n                // A constant variable can be assigned only once. If this\n                // isn't the first assignment, generate an error.\n                if (nameNode !== declarations[0].node) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportConstantRedefinition,\n                        DiagnosticRule.reportConstantRedefinition,\n                        Localizer.Diagnostic.constantRedefinition().format({ name: nameValue }),\n                        nameNode\n                    );\n                }\n            }\n        }\n\n        writeTypeCache(nameNode, destType);\n    }\n\n    function assignTypeToMemberAccessNode(\n        target: MemberAccessNode,\n        type: Type,\n        srcExpr?: ExpressionNode,\n        expectedTypeDiagAddendum?: DiagnosticAddendum\n    ) {\n        const baseTypeResult = getTypeOfExpression(target.leftExpression);\n        const baseType = makeTypeVarsConcrete(baseTypeResult.type);\n\n        // Handle member accesses (e.g. self.x or cls.y).\n        if (target.leftExpression.nodeType === ParseNodeType.Name) {\n            // Determine whether we're writing to a class or instance member.\n            const enclosingClassNode = ParseTreeUtils.getEnclosingClass(target);\n\n            if (enclosingClassNode) {\n                const classTypeResults = getTypeOfClass(enclosingClassNode);\n\n                if (classTypeResults && isClass(classTypeResults.classType)) {\n                    if (isObject(baseType)) {\n                        if (ClassType.isSameGenericClass(baseType.classType, classTypeResults.classType)) {\n                            assignTypeToMemberVariable(target, type, true, srcExpr);\n                        }\n                    } else if (isClass(baseType)) {\n                        if (ClassType.isSameGenericClass(baseType, classTypeResults.classType)) {\n                            assignTypeToMemberVariable(target, type, false, srcExpr);\n                        }\n                    }\n\n                    // Assignments to instance or class variables through \"self\" or \"cls\" is not\n                    // allowed for protocol classes.\n                    if (ClassType.isProtocolClass(classTypeResults.classType)) {\n                        addError(Localizer.Diagnostic.assignmentInProtocol(), target.memberName);\n                    }\n                }\n            }\n        }\n\n        getTypeFromMemberAccessWithBaseType(\n            target,\n            baseTypeResult,\n            { method: 'set', setType: type, setErrorNode: srcExpr, setExpectedTypeDiag: expectedTypeDiagAddendum },\n            EvaluatorFlags.None\n        );\n\n        writeTypeCache(target.memberName, type);\n        writeTypeCache(target, type);\n    }\n\n    function assignTypeToMemberVariable(\n        node: MemberAccessNode,\n        srcType: Type,\n        isInstanceMember: boolean,\n        srcExprNode?: ExpressionNode\n    ) {\n        const memberName = node.memberName.value;\n        const fileInfo = getFileInfo(node);\n\n        const classDef = ParseTreeUtils.getEnclosingClass(node);\n        if (!classDef) {\n            return;\n        }\n\n        const classTypeInfo = getTypeOfClass(classDef);\n        if (classTypeInfo && isClass(classTypeInfo.classType)) {\n            let memberInfo = lookUpClassMember(\n                classTypeInfo.classType,\n                memberName,\n                isInstanceMember ? ClassMemberLookupFlags.Default : ClassMemberLookupFlags.SkipInstanceVariables\n            );\n\n            const memberFields = classTypeInfo.classType.details.fields;\n            if (memberInfo) {\n                // Are we accessing an existing member on this class, or is\n                // it a member on a parent class?\n                const isThisClass =\n                    isClass(memberInfo.classType) &&\n                    ClassType.isSameGenericClass(classTypeInfo.classType, memberInfo.classType);\n\n                if (isThisClass && memberInfo.isInstanceMember === isInstanceMember) {\n                    const symbol = memberFields.get(memberName)!;\n                    assert(symbol !== undefined);\n\n                    const typedDecls = symbol.getDeclarations();\n                    let isFinalVar = isFinalVariable(symbol);\n\n                    // Check for an attempt to overwrite a constant or final member variable.\n                    if (\n                        typedDecls.length > 0 &&\n                        typedDecls[0].type === DeclarationType.Variable &&\n                        srcExprNode &&\n                        node.memberName !== typedDecls[0].node\n                    ) {\n                        if (typedDecls[0].isConstant) {\n                            addDiagnostic(\n                                fileInfo.diagnosticRuleSet.reportConstantRedefinition,\n                                DiagnosticRule.reportConstantRedefinition,\n                                Localizer.Diagnostic.constantRedefinition().format({ name: node.memberName.value }),\n                                node.memberName\n                            );\n                        }\n\n                        // If a Final instance variable is declared in the class body but is\n                        // being assigned within an __init__ method, it's allowed.\n                        const enclosingFunctionNode = ParseTreeUtils.getEnclosingFunction(node);\n                        if (enclosingFunctionNode && enclosingFunctionNode.name.value === '__init__') {\n                            isFinalVar = false;\n                        }\n\n                        if (isFinalVar) {\n                            addError(\n                                Localizer.Diagnostic.finalReassigned().format({ name: node.memberName.value }),\n                                node.memberName\n                            );\n                        }\n                    }\n                } else {\n                    // Is the target a property?\n                    const declaredType = getDeclaredTypeOfSymbol(memberInfo.symbol);\n                    if (declaredType && !isProperty(declaredType)) {\n                        // Handle the case where there is a class variable defined with the same\n                        // name, but there's also now an instance variable introduced. Combine the\n                        // type of the class variable with that of the new instance variable.\n                        if (!memberInfo.isInstanceMember && isInstanceMember) {\n                            // The class variable is accessed in this case.\n                            setSymbolAccessed(fileInfo, memberInfo.symbol, node.memberName);\n                            const memberType = getTypeOfMember(memberInfo);\n                            srcType = combineTypes([srcType, memberType]);\n                        }\n                    }\n                }\n            }\n\n            // Look up the member info again, now that we've potentially updated it.\n            memberInfo = lookUpClassMember(\n                classTypeInfo.classType,\n                memberName,\n                ClassMemberLookupFlags.DeclaredTypesOnly\n            );\n\n            if (!memberInfo && srcExprNode) {\n                reportPossibleUnknownAssignment(\n                    fileInfo.diagnosticRuleSet.reportUnknownMemberType,\n                    DiagnosticRule.reportUnknownMemberType,\n                    node.memberName,\n                    srcType,\n                    node\n                );\n            }\n        }\n    }\n\n    function assignTypeToTupleNode(target: TupleNode, type: Type, srcExpr?: ExpressionNode) {\n        // Initialize the array of target types, one for each target.\n        const targetTypes: Type[][] = new Array(target.expressions.length);\n        for (let i = 0; i < target.expressions.length; i++) {\n            targetTypes[i] = [];\n        }\n\n        // Do any of the targets use an unpack operator? If so, it will consume all of the\n        // entries at that location.\n        const unpackIndex = target.expressions.findIndex((expr) => expr.nodeType === ParseNodeType.Unpack);\n\n        doForSubtypes(type, (subtype) => {\n            // Is this subtype a tuple?\n            const tupleType = getSpecializedTupleType(subtype);\n            if (tupleType && tupleType.typeArguments) {\n                const sourceEntryTypes = tupleType.typeArguments;\n                const sourceEntryCount = sourceEntryTypes.length;\n\n                // Is this a homogenous tuple of indeterminate length?\n                if (sourceEntryCount === 2 && isEllipsisType(sourceEntryTypes[1])) {\n                    for (let index = 0; index < target.expressions.length; index++) {\n                        targetTypes[index].push(sourceEntryTypes[0]);\n                    }\n                } else {\n                    let sourceIndex = 0;\n                    let targetIndex = 0;\n                    for (targetIndex = 0; targetIndex < target.expressions.length; targetIndex++) {\n                        if (targetIndex === unpackIndex) {\n                            // Consume as many source entries as necessary to\n                            // make the remaining tuple entry counts match.\n                            const remainingTargetEntries = target.expressions.length - targetIndex - 1;\n                            const remainingSourceEntries = sourceEntryCount - sourceIndex;\n                            let entriesToPack = Math.max(remainingSourceEntries - remainingTargetEntries, 0);\n                            while (entriesToPack > 0) {\n                                targetTypes[targetIndex].push(sourceEntryTypes[sourceIndex]);\n                                sourceIndex++;\n                                entriesToPack--;\n                            }\n                        } else {\n                            if (sourceIndex >= sourceEntryCount) {\n                                // No more source entries to assign.\n                                break;\n                            }\n\n                            targetTypes[targetIndex].push(sourceEntryTypes[sourceIndex]);\n                            sourceIndex++;\n                        }\n                    }\n\n                    // Have we accounted for all of the targets and sources? If not, we have a size mismatch.\n                    if (targetIndex < target.expressions.length || sourceIndex < sourceEntryCount) {\n                        const fileInfo = getFileInfo(target);\n                        const expectedEntryCount =\n                            unpackIndex >= 0 ? target.expressions.length - 1 : target.expressions.length;\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.tupleSizeMismatch().format({\n                                expected: expectedEntryCount,\n                                received: sourceEntryCount,\n                            }),\n                            target\n                        );\n                    }\n                }\n            } else {\n                // The assigned expression isn't a tuple, so it had better\n                // be some iterable type.\n                const iterableType = getTypeFromIterable(\n                    subtype,\n                    /* isAsync */ false,\n                    srcExpr,\n                    /* supportGetItem */ false\n                );\n                for (let index = 0; index < target.expressions.length; index++) {\n                    targetTypes[index].push(iterableType);\n                }\n            }\n\n            // We need to return something to satisfy doForSubtypes.\n            return undefined;\n        });\n\n        // Assign the resulting types to the individual names in the tuple target expression.\n        target.expressions.forEach((expr, index) => {\n            const typeList = targetTypes[index];\n            let targetType = typeList.length === 0 ? UnknownType.create() : combineTypes(typeList);\n\n            // If the target uses an unpack operator, wrap the target type in a list.\n            if (index === unpackIndex) {\n                const listType = getBuiltInType(expr, 'List');\n                if (isClass(listType)) {\n                    targetType = ObjectType.create(\n                        ClassType.cloneForSpecialization(listType, [targetType], /* isTypeArgumentExplicit */ true)\n                    );\n                }\n            }\n\n            assignTypeToExpression(expr, targetType, srcExpr);\n        });\n\n        writeTypeCache(target, type);\n    }\n\n    function markNamesAccessed(node: ParseNode, names: string[]) {\n        const fileInfo = getFileInfo(node);\n        const scope = ScopeUtils.getScopeForNode(node);\n\n        if (scope) {\n            names.forEach((symbolName) => {\n                const symbolInScope = scope.lookUpSymbolRecursive(symbolName);\n                if (symbolInScope) {\n                    setSymbolAccessed(fileInfo, symbolInScope.symbol, node);\n                }\n            });\n        }\n    }\n\n    function assignTypeToExpression(\n        target: ExpressionNode,\n        type: Type,\n        srcExpr?: ExpressionNode,\n        expectedTypeDiagAddendum?: DiagnosticAddendum\n    ) {\n        // Is the source expression a TypeVar() call?\n        if (isTypeVar(type)) {\n            if (srcExpr && srcExpr.nodeType === ParseNodeType.Call) {\n                const callType = getTypeOfExpression(srcExpr.leftExpression).type;\n                if (\n                    isClass(callType) &&\n                    (ClassType.isBuiltIn(callType, 'TypeVar') || ClassType.isBuiltIn(callType, 'ParamSpec'))\n                ) {\n                    if (target.nodeType !== ParseNodeType.Name || target.value !== type.details.name) {\n                        addError(\n                            type.details.isParamSpec\n                                ? Localizer.Diagnostic.paramSpecAssignedName().format({ name: type.details.name })\n                                : Localizer.Diagnostic.typeVarAssignedName().format({ name: type.details.name }),\n                            target\n                        );\n                    }\n                }\n            }\n        }\n\n        // If the type was partially unbound, an error will have already been logged.\n        // Remove the unbound before assigning to the target expression so the unbound\n        // error doesn't propagate.\n        type = removeUnbound(type);\n\n        switch (target.nodeType) {\n            case ParseNodeType.Name: {\n                reportPossibleUnknownAssignment(\n                    getFileInfo(target).diagnosticRuleSet.reportUnknownVariableType,\n                    DiagnosticRule.reportUnknownVariableType,\n                    target,\n                    type,\n                    target\n                );\n\n                assignTypeToNameNode(target, type, srcExpr, expectedTypeDiagAddendum);\n                break;\n            }\n\n            case ParseNodeType.MemberAccess: {\n                assignTypeToMemberAccessNode(target, type, srcExpr, expectedTypeDiagAddendum);\n                break;\n            }\n\n            case ParseNodeType.Index: {\n                const baseTypeResult = getTypeOfExpression(\n                    target.baseExpression,\n                    undefined,\n                    EvaluatorFlags.DoNotSpecialize\n                );\n\n                const indexTypeResult = getTypeFromIndexWithBaseType(\n                    target,\n                    baseTypeResult.type,\n                    {\n                        method: 'set',\n                        setType: type,\n                        setErrorNode: srcExpr,\n                        setExpectedTypeDiag: expectedTypeDiagAddendum,\n                    },\n                    EvaluatorFlags.None\n                );\n\n                writeTypeCache(target, indexTypeResult.type);\n                break;\n            }\n\n            case ParseNodeType.Tuple: {\n                assignTypeToTupleNode(target, type, srcExpr);\n                break;\n            }\n\n            case ParseNodeType.TypeAnnotation: {\n                const typeHintType = getTypeOfAnnotation(\n                    target.typeAnnotation,\n                    ParseTreeUtils.isFinalAllowedForAssignmentTarget(target.valueExpression)\n                );\n                const diagAddendum = new DiagnosticAddendum();\n\n                if (canAssignType(typeHintType, type, diagAddendum)) {\n                    // Don't attempt to narrow based on the annotated type if the type\n                    // is a enum because the annotated type in an enum doesn't reflect\n                    // the type of the symbol.\n                    if (!isObject(type) || !ClassType.isEnumClass(type.classType)) {\n                        type = narrowTypeBasedOnAssignment(typeHintType, type);\n                    }\n                }\n\n                assignTypeToExpression(target.valueExpression, type, srcExpr, expectedTypeDiagAddendum);\n                break;\n            }\n\n            case ParseNodeType.Unpack: {\n                if (target.expression.nodeType === ParseNodeType.Name) {\n                    assignTypeToNameNode(target.expression, type, srcExpr);\n                }\n                break;\n            }\n\n            case ParseNodeType.List: {\n                // The assigned expression had better be some iterable type.\n                const iteratedType = getTypeFromIterable(\n                    type,\n                    /* isAsync */ false,\n                    srcExpr,\n                    /* supportGetItem */ false\n                );\n\n                target.entries.forEach((entry) => {\n                    assignTypeToExpression(entry, iteratedType, srcExpr);\n                });\n                break;\n            }\n\n            case ParseNodeType.Error: {\n                // Evaluate the child expression as best we can so the\n                // type information is cached for the completion handler.\n                suppressDiagnostics(() => {\n                    if (target.child) {\n                        getTypeOfExpression(target.child);\n                    }\n                });\n                break;\n            }\n\n            default: {\n                const fileInfo = getFileInfo(target);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.assignmentTargetExpr(),\n                    target\n                );\n                break;\n            }\n        }\n    }\n\n    function verifyRaiseExceptionType(node: RaiseNode) {\n        const baseExceptionType = getBuiltInType(node, 'BaseException');\n\n        if (node.typeExpression) {\n            const exceptionType = getType(node.typeExpression);\n\n            // Validate that the argument of \"raise\" is an exception object or class.\n            // If it is a class, validate that the class's constructor accepts zero\n            // arguments.\n            if (exceptionType && baseExceptionType && isClass(baseExceptionType)) {\n                const diagAddendum = new DiagnosticAddendum();\n\n                doForSubtypes(exceptionType, (subtype) => {\n                    if (!isAnyOrUnknown(subtype)) {\n                        if (isClass(subtype)) {\n                            if (!derivesFromClassRecursive(subtype, baseExceptionType, /* ignoreUnknown */ false)) {\n                                diagAddendum.addMessage(\n                                    Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                                        type: printType(subtype, /* expandTypeAlias */ false),\n                                    })\n                                );\n                            } else {\n                                let callResult: CallResult | undefined;\n                                suppressDiagnostics(() => {\n                                    callResult = validateConstructorArguments(\n                                        node.typeExpression!,\n                                        [],\n                                        subtype,\n                                        /* skipUnknownArgCheck */ false,\n                                        /* expectedType */ undefined\n                                    );\n                                });\n\n                                if (callResult && callResult.argumentErrors) {\n                                    diagAddendum.addMessage(\n                                        Localizer.Diagnostic.exceptionTypeNotInstantiable().format({\n                                            type: printType(subtype, /* expandTypeAlias */ false),\n                                        })\n                                    );\n                                }\n                            }\n                        } else if (isObject(subtype)) {\n                            if (\n                                !derivesFromClassRecursive(\n                                    subtype.classType,\n                                    baseExceptionType,\n                                    /* ignoreUnknown */ false\n                                )\n                            ) {\n                                diagAddendum.addMessage(\n                                    Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                                        type: printType(subtype, /* expandTypeAlias */ false),\n                                    })\n                                );\n                            }\n                        } else {\n                            diagAddendum.addMessage(\n                                Localizer.Diagnostic.exceptionTypeIncorrect().format({\n                                    type: printType(subtype, /* expandTypeAlias */ false),\n                                })\n                            );\n                        }\n                    }\n\n                    return subtype;\n                });\n\n                if (!diagAddendum.isEmpty()) {\n                    const fileInfo = getFileInfo(node);\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.expectedExceptionClass() + diagAddendum.getString(),\n                        node.typeExpression\n                    );\n                }\n            }\n        }\n    }\n\n    function verifyDeleteExpression(node: ExpressionNode) {\n        switch (node.nodeType) {\n            case ParseNodeType.Name: {\n                // Get the type to evaluate whether it's bound\n                // and to mark it accessed.\n                getTypeOfExpression(node);\n                break;\n            }\n\n            case ParseNodeType.MemberAccess: {\n                const baseTypeResult = getTypeOfExpression(node.leftExpression);\n                const memberType = getTypeFromMemberAccessWithBaseType(\n                    node,\n                    baseTypeResult,\n                    { method: 'del' },\n                    EvaluatorFlags.None\n                );\n                writeTypeCache(node.memberName, memberType.type);\n                break;\n            }\n\n            case ParseNodeType.Index: {\n                const baseTypeResult = getTypeOfExpression(\n                    node.baseExpression,\n                    undefined,\n                    EvaluatorFlags.DoNotSpecialize\n                );\n                getTypeFromIndexWithBaseType(node, baseTypeResult.type, { method: 'del' }, EvaluatorFlags.None);\n                writeTypeCache(node, UnboundType.create());\n                break;\n            }\n\n            case ParseNodeType.Error: {\n                // Evaluate the child expression as best we can so the\n                // type information is cached for the completion handler.\n                suppressDiagnostics(() => {\n                    if (node.child) {\n                        getTypeOfExpression(node.child);\n                    }\n                });\n                break;\n            }\n\n            default: {\n                const fileInfo = getFileInfo(node);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.delTargetExpr(),\n                    node\n                );\n                break;\n            }\n        }\n    }\n\n    function setSymbolAccessed(fileInfo: AnalyzerFileInfo, symbol: Symbol, node: ParseNode) {\n        if (!isSpeculativeMode(node) && !incompleteTypeTracker.isIncompleteTypeMode()) {\n            fileInfo.accessedSymbolMap.set(symbol.id, true);\n        }\n    }\n\n    // Builds a sorted list of dataclass entries that are inherited by\n    // the specified class. These entries must be unique and in reverse-MRO\n    // order. Returns true if all of the class types in the hierarchy are\n    // known, false if one or more are unknown.\n    function addInheritedDataClassEntries(classType: ClassType, entries: DataClassEntry[]) {\n        let allAncestorsAreKnown = true;\n\n        for (let i = classType.details.mro.length - 1; i >= 0; i--) {\n            const mroClass = classType.details.mro[i];\n\n            if (isClass(mroClass)) {\n                const dataClassEntries = ClassType.getDataClassEntries(mroClass);\n\n                // Add the entries to the end of the list, replacing same-named\n                // entries if found.\n                dataClassEntries.forEach((entry) => {\n                    const existingIndex = entries.findIndex((e) => e.name === entry.name);\n                    if (existingIndex >= 0) {\n                        entries[existingIndex] = entry;\n                    } else {\n                        entries.push(entry);\n                    }\n                });\n            } else {\n                allAncestorsAreKnown = false;\n            }\n        }\n        return allAncestorsAreKnown;\n    }\n\n    function getReturnTypeFromGenerator(type: Type): Type | undefined {\n        if (isAnyOrUnknown(type)) {\n            return type;\n        }\n\n        if (isObject(type)) {\n            // Is this a Generator? If so, return the third\n            // type argument, which is the await response type.\n            const classType = type.classType;\n            if (ClassType.isBuiltIn(classType, 'Generator')) {\n                const typeArgs = classType.typeArguments;\n                if (typeArgs && typeArgs.length >= 3) {\n                    return typeArgs[2];\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    function getSpecializedReturnType(objType: ObjectType, memberName: string, errorNode: ParseNode | undefined) {\n        const classMember = lookUpObjectMember(objType, memberName, ClassMemberLookupFlags.SkipInstanceVariables);\n        if (!classMember) {\n            return undefined;\n        }\n\n        const memberType = getTypeOfMember(classMember);\n        if (isAnyOrUnknown(memberType)) {\n            return memberType;\n        }\n\n        if (memberType.category === TypeCategory.Function) {\n            const methodType = bindFunctionToClassOrObject(\n                objType,\n                memberType,\n                /* treatAsClassMember */ false,\n                errorNode\n            );\n            if (methodType) {\n                return getFunctionEffectiveReturnType(methodType as FunctionType);\n            }\n        }\n\n        return undefined;\n    }\n\n    // This is similar to _getSpecializedReturnType except that\n    // the method lookup occurs on a metaclass rather than\n    // the object that derives from it.\n    function getSpecializedReturnTypeForMetaclassMethod(\n        metaclass: ClassType,\n        classType: ClassType,\n        memberName: string,\n        errorNode: ParseNode | undefined\n    ) {\n        const classMember = lookUpObjectMember(\n            ObjectType.create(metaclass),\n            memberName,\n            ClassMemberLookupFlags.SkipInstanceVariables\n        );\n        if (!classMember) {\n            return undefined;\n        }\n\n        const memberType = getTypeOfMember(classMember);\n        if (isAnyOrUnknown(memberType)) {\n            return memberType;\n        }\n\n        if (memberType.category === TypeCategory.Function) {\n            const methodType = bindFunctionToClassOrObject(\n                classType,\n                memberType,\n                /* treatAsClassMember */ true,\n                errorNode\n            );\n            if (methodType) {\n                return getFunctionEffectiveReturnType(methodType as FunctionType);\n            }\n        }\n\n        return undefined;\n    }\n\n    function getTypeFromName(node: NameNode, flags: EvaluatorFlags): TypeResult {\n        const fileInfo = getFileInfo(node);\n        const name = node.value;\n        let type: Type | undefined;\n        let isResolutionCyclical = false;\n        const allowForwardReferences = (flags & EvaluatorFlags.AllowForwardReferences) !== 0;\n\n        // Look for the scope that contains the value definition and\n        // see if it has a declared type.\n        const symbolWithScope = lookUpSymbolRecursive(node, name, !allowForwardReferences);\n\n        if (symbolWithScope) {\n            let useCodeFlowAnalysis = !allowForwardReferences;\n\n            // If the symbol is implicitly imported from the builtin\n            // scope, there's no need to use code flow analysis.\n            if (symbolWithScope.scope.type === ScopeType.Builtin) {\n                useCodeFlowAnalysis = false;\n            }\n\n            if (fileInfo.isStubFile) {\n                // Type stubs allow forward references of classes, so\n                // don't use code flow analysis in this case.\n                const decl = getLastTypedDeclaredForSymbol(symbolWithScope.symbol);\n                if (decl && decl.type === DeclarationType.Class) {\n                    useCodeFlowAnalysis = false;\n                }\n            }\n\n            const symbol = symbolWithScope.symbol;\n\n            // Get the effective type (either the declared type or the inferred type).\n            // If we're using code flow analysis, pass the usage node so we consider\n            // only the assignment nodes that are reachable from this usage.\n            const effectiveTypeInfo = getEffectiveTypeOfSymbolForUsage(symbol, useCodeFlowAnalysis ? node : undefined);\n            const effectiveType = effectiveTypeInfo.type;\n\n            if (effectiveTypeInfo.isResolutionCyclical) {\n                isResolutionCyclical = true;\n            }\n\n            const isSpecialBuiltIn =\n                !!effectiveType && isClass(effectiveType) && ClassType.isSpecialBuiltIn(effectiveType);\n\n            type = effectiveType;\n            if (useCodeFlowAnalysis && !isSpecialBuiltIn) {\n                // See if code flow analysis can tell us anything more about the type.\n                // If the symbol is declared outside of our execution scope, use its effective\n                // type. If it's declared inside our execution scope, it generally starts\n                // as unbound at the start of the code flow.\n                const typeAtStart =\n                    symbolWithScope.isBeyondExecutionScope || !symbol.isInitiallyUnbound()\n                        ? effectiveType\n                        : UnboundType.create();\n                const codeFlowType = getFlowTypeOfReference(node, symbol.id, typeAtStart);\n                if (codeFlowType) {\n                    type = codeFlowType;\n                }\n            }\n\n            if (!(flags & EvaluatorFlags.DoNotSpecialize)) {\n                if (isClass(type)) {\n                    if (\n                        (flags & EvaluatorFlags.ExpectingType) !== 0 &&\n                        (flags & EvaluatorFlags.AllowMissingTypeArgs) === 0\n                    ) {\n                        if (requiresTypeArguments(type) && !type.typeArguments) {\n                            addDiagnostic(\n                                fileInfo.diagnosticRuleSet.reportMissingTypeArgument,\n                                DiagnosticRule.reportMissingTypeArgument,\n                                Localizer.Diagnostic.typeArgsMissingForClass().format({\n                                    name: type.details.name,\n                                }),\n                                node\n                            );\n                        }\n                    }\n                    if (!type.typeArguments) {\n                        type = createSpecializedClassType(type, undefined, flags, node);\n                    }\n                } else if (isObject(type)) {\n                    // If this is an object that contains a Type[X], transform it\n                    // into class X.\n                    type = getClassFromPotentialTypeObject(type);\n                } else if (\n                    (flags & EvaluatorFlags.ExpectingType) !== 0 &&\n                    type.typeAliasInfo &&\n                    type.typeAliasInfo.typeParameters &&\n                    type.typeAliasInfo.typeParameters.length > 0 &&\n                    !type.typeAliasInfo.typeArguments\n                ) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportMissingTypeArgument,\n                        DiagnosticRule.reportMissingTypeArgument,\n                        Localizer.Diagnostic.typeArgsMissingForAlias().format({\n                            name: type.typeAliasInfo.aliasName,\n                        }),\n                        node\n                    );\n                }\n            }\n\n            // If there is a resolution cycle, don't report it as an unbound symbol\n            // at this time. It will be re-evaluated as the call stack unwinds, and\n            // its actual type will be known then. Also, if the node is unreachable\n            // but within a reachable statement (e.g. if False and <name>) then avoid\n            // reporting an unbound error.\n            if (!isResolutionCyclical && !AnalyzerNodeInfo.isCodeUnreachable(node)) {\n                if (isUnbound(type)) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportUnboundVariable,\n                        DiagnosticRule.reportUnboundVariable,\n                        Localizer.Diagnostic.symbolIsUnbound().format({ name }),\n                        node\n                    );\n                } else if (isPossiblyUnbound(type)) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportUnboundVariable,\n                        DiagnosticRule.reportUnboundVariable,\n                        Localizer.Diagnostic.symbolIsPossiblyUnbound().format({ name }),\n                        node\n                    );\n                }\n            }\n\n            setSymbolAccessed(fileInfo, symbol, node);\n        } else {\n            // Handle the special case of \"reveal_type\".\n            if (name !== 'reveal_type') {\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportUndefinedVariable,\n                    DiagnosticRule.reportUndefinedVariable,\n                    Localizer.Diagnostic.symbolIsUndefined().format({ name }),\n                    node\n                );\n            }\n            type = UnknownType.create();\n        }\n\n        if (isTypeVar(type) && type.details.isParamSpec) {\n            if (flags & EvaluatorFlags.ParamSpecDisallowed) {\n                addError(Localizer.Diagnostic.paramSpecContext(), node);\n            }\n        }\n\n        if ((flags & EvaluatorFlags.ExpectingType) !== 0) {\n            if ((flags & EvaluatorFlags.GenericClassTypeAllowed) === 0) {\n                if (isClass(type) && ClassType.isBuiltIn(type, 'Generic')) {\n                    addDiagnostic(\n                        getFileInfo(node).diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.genericNotAllowed(),\n                        node\n                    );\n                }\n            }\n        }\n\n        // If this is a TypeVar, try to match it against a TypeVar\n        // defined by an enclosing scope (either a class or function).\n        if (isTypeVar(type) && TypeBase.isInstantiable(type)) {\n            type = findScopedTypeVar(node, type);\n            if ((flags & EvaluatorFlags.DisallowTypeVarsWithScopeId) !== 0 && type.scopeId !== undefined) {\n                if (!type.details.isSynthesized && !type.details.isParamSpec) {\n                    addDiagnostic(\n                        getFileInfo(node).diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.typeVarUsedByOuterScope().format({ name: type.details.name }),\n                        node\n                    );\n                }\n            } else if ((flags & EvaluatorFlags.AssociateTypeVarsWithCurrentScope) !== 0) {\n                if (type.scopeId === undefined) {\n                    const enclosingScope = ParseTreeUtils.getEnclosingClassOrFunction(node);\n                    if (enclosingScope) {\n                        type = TypeVarType.cloneForScopeId(type, enclosingScope.id);\n                    } else {\n                        fail('AssociateTypeVarsWithCurrentScope flag was set but enclosing scope not found');\n                    }\n                }\n            } else if ((flags & EvaluatorFlags.DisallowTypeVarsWithoutScopeId) !== 0) {\n                if (type.scopeId === undefined && !type.details.isSynthesized && !type.details.isParamSpec) {\n                    addDiagnostic(\n                        getFileInfo(node).diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.typeVarNotUsedByOuterScope().format({ name: type.details.name }),\n                        node\n                    );\n                }\n            }\n        }\n\n        return { type, node, isResolutionCyclical };\n    }\n\n    // Walks up the parse tree to find a function or class that provides\n    // the context for a type variable.\n    function findScopedTypeVar(node: NameNode, type: TypeVarType): TypeVarType {\n        let curNode: ParseNode | undefined = node;\n\n        assert(TypeBase.isInstantiable(type));\n\n        while (curNode) {\n            curNode = ParseTreeUtils.getTypeVarScopeNode(curNode);\n            if (!curNode) {\n                break;\n            }\n\n            let typeVarsForScope: TypeVarType[] | undefined;\n\n            if (curNode.nodeType === ParseNodeType.Class) {\n                const classTypeInfo = getTypeOfClass(curNode);\n                if (classTypeInfo) {\n                    typeVarsForScope = classTypeInfo.classType.details.typeParameters;\n                }\n            } else if (curNode.nodeType === ParseNodeType.Function) {\n                const functionTypeInfo = getTypeOfFunction(curNode);\n                if (functionTypeInfo) {\n                    typeVarsForScope = [];\n                    functionTypeInfo.functionType.details.parameters.forEach((param) => {\n                        if (param.hasDeclaredType) {\n                            addTypeVarsToListIfUnique(typeVarsForScope!, getTypeVarArgumentsRecursive(param.type));\n                        }\n                    });\n                }\n            } else if (curNode.nodeType === ParseNodeType.Module) {\n                break;\n            }\n\n            if (typeVarsForScope) {\n                const match = typeVarsForScope.find((typeVar) => typeVar.details.name === type.details.name);\n\n                if (match && match.scopeId) {\n                    return convertToInstantiable(match) as TypeVarType;\n                }\n            }\n\n            curNode = curNode.parent;\n        }\n\n        // Return the original type.\n        return type;\n    }\n\n    function getTypeFromMemberAccess(node: MemberAccessNode, flags: EvaluatorFlags): TypeResult {\n        const baseTypeFlags =\n            EvaluatorFlags.DoNotSpecialize |\n            (flags & (EvaluatorFlags.ExpectingType | EvaluatorFlags.AllowForwardReferences));\n        const baseTypeResult = getTypeOfExpression(node.leftExpression, undefined, baseTypeFlags);\n\n        if (baseTypeResult.isResolutionCyclical || isTypeAliasPlaceholder(baseTypeResult.type)) {\n            return {\n                node,\n                type: UnknownType.create(),\n                isResolutionCyclical: true,\n            };\n        }\n\n        const memberTypeResult = getTypeFromMemberAccessWithBaseType(node, baseTypeResult, { method: 'get' }, flags);\n\n        if (isCodeFlowSupportedForReference(node)) {\n            // Before performing code flow analysis, update the cache to prevent recursion.\n            writeTypeCache(node, memberTypeResult.type);\n            writeTypeCache(node.memberName, memberTypeResult.type);\n\n            // If the type is initially unbound, see if there's a parent class that\n            // potentially initialized the value.\n            let initialType = memberTypeResult.type;\n            if (isUnbound(initialType)) {\n                const baseType = makeTypeVarsConcrete(baseTypeResult.type);\n\n                let classMemberInfo: ClassMember | undefined;\n                if (isClass(baseType)) {\n                    classMemberInfo = lookUpClassMember(\n                        baseType,\n                        node.memberName.value,\n                        ClassMemberLookupFlags.SkipOriginalClass\n                    );\n                } else if (isObject(baseType)) {\n                    classMemberInfo = lookUpObjectMember(\n                        baseType,\n                        node.memberName.value,\n                        ClassMemberLookupFlags.SkipOriginalClass\n                    );\n                }\n\n                if (classMemberInfo) {\n                    initialType = getTypeOfMember(classMemberInfo);\n                }\n            }\n\n            // See if we can refine the type based on code flow analysis.\n            const codeFlowType = getFlowTypeOfReference(node, indeterminateSymbolId, initialType);\n            if (codeFlowType) {\n                memberTypeResult.type = codeFlowType;\n            }\n        }\n\n        // Cache the type information in the member name node as well.\n        writeTypeCache(node.memberName, memberTypeResult.type);\n\n        return memberTypeResult;\n    }\n\n    function getTypeFromMemberAccessWithBaseType(\n        node: MemberAccessNode,\n        baseTypeResult: TypeResult,\n        usage: EvaluatorUsage,\n        flags: EvaluatorFlags\n    ): TypeResult {\n        const baseType = baseTypeResult.type;\n        const memberName = node.memberName.value;\n        let diag = new DiagnosticAddendum();\n        const fileInfo = getFileInfo(node);\n        let type: Type | undefined;\n\n        switch (baseType.category) {\n            case TypeCategory.Any:\n            case TypeCategory.Unknown: {\n                type = baseType;\n                break;\n            }\n\n            case TypeCategory.Class: {\n                type = getTypeFromClassMember(node.memberName, baseType, memberName, usage, diag);\n                break;\n            }\n\n            case TypeCategory.TypeVar: {\n                if (baseType.details.isParamSpec) {\n                    if (memberName === 'args' || memberName === 'kwargs') {\n                        return { type: AnyType.create(), node };\n                    }\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.paramSpecUnknownMember().format({ name: memberName }),\n                        node.memberName\n                    );\n                    return { type: UnknownType.create(), node };\n                }\n\n                if (baseType.details.recursiveTypeAliasName) {\n                    return { type: UnknownType.create(), node, isResolutionCyclical: true };\n                }\n\n                return getTypeFromMemberAccessWithBaseType(\n                    node,\n                    {\n                        type: specializeType(baseType, /* typeVarMap */ undefined, /* makeConcrete */ true),\n                        node,\n                    },\n                    usage,\n                    EvaluatorFlags.None\n                );\n            }\n\n            case TypeCategory.Object: {\n                const classFromTypeObject = getClassFromPotentialTypeObject(baseType);\n                if (isClass(classFromTypeObject)) {\n                    // Handle the case where the object is a 'Type' object, which\n                    // represents a class.\n                    return getTypeFromMemberAccessWithBaseType(\n                        node,\n                        { type: classFromTypeObject, node: baseTypeResult.node, bindToType: baseTypeResult.bindToType },\n                        usage,\n                        flags\n                    );\n                }\n\n                type = getTypeFromObjectMember(\n                    node.memberName,\n                    baseType,\n                    memberName,\n                    usage,\n                    diag,\n                    /* memberAccessFlags */ undefined,\n                    baseTypeResult.bindToType\n                );\n                break;\n            }\n\n            case TypeCategory.Module: {\n                const symbol = ModuleType.getField(baseType, memberName);\n                if (symbol) {\n                    if (usage.method === 'get') {\n                        setSymbolAccessed(getFileInfo(node), symbol, node.memberName);\n                    }\n\n                    type = getEffectiveTypeOfSymbol(symbol);\n\n                    // If the type resolved to \"unbound\", treat it as \"unknown\" in\n                    // the case of a module reference because if it's truly unbound,\n                    // that error will be reported within the module and should not\n                    // leak into other modules that import it.\n                    if (isUnbound(type)) {\n                        type = UnknownType.create();\n                    }\n                } else {\n                    // Does the stub file export a top-level __getattr__ function?\n                    if (usage.method === 'get') {\n                        const getAttrSymbol = ModuleType.getField(baseType, '__getattr__');\n                        if (getAttrSymbol) {\n                            const decls = getAttrSymbol.getDeclarations();\n\n                            // Only honor the __getattr__ if it's in a stub file.\n                            if (decls.some((decl) => decl.path.toLowerCase().endsWith('.pyi'))) {\n                                const getAttrType = getEffectiveTypeOfSymbol(getAttrSymbol);\n                                if (getAttrType.category === TypeCategory.Function) {\n                                    type = getFunctionEffectiveReturnType(getAttrType);\n                                }\n                            }\n                        }\n                    }\n\n                    if (!type) {\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.moduleUnknownMember().format({ name: memberName }),\n                            node.memberName\n                        );\n                        type = UnknownType.create();\n                    }\n                }\n                break;\n            }\n\n            case TypeCategory.Union: {\n                type = doForSubtypes(baseType, (subtype) => {\n                    if (isNone(subtype)) {\n                        addDiagnostic(\n                            getFileInfo(node).diagnosticRuleSet.reportOptionalMemberAccess,\n                            DiagnosticRule.reportOptionalMemberAccess,\n                            Localizer.Diagnostic.noneUnknownMember().format({ name: memberName }),\n                            node.memberName\n                        );\n                        return undefined;\n                    } else if (isUnbound(subtype)) {\n                        // Don't do anything if it's unbound. The error will already\n                        // be reported elsewhere.\n                        return undefined;\n                    } else {\n                        const typeResult = getTypeFromMemberAccessWithBaseType(\n                            node,\n                            {\n                                type: subtype,\n                                node,\n                            },\n                            usage,\n                            EvaluatorFlags.None\n                        );\n                        return typeResult.type;\n                    }\n                });\n                break;\n            }\n\n            case TypeCategory.Function:\n            case TypeCategory.OverloadedFunction: {\n                // TODO - not yet sure what to do about members of functions,\n                // which have associated dictionaries.\n                type = AnyType.create();\n                break;\n            }\n\n            default:\n                diag.addMessage(Localizer.DiagnosticAddendum.typeUnsupported().format({ type: printType(baseType) }));\n                break;\n        }\n\n        if (!type) {\n            let diagMessage = Localizer.Diagnostic.memberAccess();\n            if (usage.method === 'set') {\n                diagMessage = Localizer.Diagnostic.memberSet();\n            } else if (usage.method === 'del') {\n                diagMessage = Localizer.Diagnostic.memberDelete();\n            }\n\n            // If there is an expected type diagnostic addendum (used for assignments),\n            // use that rather than the local diagnostic addendum because it will be\n            // more informative.\n            if (usage.setExpectedTypeDiag) {\n                diag = usage.setExpectedTypeDiag;\n            }\n\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                diagMessage.format({ name: memberName, type: printType(baseType) }) + diag.getString(),\n                node.memberName\n            );\n            type = UnknownType.create();\n        }\n\n        // Should we specialize the class?\n        if ((flags & EvaluatorFlags.DoNotSpecialize) === 0) {\n            if (isClass(type) && !type.typeArguments) {\n                type = createSpecializedClassType(type, undefined, flags, node);\n            }\n        }\n\n        if (usage.method === 'get') {\n            reportPossibleUnknownAssignment(\n                fileInfo.diagnosticRuleSet.reportUnknownMemberType,\n                DiagnosticRule.reportUnknownMemberType,\n                node.memberName,\n                type,\n                node\n            );\n        }\n\n        return { type, node };\n    }\n\n    // If the object type is a 'Type' object, converts it to the corresponding\n    // class that it represents and returns that class. Otherwise returns the\n    // original type.\n    function getClassFromPotentialTypeObject(potentialTypeObject: Type): Type {\n        if (isObject(potentialTypeObject)) {\n            const objectClass = potentialTypeObject.classType;\n            if (ClassType.isBuiltIn(objectClass, 'Type')) {\n                const typeArgs = objectClass.typeArguments;\n\n                if (typeArgs && typeArgs.length > 0) {\n                    let firstTypeArg = typeArgs[0];\n\n                    // If the type arg is a type var itself, specialize it in case it's bound.\n                    if (isTypeVar(firstTypeArg)) {\n                        firstTypeArg = getConcreteTypeFromTypeVar(firstTypeArg);\n                    }\n\n                    if (isObject(firstTypeArg)) {\n                        return firstTypeArg.classType;\n                    }\n                }\n\n                return AnyType.create();\n            }\n        }\n\n        return potentialTypeObject;\n    }\n\n    function getTypeFromClassMemberName(\n        errorNode: ExpressionNode,\n        classType: ClassType,\n        memberName: string,\n        usage: EvaluatorUsage,\n        diag: DiagnosticAddendum,\n        flags: MemberAccessFlags\n    ): ClassMemberLookup | undefined {\n        // If this is a special type (like \"List\") that has an alias class (like\n        // \"list\"), switch to the alias, which defines the members.\n        classType = ClassType.getAliasClass(classType);\n\n        let classLookupFlags = ClassMemberLookupFlags.Default;\n        if (flags & MemberAccessFlags.SkipInstanceMembers) {\n            classLookupFlags |= ClassMemberLookupFlags.SkipInstanceVariables;\n        }\n        if (flags & MemberAccessFlags.SkipBaseClasses) {\n            classLookupFlags |= ClassMemberLookupFlags.SkipBaseClasses;\n        }\n        if (flags & MemberAccessFlags.SkipObjectBaseClass) {\n            classLookupFlags |= ClassMemberLookupFlags.SkipObjectBaseClass;\n        }\n\n        // Always look for a member with a declared type first.\n        let memberInfo = lookUpClassMember(\n            classType,\n            memberName,\n            classLookupFlags | ClassMemberLookupFlags.DeclaredTypesOnly\n        );\n\n        // If we couldn't find a symbol with a declared type, use\n        // a symbol with an inferred type.\n        if (!memberInfo) {\n            memberInfo = lookUpClassMember(classType, memberName, classLookupFlags);\n        }\n\n        if (memberInfo) {\n            let type: Type | undefined;\n            if (usage.method === 'get') {\n                type = getTypeOfMember(memberInfo);\n            } else {\n                // If the usage indicates a 'set' or 'delete' and the access is within the\n                // class definition itself, use only the declared type to avoid circular\n                // type evaluation.\n                const containingClass = ParseTreeUtils.getEnclosingClass(errorNode);\n                if (containingClass) {\n                    const containingClassType = getTypeOfClass(containingClass)?.classType;\n                    if (\n                        containingClassType &&\n                        isClass(containingClassType) &&\n                        ClassType.isSameGenericClass(containingClassType, classType)\n                    ) {\n                        type = getDeclaredTypeOfSymbol(memberInfo.symbol) || UnknownType.create();\n                    }\n                }\n\n                if (!type) {\n                    type = getTypeOfMember(memberInfo);\n                }\n            }\n\n            if (usage.method === 'set' && memberInfo.symbol.isClassVar()) {\n                if (flags & MemberAccessFlags.DisallowClassVarWrites) {\n                    diag.addMessage(Localizer.DiagnosticAddendum.memberSetClassVar().format({ name: memberName }));\n                    return undefined;\n                }\n            }\n\n            // Don't include variables within typed dict classes.\n            if (ClassType.isTypedDictClass(classType)) {\n                const typedDecls = memberInfo.symbol.getTypedDeclarations();\n                if (typedDecls.length > 0 && typedDecls[0].type === DeclarationType.Variable) {\n                    diag.addMessage(Localizer.DiagnosticAddendum.memberUnknown().format({ name: memberName }));\n                    return undefined;\n                }\n            }\n\n            if (usage.method === 'get') {\n                // Mark the member accessed if it's not coming from a parent class.\n                if (isClass(memberInfo.classType) && ClassType.isSameGenericClass(memberInfo.classType, classType)) {\n                    setSymbolAccessed(getFileInfo(errorNode), memberInfo.symbol, errorNode);\n                }\n            }\n\n            const objectAccessType = applyObjectAccessMethod(\n                type,\n                memberInfo,\n                classType,\n                (flags & MemberAccessFlags.SkipInstanceMembers) === 0,\n                errorNode,\n                memberName,\n                usage,\n                diag\n            );\n\n            if (!objectAccessType) {\n                return undefined;\n            }\n            type = objectAccessType;\n\n            if (usage.method === 'set') {\n                // Verify that the assigned type is compatible.\n                if (!canAssignType(type, usage.setType!, diag.createAddendum())) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.memberAssignment().format({\n                            type: printType(usage.setType!),\n                            name: memberName,\n                            classType: printObjectTypeForClass(classType),\n                        })\n                    );\n                    return undefined;\n                }\n            }\n\n            return {\n                type,\n                isClassMember: !memberInfo.isInstanceMember,\n            };\n        }\n\n        if (!(flags & MemberAccessFlags.SkipGetAttributeCheck)) {\n            const generalAttrType = applyGeneralAttributeAccess(classType, errorNode, usage);\n            if (generalAttrType) {\n                return {\n                    type: generalAttrType,\n                    isClassMember: false,\n                };\n            }\n        }\n\n        diag.addMessage(Localizer.DiagnosticAddendum.memberUnknown().format({ name: memberName }));\n        return undefined;\n    }\n\n    // Applies special access methods \"__get__\", \"__set__\", or \"__delete__\".\n    function applyObjectAccessMethod(\n        type: Type,\n        memberInfo: ClassMember,\n        classType: ClassType,\n        isAccessedThroughObject: boolean,\n        errorNode: ExpressionNode,\n        memberName: string,\n        usage: EvaluatorUsage,\n        diag: DiagnosticAddendum\n    ): Type | undefined {\n        let isTypeValid = true;\n\n        type = doForSubtypes(type, (subtype) => {\n            if (isObject(subtype)) {\n                let accessMethodName: string;\n\n                if (usage.method === 'get') {\n                    accessMethodName = '__get__';\n                } else if (usage.method === 'set') {\n                    accessMethodName = '__set__';\n                } else {\n                    accessMethodName = '__delete__';\n                }\n\n                const memberClassType = subtype.classType;\n                const accessMethod = lookUpClassMember(\n                    memberClassType,\n                    accessMethodName,\n                    ClassMemberLookupFlags.SkipInstanceVariables\n                );\n\n                // Handle properties specially.\n                if (ClassType.isPropertyClass(subtype.classType)) {\n                    if (usage.method === 'set') {\n                        if (!accessMethod) {\n                            diag.addMessage(\n                                Localizer.DiagnosticAddendum.propertyMissingSetter().format({ name: memberName })\n                            );\n                            isTypeValid = false;\n                            return undefined;\n                        }\n                    } else if (usage.method === 'del') {\n                        if (!accessMethod) {\n                            diag.addMessage(\n                                Localizer.DiagnosticAddendum.propertyMissingDeleter().format({ name: memberName })\n                            );\n                            isTypeValid = false;\n                            return undefined;\n                        }\n                    }\n                }\n\n                if (accessMethod) {\n                    let accessMethodType = getTypeOfMember(accessMethod);\n                    const argList: FunctionArgument[] = [\n                        {\n                            argumentCategory: ArgumentCategory.Simple,\n                            type: subtype,\n                        },\n                        {\n                            argumentCategory: ArgumentCategory.Simple,\n                            type: isAccessedThroughObject ? ObjectType.create(classType) : NoneType.createInstance(),\n                        },\n                        {\n                            argumentCategory: ArgumentCategory.Simple,\n                            type: AnyType.create(),\n                        },\n                    ];\n\n                    // If it's an overloaded function, determine which overload to use.\n                    if (accessMethodType.category === TypeCategory.OverloadedFunction) {\n                        const overload = findOverloadedFunctionType(\n                            errorNode,\n                            argList,\n                            accessMethodType,\n                            /* expectedType */ undefined\n                        );\n                        if (overload) {\n                            accessMethodType = overload;\n                        }\n                    }\n\n                    if (accessMethodType && accessMethodType.category === TypeCategory.Function) {\n                        // Bind the accessor to the base object type.\n                        const boundMethodType = bindFunctionToClassOrObject(\n                            subtype,\n                            accessMethodType,\n                            /* treatAsClassMember */ false,\n                            errorNode\n                        );\n\n                        if (boundMethodType) {\n                            accessMethodType = boundMethodType as FunctionType;\n\n                            if (usage.method === 'get') {\n                                const returnType =\n                                    validateFunctionArguments(\n                                        errorNode,\n                                        argList.slice(1),\n                                        accessMethodType,\n                                        new TypeVarMap(),\n                                        /* skipUnknownArgCheck */ true,\n                                        /* inferReturnTypeIfNeeded */ true,\n                                        /* expectedType */ undefined\n                                    ).returnType || UnknownType.create();\n                                if (isClass(memberInfo!.classType)) {\n                                    return partiallySpecializeType(returnType, memberInfo!.classType);\n                                }\n                                return returnType;\n                            } else {\n                                if (usage.method === 'set') {\n                                    // Verify that the setter's parameter type matches\n                                    // the type of the value being assigned.\n                                    if (accessMethodType.details.parameters.length >= 2) {\n                                        const setValueType = accessMethodType.details.parameters[1].type;\n                                        if (!canAssignType(setValueType, usage.setType!, diag)) {\n                                            isTypeValid = false;\n                                            return undefined;\n                                        }\n                                    }\n                                }\n\n                                // The type isn't important for set or delete usage.\n                                // We just need to return some defined type.\n                                return AnyType.create();\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (usage.method === 'set') {\n                let enforceTargetType = false;\n\n                if (memberInfo!.symbol.hasTypedDeclarations()) {\n                    // If the member has a declared type, we will enforce it.\n                    enforceTargetType = true;\n                } else {\n                    // If the member has no declared type, we will enforce it\n                    // if this assignment isn't within the enclosing class. If\n                    // it is within the enclosing class, the assignment is used\n                    // to infer the type of the member.\n                    if (!memberInfo!.symbol.getDeclarations().some((decl) => decl.node === errorNode)) {\n                        enforceTargetType = true;\n                    }\n                }\n\n                if (enforceTargetType) {\n                    let effectiveType = subtype;\n\n                    // If the code is patching a method (defined on the class)\n                    // with an object-level function, strip the \"self\" parameter\n                    // off the original type. This is sometimes done for test\n                    // purposes to override standard behaviors of specific methods.\n                    if (isAccessedThroughObject) {\n                        if (!memberInfo!.isInstanceMember && subtype.category === TypeCategory.Function) {\n                            if (FunctionType.isClassMethod(subtype) || FunctionType.isInstanceMethod(subtype)) {\n                                effectiveType = stripFirstParameter(subtype);\n                            }\n                        }\n                    }\n\n                    return effectiveType;\n                }\n            }\n\n            return subtype;\n        });\n\n        return isTypeValid ? type : undefined;\n    }\n\n    // Applies the __getattr__, __setattr__ or __delattr__ method if present.\n    function applyGeneralAttributeAccess(\n        classType: ClassType,\n        errorNode: ExpressionNode,\n        usage: EvaluatorUsage\n    ): Type | undefined {\n        if (usage.method === 'get') {\n            // See if the class has a \"__getattribute__\" or \"__getattr__\" method.\n            // If so, arbitrary members are supported.\n            const getAttribType = getTypeFromClassMember(\n                errorNode,\n                classType,\n                '__getattribute__',\n                { method: 'get' },\n                new DiagnosticAddendum(),\n                MemberAccessFlags.SkipForMethodLookup | MemberAccessFlags.SkipObjectBaseClass\n            );\n\n            if (getAttribType && getAttribType.category === TypeCategory.Function) {\n                return getFunctionEffectiveReturnType(getAttribType);\n            }\n\n            const getAttrType = getTypeFromClassMember(\n                errorNode,\n                classType,\n                '__getattr__',\n                { method: 'get' },\n                new DiagnosticAddendum(),\n                MemberAccessFlags.SkipForMethodLookup\n            );\n            if (getAttrType && getAttrType.category === TypeCategory.Function) {\n                return getFunctionEffectiveReturnType(getAttrType);\n            }\n        } else if (usage.method === 'set') {\n            const setAttrType = getTypeFromClassMember(\n                errorNode,\n                classType,\n                '__setattr__',\n                { method: 'get' },\n                new DiagnosticAddendum(),\n                MemberAccessFlags.SkipForMethodLookup | MemberAccessFlags.SkipObjectBaseClass\n            );\n            if (setAttrType) {\n                // The type doesn't matter for a set usage. We just need\n                // to return a defined type.\n                return AnyType.create();\n            }\n        } else {\n            assert(usage.method === 'del');\n            const delAttrType = getTypeFromClassMember(\n                errorNode,\n                classType,\n                '__detattr__',\n                { method: 'get' },\n                new DiagnosticAddendum(),\n                MemberAccessFlags.SkipForMethodLookup | MemberAccessFlags.SkipObjectBaseClass\n            );\n            if (delAttrType) {\n                // The type doesn't matter for a delete usage. We just need\n                // to return a defined type.\n                return AnyType.create();\n            }\n        }\n\n        return undefined;\n    }\n\n    function getTypeFromIndex(node: IndexNode, flags = EvaluatorFlags.None): TypeResult {\n        const baseTypeResult = getTypeOfExpression(\n            node.baseExpression,\n            undefined,\n            flags | EvaluatorFlags.DoNotSpecialize\n        );\n\n        if (baseTypeResult.isResolutionCyclical) {\n            return {\n                node,\n                type: UnknownType.create(),\n                isResolutionCyclical: true,\n            };\n        }\n\n        // Check for builtin classes that will generate runtime exceptions if subscripted.\n        if ((flags & EvaluatorFlags.AllowForwardReferences) === 0) {\n            const fileInfo = getFileInfo(node);\n            if (isClass(baseTypeResult.type) && ClassType.isBuiltIn(baseTypeResult.type)) {\n                const minPythonVersion = nonSubscriptableBuiltinTypes[baseTypeResult.type.details.fullName];\n                if (minPythonVersion !== undefined && fileInfo.executionEnvironment.pythonVersion < minPythonVersion) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.classNotRuntimeSubscriptable().format({\n                            name: baseTypeResult.type.details.name,\n                        }),\n                        node.baseExpression\n                    );\n                }\n            }\n        }\n\n        return getTypeFromIndexWithBaseType(node, baseTypeResult.type, { method: 'get' }, flags);\n    }\n\n    function getTypeFromIndexWithBaseType(\n        node: IndexNode,\n        baseType: Type,\n        usage: EvaluatorUsage,\n        flags: EvaluatorFlags\n    ): TypeResult {\n        // Handle the case where we're specializing a generic union\n        // of classes, a callable, or a specialized class.\n        if (\n            baseType.category === TypeCategory.Union ||\n            baseType.category === TypeCategory.Function ||\n            (isClass(baseType) && baseType.typeArguments)\n        ) {\n            const isUnionOfClasses = isUnionableType([baseType]);\n\n            if (isUnionOfClasses) {\n                const typeParameters: TypeVarType[] = [];\n                doForSubtypes(baseType, (subtype) => {\n                    addTypeVarsToListIfUnique(typeParameters, getTypeVarArgumentsRecursive(subtype));\n                    return undefined;\n                });\n\n                if (typeParameters.length > 0) {\n                    const typeArgs = getTypeArgs(node.items, flags);\n\n                    if (typeArgs.length > typeParameters.length) {\n                        addError(\n                            Localizer.Diagnostic.typeArgsTooMany().format({\n                                name: printType(baseType),\n                                expected: typeParameters.length,\n                                received: typeArgs.length,\n                            }),\n                            typeArgs[typeParameters.length].node\n                        );\n                    }\n\n                    const typeVarMap = new TypeVarMap();\n                    const diag = new DiagnosticAddendum();\n                    typeParameters.forEach((param, index) => {\n                        assignTypeToTypeVar(\n                            param,\n                            index < typeArgs.length ? convertToInstance(typeArgs[index].type) : UnknownType.create(),\n                            /* canNarrowType */ false,\n                            diag,\n                            typeVarMap\n                        );\n                    });\n\n                    if (!diag.isEmpty()) {\n                        addError(\n                            Localizer.Diagnostic.typeNotSpecializable().format({ type: printType(baseType) }) +\n                                diag.getString(),\n                            node.items\n                        );\n                    }\n\n                    let type = specializeType(baseType, typeVarMap);\n                    if (baseType.typeAliasInfo && type !== baseType) {\n                        const typeArgs: Type[] = [];\n                        baseType.typeAliasInfo.typeParameters?.forEach((typeParam) => {\n                            typeArgs.push(typeVarMap.getTypeVar(typeParam) || UnknownType.create());\n                        });\n\n                        type = TypeBase.cloneForTypeAlias(\n                            type,\n                            baseType.typeAliasInfo.aliasName,\n                            baseType.typeAliasInfo.typeParameters,\n                            typeArgs\n                        );\n                    }\n\n                    return { type, node };\n                }\n            }\n        }\n\n        if (isTypeAliasPlaceholder(baseType)) {\n            const typeArgTypes = getTypeArgs(node.items, flags).map((t) => convertToInstance(t.type));\n            const type = TypeBase.cloneForTypeAlias(\n                baseType,\n                baseType.details.recursiveTypeAliasName!,\n                undefined,\n                typeArgTypes\n            );\n            return { type, node };\n        }\n\n        const type = doForSubtypes(baseType, (subtype) => {\n            subtype = makeTypeVarsConcrete(subtype);\n            subtype = getClassFromPotentialTypeObject(subtype);\n\n            if (isAnyOrUnknown(subtype)) {\n                return subtype;\n            }\n\n            if (isClass(subtype)) {\n                // Setting the value of an indexed class will always result\n                // in an exception.\n                if (usage.method === 'set') {\n                    addError(Localizer.Diagnostic.genericClassAssigned(), node.baseExpression);\n                } else if (usage.method === 'del') {\n                    addError(Localizer.Diagnostic.genericClassDeleted(), node.baseExpression);\n                }\n\n                if (ClassType.isSpecialBuiltIn(subtype, 'Literal')) {\n                    // Special-case Literal types.\n                    return createLiteralType(node, flags);\n                }\n\n                if (ClassType.isBuiltIn(subtype, 'InitVar')) {\n                    // Special-case InitVar, used in data classes.\n                    const typeArgs = getTypeArgs(node.items, flags);\n                    if (typeArgs.length === 1) {\n                        return typeArgs[0].type;\n                    } else {\n                        addError(\n                            Localizer.Diagnostic.typeArgsMismatchOne().format({ received: typeArgs.length }),\n                            node.baseExpression\n                        );\n                        return UnknownType.create();\n                    }\n                }\n\n                if (ClassType.isEnumClass(subtype)) {\n                    // Special-case Enum types.\n                    // TODO - validate that there's only one index entry\n                    // that is a str type.\n                    // TODO - validate that literal strings are referencing\n                    // a known enum member.\n                    return ObjectType.create(subtype);\n                }\n\n                // Handle the case where the base type is \"Tuple\". We need to\n                // perform special processing of the type args in this case to permit\n                // empty tuples.\n                let adjustedFlags = flags;\n                if (isClass(subtype) && isTupleClass(subtype)) {\n                    adjustedFlags |= EvaluatorFlags.AllowEmptyTupleAsType;\n                }\n\n                const isAnnotatedClass = isClass(subtype) && ClassType.isBuiltIn(subtype, 'Annotated');\n\n                const typeArgs = getTypeArgs(node.items, adjustedFlags, isAnnotatedClass);\n                return createSpecializedClassType(subtype, typeArgs, flags, node);\n            }\n\n            if (isObject(subtype)) {\n                return getTypeFromIndexedObject(node, subtype, usage);\n            }\n\n            if (isNever(subtype)) {\n                return UnknownType.create();\n            }\n\n            if (isNone(subtype)) {\n                addDiagnostic(\n                    getFileInfo(node).diagnosticRuleSet.reportOptionalSubscript,\n                    DiagnosticRule.reportOptionalSubscript,\n                    Localizer.Diagnostic.noneNotSubscriptable(),\n                    node.baseExpression\n                );\n\n                return UnknownType.create();\n            }\n\n            if (!isUnbound(subtype)) {\n                const fileInfo = getFileInfo(node);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.typeNotSubscriptable().format({ type: printType(subtype) }),\n                    node.baseExpression\n                );\n            }\n\n            return UnknownType.create();\n        });\n\n        // In case we didn't walk the list items above, do so now.\n        // If we have, this information will be cached.\n        node.items.items.forEach((item) => {\n            getTypeOfExpression(item, /* expectedType */ undefined, flags & EvaluatorFlags.AllowForwardReferences);\n        });\n\n        return { type, node };\n    }\n\n    function getTypeFromIndexedObject(node: IndexNode, baseType: ObjectType, usage: EvaluatorUsage): Type {\n        // Handle index operations for TypedDict classes specially.\n        if (ClassType.isTypedDictClass(baseType.classType)) {\n            if (node.items.items.length !== 1) {\n                addError(\n                    Localizer.Diagnostic.typeArgsMismatchOne().format({ received: node.items.items.length }),\n                    node\n                );\n                return UnknownType.create();\n            }\n\n            const entries = getTypedDictMembersForClass(baseType.classType);\n\n            const indexType = getTypeOfExpression(node.items.items[0]).type;\n            let diag = new DiagnosticAddendum();\n            const resultingType = doForSubtypes(indexType, (subtype) => {\n                if (isAnyOrUnknown(subtype)) {\n                    return subtype;\n                }\n\n                if (isObject(subtype) && ClassType.isBuiltIn(subtype.classType, 'str')) {\n                    if (subtype.classType.literalValue === undefined) {\n                        // If it's a plain str with no literal value, we can't\n                        // make any determination about the resulting type.\n                        return UnknownType.create();\n                    }\n\n                    // Look up the entry in the typed dict to get its type.\n                    const entryName = subtype.classType.literalValue as string;\n                    const entry = entries.get(entryName);\n                    if (!entry) {\n                        diag.addMessage(\n                            Localizer.DiagnosticAddendum.keyUndefined().format({\n                                name: entryName,\n                                type: printType(baseType),\n                            })\n                        );\n                        return UnknownType.create();\n                    }\n\n                    if (usage.method === 'set') {\n                        canAssignType(entry.valueType, usage.setType!, diag);\n                    } else if (usage.method === 'del' && entry.isRequired) {\n                        const fileInfo = getFileInfo(node);\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.keyRequiredDeleted().format({ name: entryName }),\n                            node\n                        );\n                    }\n\n                    return entry.valueType;\n                }\n\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typeNotStringLiteral().format({ type: printType(subtype) })\n                );\n                return UnknownType.create();\n            });\n\n            // If we have an \"expected type\" diagnostic addendum (used for assignments),\n            // use that rather than the local diagnostic information because it will\n            // be more informative.\n            if (usage.setExpectedTypeDiag) {\n                diag = usage.setExpectedTypeDiag;\n            }\n\n            if (!diag.isEmpty()) {\n                let typedDictDiag: string;\n                if (usage.method === 'set') {\n                    typedDictDiag = Localizer.Diagnostic.typedDictSet();\n                } else if (usage.method === 'del') {\n                    typedDictDiag = Localizer.Diagnostic.typedDictDelete();\n                } else {\n                    typedDictDiag = Localizer.Diagnostic.typedDictAccess();\n                }\n\n                const fileInfo = getFileInfo(node);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    typedDictDiag + diag.getString(),\n                    node\n                );\n            }\n\n            return resultingType;\n        }\n\n        let magicMethodName: string;\n        if (usage.method === 'get') {\n            magicMethodName = '__getitem__';\n        } else if (usage.method === 'set') {\n            magicMethodName = '__setitem__';\n        } else {\n            assert(usage.method === 'del');\n            magicMethodName = '__delitem__';\n        }\n\n        const itemMethodType = getTypeFromObjectMember(\n            node,\n            baseType,\n            magicMethodName,\n            { method: 'get' },\n            new DiagnosticAddendum(),\n            MemberAccessFlags.SkipForMethodLookup\n        );\n\n        if (!itemMethodType) {\n            const fileInfo = getFileInfo(node);\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                Localizer.Diagnostic.methodNotDefinedOnType().format({\n                    name: magicMethodName,\n                    type: printType(baseType),\n                }),\n                node.baseExpression\n            );\n            return UnknownType.create();\n        }\n\n        const indexTypeList = node.items.items.map((item) => getTypeOfExpression(item).type);\n\n        let indexType: Type;\n        if (indexTypeList.length === 1) {\n            indexType = indexTypeList[0];\n\n            // Handle the special case where the object is a Tuple and\n            // the index is a constant number. In such case, we can determine\n            // the exact type by indexing into the tuple type array.\n            const baseTypeClass = baseType.classType;\n\n            if (\n                node.items.items[0].nodeType === ParseNodeType.Number &&\n                node.items.items[0].isInteger &&\n                !node.items.items[0].isImaginary\n            ) {\n                const tupleType = getSpecializedTupleType(baseTypeClass);\n                if (tupleType && tupleType.typeArguments && tupleType.typeArguments.length > 0) {\n                    const numberNode = node.items.items[0];\n\n                    if (numberNode.isInteger && numberNode.value >= 0) {\n                        if (tupleType.typeArguments.length === 2 && isEllipsisType(tupleType.typeArguments[1])) {\n                            return tupleType.typeArguments[0];\n                        } else if (numberNode.value < tupleType.typeArguments.length) {\n                            return tupleType.typeArguments[numberNode.value];\n                        }\n                    }\n                }\n            }\n        } else {\n            // Handle the case where the index expression is a tuple. This\n            // isn't used in most cases, but it is supported by the language.\n            const builtInTupleType = getBuiltInType(node, 'Tuple');\n            if (isClass(builtInTupleType)) {\n                indexType = convertToInstance(\n                    cloneTupleForSpecialization(builtInTupleType, indexTypeList, /* isTypeArgumentExplicit */ true)\n                );\n            } else {\n                indexType = UnknownType.create();\n            }\n        }\n\n        const argList: FunctionArgument[] = [\n            {\n                argumentCategory: ArgumentCategory.Simple,\n                type: indexType,\n            },\n        ];\n\n        if (usage.method === 'set') {\n            argList.push({\n                argumentCategory: ArgumentCategory.Simple,\n                type: usage.setType || AnyType.create(),\n            });\n        }\n\n        const callResult = validateCallArguments(\n            node,\n            argList,\n            itemMethodType,\n            new TypeVarMap(),\n            /* skipUnknownArgCheck */ false,\n            /* inferReturnTypeIfNeeded */ true,\n            /* expectedType */ undefined\n        );\n\n        return callResult.returnType || UnknownType.create();\n    }\n\n    function getTypeArgs(node: IndexItemsNode, flags: EvaluatorFlags, isAnnotatedClass = false): TypeResult[] {\n        const typeArgs: TypeResult[] = [];\n        const adjFlags = flags & ~EvaluatorFlags.ParamSpecDisallowed;\n\n        node.items.forEach((expr, index) => {\n            // If it's an Annotated[a, b, c], only the first index should be treated\n            // as a type. The others can be regular (non-type) objects.\n            if (isAnnotatedClass && index > 0) {\n                typeArgs.push(\n                    getTypeOfExpression(\n                        expr,\n                        /* expectedType */ undefined,\n                        EvaluatorFlags.ParamSpecDisallowed | EvaluatorFlags.DoNotSpecialize\n                    )\n                );\n            } else {\n                typeArgs.push(getTypeArg(expr, adjFlags));\n            }\n        });\n\n        return typeArgs;\n    }\n\n    function getTypeArg(node: ExpressionNode, flags: EvaluatorFlags): TypeResult {\n        let typeResult: TypeResult;\n\n        let adjustedFlags =\n            flags |\n            EvaluatorFlags.ExpectingType |\n            EvaluatorFlags.ConvertEllipsisToAny |\n            EvaluatorFlags.EvaluateStringLiteralAsType |\n            EvaluatorFlags.FinalDisallowed;\n\n        const fileInfo = getFileInfo(node);\n        if (isAnnotationEvaluationPostponed(fileInfo)) {\n            adjustedFlags |= EvaluatorFlags.AllowForwardReferences;\n        }\n\n        if (node.nodeType === ParseNodeType.List) {\n            typeResult = {\n                type: UnknownType.create(),\n                typeList: node.entries.map((entry) => getTypeOfExpression(entry, undefined, adjustedFlags)),\n                node,\n            };\n        } else {\n            typeResult = getTypeOfExpression(node, /* expectedType */ undefined, adjustedFlags);\n        }\n\n        return typeResult;\n    }\n\n    function getTypeFromTuple(node: TupleNode, expectedType: Type | undefined): TypeResult {\n        // If the expected type is a union, recursively call for each of the subtypes\n        // to find one that matches.\n        let effectiveExpectedType = expectedType;\n\n        if (expectedType && expectedType.category === TypeCategory.Union) {\n            let matchingSubtype: Type | undefined;\n\n            for (const subtype of expectedType.subtypes) {\n                const subtypeResult = useSpeculativeMode(node, () => {\n                    return getTypeFromTupleExpected(node, subtype);\n                });\n\n                if (subtypeResult) {\n                    matchingSubtype = subtype;\n                    break;\n                }\n            }\n\n            effectiveExpectedType = matchingSubtype;\n        }\n\n        if (effectiveExpectedType) {\n            const result = getTypeFromTupleExpected(node, effectiveExpectedType);\n            if (result) {\n                return result;\n            }\n        }\n\n        return getTypeFromTupleInferred(node);\n    }\n\n    function getTypeFromTupleExpected(node: TupleNode, expectedType: Type): TypeResult | undefined {\n        expectedType = transformPossibleRecursiveTypeAlias(expectedType);\n        if (!isObject(expectedType)) {\n            return undefined;\n        }\n\n        const builtInTuple = getBuiltInObject(node, 'Tuple');\n        if (!isObject(builtInTuple)) {\n            return undefined;\n        }\n\n        // Build an array of expected types.\n        const expectedTypes: Type[] = [];\n\n        if (isTupleClass(expectedType.classType) && expectedType.classType.typeArguments) {\n            // Is this a homogeneous tuple of indeterminate length? If so,\n            // match the number of expected types to the number of entries\n            // in the tuple expression.\n            if (\n                expectedType.classType.typeArguments.length === 2 &&\n                isEllipsisType(expectedType.classType.typeArguments[1])\n            ) {\n                const homogenousType = transformPossibleRecursiveTypeAlias(expectedType.classType.typeArguments[0]);\n                for (let i = 0; i < node.expressions.length; i++) {\n                    expectedTypes.push(homogenousType);\n                }\n            } else {\n                expectedType.classType.typeArguments.forEach((typeArg) => {\n                    expectedTypes.push(transformPossibleRecursiveTypeAlias(typeArg));\n                });\n            }\n        } else {\n            const tupleTypeVarMap = new TypeVarMap();\n            if (!populateTypeVarMapBasedOnExpectedType(builtInTuple.classType, expectedType, tupleTypeVarMap)) {\n                return undefined;\n            }\n\n            const specializedTuple = specializeType(builtInTuple.classType, tupleTypeVarMap) as ClassType;\n            if (!specializedTuple.typeArguments || specializedTuple.typeArguments.length !== 1) {\n                return undefined;\n            }\n\n            const homogenousType = transformPossibleRecursiveTypeAlias(specializedTuple.typeArguments[0]);\n            for (let i = 0; i < node.expressions.length; i++) {\n                expectedTypes.push(homogenousType);\n            }\n        }\n\n        const entryTypeResults = node.expressions.map((expr, index) =>\n            getTypeOfExpression(expr, index < expectedTypes.length ? expectedTypes[index] : undefined)\n        );\n\n        const expectedTypesContainLiterals = expectedTypes.some((type) => isLiteralType(type));\n\n        const type = convertToInstance(\n            cloneTupleForSpecialization(\n                builtInTuple.classType,\n                buildTupleTypesList(entryTypeResults),\n                /* isTypeArgumentExplicit */ true,\n                /* stripLiterals */ !expectedTypesContainLiterals\n            )\n        );\n\n        return { type, node };\n    }\n\n    function getTypeFromTupleInferred(node: TupleNode): TypeResult {\n        const entryTypeResults = node.expressions.map((expr) => getTypeOfExpression(expr));\n\n        const builtInTupleType = getBuiltInType(node, 'Tuple');\n        if (!isClass(builtInTupleType)) {\n            return { type: UnknownType.create(), node };\n        }\n\n        const type = convertToInstance(\n            cloneTupleForSpecialization(\n                builtInTupleType,\n                buildTupleTypesList(entryTypeResults),\n                /* isTypeArgumentExplicit */ true\n            )\n        );\n\n        return { type, node };\n    }\n\n    function buildTupleTypesList(entryTypeResults: TypeResult[]): Type[] {\n        let tupleTypes: Type[] = [];\n        for (const typeResult of entryTypeResults) {\n            if (typeResult.unpackedType) {\n                // Is this an unpacked tuple? If so, we can append the individual\n                // unpacked entries onto the new tuple. If it's not an upacked tuple\n                // but some other iterator (e.g. a List), we won't know the number of\n                // items, so we'll need to leave the Tuple open-ended.\n                if (isObject(typeResult.unpackedType) && isTupleClass(typeResult.unpackedType.classType)) {\n                    const typeArgs = typeResult.unpackedType.classType.typeArguments;\n\n                    // If the Tuple wasn't specialized or has a \"...\" type parameter, we can't\n                    // make any determination about its contents.\n                    if (!typeArgs || typeArgs.some((t) => isEllipsisType(t))) {\n                        tupleTypes = [AnyType.create(false), AnyType.create(true)];\n                        break;\n                    }\n\n                    for (const typeArg of typeArgs) {\n                        tupleTypes.push(typeArg);\n                    }\n                } else {\n                    tupleTypes = [AnyType.create(false), AnyType.create(true)];\n                    break;\n                }\n            } else {\n                tupleTypes.push(typeResult.type);\n            }\n        }\n\n        return tupleTypes;\n    }\n\n    // Classes of type Tuple and tuple require special handling because they\n    // support variadic type parameters (including a form that represents homogenous\n    // arbitrary-length tuples). It computes the \"effective type args\" field, which\n    // is a union of the individual type args. If stripLiterals is true, literal\n    // values are stripped when computing the effective type args.\n    function cloneTupleForSpecialization(\n        tupleClass: ClassType,\n        typeArgs: Type[],\n        isTypeArgumentExplicit: boolean,\n        stripLiterals = false\n    ): ClassType {\n        // Create a copy of the Tuple class that overrides the normal MRO\n        // entries with a version of Tuple and/or tuple that are specialized\n        // appropriately.\n        let combinedTupleType: Type = AnyType.create(false);\n        if (typeArgs.length === 2 && isEllipsisType(typeArgs[1])) {\n            combinedTupleType = typeArgs[0];\n        } else {\n            combinedTupleType = combineTypes(typeArgs);\n        }\n\n        if (stripLiterals) {\n            combinedTupleType = stripLiteralValue(combinedTupleType);\n        }\n\n        const effectiveTypeArguments = [combinedTupleType];\n        const specializedTuple = ClassType.cloneForSpecialization(\n            tupleClass,\n            typeArgs,\n            isTypeArgumentExplicit,\n            /* skipAbstractClassTest */ undefined,\n            effectiveTypeArguments\n        );\n        specializedTuple.details = { ...specializedTuple.details };\n        specializedTuple.details.mro = [...specializedTuple.details.mro];\n        specializedTuple.details.mro[0] = specializedTuple;\n\n        // Handle the specialization of \"Tuple\" which inherits from \"tuple\".\n        if (ClassType.isBuiltIn(tupleClass, 'Tuple')) {\n            if (\n                tupleClass.details.mro.length >= 2 &&\n                isClass(tupleClass.details.mro[0]) &&\n                ClassType.isBuiltIn(tupleClass.details.mro[0], 'Tuple') &&\n                isClass(tupleClass.details.mro[1]) &&\n                ClassType.isBuiltIn(tupleClass.details.mro[1], 'tuple')\n            ) {\n                specializedTuple.details.mro[1] = ClassType.cloneForSpecialization(\n                    specializedTuple.details.mro[1] as ClassType,\n                    [combinedTupleType],\n                    isTypeArgumentExplicit,\n                    /* skipAbstractClassTest */ undefined,\n                    effectiveTypeArguments\n                );\n\n                return specializedTuple;\n            }\n        }\n\n        // Handle the specialization of \"tuple\" directly.\n        if (ClassType.isBuiltIn(tupleClass, 'tuple')) {\n            if (\n                tupleClass.details.mro.length >= 1 &&\n                isClass(tupleClass.details.mro[0]) &&\n                ClassType.isBuiltIn(tupleClass.details.mro[0], 'tuple')\n            ) {\n                return specializedTuple;\n            }\n        }\n\n        return tupleClass;\n    }\n\n    function updateNamedTupleBaseClass(classType: ClassType, typeArgs: Type[], isTypeArgumentExplicit: boolean) {\n        // Search for the NamedTuple base class.\n        const namedTupleIndex = classType.details.mro.findIndex(\n            (c) => isClass(c) && ClassType.isBuiltIn(c, 'NamedTuple')\n        );\n        if (namedTupleIndex < 0 || classType.details.mro.length < namedTupleIndex + 2) {\n            return;\n        }\n\n        const namedTupleClass = classType.details.mro[namedTupleIndex] as ClassType;\n        const typedTupleClass = classType.details.mro[namedTupleIndex + 1];\n        const tupleClass = classType.details.mro[namedTupleIndex + 2];\n\n        if (\n            !isClass(typedTupleClass) ||\n            !ClassType.isBuiltIn(typedTupleClass, 'Tuple') ||\n            !isClass(tupleClass) ||\n            !ClassType.isBuiltIn(tupleClass, 'tuple')\n        ) {\n            return;\n        }\n\n        const updatedTupleClass = cloneTupleForSpecialization(typedTupleClass, typeArgs, isTypeArgumentExplicit);\n\n        // Create a copy of the NamedTuple class that overrides the normal MRO\n        // entries with a version of Tuple and tuple that are specialized\n        // appropriately.\n        const clonedNamedTupleClass = ClassType.cloneForSpecialization(namedTupleClass, [], isTypeArgumentExplicit);\n        clonedNamedTupleClass.details = { ...clonedNamedTupleClass.details };\n        clonedNamedTupleClass.details.mro = [...clonedNamedTupleClass.details.mro];\n        clonedNamedTupleClass.details.mro[1] = updatedTupleClass.details.mro[0];\n        clonedNamedTupleClass.details.mro[2] = updatedTupleClass.details.mro[1];\n\n        classType.details.mro[namedTupleIndex] = clonedNamedTupleClass;\n        classType.details.mro[namedTupleIndex + 1] = updatedTupleClass.details.mro[0];\n        classType.details.mro[namedTupleIndex + 2] = updatedTupleClass.details.mro[1];\n    }\n\n    function getTypeFromCall(node: CallNode, expectedType: Type | undefined, flags: EvaluatorFlags): TypeResult {\n        const baseTypeResult = getTypeOfExpression(node.leftExpression, undefined, EvaluatorFlags.DoNotSpecialize);\n\n        if (baseTypeResult.isResolutionCyclical || isTypeAliasPlaceholder(baseTypeResult.type)) {\n            return {\n                node,\n                type: UnknownType.create(),\n                isResolutionCyclical: true,\n            };\n        }\n\n        // Handle the built-in \"super\" call specially.\n        if (node.leftExpression.nodeType === ParseNodeType.Name && node.leftExpression.value === 'super') {\n            return getTypeFromSuperCall(node);\n        }\n\n        // Handle the special-case \"reveal_type\" call.\n        if (\n            isAnyOrUnknown(baseTypeResult.type) &&\n            node.leftExpression.nodeType === ParseNodeType.Name &&\n            node.leftExpression.value === 'reveal_type' &&\n            node.arguments.length === 1 &&\n            node.arguments[0].argumentCategory === ArgumentCategory.Simple &&\n            node.arguments[0].name === undefined\n        ) {\n            const type = getTypeOfExpression(node.arguments[0].valueExpression).type;\n            const exprString = ParseTreeUtils.printExpression(node.arguments[0].valueExpression);\n            const typeString = printType(type);\n            addInformation(`Type of \"${exprString}\" is \"${typeString}\"`, node.arguments[0]);\n\n            // Return a literal string with the type. We can use this in unit tests\n            // to validate the exact type.\n            const strType = getBuiltInType(node, 'str');\n            if (isClass(strType)) {\n                return { type: ObjectType.create(ClassType.cloneWithLiteral(strType, typeString)), node };\n            }\n            return { type: AnyType.create(), node };\n        }\n\n        const argList = node.arguments.map((arg) => {\n            const functionArg: FunctionArgument = {\n                valueExpression: arg.valueExpression,\n                argumentCategory: arg.argumentCategory,\n                name: arg.name,\n            };\n            return functionArg;\n        });\n\n        const typeResult = getTypeFromCallWithBaseType(\n            node,\n            argList,\n            baseTypeResult,\n            expectedType,\n            flags & ~EvaluatorFlags.DoNotSpecialize\n        );\n\n        return typeResult;\n    }\n\n    function getTypeFromSuperCall(node: CallNode): TypeResult {\n        if (node.arguments.length > 2) {\n            addError(Localizer.Diagnostic.superCallArgCount(), node.arguments[2]);\n        }\n\n        // Determine which class the \"super\" call is applied to. If\n        // there is no first argument, then the class is implicit.\n        let targetClassType: Type;\n        if (node.arguments.length > 0) {\n            targetClassType = getTypeOfExpression(node.arguments[0].valueExpression).type;\n\n            if (!isAnyOrUnknown(targetClassType) && !isClass(targetClassType)) {\n                addError(\n                    Localizer.Diagnostic.superCallFirstArg().format({ type: printType(targetClassType) }),\n                    node.arguments[0].valueExpression\n                );\n            }\n        } else {\n            const enclosingClass = ParseTreeUtils.getEnclosingClass(node);\n            if (enclosingClass) {\n                const classTypeInfo = getTypeOfClass(enclosingClass);\n                targetClassType = classTypeInfo ? classTypeInfo.classType : UnknownType.create();\n            } else {\n                addError(Localizer.Diagnostic.superCallZeroArgForm(), node.leftExpression);\n                targetClassType = UnknownType.create();\n            }\n        }\n\n        // Determine whether to further narrow the type.\n        let bindToType: ClassType | ObjectType | undefined;\n        if (node.arguments.length > 1) {\n            const secondArgType = specializeType(\n                getTypeOfExpression(node.arguments[1].valueExpression).type,\n                /* typeVarMap */ undefined\n            );\n\n            let reportError = false;\n\n            if (isAnyOrUnknown(secondArgType)) {\n                // Ignore unknown or any types.\n            } else if (isObject(secondArgType)) {\n                if (isClass(targetClassType)) {\n                    if (\n                        !derivesFromClassRecursive(secondArgType.classType, targetClassType, /* ignoreUnknown */ true)\n                    ) {\n                        reportError = true;\n                    }\n                }\n                bindToType = secondArgType;\n            } else if (isClass(secondArgType)) {\n                if (isClass(targetClassType)) {\n                    if (!derivesFromClassRecursive(secondArgType, targetClassType, /* ignoreUnknown */ true)) {\n                        reportError = true;\n                    }\n                }\n                bindToType = secondArgType;\n            } else {\n                reportError = true;\n            }\n\n            if (reportError) {\n                const fileInfo = getFileInfo(node);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.superCallSecondArg().format({ type: printType(targetClassType) }),\n                    node.arguments[1].valueExpression\n                );\n            }\n        }\n\n        // Python docs indicate that super() isn't valid for\n        // operations other than member accesses or attribute lookups.\n        const parentNode = node.parent!;\n        if (parentNode.nodeType === ParseNodeType.MemberAccess) {\n            const memberName = parentNode.memberName.value;\n            const lookupResults = lookUpClassMember(\n                targetClassType,\n                memberName,\n                ClassMemberLookupFlags.SkipOriginalClass\n            );\n            if (lookupResults && isClass(lookupResults.classType)) {\n                return {\n                    type: ObjectType.create(lookupResults.classType),\n                    node,\n                    bindToType,\n                };\n            }\n        }\n\n        // If the lookup failed, try to return the first base class. An error\n        // will be reported by the member lookup logic at a later time.\n        if (isClass(targetClassType)) {\n            // If the class derives from one or more unknown classes,\n            // return unknown here to prevent spurious errors.\n            if (targetClassType.details.mro.some((mroBase) => isAnyOrUnknown(mroBase))) {\n                return {\n                    type: UnknownType.create(),\n                    node,\n                };\n            }\n\n            const baseClasses = targetClassType.details.baseClasses;\n            if (baseClasses.length > 0) {\n                const baseClassType = baseClasses[0];\n                if (isClass(baseClassType)) {\n                    return {\n                        type: ObjectType.create(baseClassType),\n                        node,\n                    };\n                }\n            }\n        }\n\n        return {\n            type: UnknownType.create(),\n            node,\n        };\n    }\n\n    function getTypeFromCallWithBaseType(\n        errorNode: CallNode | DecoratorNode,\n        argList: FunctionArgument[],\n        baseTypeResult: TypeResult,\n        expectedType: Type | undefined,\n        flags: EvaluatorFlags\n    ): TypeResult {\n        const skipUnknownArgCheck = (flags & EvaluatorFlags.DoNotCheckForUnknownArgs) !== 0;\n        const diag = new DiagnosticAddendum();\n\n        let resultType = doForSubtypes(baseTypeResult.type, (subtype) => {\n            let type: Type | undefined;\n\n            subtype = makeTypeVarsConcrete(subtype);\n            let isTypeObject = false;\n            if (isObject(subtype) && ClassType.isBuiltIn(subtype.classType, 'Type')) {\n                subtype = getClassFromPotentialTypeObject(subtype);\n                isTypeObject = true;\n            }\n\n            switch (subtype.category) {\n                case TypeCategory.Class: {\n                    if (ClassType.isBuiltIn(subtype)) {\n                        const className = subtype.details.name;\n\n                        if (className === 'type') {\n                            // Validate the constructor arguments.\n                            validateConstructorArguments(\n                                errorNode,\n                                argList,\n                                subtype,\n                                skipUnknownArgCheck,\n                                expectedType\n                            );\n\n                            // Handle the 'type' call specially.\n                            if (argList.length === 1) {\n                                // The one-parameter form of \"type\" returns the class\n                                // for the specified object.\n                                const argType = getTypeForArgument(argList[0]);\n                                if (isObject(argType)) {\n                                    type = argType.classType;\n                                } else if (argType.category === TypeCategory.None) {\n                                    type = NoneType.createType();\n                                }\n                            } else if (argList.length >= 2) {\n                                // The two-parameter form of \"type\" returns a new class type\n                                // built from the specified base types.\n                                type = createType(errorNode, argList);\n                            }\n\n                            // If the parameter to type() is not statically known,\n                            // fall back to Any.\n                            if (!type) {\n                                type = AnyType.create();\n                            }\n                        } else if (className === 'TypeVar') {\n                            type = createTypeVarType(errorNode, argList, /* isParamSpec */ false);\n                        } else if (className === 'ParamSpec') {\n                            type = createTypeVarType(errorNode, argList, /* isParamSpec */ true);\n                        } else if (className === 'NamedTuple') {\n                            type = createNamedTupleType(errorNode, argList, true);\n                        } else if (\n                            className === 'Protocol' ||\n                            className === 'Generic' ||\n                            className === 'Callable' ||\n                            className === 'Concatenate' ||\n                            className === 'Type'\n                        ) {\n                            const fileInfo = getFileInfo(errorNode);\n                            addDiagnostic(\n                                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                                DiagnosticRule.reportGeneralTypeIssues,\n                                Localizer.Diagnostic.typeNotIntantiable().format({ type: className }),\n                                errorNode\n                            );\n                        } else if (\n                            className === 'Enum' ||\n                            className === 'IntEnum' ||\n                            className === 'Flag' ||\n                            className === 'IntFlag'\n                        ) {\n                            type = createEnumType(errorNode, subtype, argList);\n                        } else if (className === 'TypedDict') {\n                            type = createTypedDictType(errorNode, subtype, argList);\n                        } else if (className === 'auto' && argList.length === 0) {\n                            type = getBuiltInObject(errorNode, 'int');\n                        }\n                    } else if (isClass(subtype) && !isTypeObject && ClassType.hasAbstractMethods(subtype)) {\n                        // If the class is abstract, it can't be instantiated.\n                        const abstractMethods = getAbstractMethods(subtype);\n\n                        const diagAddendum = new DiagnosticAddendum();\n                        const errorsToDisplay = 2;\n\n                        abstractMethods.forEach((abstractMethod, index) => {\n                            if (index === errorsToDisplay) {\n                                diagAddendum.addMessage(\n                                    Localizer.DiagnosticAddendum.memberIsAbstractMore().format({\n                                        count: abstractMethods.length - errorsToDisplay,\n                                    })\n                                );\n                            } else if (index < errorsToDisplay) {\n                                if (isClass(abstractMethod.classType)) {\n                                    const className = abstractMethod.classType.details.name;\n                                    diagAddendum.addMessage(\n                                        Localizer.DiagnosticAddendum.memberIsAbstract().format({\n                                            type: className,\n                                            name: abstractMethod.symbolName,\n                                        })\n                                    );\n                                }\n                            }\n                        });\n\n                        const fileInfo = getFileInfo(errorNode);\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.typeAbstract().format({ type: subtype.details.name }) +\n                                diagAddendum.getString(),\n                            errorNode\n                        );\n                    }\n\n                    // Assume this is a call to the constructor.\n                    if (!type) {\n                        type = validateConstructorArguments(\n                            errorNode,\n                            argList,\n                            subtype,\n                            skipUnknownArgCheck,\n                            expectedType\n                        ).returnType;\n                    }\n\n                    // If we instantiated a type, transform it into a class.\n                    // This can happen if someone directly instantiates a metaclass\n                    // deriving from type.\n                    if (\n                        type &&\n                        isObject(type) &&\n                        type.classType.details.mro.some(\n                            (baseClass) => isClass(baseClass) && ClassType.isBuiltIn(baseClass, 'type')\n                        )\n                    ) {\n                        // We don't know the name of the new class in this case.\n                        const newClassName = '__class_' + type.classType.details.name;\n                        const newClassType = ClassType.create(\n                            newClassName,\n                            '',\n                            '',\n                            ClassTypeFlags.None,\n                            getTypeSourceId(errorNode),\n                            type.classType,\n                            type.classType\n                        );\n                        newClassType.details.baseClasses.push(getBuiltInType(errorNode, 'object'));\n                        computeMroLinearization(newClassType);\n                        type = newClassType;\n                    }\n                    break;\n                }\n\n                case TypeCategory.Function: {\n                    // The stdlib collections/__init__.pyi stub file defines namedtuple\n                    // as a function rather than a class, so we need to check for it here.\n                    if (subtype.details.builtInName === 'namedtuple') {\n                        addDiagnostic(\n                            getFileInfo(errorNode).diagnosticRuleSet.reportUntypedNamedTuple,\n                            DiagnosticRule.reportUntypedNamedTuple,\n                            Localizer.Diagnostic.namedTupleNoTypes(),\n                            errorNode\n                        );\n                        type = createNamedTupleType(errorNode, argList, false);\n                    } else if (subtype.details.builtInName === 'NewType') {\n                        const callResult = validateCallArguments(\n                            errorNode,\n                            argList,\n                            subtype,\n                            new TypeVarMap(),\n                            skipUnknownArgCheck,\n                            /* inferReturnTypeIfNeeded */ true,\n                            expectedType\n                        );\n\n                        // If the call's arguments were validated, replace the\n                        // type with a new synthesized subclass.\n                        type = callResult.argumentErrors ? callResult.returnType : createNewType(errorNode, argList);\n                    } else {\n                        type = validateCallArguments(\n                            errorNode,\n                            argList,\n                            subtype,\n                            new TypeVarMap(),\n                            skipUnknownArgCheck,\n                            /* inferReturnTypeIfNeeded */ true,\n                            expectedType\n                        ).returnType;\n\n                        if (subtype.details.builtInName === '__import__') {\n                            // For the special __import__ type, we'll override the return type to be \"Any\".\n                            // This is required because we don't know what module was imported, and we don't\n                            // want to fail type checks when accessing members of the resulting module type.\n                            type = AnyType.create();\n                        }\n                    }\n\n                    if (!type) {\n                        type = UnknownType.create();\n                    }\n                    break;\n                }\n\n                case TypeCategory.OverloadedFunction: {\n                    // Determine which of the overloads (if any) match.\n                    const functionType = findOverloadedFunctionType(errorNode, argList, subtype, expectedType);\n\n                    if (functionType) {\n                        if (functionType.details.builtInName === 'cast' && argList.length === 2) {\n                            // Verify that the cast is necessary.\n                            const castToType = getTypeForArgumentExpectingType(argList[0], getFileInfo(errorNode));\n                            const castFromType = getTypeForArgument(argList[1]);\n                            if (isClass(castToType) && isObject(castFromType)) {\n                                if (isTypeSame(castToType, castFromType.classType)) {\n                                    addDiagnostic(\n                                        getFileInfo(errorNode).diagnosticRuleSet.reportUnnecessaryCast,\n                                        DiagnosticRule.reportUnnecessaryCast,\n                                        Localizer.Diagnostic.unnecessaryCast().format({\n                                            type: printType(castFromType),\n                                        }),\n                                        errorNode\n                                    );\n                                }\n                            }\n\n                            type = convertToInstance(castToType);\n                        } else {\n                            type = validateCallArguments(\n                                errorNode,\n                                argList,\n                                functionType,\n                                new TypeVarMap(),\n                                skipUnknownArgCheck,\n                                /* inferReturnTypeIfNeeded */ true,\n                                expectedType\n                            ).returnType;\n                            if (!type) {\n                                type = UnknownType.create();\n                            }\n                        }\n                    } else {\n                        const exprString = ParseTreeUtils.printExpression(errorNode);\n                        const diagAddendum = new DiagnosticAddendum();\n                        const argTypes = argList.map((t) => printType(getTypeForArgument(t)));\n\n                        if (errorNode.nodeType !== ParseNodeType.Call && subtype.overloads[0].details.name) {\n                            // If the expression isn't an explicit call, it is probably an implicit\n                            // call to a magic method. Provide additional information in this case\n                            // to make it clear that a call was being evaluated.\n                            diagAddendum.addMessage(\n                                Localizer.DiagnosticAddendum.overloadCallName().format({\n                                    name: subtype.overloads[0].details.name,\n                                })\n                            );\n                        }\n\n                        diagAddendum.addMessage(\n                            Localizer.DiagnosticAddendum.argumentTypes().format({ types: argTypes.join(', ') })\n                        );\n                        const fileInfo = getFileInfo(errorNode);\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.noOverload().format({ expression: exprString }) +\n                                diagAddendum.getString(),\n                            errorNode\n                        );\n                        type = UnknownType.create();\n                    }\n                    break;\n                }\n\n                case TypeCategory.Object: {\n                    const memberType = getTypeFromObjectMember(\n                        errorNode,\n                        subtype,\n                        '__call__',\n                        { method: 'get' },\n                        new DiagnosticAddendum(),\n                        MemberAccessFlags.SkipForMethodLookup\n                    );\n                    if (memberType) {\n                        type = validateCallArguments(\n                            errorNode,\n                            argList,\n                            memberType,\n                            new TypeVarMap(),\n                            skipUnknownArgCheck,\n                            /* inferReturnTypeIfNeeded */ true,\n                            expectedType\n                        ).returnType;\n                        if (!type) {\n                            type = UnknownType.create();\n                        }\n                    }\n                    break;\n                }\n\n                case TypeCategory.None: {\n                    addDiagnostic(\n                        getFileInfo(errorNode).diagnosticRuleSet.reportOptionalCall,\n                        DiagnosticRule.reportOptionalCall,\n                        Localizer.Diagnostic.noneNotCallable(),\n                        errorNode\n                    );\n                    // Directly return undefined here so we don't report the diagnostic\n                    // a second time below.\n                    return undefined;\n                }\n\n                case TypeCategory.Any:\n                case TypeCategory.Unknown: {\n                    // Mark the arguments accessed.\n                    argList.forEach((arg) => getTypeForArgument(arg));\n                    type = subtype;\n                    break;\n                }\n            }\n\n            if (!type) {\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typeNotCallable().format({\n                        type: printType(subtype),\n                    })\n                );\n            } else {\n                // Should we specialize the class?\n                if ((flags & EvaluatorFlags.DoNotSpecialize) === 0) {\n                    if (isClass(type)) {\n                        type = createSpecializedClassType(type, undefined, flags, errorNode);\n                    }\n                }\n            }\n\n            return type;\n        });\n\n        if (!diag.isEmpty() || isNever(resultType)) {\n            const fileInfo = getFileInfo(errorNode);\n            const callNode = errorNode.nodeType === ParseNodeType.Decorator ? errorNode : errorNode.leftExpression;\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                Localizer.Diagnostic.typeNotCallable().format({\n                    expression: ParseTreeUtils.printExpression(callNode),\n                    type: printType(baseTypeResult.type),\n                }) + diag.getString(),\n                callNode\n            );\n\n            resultType = UnknownType.create();\n\n            // Evaluate the arguments to generate errors and mark\n            // symbols as referenced.\n            argList.forEach((arg) => {\n                if (!arg.type && arg.valueExpression) {\n                    getTypeOfExpression(arg.valueExpression);\n                }\n            });\n        }\n\n        return { type: resultType, node: baseTypeResult.node };\n    }\n\n    function findOverloadedFunctionType(\n        errorNode: ExpressionNode,\n        argList: FunctionArgument[],\n        callType: OverloadedFunctionType,\n        expectedType: Type | undefined,\n        typeVarMap?: TypeVarMap\n    ): FunctionType | undefined {\n        let validOverload: FunctionType | undefined;\n\n        for (const overload of callType.overloads) {\n            // Only iterate through the functions that have the @overload\n            // decorator, not the final function that omits the overload.\n            // This is the intended behavior according to PEP 484.\n            if (FunctionType.isOverloaded(overload)) {\n                // Clone the typeVarMap so we don't modify the original.\n                const effectiveTypeVarMap = typeVarMap ? typeVarMap.clone() : new TypeVarMap();\n\n                // Temporarily disable diagnostic output.\n                useSpeculativeMode(errorNode, () => {\n                    const callResult = validateCallArguments(\n                        errorNode,\n                        argList,\n                        overload,\n                        effectiveTypeVarMap,\n                        /* skipUnknownArgCheck */ true,\n                        /* inferReturnTypeIfNeeded */ false,\n                        expectedType\n                    );\n                    if (!callResult.argumentErrors) {\n                        validOverload = overload;\n                    }\n                });\n\n                if (validOverload) {\n                    break;\n                }\n            }\n        }\n\n        return validOverload;\n    }\n\n    // Tries to match the arguments of a call to the constructor for a class.\n    // If successful, it returns the resulting (specialized) object type that\n    // is allocated by the constructor. If unsuccessful, it records diagnostic\n    // information and returns undefined.\n    function validateConstructorArguments(\n        errorNode: ExpressionNode,\n        argList: FunctionArgument[],\n        type: ClassType,\n        skipUnknownArgCheck: boolean,\n        expectedType: Type | undefined\n    ): CallResult {\n        let validatedTypes = false;\n        let returnType: Type | undefined;\n        let reportedErrors = false;\n\n        // Create a helper function that determines whether we should skip argument\n        // validation for either __init__ or __new__. This is required for certain\n        // synthesized constructor types, namely NamedTuples.\n        const skipConstructorCheck = (type: Type) => {\n            if (type.category !== TypeCategory.Function) {\n                return false;\n            }\n            return FunctionType.isSkipConstructorCheck(type);\n        };\n\n        // Validate __init__\n        // We validate __init__ before __new__ because the former typically has\n        // more specific type annotations, and we want to evaluate the arguments\n        // in the context of these types. The __new__ method often uses generic\n        // vargs and kwargs.\n        const initMethodType = getTypeFromObjectMember(\n            errorNode,\n            ObjectType.create(type),\n            '__init__',\n            { method: 'get' },\n            new DiagnosticAddendum(),\n            MemberAccessFlags.SkipForMethodLookup | MemberAccessFlags.SkipObjectBaseClass\n        );\n\n        if (initMethodType && !skipConstructorCheck(initMethodType)) {\n            // If there is an expected type, analyze the constructor call\n            // for each of the subtypes that comprise the expected type. If\n            // one or more analyzes with no errors, use those results.\n            if (expectedType) {\n                returnType = doForSubtypes(expectedType, (expectedSubType) => {\n                    const typeVarMap = new TypeVarMap();\n                    if (populateTypeVarMapBasedOnExpectedType(type, expectedSubType, typeVarMap)) {\n                        const callResult = validateCallArguments(\n                            errorNode,\n                            argList,\n                            initMethodType,\n                            typeVarMap,\n                            skipUnknownArgCheck,\n                            /* inferReturnTypeIfNeeded */ true,\n                            NoneType.createInstance()\n                        );\n\n                        if (!callResult.argumentErrors) {\n                            // Note that we're specializing the type twice here with the same\n                            // typeVarMap. This handles the case where the expectedType contains\n                            // a type variable that is computed and filled in to the typeVarMap.\n                            const specializedType = specializeType(\n                                specializeType(type, typeVarMap, /* makeConcrete */ false),\n                                typeVarMap,\n                                /* makeConcrete */ false\n                            ) as ClassType;\n                            return applyExpectedSubtypeForConstructor(specializedType, expectedSubType);\n                        }\n                    }\n\n                    return undefined;\n                });\n\n                if (isNever(returnType)) {\n                    returnType = undefined;\n                }\n            }\n\n            if (!returnType) {\n                const typeVarMap = type.typeArguments\n                    ? buildTypeVarMapFromSpecializedClass(type, /* makeConcrete */ false)\n                    : new TypeVarMap();\n\n                const callResult = validateCallArguments(\n                    errorNode,\n                    argList,\n                    initMethodType,\n                    typeVarMap,\n                    skipUnknownArgCheck,\n                    /* inferReturnTypeIfNeeded */ true,\n                    NoneType.createInstance()\n                );\n                if (!callResult.argumentErrors) {\n                    // Note that we're specializing the type twice here with the same\n                    // typeVarMap. This handles the case where the expectedType contains\n                    // a type variable that is computed and filled in to the typeVarMap.\n                    const specializedType = specializeType(\n                        specializeType(type, typeVarMap, /* makeConcrete */ true),\n                        typeVarMap,\n                        /* makeConcrete */ true\n                    ) as ClassType;\n                    returnType = applyExpectedTypeForConstructor(specializedType, expectedType);\n                } else {\n                    reportedErrors = true;\n                }\n            }\n\n            validatedTypes = true;\n            skipUnknownArgCheck = true;\n        }\n\n        // Validate __new__\n        // Don't report errors for __new__ if __init__ already generated errors. They're\n        // probably going to be entirely redundant anyway.\n        if (!reportedErrors) {\n            const constructorMethodInfo = getTypeFromClassMemberName(\n                errorNode,\n                type,\n                '__new__',\n                { method: 'get' },\n                new DiagnosticAddendum(),\n                MemberAccessFlags.SkipForMethodLookup | MemberAccessFlags.SkipObjectBaseClass\n            );\n            if (constructorMethodInfo && !skipConstructorCheck(constructorMethodInfo.type)) {\n                const constructorMethodType = bindFunctionToClassOrObject(\n                    type,\n                    constructorMethodInfo.type,\n                    /* treatAsClassMember */ true,\n                    errorNode\n                );\n                const typeVarMap = new TypeVarMap();\n\n                if (constructorMethodType) {\n                    // Skip the unknown argument check if we've already checked for __init__.\n                    const callResult = validateCallArguments(\n                        errorNode,\n                        argList,\n                        constructorMethodType,\n                        typeVarMap,\n                        skipUnknownArgCheck,\n                        /* inferReturnTypeIfNeeded */ true,\n                        expectedType\n                    );\n\n                    if (callResult.argumentErrors) {\n                        reportedErrors = true;\n                    } else {\n                        let newReturnType = callResult.returnType;\n\n                        // If the constructor returned an object whose type matches the class of\n                        // the original type being constructed, use the return type in case it was\n                        // specialized. If it doesn't match, we'll fall back on the assumption that\n                        // the constructed type is an instance of the class type. We need to do this\n                        // in cases where we're inferring the return type based on a call to\n                        // super().__new__().\n                        if (newReturnType) {\n                            if (\n                                isObject(newReturnType) &&\n                                ClassType.isSameGenericClass(newReturnType.classType, type)\n                            ) {\n                                // If the specialized return type derived from the __init__\n                                // method is \"better\" than the return type provided by the\n                                // __new__ method (where \"better\" means that the type arguments\n                                // are all known), stick with the __init__ result.\n                                if (\n                                    (!isPartlyUnknown(newReturnType) && !requiresSpecialization(newReturnType)) ||\n                                    returnType === undefined\n                                ) {\n                                    // Special-case the 'tuple' type specialization to use\n                                    // the homogenous arbitrary-length form.\n                                    if (\n                                        isObject(newReturnType) &&\n                                        ClassType.isBuiltIn(newReturnType.classType, 'tuple') &&\n                                        newReturnType.classType.typeArguments &&\n                                        newReturnType.classType.typeArguments.length === 1\n                                    ) {\n                                        newReturnType = ObjectType.create(\n                                            cloneTupleForSpecialization(\n                                                newReturnType.classType,\n                                                [\n                                                    newReturnType.classType.typeArguments[0],\n                                                    AnyType.create(/* isEllipsis */ true),\n                                                ],\n                                                /* isTypeArgumentExplicit */ true\n                                            )\n                                        );\n                                    }\n\n                                    returnType = newReturnType;\n                                }\n                            }\n                        }\n                    }\n\n                    if (!returnType) {\n                        returnType = applyExpectedTypeForConstructor(\n                            specializeType(type, typeVarMap, /* makeConcrete */ true) as ClassType,\n                            expectedType\n                        );\n                    }\n                    validatedTypes = true;\n                }\n            }\n        }\n\n        // If we weren't able to validate the args, analyze the expressions\n        // here to mark symbols as referenced and report expression-level errors.\n        if (!validatedTypes) {\n            argList.forEach((arg) => {\n                if (arg.valueExpression) {\n                    getTypeOfExpression(arg.valueExpression);\n                }\n            });\n        }\n\n        if (!validatedTypes && argList.length > 0) {\n            // Suppress this error if the class was instantiated from a custom\n            // metaclass because it's likely that it's a false positive.\n            const isCustomMetaclass =\n                !!type.details.effectiveMetaclass &&\n                isClass(type.details.effectiveMetaclass) &&\n                !ClassType.isBuiltIn(type.details.effectiveMetaclass);\n\n            if (!isCustomMetaclass) {\n                const fileInfo = getFileInfo(errorNode);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.constructorNoArgs().format({ type: type.details.name }),\n                    errorNode\n                );\n            }\n        }\n\n        if (!returnType) {\n            returnType = applyExpectedTypeForConstructor(type, expectedType);\n        }\n\n        return { argumentErrors: reportedErrors, returnType };\n    }\n\n    function applyExpectedSubtypeForConstructor(type: ClassType, expectedSubtype: Type): Type | undefined {\n        const objType = ObjectType.create(type);\n\n        if (canAssignType(expectedSubtype, objType, new DiagnosticAddendum())) {\n            // If the expected type is \"Any\", transform it to an Any.\n            if (expectedSubtype.category === TypeCategory.Any) {\n                return expectedSubtype;\n            }\n\n            const typeVarMap = new TypeVarMap();\n            if (populateTypeVarMapBasedOnExpectedType(type, expectedSubtype, typeVarMap)) {\n                return specializeType(objType, typeVarMap) as ClassType;\n            }\n        }\n\n        return undefined;\n    }\n\n    // Handles the case where a constructor is a generic type and the type\n    // arguments are not specified but can be provided by the expected type.\n    function applyExpectedTypeForConstructor(type: ClassType, expectedType: Type | undefined): Type {\n        if (expectedType) {\n            const specializedType = doForSubtypes(expectedType, (expectedSubtype) => {\n                return applyExpectedSubtypeForConstructor(type, expectedSubtype);\n            });\n\n            if (!isNever(specializedType)) {\n                return specializedType;\n            }\n        }\n\n        return ObjectType.create(type);\n    }\n\n    // In cases where the expected type is a specialized base class of the\n    // source type, we need to determine which type arguments in the derived\n    // class will make it compatible with the specialized base class. This method\n    // performs this reverse mapping of type arguments and populates the type var\n    // map for the target type. If the type is not assignable to the expected type,\n    // it returns false.\n    function populateTypeVarMapBasedOnExpectedType(\n        type: ClassType,\n        expectedType: Type,\n        typeVarMap: TypeVarMap\n    ): boolean {\n        // Try to find a subtype within the expected type that the type can be assigned to.\n        // If found, fill in the typeVarMap with the required specialization type arguments.\n        if (!isObject(expectedType)) {\n            return false;\n        }\n\n        // If the expected type is generic (but not specialized), we can't proceed.\n        const expectedTypeArgs = expectedType.classType.effectiveTypeArguments || expectedType.classType.typeArguments;\n        if (!expectedTypeArgs) {\n            return canAssignType(type, expectedType.classType, new DiagnosticAddendum(), typeVarMap);\n        }\n\n        // If the expected type is the same as the target type (commonly the case),\n        // we can use a faster method.\n        if (ClassType.isSameGenericClass(expectedType.classType, type)) {\n            const sameClassTypeVarMap = buildTypeVarMapFromSpecializedClass(expectedType.classType);\n            sameClassTypeVarMap.getTypeVars().forEach((entry) => {\n                typeVarMap.setTypeVar(entry.typeVar, entry.type, sameClassTypeVarMap.isNarrowable(entry.typeVar));\n            });\n            return true;\n        }\n\n        // Create a generic version of the expected type.\n        const synthExpectedTypeArgs = ClassType.getTypeParameters(expectedType.classType).map((_, index) => {\n            return TypeVarType.createInstance(`__dest${index}`, /* isParamSpec */ false, /* isSynthesized */ true);\n        });\n        const genericExpectedType = ClassType.cloneForSpecialization(\n            expectedType.classType,\n            synthExpectedTypeArgs,\n            /* isTypeArgumentExplicit */ true\n        );\n\n        // For each type param in the target type, create a placeholder type variable.\n        const typeArgs = ClassType.getTypeParameters(type).map((_, index) => {\n            const typeVar = TypeVarType.createInstance(\n                `__source${index}`,\n                /* isParamSpec */ false,\n                /* isSynthesized */ true\n            );\n            typeVar.details.synthesizedIndex = index;\n            return typeVar;\n        });\n\n        const specializedType = ClassType.cloneForSpecialization(type, typeArgs, /* isTypeArgumentExplicit */ true);\n        const syntheticTypeVarMap = new TypeVarMap();\n        if (canAssignType(genericExpectedType, specializedType, new DiagnosticAddendum(), syntheticTypeVarMap)) {\n            synthExpectedTypeArgs.forEach((typeVar, index) => {\n                const synthTypeVar = syntheticTypeVarMap.getTypeVar(typeVar);\n\n                // Is this one of the synthesized type vars we allocated above? If so,\n                // the type arg that corresponds to this type var maps back to the target type.\n                if (\n                    synthTypeVar &&\n                    isTypeVar(synthTypeVar) &&\n                    synthTypeVar.details.isSynthesized &&\n                    synthTypeVar.details.synthesizedIndex !== undefined\n                ) {\n                    const targetTypeVar = ClassType.getTypeParameters(specializedType)[\n                        synthTypeVar.details.synthesizedIndex\n                    ];\n                    if (index < expectedTypeArgs.length) {\n                        typeVarMap.setTypeVar(targetTypeVar, expectedTypeArgs[index], /* isNarrowable */ false);\n                    }\n                }\n            });\n\n            return true;\n        }\n\n        return false;\n    }\n\n    // Validates that the arguments can be assigned to the call's parameter\n    // list, specializes the call based on arg types, and returns the\n    // specialized type of the return value. If it detects an error along\n    // the way, it emits a diagnostic and returns undefined.\n    function validateCallArguments(\n        errorNode: ExpressionNode,\n        argList: FunctionArgument[],\n        callType: Type,\n        typeVarMap: TypeVarMap,\n        skipUnknownArgCheck: boolean,\n        inferReturnTypeIfNeeded = true,\n        expectedType: Type | undefined\n    ): CallResult {\n        let callResult: CallResult = { argumentErrors: false };\n\n        switch (callType.category) {\n            case TypeCategory.Unknown:\n            case TypeCategory.Any: {\n                // Touch all of the args so they're marked accessed.\n                argList.forEach((arg) => getTypeForArgument(arg));\n                callResult.returnType = callType;\n                break;\n            }\n\n            case TypeCategory.Function: {\n                callResult = validateFunctionArguments(\n                    errorNode,\n                    argList,\n                    callType,\n                    typeVarMap,\n                    skipUnknownArgCheck,\n                    inferReturnTypeIfNeeded,\n                    expectedType\n                );\n                break;\n            }\n\n            case TypeCategory.OverloadedFunction: {\n                const overloadedFunctionType = findOverloadedFunctionType(\n                    errorNode,\n                    argList,\n                    callType,\n                    expectedType,\n                    typeVarMap\n                );\n                if (overloadedFunctionType) {\n                    callResult = validateFunctionArguments(\n                        errorNode,\n                        argList,\n                        overloadedFunctionType,\n                        typeVarMap,\n                        skipUnknownArgCheck,\n                        inferReturnTypeIfNeeded,\n                        expectedType\n                    );\n                } else {\n                    const exprString = ParseTreeUtils.printExpression(errorNode);\n                    const diagAddendum = new DiagnosticAddendum();\n                    const argTypes = argList.map((t) => printType(getTypeForArgument(t)));\n\n                    if (errorNode.nodeType !== ParseNodeType.Call && callType.overloads[0].details.name) {\n                        // If the expression isn't an explicit call, it is probably an implicit\n                        // call to a magic method. Provide additional information in this case\n                        // to make it clear that a call was being evaluated.\n                        diagAddendum.addMessage(\n                            Localizer.DiagnosticAddendum.overloadCallName().format({\n                                name: callType.overloads[0].details.name,\n                            })\n                        );\n                    }\n\n                    diagAddendum.addMessage(\n                        Localizer.DiagnosticAddendum.argumentTypes().format({ types: argTypes.join(', ') })\n                    );\n                    const fileInfo = getFileInfo(errorNode);\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.noOverload().format({ expression: exprString }) + diagAddendum.getString(),\n                        errorNode\n                    );\n                    callResult.argumentErrors = true;\n                }\n                break;\n            }\n\n            case TypeCategory.Class: {\n                if (!ClassType.isSpecialBuiltIn(callType)) {\n                    callResult = validateConstructorArguments(\n                        errorNode,\n                        argList,\n                        callType,\n                        skipUnknownArgCheck,\n                        expectedType\n                    );\n                } else {\n                    const fileInfo = getFileInfo(errorNode);\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.typeNotIntantiable().format({ type: callType.details.name }),\n                        errorNode\n                    );\n                    callResult.argumentErrors = true;\n                }\n                break;\n            }\n\n            case TypeCategory.Object: {\n                const memberType = getTypeFromObjectMember(\n                    errorNode,\n                    callType,\n                    '__call__',\n                    { method: 'get' },\n                    new DiagnosticAddendum(),\n                    MemberAccessFlags.SkipForMethodLookup\n                );\n\n                if (memberType && memberType.category === TypeCategory.Function) {\n                    const callMethodType = stripFirstParameter(memberType);\n                    callResult = validateCallArguments(\n                        errorNode,\n                        argList,\n                        callMethodType,\n                        typeVarMap,\n                        skipUnknownArgCheck,\n                        inferReturnTypeIfNeeded,\n                        expectedType\n                    );\n                } else {\n                    const fileInfo = getFileInfo(errorNode);\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.objectNotCallable().format({ type: printType(callType) }),\n                        errorNode\n                    );\n                    callResult.argumentErrors = true;\n                }\n                break;\n            }\n\n            case TypeCategory.Union: {\n                const returnTypes: Type[] = [];\n\n                for (const type of callType.subtypes) {\n                    if (isNone(type)) {\n                        addDiagnostic(\n                            getFileInfo(errorNode).diagnosticRuleSet.reportOptionalCall,\n                            DiagnosticRule.reportOptionalCall,\n                            Localizer.Diagnostic.noneNotCallable(),\n                            errorNode\n                        );\n                    } else {\n                        const subtypeCallResult = validateCallArguments(\n                            errorNode,\n                            argList,\n                            type,\n                            typeVarMap,\n                            skipUnknownArgCheck,\n                            inferReturnTypeIfNeeded,\n                            expectedType\n                        );\n                        if (subtypeCallResult.returnType) {\n                            returnTypes.push(subtypeCallResult.returnType);\n                        }\n                    }\n                }\n\n                if (returnTypes.length > 0) {\n                    callResult.returnType = combineTypes(returnTypes);\n                } else {\n                    callResult.argumentErrors = true;\n                }\n                break;\n            }\n        }\n\n        if (!callResult.returnType) {\n            // Touch all of the args so they're marked accessed.\n            argList.forEach((arg) => getTypeForArgument(arg));\n        }\n\n        return callResult;\n    }\n\n    // Tries to assign the call arguments to the function parameter\n    // list and reports any mismatches in types or counts. Returns the\n    // specialized return type of the call.\n    // This logic is based on PEP 3102: https://www.python.org/dev/peps/pep-3102/\n    function validateFunctionArguments(\n        errorNode: ExpressionNode,\n        argList: FunctionArgument[],\n        type: FunctionType,\n        typeVarMap: TypeVarMap,\n        skipUnknownArgCheck: boolean,\n        inferReturnTypeIfNeeded = true,\n        expectedType: Type | undefined\n    ): CallResult {\n        let argIndex = 0;\n        const typeParams = type.details.parameters;\n\n        if (expectedType && !requiresSpecialization(expectedType) && type.details.declaredReturnType) {\n            // Prepopulate the typeVarMap based on the specialized expected type if the callee has a declared\n            // return type. This will allow us to more closely match the expected type if possible.\n            canAssignType(type.details.declaredReturnType, expectedType, new DiagnosticAddendum(), typeVarMap);\n        }\n\n        // The last parameter might be a var arg dictionary. If so, strip it off.\n        const varArgDictParam = typeParams.find((param) => param.category === ParameterCategory.VarArgDictionary);\n        let reportedArgError = false;\n\n        // Build a map of parameters by name.\n        const paramMap = new Map<string, ParamAssignmentInfo>();\n        typeParams.forEach((param) => {\n            if (param.name) {\n                paramMap.set(param.name, {\n                    argsNeeded: param.category === ParameterCategory.Simple && !param.hasDefault ? 1 : 0,\n                    argsReceived: 0,\n                });\n            }\n        });\n\n        // Is there a bare (nameless) \"*\" parameter? If so, it signifies the end\n        // of the positional parameter list.\n        let positionalParamCount = typeParams.findIndex(\n            (param) => param.category === ParameterCategory.VarArgList && !param.name\n        );\n\n        // Is there a positional-only \"/\" parameter? If so, it separates the\n        // positional-only from positional or keyword parameters.\n        const positionalOnlyIndex = typeParams.findIndex(\n            (param) => param.category === ParameterCategory.Simple && !param.name\n        );\n\n        // Is there a var-arg (named \"*\") parameter? If so, it is the last of\n        // the positional parameters.\n        if (positionalParamCount < 0) {\n            positionalParamCount = typeParams.findIndex((param) => param.category === ParameterCategory.VarArgList);\n            if (positionalParamCount >= 0) {\n                positionalParamCount++;\n            }\n        }\n\n        // Is there a keyword var-arg (\"**\") parameter? If so, it's not included\n        // in the list of positional parameters.\n        if (positionalParamCount < 0) {\n            positionalParamCount = typeParams.findIndex(\n                (param) => param.category === ParameterCategory.VarArgDictionary\n            );\n        }\n\n        // If we didn't see any special cases, then all parameters are positional.\n        if (positionalParamCount < 0) {\n            positionalParamCount = typeParams.length;\n        }\n\n        // Determine how many positional args are being passed before\n        // we see a named arg.\n        let positionalArgCount = argList.findIndex(\n            (arg) => arg.argumentCategory === ArgumentCategory.UnpackedDictionary || arg.name !== undefined\n        );\n        if (positionalArgCount < 0) {\n            positionalArgCount = argList.length;\n        }\n\n        // If there weren't enough positional arguments to populate all of\n        // the positional-only parameters, force the named parameters\n        // into positional-only slots so we can report errors for them.\n        if (positionalOnlyIndex >= 0 && positionalArgCount < positionalOnlyIndex) {\n            const firstParamWithDefault = typeParams.findIndex((param) => param.hasDefault);\n            const positionOnlyWithoutDefaultsCount =\n                firstParamWithDefault >= 0 && firstParamWithDefault < positionalOnlyIndex\n                    ? firstParamWithDefault\n                    : positionalOnlyIndex;\n            positionalArgCount = Math.min(positionOnlyWithoutDefaultsCount, argList.length);\n        }\n\n        const validateArgTypeParams: ValidateArgTypeParams[] = [];\n\n        let activeParam: FunctionParameter | undefined;\n        function trySetActive(arg: FunctionArgument, param: FunctionParameter) {\n            if (arg.active) {\n                activeParam = param;\n            }\n        }\n\n        let foundUnpackedListArg =\n            argList.find((arg) => arg.argumentCategory === ArgumentCategory.UnpackedList) !== undefined;\n\n        // Map the positional args to parameters.\n        let paramIndex = 0;\n        let unpackedArgIndex = 0;\n        while (argIndex < positionalArgCount) {\n            if (paramIndex === positionalOnlyIndex) {\n                paramIndex++;\n                continue;\n            }\n\n            if (argIndex < positionalOnlyIndex && argList[argIndex].name) {\n                const fileInfo = getFileInfo(argList[argIndex].name!);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.argPositional(),\n                    argList[argIndex].name!\n                );\n            }\n\n            if (paramIndex >= positionalParamCount) {\n                if (!foundUnpackedListArg || argList[argIndex].argumentCategory !== ArgumentCategory.UnpackedList) {\n                    const adjustedCount = positionalParamCount;\n                    const fileInfo = getFileInfo(errorNode);\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        adjustedCount === 1\n                            ? Localizer.Diagnostic.argPositionalExpectedOne()\n                            : Localizer.Diagnostic.argPositionalExpectedCount().format({ expected: adjustedCount }),\n                        argList[argIndex].valueExpression || errorNode\n                    );\n                    reportedArgError = true;\n                }\n                break;\n            }\n\n            const paramType = FunctionType.getEffectiveParameterType(type, paramIndex);\n            if (argList[argIndex].argumentCategory === ArgumentCategory.UnpackedList) {\n                if (!argList[argIndex].valueExpression) {\n                    break;\n                }\n\n                const argType = getTypeForArgument(argList[argIndex]);\n                let listElementType: Type;\n                let advanceToNextArg = false;\n\n                // If this is a tuple with specified element types, use those\n                // specified types rather than using the more generic iterator\n                // type which will be a union of all element types.\n                if (\n                    isObject(argType) &&\n                    isTupleClass(argType.classType) &&\n                    argType.classType.typeArguments &&\n                    argType.classType.typeArguments.length > 0 &&\n                    !isEllipsisType(argType.classType.typeArguments[argType.classType.typeArguments.length - 1])\n                ) {\n                    listElementType = argType.classType.typeArguments[unpackedArgIndex];\n\n                    // Determine if there are any more unpacked list arguments after\n                    // this one. If not, we'll clear this flag because this unpacked\n                    // list arg is bounded in length.\n                    foundUnpackedListArg =\n                        argList.find(\n                            (arg, index) => index > argIndex && arg.argumentCategory === ArgumentCategory.UnpackedList\n                        ) !== undefined;\n\n                    unpackedArgIndex++;\n                    if (unpackedArgIndex >= argType.classType.typeArguments.length) {\n                        unpackedArgIndex = 0;\n                        advanceToNextArg = true;\n                    }\n                } else {\n                    listElementType = getTypeFromIterable(\n                        argType,\n                        /* isAsync */ false,\n                        argList[argIndex].valueExpression!,\n                        /* supportGetItem */ false\n                    );\n                }\n\n                const funcArg: FunctionArgument = {\n                    argumentCategory: ArgumentCategory.Simple,\n                    type: listElementType,\n                };\n\n                const paramName = typeParams[paramIndex].name;\n                validateArgTypeParams.push({\n                    paramType,\n                    requiresTypeVarMatching: requiresSpecialization(paramType),\n                    argument: funcArg,\n                    errorNode: argList[argIndex].valueExpression || errorNode,\n                    paramName: typeParams[paramIndex].isNameSynthesized ? undefined : paramName,\n                });\n\n                trySetActive(argList[argIndex], typeParams[paramIndex]);\n\n                // Note that the parameter has received an argument.\n                if (paramName) {\n                    paramMap.get(paramName)!.argsReceived++;\n                }\n\n                if (advanceToNextArg || typeParams[paramIndex].category === ParameterCategory.VarArgList) {\n                    argIndex++;\n                }\n\n                if (typeParams[paramIndex].category !== ParameterCategory.VarArgList) {\n                    paramIndex++;\n                }\n            } else if (typeParams[paramIndex].category === ParameterCategory.VarArgList) {\n                validateArgTypeParams.push({\n                    paramType,\n                    requiresTypeVarMatching: requiresSpecialization(paramType),\n                    argument: argList[argIndex],\n                    errorNode: argList[argIndex].valueExpression || errorNode,\n                    paramName: typeParams[paramIndex].name,\n                });\n                trySetActive(argList[argIndex], typeParams[paramIndex]);\n\n                argIndex++;\n            } else {\n                const paramName = typeParams[paramIndex].name;\n                validateArgTypeParams.push({\n                    paramType,\n                    requiresTypeVarMatching: requiresSpecialization(paramType),\n                    argument: argList[argIndex],\n                    errorNode: argList[argIndex].valueExpression || errorNode,\n                    paramName: typeParams[paramIndex].isNameSynthesized ? undefined : paramName,\n                });\n                trySetActive(argList[argIndex], typeParams[paramIndex]);\n\n                // Note that the parameter has received an argument.\n                if (paramName) {\n                    paramMap.get(paramName)!.argsReceived++;\n                }\n\n                argIndex++;\n                paramIndex++;\n            }\n        }\n\n        if (!reportedArgError) {\n            let foundUnpackedDictionaryArg = false;\n\n            // Now consume any named parameters.\n            while (argIndex < argList.length) {\n                if (argList[argIndex].argumentCategory === ArgumentCategory.UnpackedDictionary) {\n                    // Mark the arg as accessed.\n                    getTypeForArgument(argList[argIndex]);\n                    foundUnpackedDictionaryArg = true;\n                } else {\n                    // Protect against the case where a non-named argument appears after\n                    // a named argument. This will have already been reported as a parse\n                    // error, but we need to protect against it here.\n                    const paramName = argList[argIndex].name;\n                    if (paramName) {\n                        const paramNameValue = paramName.value;\n                        const paramEntry = paramMap.get(paramNameValue);\n                        if (paramEntry) {\n                            if (paramEntry.argsReceived > 0) {\n                                addDiagnostic(\n                                    getFileInfo(paramName).diagnosticRuleSet.reportGeneralTypeIssues,\n                                    DiagnosticRule.reportGeneralTypeIssues,\n                                    Localizer.Diagnostic.paramAlreadyAssigned().format({ name: paramNameValue }),\n                                    paramName\n                                );\n                                reportedArgError = true;\n                            } else {\n                                paramMap.get(paramName.value)!.argsReceived++;\n\n                                const paramInfoIndex = typeParams.findIndex((param) => param.name === paramNameValue);\n                                assert(paramInfoIndex >= 0);\n                                const paramType = FunctionType.getEffectiveParameterType(type, paramInfoIndex);\n\n                                validateArgTypeParams.push({\n                                    paramType,\n                                    requiresTypeVarMatching: requiresSpecialization(paramType),\n                                    argument: argList[argIndex],\n                                    errorNode: argList[argIndex].valueExpression || errorNode,\n                                    paramName: paramNameValue,\n                                });\n                                trySetActive(argList[argIndex], typeParams[paramInfoIndex]);\n                            }\n                        } else if (varArgDictParam) {\n                            validateArgTypeParams.push({\n                                paramType: varArgDictParam.type,\n                                requiresTypeVarMatching: requiresSpecialization(varArgDictParam.type),\n                                argument: argList[argIndex],\n                                errorNode: argList[argIndex].valueExpression || errorNode,\n                                paramName: paramNameValue,\n                            });\n                            trySetActive(argList[argIndex], varArgDictParam);\n                        } else {\n                            addDiagnostic(\n                                getFileInfo(paramName).diagnosticRuleSet.reportGeneralTypeIssues,\n                                DiagnosticRule.reportGeneralTypeIssues,\n                                Localizer.Diagnostic.paramNameMissing().format({ name: paramName.value }),\n                                paramName\n                            );\n                            reportedArgError = true;\n                        }\n                    }\n                }\n\n                argIndex++;\n            }\n\n            // Determine whether there are any parameters that require arguments\n            // but have not yet received them. If we received a dictionary argument\n            // (i.e. an arg starting with a \"**\") or a list argument (i.e. an arg\n            // starting with a \"*\"), we will assume that all parameters are matched.\n            if (\n                !foundUnpackedDictionaryArg &&\n                !foundUnpackedListArg &&\n                !FunctionType.isDefaultParameterCheckDisabled(type)\n            ) {\n                const unassignedParams = [...paramMap.keys()].filter((name) => {\n                    const entry = paramMap.get(name)!;\n                    return entry.argsReceived < entry.argsNeeded;\n                });\n\n                if (unassignedParams.length > 0) {\n                    const missingParamNames = unassignedParams.map((p) => `\"${p}\"`).join(', ');\n                    addDiagnostic(\n                        getFileInfo(errorNode).diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        unassignedParams.length === 1\n                            ? Localizer.Diagnostic.argMissingForParam().format({ name: missingParamNames })\n                            : Localizer.Diagnostic.argMissingForParams().format({ names: missingParamNames }),\n                        errorNode\n                    );\n                    reportedArgError = true;\n                }\n\n                // Add any implicit (default) arguments that are needed for resolving\n                // generic types. For example, if the function is defined as\n                // def foo(v1: _T = 'default')\n                // and _T is a TypeVar, we need to match the TypeVar to the default\n                // value's type if it's not provided by the caller.\n                typeParams.forEach((param) => {\n                    if (param.category === ParameterCategory.Simple && param.name) {\n                        const entry = paramMap.get(param.name)!;\n                        if (entry.argsNeeded === 0 && entry.argsReceived === 0) {\n                            if (param.defaultType && requiresSpecialization(param.type)) {\n                                validateArgTypeParams.push({\n                                    paramType: param.type,\n                                    requiresTypeVarMatching: true,\n                                    argument: {\n                                        argumentCategory: ArgumentCategory.Simple,\n                                        type: param.defaultType,\n                                    },\n                                    errorNode: errorNode,\n                                    paramName: param.isNameSynthesized ? undefined : param.name,\n                                });\n                            }\n                        }\n                    }\n                });\n            }\n        }\n\n        // Special-case a few built-in calls that are often used for\n        // casting or checking for unknown types.\n        if (['cast', 'isinstance', 'issubclass'].some((name) => name === type.details.builtInName)) {\n            skipUnknownArgCheck = true;\n        }\n\n        // Run through all args and validate them against their matched parameter.\n        // We'll do two passes. The first one will match any type arguments. The second\n        // will perform the actual validation. We can skip the first pass if there\n        // are no type vars to match.\n        const typeVarMatchingCount = validateArgTypeParams.filter((arg) => arg.requiresTypeVarMatching).length;\n        if (typeVarMatchingCount > 0) {\n            // In theory, we may need to do up to n passes where n is the number of\n            // arguments that need type var matching. That's because later matches\n            // can provide bidirectional type hints for earlier matches. The best\n            // example of this is the built-in \"map\" method whose first parameter is\n            // a lambda and second parameter indicates what type the lambda should accept.\n            // In practice, we will limit the number of passes to 2 because it can get\n            // very expensive to go beyond this, and we don't see generally see cases\n            // where more than two passes are needed.\n            const passCount = Math.min(typeVarMatchingCount, 2);\n            for (let i = 0; i < passCount; i++) {\n                useSpeculativeMode(errorNode, () => {\n                    validateArgTypeParams.forEach((argParam) => {\n                        if (argParam.requiresTypeVarMatching) {\n                            validateArgType(argParam, typeVarMap, type.details.name, skipUnknownArgCheck);\n                        }\n                    });\n                });\n            }\n\n            // Lock the type var map so it cannot be modified and revalidate the\n            // arguments in a second pass.\n            typeVarMap.lock();\n        }\n\n        validateArgTypeParams.forEach((argParam) => {\n            if (!validateArgType(argParam, typeVarMap, type.details.name, skipUnknownArgCheck)) {\n                reportedArgError = true;\n            }\n        });\n\n        // Run through all the args that were not validated and evaluate their types\n        // to ensure that we haven't missed any (due to arg/param mismatches). This will\n        // ensure that referenced symbols are not reported as unaccessed.\n        if (!isSpeculativeMode(undefined) && !incompleteTypeTracker.isIncompleteTypeMode()) {\n            argList.forEach((arg) => {\n                if (arg.valueExpression) {\n                    if (!validateArgTypeParams.some((validatedArg) => validatedArg.argument === arg)) {\n                        getTypeOfExpression(arg.valueExpression);\n                    }\n                }\n            });\n        }\n\n        // Calculate the return type. If there was an error matching arguments to\n        // parameters, don't bother attempting to infer the return type.\n        const returnType = getFunctionEffectiveReturnType(\n            type,\n            validateArgTypeParams,\n            inferReturnTypeIfNeeded && !reportedArgError\n        );\n        const specializedReturnType = specializeType(returnType, typeVarMap);\n\n        return { argumentErrors: reportedArgError, returnType: specializedReturnType, activeParam };\n    }\n\n    function validateArgType(\n        argParam: ValidateArgTypeParams,\n        typeVarMap: TypeVarMap,\n        functionName: string,\n        skipUnknownCheck: boolean\n    ): boolean {\n        let argType: Type | undefined;\n        let expectedTypeDiag: DiagnosticAddendum | undefined;\n\n        if (argParam.argument.valueExpression) {\n            let expectedType: Type | undefined = specializeType(argParam.paramType, typeVarMap);\n\n            // If the expected type is unknown, don't use an expected type. Instead,\n            // use default rules for evaluating the expression type.\n            if (isUnknown(expectedType)) {\n                expectedType = undefined;\n            }\n\n            const exprType = getTypeOfExpression(argParam.argument.valueExpression, expectedType);\n            argType = exprType.type;\n            expectedTypeDiag = exprType.expectedTypeDiagAddendum;\n\n            if (argParam.argument && argParam.argument.name && !isSpeculativeMode(argParam.errorNode)) {\n                writeTypeCache(argParam.argument.name, expectedType || argType);\n            }\n        } else {\n            argType = getTypeForArgument(argParam.argument);\n        }\n\n        let diag = new DiagnosticAddendum();\n\n        argType = makeTypeVarsConcrete(argType);\n\n        if (!canAssignType(argParam.paramType, argType, diag.createAddendum(), typeVarMap)) {\n            if (!isDiagnosticSuppressedForNode(argParam.errorNode)) {\n                const fileInfo = getFileInfo(argParam.errorNode);\n                const argTypeText = printType(argType);\n                const paramTypeText = printType(argParam.paramType);\n\n                let message: string;\n                if (argParam.paramName) {\n                    if (functionName) {\n                        message = Localizer.Diagnostic.argAssignmentParamFunction().format({\n                            argType: argTypeText,\n                            paramType: paramTypeText,\n                            functionName,\n                            paramName: argParam.paramName,\n                        });\n                    } else {\n                        message = Localizer.Diagnostic.argAssignmentParam().format({\n                            argType: argTypeText,\n                            paramType: paramTypeText,\n                            paramName: argParam.paramName,\n                        });\n                    }\n                } else {\n                    if (functionName) {\n                        message = Localizer.Diagnostic.argAssignmentFunction().format({\n                            argType: argTypeText,\n                            paramType: paramTypeText,\n                            functionName,\n                        });\n                    } else {\n                        message = Localizer.Diagnostic.argAssignment().format({\n                            argType: argTypeText,\n                            paramType: paramTypeText,\n                        });\n                    }\n                }\n\n                // If we have an expected type diagnostic addendum, use that\n                // instead of the local diagnostic addendum because it will\n                // be more informative.\n                if (expectedTypeDiag) {\n                    diag = expectedTypeDiag;\n                }\n\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    message + diag.getString(),\n                    argParam.errorNode\n                );\n            }\n            return false;\n        } else if (!skipUnknownCheck) {\n            const simplifiedType = removeUnbound(argType);\n            const fileInfo = getFileInfo(argParam.errorNode);\n\n            const diagAddendum = new DiagnosticAddendum();\n            if (argParam.paramName) {\n                diagAddendum.addMessage(\n                    (functionName\n                        ? Localizer.DiagnosticAddendum.argParamFunction().format({\n                              paramName: argParam.paramName,\n                              functionName,\n                          })\n                        : Localizer.DiagnosticAddendum.argParam().format({ paramName: argParam.paramName })) +\n                        diagAddendum.getString()\n                );\n            }\n\n            if (isUnknown(simplifiedType)) {\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportUnknownArgumentType,\n                    DiagnosticRule.reportUnknownArgumentType,\n                    Localizer.Diagnostic.argTypeUnknown() + diagAddendum.getString(),\n                    argParam.errorNode\n                );\n            } else if (isPartlyUnknown(simplifiedType, true)) {\n                // Don't report an error if the type is a partially-specialized\n                // class. This comes up frequently in cases where a type is passed\n                // as an argument (e.g. \"defaultdict(list)\").\n\n                // If the parameter type is also partially unknown, don't report\n                // the error because it's likely that the partially-unknown type\n                // arose due to bidirectional type matching.\n                if (!isPartlyUnknown(argParam.paramType) && !isClass(simplifiedType)) {\n                    diagAddendum.addMessage(\n                        Localizer.DiagnosticAddendum.argumentType().format({\n                            type: printType(simplifiedType, /* expandTypeAlias */ true),\n                        })\n                    );\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportUnknownArgumentType,\n                        DiagnosticRule.reportUnknownArgumentType,\n                        Localizer.Diagnostic.argTypePartiallyUnknown() + diagAddendum.getString(),\n                        argParam.errorNode\n                    );\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function createTypeVarType(\n        errorNode: ExpressionNode,\n        argList: FunctionArgument[],\n        isParamSpec: boolean\n    ): Type | undefined {\n        let typeVarName = '';\n        let firstConstraintArg: FunctionArgument | undefined;\n\n        if (isParamSpec) {\n            const fileInfo = getFileInfo(errorNode);\n            if (!fileInfo.isStubFile && fileInfo.executionEnvironment.pythonVersion < PythonVersion.V3_9) {\n                addError(Localizer.Diagnostic.paramSpecIllegal(), errorNode);\n            }\n        }\n\n        if (argList.length === 0) {\n            addError(\n                isParamSpec ? Localizer.Diagnostic.paramSpecFirstArg() : Localizer.Diagnostic.typeVarFirstArg(),\n                errorNode\n            );\n            return undefined;\n        }\n\n        const firstArg = argList[0];\n        if (firstArg.valueExpression && firstArg.valueExpression.nodeType === ParseNodeType.StringList) {\n            typeVarName = firstArg.valueExpression.strings.map((s) => s.value).join('');\n        } else {\n            addError(\n                isParamSpec ? Localizer.Diagnostic.paramSpecFirstArg() : Localizer.Diagnostic.typeVarFirstArg(),\n                firstArg.valueExpression || errorNode\n            );\n        }\n\n        const typeVar = TypeVarType.createInstantiable(typeVarName, isParamSpec);\n\n        // Parse the remaining parameters.\n        for (let i = 1; i < argList.length; i++) {\n            const paramNameNode = argList[i].name;\n            const paramName = paramNameNode ? paramNameNode.value : undefined;\n            const paramNameMap = new Map<string, string>();\n\n            if (paramName) {\n                if (paramNameMap.get(paramName)) {\n                    addError(\n                        Localizer.Diagnostic.duplicateParam().format({ name: paramName }),\n                        argList[i].valueExpression || errorNode\n                    );\n                }\n\n                if (paramName === 'bound' && !isParamSpec) {\n                    if (typeVar.details.constraints.length > 0) {\n                        addError(\n                            Localizer.Diagnostic.typeVarBoundAndConstrained(),\n                            argList[i].valueExpression || errorNode\n                        );\n                    } else {\n                        const argType = getTypeForArgumentExpectingType(\n                            argList[i],\n                            getFileInfo(errorNode),\n                            /* allowMissingTypeArgs */ true\n                        );\n                        if (requiresSpecialization(argType)) {\n                            addError(Localizer.Diagnostic.typeVarGeneric(), argList[i].valueExpression || errorNode);\n                        }\n                        typeVar.details.boundType = convertToInstance(argType);\n                    }\n                } else if (paramName === 'covariant' && !isParamSpec) {\n                    if (argList[i].valueExpression && getBooleanValue(argList[i].valueExpression!)) {\n                        if (typeVar.details.isContravariant) {\n                            addError(Localizer.Diagnostic.typeVarVariance(), argList[i].valueExpression!);\n                        } else {\n                            typeVar.details.isCovariant = true;\n                        }\n                    }\n                } else if (paramName === 'contravariant' && !isParamSpec) {\n                    if (argList[i].valueExpression && getBooleanValue(argList[i].valueExpression!)) {\n                        if (typeVar.details.isContravariant) {\n                            addError(Localizer.Diagnostic.typeVarVariance(), argList[i].valueExpression!);\n                        } else {\n                            typeVar.details.isContravariant = true;\n                        }\n                    }\n                } else {\n                    addError(\n                        isParamSpec\n                            ? Localizer.Diagnostic.paramSpecUnknownParam().format({ name: paramName })\n                            : Localizer.Diagnostic.typeVarUnknownParam().format({ name: paramName }),\n                        argList[i].valueExpression || errorNode\n                    );\n                }\n\n                paramNameMap.set(paramName, paramName);\n            } else if (!isParamSpec) {\n                if (typeVar.details.boundType) {\n                    addError(\n                        Localizer.Diagnostic.typeVarBoundAndConstrained(),\n                        argList[i].valueExpression || errorNode\n                    );\n                } else {\n                    const argType = getTypeForArgumentExpectingType(argList[i], getFileInfo(errorNode));\n                    if (requiresSpecialization(argType)) {\n                        addError(Localizer.Diagnostic.typeVarGeneric(), argList[i].valueExpression || errorNode);\n                    }\n                    TypeVarType.addConstraint(typeVar, convertToInstance(argType));\n                    if (firstConstraintArg === undefined) {\n                        firstConstraintArg = argList[i];\n                    }\n                }\n            } else {\n                addError(Localizer.Diagnostic.paramSpecUnknownArg(), argList[i].valueExpression || errorNode);\n                break;\n            }\n        }\n\n        if (!isParamSpec && typeVar.details.constraints.length === 1 && firstConstraintArg) {\n            addDiagnostic(\n                getFileInfo(errorNode).diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                Localizer.Diagnostic.typeVarSingleConstraint(),\n                firstConstraintArg.valueExpression || errorNode\n            );\n        }\n\n        return typeVar;\n    }\n\n    function getBooleanValue(node: ExpressionNode): boolean {\n        if (node.nodeType === ParseNodeType.Constant) {\n            if (node.constType === KeywordType.False) {\n                return false;\n            } else if (node.constType === KeywordType.True) {\n                return true;\n            }\n        }\n\n        addError(Localizer.Diagnostic.expectedBoolLiteral(), node);\n        return false;\n    }\n\n    function getClassFullName(classNode: ParseNode, moduleName: string, className: string): string {\n        const nameParts: string[] = [className];\n\n        let curNode: ParseNode | undefined = classNode;\n\n        // Walk the parse tree looking for classes.\n        while (curNode) {\n            curNode = ParseTreeUtils.getEnclosingClass(curNode);\n            if (curNode) {\n                nameParts.push(curNode.name.value);\n            }\n        }\n\n        nameParts.push(moduleName);\n\n        return nameParts.reverse().join('.');\n    }\n\n    // Creates a new custom enum class with named values.\n    function createEnumType(\n        errorNode: ExpressionNode,\n        enumClass: ClassType,\n        argList: FunctionArgument[]\n    ): ClassType | undefined {\n        const fileInfo = getFileInfo(errorNode);\n        let className = 'enum';\n        if (argList.length === 0) {\n            return undefined;\n        } else {\n            const nameArg = argList[0];\n            if (\n                nameArg.argumentCategory === ArgumentCategory.Simple &&\n                nameArg.valueExpression &&\n                nameArg.valueExpression.nodeType === ParseNodeType.StringList\n            ) {\n                className = nameArg.valueExpression.strings.map((s) => s.value).join('');\n            } else {\n                return undefined;\n            }\n        }\n\n        const classType = ClassType.create(\n            className,\n            getClassFullName(errorNode, fileInfo.moduleName, className),\n            fileInfo.moduleName,\n            ClassTypeFlags.EnumClass,\n            getTypeSourceId(errorNode),\n            /* declaredMetaclass */ undefined,\n            enumClass.details.effectiveMetaclass\n        );\n        classType.details.baseClasses.push(enumClass);\n        computeMroLinearization(classType);\n\n        const classFields = classType.details.fields;\n        classFields.set(\n            '__class__',\n            Symbol.createWithType(SymbolFlags.ClassMember | SymbolFlags.IgnoredForProtocolMatch, classType)\n        );\n\n        if (argList.length < 2) {\n            return undefined;\n        } else {\n            const entriesArg = argList[1];\n            if (\n                entriesArg.argumentCategory !== ArgumentCategory.Simple ||\n                !entriesArg.valueExpression ||\n                entriesArg.valueExpression.nodeType !== ParseNodeType.StringList\n            ) {\n                // Technically, the Enum constructor supports a bunch of different\n                // ways to specify the items: space-delimited string, a string\n                // iterator, an iterator of name/value tuples, and a dictionary\n                // of name/value pairs. We support only the simple space-delimited\n                // string here. For users who are interested in type checking, we\n                // recommend using the more standard class declaration syntax.\n                return undefined;\n            } else {\n                const entries = entriesArg.valueExpression.strings\n                    .map((s) => s.value)\n                    .join('')\n                    .split(' ');\n                entries.forEach((entryName) => {\n                    entryName = entryName.trim();\n                    if (entryName) {\n                        const entryType = UnknownType.create();\n                        const newSymbol = Symbol.createWithType(SymbolFlags.ClassMember, entryType);\n\n                        // We need to associate the declaration with a parse node.\n                        // In this case it's just part of a string literal value.\n                        // The definition provider won't necessarily take the\n                        // user to the exact spot in the string, but it's close enough.\n                        const stringNode = entriesArg.valueExpression!;\n                        assert(stringNode.nodeType === ParseNodeType.StringList);\n                        const fileInfo = getFileInfo(errorNode);\n                        const declaration: VariableDeclaration = {\n                            type: DeclarationType.Variable,\n                            node: stringNode as StringListNode,\n                            path: fileInfo.filePath,\n                            range: convertOffsetsToRange(\n                                stringNode.start,\n                                TextRange.getEnd(stringNode),\n                                fileInfo.lines\n                            ),\n                            moduleName: fileInfo.moduleName,\n                        };\n                        newSymbol.addDeclaration(declaration);\n                        classFields.set(entryName, newSymbol);\n                    }\n                });\n            }\n        }\n\n        return classType;\n    }\n\n    // Implements the semantics of the NewType call as documented\n    // in the Python specification: The static type checker will treat\n    // the new type as if it were a subclass of the original type.\n    function createNewType(errorNode: ExpressionNode, argList: FunctionArgument[]): ClassType | undefined {\n        const fileInfo = getFileInfo(errorNode);\n        let className = '_';\n        if (argList.length >= 1) {\n            const nameArg = argList[0];\n            if (nameArg.argumentCategory === ArgumentCategory.Simple) {\n                if (nameArg.valueExpression && nameArg.valueExpression.nodeType === ParseNodeType.StringList) {\n                    className = nameArg.valueExpression.strings.map((s) => s.value).join('');\n                }\n            }\n        }\n\n        if (argList.length >= 2) {\n            const baseClass = getTypeForArgumentExpectingType(argList[1], getFileInfo(errorNode));\n\n            if (isClass(baseClass)) {\n                const classFlags =\n                    baseClass.details.flags & ~(ClassTypeFlags.BuiltInClass | ClassTypeFlags.SpecialBuiltIn);\n                const classType = ClassType.create(\n                    className,\n                    getClassFullName(errorNode, fileInfo.moduleName, className),\n                    fileInfo.moduleName,\n                    classFlags,\n                    getTypeSourceId(errorNode),\n                    /* declaredMetaclass */ undefined,\n                    baseClass.details.effectiveMetaclass\n                );\n                classType.details.baseClasses.push(baseClass);\n                computeMroLinearization(classType);\n\n                // Synthesize an __init__ method that accepts only the specified type.\n                const initType = FunctionType.createInstance('__init__', '', FunctionTypeFlags.SynthesizedMethod);\n                FunctionType.addParameter(initType, {\n                    category: ParameterCategory.Simple,\n                    name: 'self',\n                    type: ObjectType.create(classType),\n                    hasDeclaredType: true,\n                });\n                FunctionType.addParameter(initType, {\n                    category: ParameterCategory.Simple,\n                    name: '_x',\n                    type: ObjectType.create(baseClass),\n                    hasDeclaredType: true,\n                });\n                initType.details.declaredReturnType = NoneType.createInstance();\n                classType.details.fields.set('__init__', Symbol.createWithType(SymbolFlags.ClassMember, initType));\n\n                // Synthesize a trivial __new__ method.\n                const newType = FunctionType.createInstance(\n                    '__new__',\n                    '',\n                    FunctionTypeFlags.ConstructorMethod | FunctionTypeFlags.SynthesizedMethod\n                );\n                FunctionType.addParameter(newType, {\n                    category: ParameterCategory.Simple,\n                    name: 'cls',\n                    type: classType,\n                    hasDeclaredType: true,\n                });\n                FunctionType.addDefaultParameters(newType);\n                newType.details.declaredReturnType = ObjectType.create(classType);\n                classType.details.fields.set('__new__', Symbol.createWithType(SymbolFlags.ClassMember, newType));\n                return classType;\n            }\n        }\n\n        return undefined;\n    }\n\n    // Implements the semantics of the multi-parameter variant of the \"type\" call.\n    function createType(errorNode: ExpressionNode, argList: FunctionArgument[]): ClassType | undefined {\n        const fileInfo = getFileInfo(errorNode);\n        const arg0Type = getTypeForArgument(argList[0]);\n        if (!isObject(arg0Type) || !ClassType.isBuiltIn(arg0Type.classType, 'str')) {\n            return undefined;\n        }\n        const className = (arg0Type.classType.literalValue as string) || '_';\n\n        const arg1Type = getTypeForArgument(argList[1]);\n        if (\n            !isObject(arg1Type) ||\n            !isTupleClass(arg1Type.classType) ||\n            arg1Type.classType.typeArguments === undefined\n        ) {\n            return undefined;\n        }\n\n        const classType = ClassType.create(\n            className,\n            getClassFullName(errorNode, fileInfo.moduleName, className),\n            fileInfo.moduleName,\n            ClassTypeFlags.None,\n            getTypeSourceId(errorNode),\n            /* declaredMetaclass */ undefined,\n            arg1Type.classType.details.effectiveMetaclass\n        );\n        arg1Type.classType.typeArguments.forEach((baseClass) => {\n            if (isClass(baseClass) || isAnyOrUnknown(baseClass)) {\n                classType.details.baseClasses.push(baseClass);\n            } else {\n                addExpectedClassDiagnostic(baseClass, argList[1].valueExpression || errorNode);\n            }\n        });\n\n        if (!computeMroLinearization(classType)) {\n            addError(Localizer.Diagnostic.methodOrdering(), errorNode);\n        }\n\n        return classType;\n    }\n\n    // Creates a new custom TypedDict factory class.\n    function createTypedDictType(\n        errorNode: ExpressionNode,\n        typedDictClass: ClassType,\n        argList: FunctionArgument[]\n    ): ClassType {\n        const fileInfo = getFileInfo(errorNode);\n\n        // TypedDict supports two different syntaxes:\n        // Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n        // Point2D = TypedDict('Point2D', x=int, y=int, label=str)\n        let className = 'TypedDict';\n        if (argList.length === 0) {\n            addError(Localizer.Diagnostic.typedDictFirstArg(), errorNode);\n        } else {\n            const nameArg = argList[0];\n            if (\n                nameArg.argumentCategory !== ArgumentCategory.Simple ||\n                !nameArg.valueExpression ||\n                nameArg.valueExpression.nodeType !== ParseNodeType.StringList\n            ) {\n                addError(Localizer.Diagnostic.typedDictFirstArg(), argList[0].valueExpression || errorNode);\n            } else {\n                className = nameArg.valueExpression.strings.map((s) => s.value).join('');\n            }\n        }\n\n        const classType = ClassType.create(\n            className,\n            getClassFullName(errorNode, fileInfo.moduleName, className),\n            fileInfo.moduleName,\n            ClassTypeFlags.TypedDictClass,\n            getTypeSourceId(errorNode),\n            /* declaredMetaclass */ undefined,\n            typedDictClass.details.effectiveMetaclass\n        );\n        classType.details.baseClasses.push(typedDictClass);\n        computeMroLinearization(classType);\n\n        const classFields = classType.details.fields;\n        classFields.set(\n            '__class__',\n            Symbol.createWithType(SymbolFlags.ClassMember | SymbolFlags.IgnoredForProtocolMatch, classType)\n        );\n\n        let usingDictSyntax = false;\n        if (argList.length < 2) {\n            addError(Localizer.Diagnostic.typedDictSecondArgDict(), errorNode);\n        } else {\n            const entriesArg = argList[1];\n            const entryMap = new Map<string, boolean>();\n\n            if (\n                entriesArg.argumentCategory === ArgumentCategory.Simple &&\n                entriesArg.valueExpression &&\n                entriesArg.valueExpression.nodeType === ParseNodeType.Dictionary\n            ) {\n                usingDictSyntax = true;\n                const entryDict = entriesArg.valueExpression;\n\n                entryDict.entries.forEach((entry) => {\n                    if (entry.nodeType !== ParseNodeType.DictionaryKeyEntry) {\n                        addError(Localizer.Diagnostic.typedDictSecondArgDictEntry(), entry);\n                        return;\n                    }\n\n                    if (entry.keyExpression.nodeType !== ParseNodeType.StringList) {\n                        addError(Localizer.Diagnostic.typedDictEntryName(), entry.keyExpression);\n                        return;\n                    }\n\n                    const entryName = entry.keyExpression.strings.map((s) => s.value).join('');\n                    if (!entryName) {\n                        addError(Localizer.Diagnostic.typedDictEmptyName(), entry.keyExpression);\n                        return;\n                    }\n\n                    if (entryMap.has(entryName)) {\n                        addError(Localizer.Diagnostic.typedDictEntryUnique(), entry.keyExpression);\n                        return;\n                    }\n\n                    // Record names in a map to detect duplicates.\n                    entryMap.set(entryName, true);\n\n                    // Cache the annotation type.\n                    getTypeOfAnnotation(entry.valueExpression, /* allowFinal */ true);\n\n                    const newSymbol = new Symbol(SymbolFlags.InstanceMember);\n                    const declaration: VariableDeclaration = {\n                        type: DeclarationType.Variable,\n                        node: entry.keyExpression,\n                        path: fileInfo.filePath,\n                        typeAnnotationNode: entry.valueExpression,\n                        range: convertOffsetsToRange(\n                            entry.keyExpression.start,\n                            TextRange.getEnd(entry.keyExpression),\n                            fileInfo.lines\n                        ),\n                        moduleName: fileInfo.moduleName,\n                    };\n                    newSymbol.addDeclaration(declaration);\n\n                    classFields.set(entryName, newSymbol);\n                });\n            } else if (entriesArg.name) {\n                for (let i = 1; i < argList.length; i++) {\n                    const entry = argList[i];\n                    if (!entry.name || !entry.valueExpression) {\n                        continue;\n                    }\n\n                    if (entryMap.has(entry.name.value)) {\n                        addError(Localizer.Diagnostic.typedDictEntryUnique(), entry.valueExpression);\n                        continue;\n                    }\n\n                    // Record names in a map to detect duplicates.\n                    entryMap.set(entry.name.value, true);\n\n                    // Cache the annotation type.\n                    getTypeOfAnnotation(entry.valueExpression, /* allowFinal */ true);\n\n                    const newSymbol = new Symbol(SymbolFlags.InstanceMember);\n                    const fileInfo = getFileInfo(errorNode);\n                    const declaration: VariableDeclaration = {\n                        type: DeclarationType.Variable,\n                        node: entry.name,\n                        path: fileInfo.filePath,\n                        typeAnnotationNode: entry.valueExpression,\n                        range: convertOffsetsToRange(\n                            entry.name.start,\n                            TextRange.getEnd(entry.valueExpression),\n                            fileInfo.lines\n                        ),\n                        moduleName: fileInfo.moduleName,\n                    };\n                    newSymbol.addDeclaration(declaration);\n\n                    classFields.set(entry.name.value, newSymbol);\n                }\n            } else {\n                addError(Localizer.Diagnostic.typedDictSecondArgDict(), errorNode);\n            }\n        }\n\n        if (usingDictSyntax) {\n            if (argList.length >= 3) {\n                if (\n                    !argList[2].name ||\n                    argList[2].name.value !== 'total' ||\n                    !argList[2].valueExpression ||\n                    argList[2].valueExpression.nodeType !== ParseNodeType.Constant ||\n                    !(\n                        argList[2].valueExpression.constType === KeywordType.False ||\n                        argList[2].valueExpression.constType === KeywordType.True\n                    )\n                ) {\n                    addError(Localizer.Diagnostic.typedDictTotalParam(), argList[2].valueExpression || errorNode);\n                } else if (argList[2].valueExpression.constType === KeywordType.False) {\n                    classType.details.flags |= ClassTypeFlags.CanOmitDictValues;\n                }\n            }\n\n            if (argList.length > 3) {\n                addError(Localizer.Diagnostic.typedDictExtraArgs(), argList[3].valueExpression || errorNode);\n            }\n        }\n\n        synthesizeTypedDictClassMethods(errorNode, classType);\n\n        return classType;\n    }\n\n    // Creates a new custom tuple factory class with named values.\n    // Supports both typed and untyped variants.\n    function createNamedTupleType(\n        errorNode: ExpressionNode,\n        argList: FunctionArgument[],\n        includesTypes: boolean\n    ): ClassType {\n        const fileInfo = getFileInfo(errorNode);\n        let className = 'namedtuple';\n        if (argList.length === 0) {\n            addError(Localizer.Diagnostic.namedTupleFirstArg(), errorNode);\n        } else {\n            const nameArg = argList[0];\n            if (nameArg.argumentCategory !== ArgumentCategory.Simple) {\n                addError(Localizer.Diagnostic.namedTupleFirstArg(), argList[0].valueExpression || errorNode);\n            } else if (nameArg.valueExpression && nameArg.valueExpression.nodeType === ParseNodeType.StringList) {\n                className = nameArg.valueExpression.strings.map((s) => s.value).join('');\n            }\n        }\n\n        const namedTupleType = getTypingType(errorNode, 'NamedTuple') || UnknownType.create();\n\n        const classType = ClassType.create(\n            className,\n            getClassFullName(errorNode, fileInfo.moduleName, className),\n            fileInfo.moduleName,\n            ClassTypeFlags.None,\n            getTypeSourceId(errorNode),\n            /* declaredMetaclass */ undefined,\n            isClass(namedTupleType) ? namedTupleType.details.effectiveMetaclass : UnknownType.create()\n        );\n        classType.details.baseClasses.push(namedTupleType);\n\n        const classFields = classType.details.fields;\n        classFields.set(\n            '__class__',\n            Symbol.createWithType(SymbolFlags.ClassMember | SymbolFlags.IgnoredForProtocolMatch, classType)\n        );\n\n        const constructorType = FunctionType.createInstance(\n            '__new__',\n            '',\n            FunctionTypeFlags.ConstructorMethod | FunctionTypeFlags.SynthesizedMethod\n        );\n        constructorType.details.declaredReturnType = ObjectType.create(classType);\n        if (ParseTreeUtils.isAssignmentToDefaultsFollowingNamedTuple(errorNode)) {\n            constructorType.details.flags |= FunctionTypeFlags.DisableDefaultChecks;\n        }\n        FunctionType.addParameter(constructorType, {\n            category: ParameterCategory.Simple,\n            name: 'cls',\n            type: classType,\n            hasDeclaredType: true,\n        });\n\n        const selfParameter: FunctionParameter = {\n            category: ParameterCategory.Simple,\n            name: 'self',\n            type: ObjectType.create(classType),\n            hasDeclaredType: true,\n        };\n\n        let addGenericGetAttribute = false;\n        const entryTypes: Type[] = [];\n\n        if (argList.length < 2) {\n            addError(Localizer.Diagnostic.namedTupleSecondArg(), errorNode);\n            addGenericGetAttribute = true;\n        } else {\n            const entriesArg = argList[1];\n            if (entriesArg.argumentCategory !== ArgumentCategory.Simple) {\n                addGenericGetAttribute = true;\n            } else {\n                if (\n                    !includesTypes &&\n                    entriesArg.valueExpression &&\n                    entriesArg.valueExpression.nodeType === ParseNodeType.StringList\n                ) {\n                    const entries = entriesArg.valueExpression.strings\n                        .map((s) => s.value)\n                        .join('')\n                        .split(/[,\\s]+/);\n                    entries.forEach((entryName) => {\n                        entryName = entryName.trim();\n                        if (entryName) {\n                            const entryType = UnknownType.create();\n                            const paramInfo: FunctionParameter = {\n                                category: ParameterCategory.Simple,\n                                name: entryName,\n                                type: entryType,\n                                hasDeclaredType: includesTypes,\n                            };\n\n                            FunctionType.addParameter(constructorType, paramInfo);\n                            const newSymbol = Symbol.createWithType(SymbolFlags.InstanceMember, entryType);\n\n                            // We need to associate the declaration with a parse node.\n                            // In this case it's just part of a string literal value.\n                            // The definition provider won't necessarily take the\n                            // user to the exact spot in the string, but it's close enough.\n                            const stringNode = entriesArg.valueExpression!;\n                            const declaration: VariableDeclaration = {\n                                type: DeclarationType.Variable,\n                                node: stringNode as StringListNode,\n                                path: fileInfo.filePath,\n                                range: convertOffsetsToRange(\n                                    stringNode.start,\n                                    TextRange.getEnd(stringNode),\n                                    fileInfo.lines\n                                ),\n                                moduleName: fileInfo.moduleName,\n                            };\n                            newSymbol.addDeclaration(declaration);\n                            classFields.set(entryName, newSymbol);\n                            entryTypes.push(entryType);\n                        }\n                    });\n                } else if (entriesArg.valueExpression && entriesArg.valueExpression.nodeType === ParseNodeType.List) {\n                    const entryList = entriesArg.valueExpression;\n                    const entryMap = new Map<string, string>();\n\n                    entryList.entries.forEach((entry, index) => {\n                        let entryTypeNode: ExpressionNode | undefined;\n                        let entryType: Type | undefined;\n                        let entryNameNode: ExpressionNode | undefined;\n                        let entryName = '';\n\n                        if (includesTypes) {\n                            // Handle the variant that includes name/type tuples.\n                            if (entry.nodeType === ParseNodeType.Tuple && entry.expressions.length === 2) {\n                                entryNameNode = entry.expressions[0];\n                                entryTypeNode = entry.expressions[1];\n                                const entryTypeInfo = getTypeOfExpression(\n                                    entryTypeNode,\n                                    undefined,\n                                    EvaluatorFlags.ExpectingType |\n                                        EvaluatorFlags.EvaluateStringLiteralAsType |\n                                        EvaluatorFlags.ParamSpecDisallowed\n                                );\n                                if (entryTypeInfo) {\n                                    entryType = convertToInstance(entryTypeInfo.type);\n                                }\n                            } else {\n                                addError(Localizer.Diagnostic.namedTupleNameType(), entry);\n                            }\n                        } else {\n                            entryNameNode = entry;\n                            entryType = UnknownType.create();\n                        }\n\n                        if (entryNameNode && entryNameNode.nodeType === ParseNodeType.StringList) {\n                            entryName = entryNameNode.strings.map((s) => s.value).join('');\n                            if (!entryName) {\n                                addError(Localizer.Diagnostic.namedTupleEmptyName(), entryNameNode);\n                            }\n                        } else {\n                            addError(Localizer.Diagnostic.namedTupleNameString(), entryNameNode || entry);\n                        }\n\n                        if (!entryName) {\n                            entryName = `_${index.toString()}`;\n                        }\n\n                        if (entryMap.has(entryName)) {\n                            addError(Localizer.Diagnostic.namedTupleNameUnique(), entryNameNode || entry);\n                        }\n\n                        // Record names in a map to detect duplicates.\n                        entryMap.set(entryName, entryName);\n\n                        if (!entryType) {\n                            entryType = UnknownType.create();\n                        }\n\n                        const paramInfo: FunctionParameter = {\n                            category: ParameterCategory.Simple,\n                            name: entryName,\n                            type: entryType,\n                            hasDeclaredType: includesTypes,\n                        };\n\n                        FunctionType.addParameter(constructorType, paramInfo);\n                        entryTypes.push(entryType);\n\n                        const newSymbol = Symbol.createWithType(SymbolFlags.InstanceMember, entryType);\n                        if (entryNameNode && entryNameNode.nodeType === ParseNodeType.StringList) {\n                            const declaration: VariableDeclaration = {\n                                type: DeclarationType.Variable,\n                                node: entryNameNode,\n                                path: fileInfo.filePath,\n                                typeAnnotationNode: entryTypeNode,\n                                range: convertOffsetsToRange(\n                                    entryNameNode.start,\n                                    TextRange.getEnd(entryNameNode),\n                                    fileInfo.lines\n                                ),\n                                moduleName: fileInfo.moduleName,\n                            };\n                            newSymbol.addDeclaration(declaration);\n                        }\n                        classFields.set(entryName, newSymbol);\n                    });\n                } else {\n                    // A dynamic expression was used, so we can't evaluate\n                    // the named tuple statically.\n                    addGenericGetAttribute = true;\n                }\n            }\n        }\n\n        if (addGenericGetAttribute) {\n            FunctionType.addDefaultParameters(constructorType);\n            entryTypes.push(AnyType.create(/* isEllipsis */ false));\n            entryTypes.push(AnyType.create(/* isEllipsis */ true));\n        }\n\n        // Always use generic parameters for __init__. The __new__ method\n        // will handle property type checking. We may need to disable default\n        // parameter processing for __new__ (see isAssignmentToDefaultsFollowingNamedTuple),\n        // and we don't want to do it for __init__ as well.\n        const initType = FunctionType.createInstance(\n            '__init__',\n            '',\n            FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.SkipConstructorCheck\n        );\n        FunctionType.addParameter(initType, selfParameter);\n        FunctionType.addDefaultParameters(initType);\n        initType.details.declaredReturnType = NoneType.createInstance();\n\n        classFields.set('__new__', Symbol.createWithType(SymbolFlags.ClassMember, constructorType));\n        classFields.set('__init__', Symbol.createWithType(SymbolFlags.ClassMember, initType));\n\n        const keysItemType = FunctionType.createInstance('keys', '', FunctionTypeFlags.SynthesizedMethod);\n        const itemsItemType = FunctionType.createInstance('items', '', FunctionTypeFlags.SynthesizedMethod);\n        keysItemType.details.declaredReturnType = getBuiltInObject(errorNode, 'List', [\n            getBuiltInObject(errorNode, 'str'),\n        ]);\n        itemsItemType.details.declaredReturnType = keysItemType.details.declaredReturnType;\n        classFields.set('keys', Symbol.createWithType(SymbolFlags.InstanceMember, keysItemType));\n        classFields.set('items', Symbol.createWithType(SymbolFlags.InstanceMember, itemsItemType));\n\n        const lenType = FunctionType.createInstance('__len__', '', FunctionTypeFlags.SynthesizedMethod);\n        lenType.details.declaredReturnType = getBuiltInObject(errorNode, 'int');\n        FunctionType.addParameter(lenType, selfParameter);\n        classFields.set('__len__', Symbol.createWithType(SymbolFlags.ClassMember, lenType));\n\n        if (addGenericGetAttribute) {\n            const getAttribType = FunctionType.createInstance(\n                '__getattribute__',\n                '',\n                FunctionTypeFlags.SynthesizedMethod\n            );\n            getAttribType.details.declaredReturnType = AnyType.create();\n            FunctionType.addParameter(getAttribType, selfParameter);\n            FunctionType.addParameter(getAttribType, {\n                category: ParameterCategory.Simple,\n                name: 'name',\n                type: getBuiltInObject(errorNode, 'str'),\n            });\n            classFields.set('__getattribute__', Symbol.createWithType(SymbolFlags.ClassMember, getAttribType));\n        }\n\n        computeMroLinearization(classType);\n\n        updateNamedTupleBaseClass(classType, entryTypes, !addGenericGetAttribute);\n\n        return classType;\n    }\n\n    function getTypeFromConstant(node: ConstantNode, flags: EvaluatorFlags): TypeResult | undefined {\n        let type: Type | undefined;\n\n        if (node.constType === KeywordType.None) {\n            type = (flags & EvaluatorFlags.ExpectingType) !== 0 ? NoneType.createType() : NoneType.createInstance();\n        } else if (\n            node.constType === KeywordType.True ||\n            node.constType === KeywordType.False ||\n            node.constType === KeywordType.Debug\n        ) {\n            type = getBuiltInObject(node, 'bool');\n\n            // For True and False, we can create truthy and falsy\n            // versions of 'bool'.\n            if (type && isObject(type)) {\n                if (node.constType === KeywordType.True) {\n                    type = ObjectType.create(ClassType.cloneWithLiteral(type.classType, true));\n                } else if (node.constType === KeywordType.False) {\n                    type = ObjectType.create(ClassType.cloneWithLiteral(type.classType, false));\n                }\n            }\n        }\n\n        if (!type) {\n            return undefined;\n        }\n\n        return { type, node };\n    }\n\n    function getTypeFromUnaryOperation(node: UnaryOperationNode, expectedType: Type | undefined): TypeResult {\n        let exprType = makeTypeVarsConcrete(getTypeOfExpression(node.expression).type);\n\n        // Map unary operators to magic functions. Note that the bitwise\n        // invert has two magic functions that are aliases of each other.\n        const unaryOperatorMap: { [operator: number]: string } = {\n            [OperatorType.Add]: '__pos__',\n            [OperatorType.Subtract]: '__neg__',\n            [OperatorType.BitwiseInvert]: '__invert__',\n        };\n\n        let type: Type | undefined;\n\n        if (node.operator !== OperatorType.Not) {\n            if (isOptionalType(exprType)) {\n                addDiagnostic(\n                    getFileInfo(node).diagnosticRuleSet.reportOptionalOperand,\n                    DiagnosticRule.reportOptionalOperand,\n                    Localizer.Diagnostic.noneOperator().format({\n                        operator: ParseTreeUtils.printOperator(node.operator),\n                    }),\n                    node.expression\n                );\n                exprType = removeNoneFromUnion(exprType);\n            }\n        }\n\n        // __not__ always returns a boolean.\n        if (node.operator === OperatorType.Not) {\n            type = getBuiltInObject(node, 'bool');\n            if (!type) {\n                type = UnknownType.create();\n            }\n        } else {\n            if (isAnyOrUnknown(exprType)) {\n                type = exprType;\n            } else {\n                const magicMethodName = unaryOperatorMap[node.operator];\n                type = getTypeFromMagicMethodReturn(exprType, [], magicMethodName, node, expectedType);\n            }\n\n            if (!type) {\n                const fileInfo = getFileInfo(node);\n                addDiagnostic(\n                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                    DiagnosticRule.reportGeneralTypeIssues,\n                    Localizer.Diagnostic.typeNotSupportUnaryOperator().format({\n                        operator: ParseTreeUtils.printOperator(node.operator),\n                        type: printType(exprType),\n                    }),\n                    node\n                );\n                type = UnknownType.create();\n            }\n        }\n\n        // Handle the special case where the unary operator is + or -, the operand\n        // is a literal int, and the resulting type is an int. In these cases, we'll\n        // want to interpret the resulting type as a literal.\n        if (node.operator === OperatorType.Add || node.operator === OperatorType.Subtract) {\n            if (\n                isObject(type) &&\n                ClassType.isBuiltIn(type.classType, 'int') &&\n                isObject(exprType) &&\n                ClassType.isBuiltIn(exprType.classType, 'int') &&\n                typeof exprType.classType.literalValue === 'number'\n            ) {\n                const value =\n                    node.operator === OperatorType.Add\n                        ? exprType.classType.literalValue\n                        : -exprType.classType.literalValue;\n                type = ObjectType.create(ClassType.cloneWithLiteral(type.classType, value));\n            }\n        }\n\n        return { type, node };\n    }\n\n    function getTypeFromBinaryOperation(\n        node: BinaryOperationNode,\n        expectedType: Type | undefined,\n        flags: EvaluatorFlags\n    ): TypeResult {\n        const leftExpression = node.leftExpression;\n        let rightExpression = node.rightExpression;\n\n        // If this is a comparison and the left expression is also a comparison,\n        // we need to change the behavior to accommodate python's \"chained\n        // comparisons\" feature.\n        if (comparisonOperatorMap[node.operator]) {\n            if (\n                rightExpression.nodeType === ParseNodeType.BinaryOperation &&\n                !rightExpression.parenthesized &&\n                comparisonOperatorMap[rightExpression.operator]\n            ) {\n                // Evaluate the right expression so it is type checked.\n                getTypeFromBinaryOperation(rightExpression, expectedType, flags);\n\n                // Use the left side of the right expression for comparison purposes.\n                rightExpression = rightExpression.leftExpression;\n            }\n        }\n\n        // For most binary operations, the \"expected type\" is applied to the output\n        // of the magic method for that operation. However, the \"or\" and \"and\" operators\n        // have no magic method, so we apply the expected type directly to both operands.\n        const expectedOperandType =\n            node.operator === OperatorType.Or || node.operator === OperatorType.And ? expectedType : undefined;\n        let leftType = makeTypeVarsConcrete(getTypeOfExpression(leftExpression, expectedOperandType).type);\n        let rightType = makeTypeVarsConcrete(getTypeOfExpression(rightExpression, expectedOperandType).type);\n\n        // Is this a \"|\" operator used in a context where it is supposed to be\n        // interpreted as a union operator?\n        if (\n            node.operator === OperatorType.BitwiseOr &&\n            !customMetaclassSupportsMethod(leftType, '__or__') &&\n            !customMetaclassSupportsMethod(rightType, '__ror__')\n        ) {\n            let adjustedRightType = rightType;\n            if (!isNone(leftType) && isNone(rightType) && TypeBase.isInstance(rightType)) {\n                // Handle the special case where \"None\" is being added to the union\n                // with something else. Even though \"None\" will normally be interpreted\n                // as the None singleton object in contexts where a type annotation isn't\n                // assumed, we'll allow it here.\n                adjustedRightType = NoneType.createType();\n            }\n\n            if (isUnionableType([leftType, adjustedRightType])) {\n                const fileInfo = getFileInfo(node);\n                const unionNotationSupported =\n                    fileInfo.isStubFile || fileInfo.executionEnvironment.pythonVersion >= PythonVersion.V3_10;\n                if (!unionNotationSupported) {\n                    addError(Localizer.Diagnostic.unionSyntaxIllegal(), node, node.operatorToken);\n                }\n\n                return {\n                    type: combineTypes([leftType, adjustedRightType]),\n                    node,\n                };\n            }\n        }\n\n        // Optional checks apply to all operations except for boolean operations.\n        if (booleanOperatorMap[node.operator] === undefined) {\n            if (isOptionalType(leftType)) {\n                // Skip the optional error reporting for == and !=, since\n                // None is a valid operand for these operators.\n                if (node.operator !== OperatorType.Equals && node.operator !== OperatorType.NotEquals) {\n                    addDiagnostic(\n                        getFileInfo(node).diagnosticRuleSet.reportOptionalOperand,\n                        DiagnosticRule.reportOptionalOperand,\n                        Localizer.Diagnostic.noneOperator().format({\n                            operator: ParseTreeUtils.printOperator(node.operator),\n                        }),\n                        node.leftExpression\n                    );\n                }\n                leftType = removeNoneFromUnion(leftType);\n            }\n\n            // None is a valid operand for == and != even if the type stub says otherwise.\n            if (node.operator === OperatorType.Equals || node.operator === OperatorType.NotEquals) {\n                rightType = removeNoneFromUnion(rightType);\n            }\n        }\n\n        return {\n            type: validateBinaryOperation(node.operator, leftType, rightType, node, expectedType),\n            node,\n        };\n    }\n\n    function customMetaclassSupportsMethod(type: Type, methodName: string): boolean {\n        if (!isClass(type)) {\n            return false;\n        }\n\n        const metaclass = type.details.effectiveMetaclass;\n        if (!metaclass || !isClass(metaclass)) {\n            return false;\n        }\n\n        if (ClassType.isBuiltIn(metaclass, 'type')) {\n            return false;\n        }\n\n        const memberInfo = lookUpClassMember(metaclass, methodName);\n        return !!memberInfo;\n    }\n\n    function getTypeFromAugmentedAssignment(node: AugmentedAssignmentNode, expectedType: Type | undefined): Type {\n        const operatorMap: { [operator: number]: [string, OperatorType] } = {\n            [OperatorType.AddEqual]: ['__iadd__', OperatorType.Add],\n            [OperatorType.SubtractEqual]: ['__isub__', OperatorType.Subtract],\n            [OperatorType.MultiplyEqual]: ['__imul__', OperatorType.Multiply],\n            [OperatorType.FloorDivideEqual]: ['__ifloordiv__', OperatorType.FloorDivide],\n            [OperatorType.DivideEqual]: ['__itruediv__', OperatorType.Divide],\n            [OperatorType.ModEqual]: ['__imod__', OperatorType.Mod],\n            [OperatorType.PowerEqual]: ['__ipow__', OperatorType.Power],\n            [OperatorType.MatrixMultiplyEqual]: ['__imatmul__', OperatorType.MatrixMultiply],\n            [OperatorType.BitwiseAndEqual]: ['__iand__', OperatorType.BitwiseAnd],\n            [OperatorType.BitwiseOrEqual]: ['__ior__', OperatorType.BitwiseOr],\n            [OperatorType.BitwiseXorEqual]: ['__ixor__', OperatorType.BitwiseXor],\n            [OperatorType.LeftShiftEqual]: ['__ilshift__', OperatorType.LeftShift],\n            [OperatorType.RightShiftEqual]: ['__irshift__', OperatorType.RightShift],\n        };\n\n        let type: Type | undefined;\n\n        const leftType = makeTypeVarsConcrete(getTypeOfExpression(node.leftExpression).type);\n        const rightType = makeTypeVarsConcrete(getTypeOfExpression(node.rightExpression).type);\n\n        type = doForSubtypes(leftType!, (leftSubtype) => {\n            return doForSubtypes(rightType, (rightSubtype) => {\n                if (isAnyOrUnknown(leftSubtype) || isAnyOrUnknown(rightSubtype)) {\n                    // If either type is \"Unknown\" (versus Any), propagate the Unknown.\n                    if (isUnknown(leftSubtype) || isUnknown(rightSubtype)) {\n                        return UnknownType.create();\n                    } else {\n                        return AnyType.create();\n                    }\n                }\n\n                const magicMethodName = operatorMap[node.operator][0];\n                return getTypeFromMagicMethodReturn(leftSubtype, [rightSubtype], magicMethodName, node, expectedType);\n            });\n        });\n\n        // If the LHS class didn't support the magic method for augmented\n        // assignment, fall back on the normal binary expression evaluator.\n        if (!type || isNever(type)) {\n            const binaryOperator = operatorMap[node.operator][1];\n            type = validateBinaryOperation(binaryOperator, leftType!, rightType, node, expectedType);\n        }\n\n        return type;\n    }\n\n    function validateBinaryOperation(\n        operator: OperatorType,\n        leftType: Type,\n        rightType: Type,\n        errorNode: ExpressionNode,\n        expectedType: Type | undefined\n    ): Type {\n        let type: Type | undefined;\n        const diag = new DiagnosticAddendum();\n\n        if (arithmeticOperatorMap[operator]) {\n            type = doForSubtypes(leftType, (leftSubtype) => {\n                return doForSubtypes(rightType, (rightSubtype) => {\n                    if (isAnyOrUnknown(leftSubtype) || isAnyOrUnknown(rightSubtype)) {\n                        // If either type is \"Unknown\" (versus Any), propagate the Unknown.\n                        if (isUnknown(leftSubtype) || isUnknown(rightSubtype)) {\n                            return UnknownType.create();\n                        } else {\n                            return AnyType.create();\n                        }\n                    }\n\n                    const magicMethodName = arithmeticOperatorMap[operator][0];\n                    let resultType = getTypeFromMagicMethodReturn(\n                        leftSubtype,\n                        [rightSubtype],\n                        magicMethodName,\n                        errorNode,\n                        expectedType\n                    );\n                    if (resultType) {\n                        return resultType;\n                    }\n\n                    const altMagicMethodName = arithmeticOperatorMap[operator][1];\n                    resultType = getTypeFromMagicMethodReturn(\n                        rightSubtype,\n                        [leftSubtype],\n                        altMagicMethodName,\n                        errorNode,\n                        expectedType\n                    );\n                    if (!resultType) {\n                        diag.addMessage(\n                            Localizer.Diagnostic.typeNotSupportBinaryOperator().format({\n                                operator: ParseTreeUtils.printOperator(operator),\n                                leftType: printType(leftSubtype),\n                                rightType: printType(rightSubtype),\n                            })\n                        );\n                    }\n                    return resultType;\n                });\n            });\n        } else if (bitwiseOperatorMap[operator]) {\n            type = doForSubtypes(leftType, (leftSubtype) => {\n                return doForSubtypes(rightType, (rightSubtype) => {\n                    if (isAnyOrUnknown(leftSubtype) || isAnyOrUnknown(rightSubtype)) {\n                        // If either type is \"Unknown\" (versus Any), propagate the Unknown.\n                        if (isUnknown(leftSubtype) || isUnknown(rightSubtype)) {\n                            return UnknownType.create();\n                        } else {\n                            return AnyType.create();\n                        }\n                    }\n\n                    // Handle the general case.\n                    const magicMethodName = bitwiseOperatorMap[operator][0];\n                    let resultType = getTypeFromMagicMethodReturn(\n                        leftSubtype,\n                        [rightSubtype],\n                        magicMethodName,\n                        errorNode,\n                        expectedType\n                    );\n                    if (resultType) {\n                        return resultType;\n                    }\n\n                    const altMagicMethodName = bitwiseOperatorMap[operator][1];\n                    resultType = getTypeFromMagicMethodReturn(\n                        rightSubtype,\n                        [leftSubtype],\n                        altMagicMethodName,\n                        errorNode,\n                        expectedType\n                    );\n                    if (!resultType) {\n                        diag.addMessage(\n                            Localizer.Diagnostic.typeNotSupportBinaryOperator().format({\n                                operator: ParseTreeUtils.printOperator(operator),\n                                leftType: printType(leftSubtype),\n                                rightType: printType(rightSubtype),\n                            })\n                        );\n                    }\n                    return resultType;\n                });\n            });\n        } else if (comparisonOperatorMap[operator]) {\n            type = doForSubtypes(leftType, (leftSubtype) => {\n                return doForSubtypes(rightType, (rightSubtype) => {\n                    if (isAnyOrUnknown(leftSubtype) || isAnyOrUnknown(rightSubtype)) {\n                        // If either type is \"Unknown\" (versus Any), propagate the Unknown.\n                        if (isUnknown(leftSubtype) || isUnknown(rightSubtype)) {\n                            return UnknownType.create();\n                        } else {\n                            return AnyType.create();\n                        }\n                    }\n\n                    const magicMethodName = comparisonOperatorMap[operator][0];\n                    let resultType = getTypeFromMagicMethodReturn(\n                        leftSubtype,\n                        [rightSubtype],\n                        magicMethodName,\n                        errorNode,\n                        expectedType\n                    );\n                    if (resultType) {\n                        return resultType;\n                    }\n\n                    const altMagicMethodName = comparisonOperatorMap[operator][1];\n                    resultType = getTypeFromMagicMethodReturn(\n                        rightSubtype,\n                        [leftSubtype],\n                        altMagicMethodName,\n                        errorNode,\n                        expectedType\n                    );\n\n                    if (!resultType) {\n                        diag.addMessage(\n                            Localizer.Diagnostic.typeNotSupportBinaryOperator().format({\n                                operator: ParseTreeUtils.printOperator(operator),\n                                leftType: printType(leftSubtype),\n                                rightType: printType(rightSubtype),\n                            })\n                        );\n                    }\n                    return resultType;\n                });\n            });\n        } else if (booleanOperatorMap[operator]) {\n            // If it's an AND or OR, we need to handle short-circuiting by\n            // eliminating any known-truthy or known-falsy types.\n            if (operator === OperatorType.And) {\n                leftType = removeTruthinessFromType(leftType);\n\n                // If the LHS evaluates to False, the And expression will\n                // always return the type of the right-hand side.\n                if (isNever(leftType)) {\n                    return rightType;\n                }\n            } else if (operator === OperatorType.Or) {\n                leftType = removeFalsinessFromType(leftType);\n\n                // If the LHS evaluates to True, the Or expression will\n                // always return the type of the right-hand side.\n                if (isNever(leftType)) {\n                    return rightType;\n                }\n            }\n\n            // The \"in\" and \"not in\" operators make use of the __contains__\n            // magic method.\n            if (operator === OperatorType.In || operator === OperatorType.NotIn) {\n                type = doForSubtypes(rightType, (rightSubtype) => {\n                    return doForSubtypes(leftType, (leftSubtype) => {\n                        if (isAnyOrUnknown(rightSubtype) || isAnyOrUnknown(leftSubtype)) {\n                            // If either type is \"Unknown\" (versus Any), propagate the Unknown.\n                            if (isUnknown(leftSubtype) || isUnknown(rightSubtype)) {\n                                return UnknownType.create();\n                            } else {\n                                return AnyType.create();\n                            }\n                        }\n\n                        let returnType = getTypeFromMagicMethodReturn(\n                            rightSubtype,\n                            [leftSubtype],\n                            '__contains__',\n                            errorNode,\n                            /* expectedType */ undefined\n                        );\n\n                        if (!returnType) {\n                            // If __contains__ was not supported, fall back\n                            // on an iterable.\n                            const iteratorType = getTypeFromIterable(\n                                rightSubtype,\n                                /* isAsync */ false,\n                                /* errorNode */ undefined,\n                                /* supportGetItem */ false\n                            );\n\n                            if (iteratorType && canAssignType(iteratorType, leftSubtype, new DiagnosticAddendum())) {\n                                returnType = getBuiltInObject(errorNode, 'bool');\n                            }\n                        }\n\n                        if (!returnType) {\n                            diag.addMessage(\n                                Localizer.Diagnostic.typeNotSupportBinaryOperator().format({\n                                    operator: ParseTreeUtils.printOperator(operator),\n                                    leftType: printType(leftSubtype),\n                                    rightType: printType(rightSubtype),\n                                })\n                            );\n                        }\n\n                        return returnType;\n                    });\n                });\n\n                // Assume that a bool is returned even if the type is unknown\n                if (type && !isNever(type)) {\n                    type = getBuiltInObject(errorNode, 'bool');\n                }\n            } else {\n                type = doForSubtypes(leftType, (leftSubtype) => {\n                    return doForSubtypes(rightType, (rightSubtype) => {\n                        // If the operator is an AND or OR, we need to combine the two types.\n                        if (operator === OperatorType.And || operator === OperatorType.Or) {\n                            return combineTypes([leftSubtype, rightSubtype]);\n                        }\n                        // The other boolean operators always return a bool value.\n                        return getBuiltInObject(errorNode, 'bool');\n                    });\n                });\n            }\n        }\n\n        if (!diag.isEmpty() || !type || isNever(type)) {\n            const fileInfo = getFileInfo(errorNode);\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                Localizer.Diagnostic.typeNotSupportBinaryOperator().format({\n                    operator: ParseTreeUtils.printOperator(operator),\n                    leftType: printType(leftType),\n                    rightType: printType(rightType),\n                }) + diag.getString(),\n                errorNode\n            );\n            type = UnknownType.create();\n        }\n\n        return type;\n    }\n\n    function getTypeFromMagicMethodReturn(\n        objType: Type,\n        args: Type[],\n        magicMethodName: string,\n        errorNode: ExpressionNode,\n        expectedType: Type | undefined\n    ): Type | undefined {\n        let magicMethodSupported = true;\n\n        // Create a helper lambda for object subtypes.\n        const handleObjectSubtype = (subtype: ObjectType, bindToClassType?: ClassType) => {\n            let flags = MemberAccessFlags.SkipForMethodLookup;\n            if (bindToClassType) {\n                flags |= MemberAccessFlags.TreatAsClassMethod;\n            }\n\n            const magicMethodType = getTypeFromObjectMember(\n                errorNode,\n                subtype,\n                magicMethodName,\n                { method: 'get' },\n                new DiagnosticAddendum(),\n                flags,\n                bindToClassType\n            );\n\n            if (magicMethodType) {\n                const functionArgs = args.map((arg) => {\n                    return {\n                        argumentCategory: ArgumentCategory.Simple,\n                        type: arg,\n                    };\n                });\n\n                let callResult: CallResult | undefined;\n\n                suppressDiagnostics(() => {\n                    callResult = validateCallArguments(\n                        errorNode,\n                        functionArgs,\n                        magicMethodType,\n                        new TypeVarMap(),\n                        /* skipUnknownArgCheck */ true,\n                        /* inferFunctionReturnType */ true,\n                        expectedType\n                    );\n                });\n\n                if (callResult!.argumentErrors) {\n                    magicMethodSupported = false;\n                }\n\n                return callResult!.returnType;\n            }\n\n            magicMethodSupported = false;\n            return undefined;\n        };\n\n        const returnType = doForSubtypes(objType, (subtype) => {\n            if (isAnyOrUnknown(subtype)) {\n                return subtype;\n            }\n\n            if (isObject(subtype)) {\n                return handleObjectSubtype(subtype);\n            } else if (isClass(subtype)) {\n                // See if the class has a metaclass that handles the operation.\n                const metaclass = subtype.details.effectiveMetaclass;\n                if (metaclass && isClass(metaclass)) {\n                    return handleObjectSubtype(ObjectType.create(metaclass), subtype);\n                }\n            } else if (isNone(subtype)) {\n                // NoneType derives from 'object', so do the lookup on 'object'\n                // in this case.\n                const obj = getBuiltInObject(errorNode, 'object');\n                if (isObject(obj)) {\n                    return handleObjectSubtype(obj);\n                }\n            }\n\n            magicMethodSupported = false;\n            return undefined;\n        });\n\n        if (!magicMethodSupported) {\n            return undefined;\n        }\n\n        return returnType;\n    }\n\n    function getTypeFromSet(node: SetNode, expectedType: Type | undefined): TypeResult {\n        const entryTypes: Type[] = [];\n        node.entries.forEach((entryNode, index) => {\n            if (index < maxEntriesToUseForInference || expectedType !== undefined) {\n                if (entryNode.nodeType === ParseNodeType.ListComprehension) {\n                    entryTypes.push(getElementTypeFromListComprehension(entryNode));\n                } else {\n                    entryTypes.push(getTypeOfExpression(entryNode).type);\n                }\n            }\n        });\n\n        // If there is an expected type, see if we can match it.\n        if (expectedType && entryTypes.length > 0) {\n            const narrowedExpectedType = doForSubtypes(expectedType, (subtype) => {\n                if (isObject(subtype)) {\n                    const classAlias = ClassType.getAliasClass(subtype.classType);\n                    if (ClassType.isBuiltIn(classAlias, 'set') && subtype.classType.typeArguments) {\n                        const typeArg = subtype.classType.typeArguments[0];\n                        const typeVarMap = new TypeVarMap();\n\n                        for (const entryType of entryTypes) {\n                            if (!canAssignType(typeArg, entryType, new DiagnosticAddendum(), typeVarMap)) {\n                                return undefined;\n                            }\n                        }\n\n                        return specializeType(subtype, typeVarMap);\n                    }\n                }\n\n                return undefined;\n            });\n\n            if (!isNever(narrowedExpectedType)) {\n                return { type: narrowedExpectedType, node };\n            }\n        }\n\n        let inferredEntryType =\n            entryTypes.length > 0 ? combineTypes(entryTypes.map((t) => stripLiteralValue(t))) : AnyType.create();\n\n        // If we weren't provided an expected type, strip away any\n        // literals from the set.\n        if (!expectedType) {\n            inferredEntryType = stripLiteralValue(inferredEntryType);\n        }\n\n        const type = getBuiltInObject(node, 'Set', [inferredEntryType]);\n\n        return { type, node };\n    }\n\n    function getTypeFromDictionary(node: DictionaryNode, expectedType: Type | undefined): TypeResult {\n        // If the expected type is a union, analyze for each of the subtypes\n        // to find one that matches.\n        if (expectedType && expectedType.category === TypeCategory.Union) {\n            let matchingSubtype: Type | undefined;\n\n            for (const subtype of expectedType.subtypes) {\n                const subtypeResult = useSpeculativeMode(node, () => {\n                    return getTypeFromDictionaryExpected(node, subtype, new DiagnosticAddendum());\n                });\n\n                if (subtypeResult) {\n                    matchingSubtype = subtype;\n                    break;\n                }\n            }\n\n            expectedType = matchingSubtype;\n        }\n\n        const expectedDiagAddendum = new DiagnosticAddendum();\n        if (expectedType) {\n            const result = getTypeFromDictionaryExpected(node, expectedType, expectedDiagAddendum);\n            if (result) {\n                return result;\n            }\n        }\n\n        return getTypeFromDictionaryInferred(node, /* forceStrict */ !!expectedType)!;\n    }\n\n    // Attempts to infer the type of a dictionary statement. If an expectedType\n    // is provided, the resulting type must be compatible with the expected type.\n    // If this isn't possible, undefined is returned.\n    function getTypeFromDictionaryExpected(\n        node: DictionaryNode,\n        expectedType: Type,\n        expectedDiagAddendum: DiagnosticAddendum\n    ): TypeResult | undefined {\n        const keyTypes: Type[] = [];\n        const valueTypes: Type[] = [];\n\n        if (!isObject(expectedType)) {\n            return undefined;\n        }\n\n        // Handle TypedDict's as a special case.\n        if (ClassType.isTypedDictClass(expectedType.classType)) {\n            const expectedTypedDictEntries = getTypedDictMembersForClass(expectedType.classType);\n\n            // Infer the key and value types if possible.\n            getKeyAndValueTypesFromDictionary(\n                node,\n                keyTypes,\n                valueTypes,\n                !!expectedType,\n                /* expectedKeyType */ undefined,\n                /* expectedValueType */ undefined,\n                expectedTypedDictEntries\n            );\n\n            if (\n                ClassType.isTypedDictClass(expectedType.classType) &&\n                canAssignToTypedDict(expectedType.classType, keyTypes, valueTypes, expectedDiagAddendum)\n            ) {\n                return {\n                    type: expectedType,\n                    node,\n                };\n            }\n\n            return undefined;\n        }\n\n        const builtInDict = getBuiltInObject(node, 'Dict');\n        if (!isObject(builtInDict)) {\n            return undefined;\n        }\n\n        const dictTypeVarMap = new TypeVarMap();\n        if (!populateTypeVarMapBasedOnExpectedType(builtInDict.classType, expectedType, dictTypeVarMap)) {\n            return undefined;\n        }\n\n        const specializedDict = specializeType(builtInDict.classType, dictTypeVarMap) as ClassType;\n        if (!specializedDict.typeArguments || specializedDict.typeArguments.length !== 2) {\n            return undefined;\n        }\n\n        const expectedKeyType = specializeType(specializedDict.typeArguments[0], /* typeVarMap */ undefined);\n        const expectedValueType = specializeType(specializedDict.typeArguments[1], /* typeVarMap */ undefined);\n\n        // Infer the key and value types if possible.\n        getKeyAndValueTypesFromDictionary(\n            node,\n            keyTypes,\n            valueTypes,\n            !!expectedType,\n            expectedKeyType,\n            expectedValueType\n        );\n\n        const isExpectedTypeDict =\n            isObject(expectedType) && ClassType.isBuiltIn(ClassType.getAliasClass(expectedType.classType), 'dict');\n\n        const specializedKeyType = inferTypeArgFromExpectedType(expectedKeyType, keyTypes, /* isNarrowable */ false);\n        const specializedValueType = inferTypeArgFromExpectedType(\n            expectedValueType,\n            valueTypes,\n            /* isNarrowable */ !isExpectedTypeDict\n        );\n        if (!specializedKeyType || !specializedValueType) {\n            return undefined;\n        }\n\n        const type = getBuiltInObject(node, 'Dict', [specializedKeyType, specializedValueType]);\n        return { type, node };\n    }\n\n    // Attempts to infer the type of a dictionary statement. If an expectedType\n    // is provided, the resulting type must be compatible with the expected type.\n    // If this isn't possible, undefined is returned.\n    function getTypeFromDictionaryInferred(node: DictionaryNode, forceStrict: boolean): TypeResult {\n        let keyType: Type = AnyType.create();\n        let valueType: Type = AnyType.create();\n\n        let keyTypes: Type[] = [];\n        let valueTypes: Type[] = [];\n\n        // Infer the key and value types if possible.\n        getKeyAndValueTypesFromDictionary(node, keyTypes, valueTypes, !forceStrict);\n\n        // Strip any literal values.\n        keyTypes = keyTypes.map((t) => stripLiteralValue(t));\n        valueTypes = valueTypes.map((t) => stripLiteralValue(t));\n\n        keyType = keyTypes.length > 0 ? combineTypes(keyTypes) : AnyType.create();\n\n        // If the value type differs and we're not using \"strict inference mode\",\n        // we need to back off because we can't properly represent the mappings\n        // between different keys and associated value types. If all the values\n        // are the same type, we'll assume that all values in this dictionary should\n        // be the same.\n        if (valueTypes.length > 0) {\n            if (getFileInfo(node).diagnosticRuleSet.strictDictionaryInference || forceStrict) {\n                valueType = combineTypes(valueTypes);\n            } else {\n                valueType = areTypesSame(valueTypes) ? valueTypes[0] : UnknownType.create();\n            }\n        } else {\n            valueType = AnyType.create();\n        }\n\n        const type = getBuiltInObject(node, 'Dict', [keyType, valueType]);\n        return { type, node };\n    }\n\n    function getKeyAndValueTypesFromDictionary(\n        node: DictionaryNode,\n        keyTypes: Type[],\n        valueTypes: Type[],\n        limitEntryCount: boolean,\n        expectedKeyType?: Type,\n        expectedValueType?: Type,\n        expectedTypedDictEntries?: Map<string, TypedDictEntry>\n    ) {\n        // Infer the key and value types if possible.\n        node.entries.forEach((entryNode, index) => {\n            if (limitEntryCount && index >= maxEntriesToUseForInference) {\n                return;\n            }\n\n            let addUnknown = true;\n\n            if (entryNode.nodeType === ParseNodeType.DictionaryKeyEntry) {\n                let keyType = getTypeOfExpression(entryNode.keyExpression, expectedKeyType).type;\n                if (expectedKeyType) {\n                    const adjExpectedKeyType = makeTypeVarsConcrete(expectedKeyType);\n                    if (!isAnyOrUnknown(adjExpectedKeyType)) {\n                        if (canAssignType(adjExpectedKeyType, keyType, new DiagnosticAddendum(), undefined)) {\n                            keyType = adjExpectedKeyType;\n                        }\n                    }\n                }\n                let valueType: Type | undefined;\n\n                if (\n                    expectedTypedDictEntries &&\n                    isObject(keyType) &&\n                    ClassType.isBuiltIn(keyType.classType, 'str') &&\n                    keyType.classType.literalValue &&\n                    expectedTypedDictEntries.has(keyType.classType.literalValue as string)\n                ) {\n                    valueType = getTypeOfExpression(\n                        entryNode.valueExpression,\n                        expectedTypedDictEntries.get(keyType.classType.literalValue as string)!.valueType\n                    ).type;\n                } else {\n                    valueType = getTypeOfExpression(entryNode.valueExpression, expectedValueType).type;\n                }\n\n                keyTypes.push(keyType);\n                valueTypes.push(valueType);\n                addUnknown = false;\n            } else if (entryNode.nodeType === ParseNodeType.DictionaryExpandEntry) {\n                const unexpandedType = getTypeOfExpression(entryNode.expandExpression).type;\n                if (isAnyOrUnknown(unexpandedType)) {\n                    addUnknown = false;\n                } else {\n                    const mappingType = getTypingType(node, 'Mapping');\n                    if (mappingType && isClass(mappingType)) {\n                        const mappingTypeVarMap = new TypeVarMap();\n                        if (\n                            canAssignType(\n                                ObjectType.create(mappingType),\n                                unexpandedType,\n                                new DiagnosticAddendum(),\n                                mappingTypeVarMap\n                            )\n                        ) {\n                            const specializedMapping = specializeType(mappingType, mappingTypeVarMap) as ClassType;\n                            const typeArgs = specializedMapping.typeArguments;\n                            if (typeArgs && typeArgs.length >= 2) {\n                                keyTypes.push(typeArgs[0]);\n                                valueTypes.push(typeArgs[1]);\n                                addUnknown = false;\n                            }\n                        } else {\n                            const fileInfo = getFileInfo(node);\n                            addDiagnostic(\n                                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                                DiagnosticRule.reportGeneralTypeIssues,\n                                Localizer.Diagnostic.dictUnpackIsNotMapping(),\n                                entryNode\n                            );\n                        }\n                    }\n                }\n            } else if (entryNode.nodeType === ParseNodeType.ListComprehension) {\n                const dictEntryType = getElementTypeFromListComprehension(entryNode);\n\n                // The result should be a Tuple\n                if (isObject(dictEntryType)) {\n                    const classType = dictEntryType.classType;\n                    if (isTupleClass(classType)) {\n                        const typeArgs = classType.typeArguments;\n                        if (typeArgs && typeArgs.length === 2) {\n                            keyTypes.push(typeArgs[0]);\n                            valueTypes.push(typeArgs[1]);\n                            addUnknown = false;\n                        }\n                    }\n                }\n            }\n\n            if (addUnknown) {\n                keyTypes.push(UnknownType.create());\n                valueTypes.push(UnknownType.create());\n            }\n        });\n    }\n\n    function getTypeFromList(node: ListNode, expectedType: Type | undefined): TypeResult {\n        // If the expected type is a union, recursively call for each of the subtypes\n        // to find one that matches.\n        let effectiveExpectedType = expectedType;\n\n        if (expectedType && expectedType.category === TypeCategory.Union) {\n            let matchingSubtype: Type | undefined;\n\n            for (const subtype of expectedType.subtypes) {\n                const subtypeResult = useSpeculativeMode(node, () => {\n                    return getTypeFromListExpected(node, subtype);\n                });\n\n                if (subtypeResult) {\n                    matchingSubtype = subtype;\n                    break;\n                }\n            }\n\n            effectiveExpectedType = matchingSubtype;\n        }\n\n        if (effectiveExpectedType) {\n            const result = getTypeFromListExpected(node, effectiveExpectedType);\n            if (result) {\n                return result;\n            }\n        }\n\n        return getTypeFromListInferred(node, /* forceStrict */ !!expectedType);\n    }\n\n    // Attempts to determine the type of a list statement based on an expected type.\n    // Returns undefined if that type cannot be honored.\n    function getTypeFromListExpected(node: ListNode, expectedType: Type): TypeResult | undefined {\n        expectedType = transformPossibleRecursiveTypeAlias(expectedType);\n        if (!isObject(expectedType)) {\n            return undefined;\n        }\n\n        const builtInList = getBuiltInObject(node, 'List');\n        if (!isObject(builtInList)) {\n            return undefined;\n        }\n\n        const listTypeVarMap = new TypeVarMap();\n        if (!populateTypeVarMapBasedOnExpectedType(builtInList.classType, expectedType, listTypeVarMap)) {\n            return undefined;\n        }\n\n        const specializedList = specializeType(builtInList.classType, listTypeVarMap) as ClassType;\n        if (!specializedList.typeArguments || specializedList.typeArguments.length !== 1) {\n            return undefined;\n        }\n\n        const expectedEntryType = specializeType(specializedList.typeArguments[0], /* typeVarMap */ undefined);\n\n        const entryTypes: Type[] = [];\n        node.entries.forEach((entry, index) => {\n            if (index < maxEntriesToUseForInference || expectedType !== undefined) {\n                if (entry.nodeType === ParseNodeType.ListComprehension) {\n                    entryTypes.push(getElementTypeFromListComprehension(entry, expectedEntryType));\n                } else {\n                    entryTypes.push(getTypeOfExpression(entry, expectedEntryType).type);\n                }\n            }\n        });\n\n        const isExpectedTypeList =\n            isObject(expectedType) && ClassType.isBuiltIn(ClassType.getAliasClass(expectedType.classType), 'list');\n        const specializedEntryType = inferTypeArgFromExpectedType(\n            expectedEntryType,\n            entryTypes,\n            /* isNarrowable */ !isExpectedTypeList\n        );\n        if (!specializedEntryType) {\n            return undefined;\n        }\n\n        const type = getBuiltInObject(node, 'List', [specializedEntryType]);\n        return { type, node };\n    }\n\n    // Attempts to infer the type of a list statement with no \"expected type\". If\n    // forceStrict is true, it always includes all of the list subtypes.\n    function getTypeFromListInferred(node: ListNode, forceStrict: boolean): TypeResult {\n        let entryTypes: Type[] = [];\n        node.entries.forEach((entry, index) => {\n            if (index < maxEntriesToUseForInference) {\n                if (entry.nodeType === ParseNodeType.ListComprehension) {\n                    entryTypes.push(getElementTypeFromListComprehension(entry));\n                } else {\n                    entryTypes.push(getTypeOfExpression(entry).type);\n                }\n            }\n        });\n\n        entryTypes = entryTypes.map((t) => stripLiteralValue(t));\n\n        let inferredEntryType: Type = AnyType.create();\n        if (entryTypes.length > 0) {\n            // If there was an expected type or we're using strict list inference,\n            // combine the types into a union.\n            if (getFileInfo(node).diagnosticRuleSet.strictListInference || forceStrict) {\n                inferredEntryType = combineTypes(entryTypes, maxSubtypesForInferredType);\n            } else {\n                // Is the list homogeneous? If so, use stricter rules. Otherwise relax the rules.\n                inferredEntryType = areTypesSame(entryTypes) ? entryTypes[0] : UnknownType.create();\n            }\n        }\n\n        const type = getBuiltInObject(node, 'List', [inferredEntryType]);\n        return { type, node };\n    }\n\n    function inferTypeArgFromExpectedType(\n        expectedType: Type,\n        entryTypes: Type[],\n        isNarrowable: boolean\n    ): Type | undefined {\n        const diagDummy = new DiagnosticAddendum();\n\n        // Synthesize a temporary bound type var. We will attempt to assign all list\n        // entries to this type var, possibly narrowing the type in the process.\n        const targetTypeVar = TypeVarType.createInstance(\n            '__typeArg',\n            /* isParamSpec */ false,\n            /* isSynthesized */ true\n        );\n        targetTypeVar.details.boundType = expectedType;\n\n        let typeVarMap = new TypeVarMap();\n        typeVarMap.setTypeVar(targetTypeVar, expectedType, isNarrowable);\n\n        // First, try to assign entries with their literal values stripped.\n        // The only time we don't want to strip them is if the expected\n        // type explicitly includes literals.\n        if (\n            entryTypes.some(\n                (entryType) => !canAssignType(targetTypeVar, stripLiteralValue(entryType), diagDummy, typeVarMap)\n            )\n        ) {\n            // Allocate a fresh typeVarMap before we try again with literals not stripped.\n            typeVarMap = new TypeVarMap();\n            typeVarMap.setTypeVar(targetTypeVar, expectedType, isNarrowable);\n            if (entryTypes.some((entryType) => !canAssignType(targetTypeVar!, entryType, diagDummy, typeVarMap))) {\n                return undefined;\n            }\n        }\n\n        // We need to call specializeType twice here. The first time specializes the\n        // temporary \"__typeArg\" type variable. The second time specializes any type\n        // variables that it referred to.\n        return specializeType(specializeType(targetTypeVar, typeVarMap), typeVarMap);\n    }\n\n    function getTypeFromTernary(node: TernaryNode, flags: EvaluatorFlags, expectedType: Type | undefined): TypeResult {\n        getTypeOfExpression(node.testExpression);\n\n        const ifType = getTypeOfExpression(node.ifExpression, expectedType, flags);\n        const elseType = getTypeOfExpression(node.elseExpression, expectedType, flags);\n\n        const type = combineTypes([ifType.type, elseType.type]);\n        return { type, node };\n    }\n\n    function getTypeFromYield(node: YieldNode): TypeResult {\n        let sentType: Type | undefined;\n\n        const enclosingFunction = ParseTreeUtils.getEnclosingFunction(node);\n        if (enclosingFunction) {\n            const functionTypeInfo = getTypeOfFunction(enclosingFunction);\n            if (functionTypeInfo) {\n                sentType = getDeclaredGeneratorSendType(functionTypeInfo.functionType);\n            }\n        }\n\n        if (!sentType) {\n            sentType = UnknownType.create();\n        }\n\n        if (node.expression) {\n            getTypeOfExpression(node.expression, sentType);\n        }\n\n        return { type: sentType, node };\n    }\n\n    function getTypeFromYieldFrom(node: YieldFromNode): TypeResult {\n        let sentType: Type | undefined;\n\n        const enclosingFunction = ParseTreeUtils.getEnclosingFunction(node);\n        if (enclosingFunction) {\n            const functionTypeInfo = getTypeOfFunction(enclosingFunction);\n            if (functionTypeInfo) {\n                sentType = getDeclaredGeneratorSendType(functionTypeInfo.functionType);\n            }\n        }\n\n        if (!sentType) {\n            sentType = UnknownType.create();\n        }\n\n        if (node.expression) {\n            getTypeOfExpression(node.expression, sentType);\n        }\n\n        return { type: sentType, node };\n    }\n\n    function getTypeFromLambda(node: LambdaNode, expectedType: Type | undefined): TypeResult {\n        const functionType = FunctionType.createInstance('', '', FunctionTypeFlags.None);\n\n        // Pre-cache the newly-created function type.\n        writeTypeCache(node, functionType);\n\n        let expectedFunctionType: FunctionType | undefined;\n        if (expectedType) {\n            if (expectedType.category === TypeCategory.Function) {\n                expectedFunctionType = expectedType;\n            } else if (expectedType.category === TypeCategory.Union) {\n                // It's not clear what we should do with a union type. For now,\n                // simply use the first function in the union.\n                expectedFunctionType = expectedType.subtypes.find(\n                    (t) => t.category === TypeCategory.Function\n                ) as FunctionType;\n            }\n        }\n\n        node.parameters.forEach((param, index) => {\n            let paramType: Type = UnknownType.create();\n            if (expectedFunctionType && index < expectedFunctionType.details.parameters.length) {\n                paramType = FunctionType.getEffectiveParameterType(expectedFunctionType, index);\n                paramType = specializeType(paramType, /* typeVarMap */ undefined, /* makeConcrete */ true);\n            }\n\n            if (param.name) {\n                writeTypeCache(param.name, paramType);\n            }\n\n            if (param.defaultValue) {\n                // Evaluate the default value if it's present.\n                getTypeOfExpression(param.defaultValue, undefined, EvaluatorFlags.ConvertEllipsisToAny);\n            }\n\n            const functionParam: FunctionParameter = {\n                category: param.category,\n                name: param.name ? param.name.value : undefined,\n                hasDefault: !!param.defaultValue,\n                hasDeclaredType: true,\n                type: paramType,\n            };\n            FunctionType.addParameter(functionType, functionParam);\n        });\n\n        const expectedReturnType = expectedFunctionType\n            ? getFunctionEffectiveReturnType(expectedFunctionType)\n            : undefined;\n        functionType.inferredReturnType = getTypeOfExpression(node.expression, expectedReturnType).type;\n\n        return { type: functionType, node };\n    }\n\n    function getTypeFromListComprehension(node: ListComprehensionNode): TypeResult {\n        const elementType = getElementTypeFromListComprehension(node);\n\n        const isAsync = node.comprehensions.some((comp) => {\n            return comp.nodeType === ParseNodeType.ListComprehensionFor && comp.isAsync;\n        });\n        let type: Type = UnknownType.create();\n        const builtInIteratorType = getTypingType(node, isAsync ? 'AsyncGenerator' : 'Generator');\n\n        if (builtInIteratorType && isClass(builtInIteratorType)) {\n            type = ObjectType.create(\n                ClassType.cloneForSpecialization(\n                    builtInIteratorType,\n                    isAsync\n                        ? [elementType, NoneType.createInstance()]\n                        : [elementType, NoneType.createInstance(), NoneType.createInstance()],\n                    /* isTypeArgumentExplicit */ true\n                )\n            );\n        }\n\n        return { type, node };\n    }\n\n    function reportPossibleUnknownAssignment(\n        diagLevel: DiagnosticLevel,\n        rule: string,\n        target: NameNode,\n        type: Type,\n        errorNode: ExpressionNode\n    ) {\n        // Don't bother if the feature is disabled.\n        if (diagLevel === 'none') {\n            return;\n        }\n\n        const nameValue = target.value;\n\n        // Sometimes variables contain an \"unbound\" type if they're\n        // assigned only within conditional statements. Remove this\n        // to avoid confusion.\n        const simplifiedType = removeUnbound(type);\n\n        if (isUnknown(simplifiedType)) {\n            addDiagnostic(diagLevel, rule, Localizer.Diagnostic.typeUnknown().format({ name: nameValue }), errorNode);\n        } else if (isPartlyUnknown(simplifiedType)) {\n            const diagAddendum = new DiagnosticAddendum();\n            diagAddendum.addMessage(\n                Localizer.DiagnosticAddendum.typeOfSymbol().format({\n                    name: nameValue,\n                    type: printType(simplifiedType, /* expandTypeAlias */ true),\n                })\n            );\n            addDiagnostic(\n                diagLevel,\n                rule,\n                Localizer.Diagnostic.typePartiallyUnknown().format({ name: nameValue }) + diagAddendum.getString(),\n                errorNode\n            );\n        }\n    }\n\n    // Returns the type of one entry returned by the list comprehension,\n    // as opposed to the entire list.\n    function getElementTypeFromListComprehension(node: ListComprehensionNode, expectedElementType?: Type): Type {\n        // \"Execute\" the list comprehensions from start to finish.\n        for (const comprehension of node.comprehensions) {\n            if (comprehension.nodeType === ParseNodeType.ListComprehensionFor) {\n                const iterableType = stripLiteralValue(getTypeOfExpression(comprehension.iterableExpression).type);\n                const itemType = getTypeFromIterable(\n                    iterableType,\n                    !!comprehension.isAsync,\n                    comprehension.iterableExpression,\n                    /* supportGetItem */ false\n                );\n\n                const targetExpr = comprehension.targetExpression;\n                assignTypeToExpression(targetExpr, itemType, comprehension.iterableExpression);\n            } else {\n                assert(comprehension.nodeType === ParseNodeType.ListComprehensionIf);\n\n                // Evaluate the test expression to validate it and mark symbols\n                // as referenced. Don't bother doing this if we're in speculative\n                // mode because it doesn't affect the element type.\n                if (!isSpeculativeMode(comprehension.testExpression)) {\n                    getTypeOfExpression(comprehension.testExpression);\n                }\n            }\n        }\n\n        let type: Type = UnknownType.create();\n        if (node.expression.nodeType === ParseNodeType.DictionaryKeyEntry) {\n            // Create a tuple with the key/value types.\n            const keyType = stripLiteralValue(getTypeOfExpression(node.expression.keyExpression).type);\n            const valueType = stripLiteralValue(getTypeOfExpression(node.expression.valueExpression).type);\n\n            type = getBuiltInType(node, 'Tuple');\n            if (isClass(type)) {\n                type = convertToInstance(\n                    cloneTupleForSpecialization(type, [keyType, valueType], /* isTypeArgumentExplicit */ true)\n                );\n            }\n        } else if (node.expression.nodeType === ParseNodeType.DictionaryExpandEntry) {\n            // The parser should have reported an error in this case because it's not allowed.\n            getTypeOfExpression(node.expression.expandExpression);\n        } else if (isExpressionNode(node)) {\n            type = stripLiteralValue(getTypeOfExpression(node.expression as ExpressionNode, expectedElementType).type);\n        }\n\n        return type;\n    }\n\n    function getTypeFromSlice(node: SliceNode): TypeResult {\n        // Evaluate the expressions to report errors and record symbol references.\n        if (node.startValue) {\n            getTypeOfExpression(node.startValue);\n        }\n\n        if (node.endValue) {\n            getTypeOfExpression(node.endValue);\n        }\n\n        if (node.stepValue) {\n            getTypeOfExpression(node.stepValue);\n        }\n\n        return { type: getBuiltInObject(node, 'slice'), node };\n    }\n\n    // Converts the type parameters for a Callable type. It should\n    // have zero to two parameters. The first parameter, if present, should be\n    // either an ellipsis or a list of parameter types. The second parameter, if\n    // present, should specify the return type.\n    function createCallableType(typeArgs?: TypeResult[]): FunctionType {\n        const functionType = FunctionType.createInstantiable('', '', FunctionTypeFlags.None);\n        functionType.details.declaredReturnType = AnyType.create();\n\n        if (typeArgs && typeArgs.length > 0) {\n            if (typeArgs[0].typeList) {\n                typeArgs[0].typeList.forEach((entry, index) => {\n                    if (isEllipsisType(entry.type)) {\n                        addError(Localizer.Diagnostic.ellipsisContext(), entry.node);\n                    } else if (isModule(entry.type)) {\n                        addError(Localizer.Diagnostic.moduleContext(), entry.node);\n                    } else if (isParamSpecType(entry.type)) {\n                        addError(Localizer.Diagnostic.paramSpecContext(), entry.node);\n                    }\n\n                    FunctionType.addParameter(functionType, {\n                        category: ParameterCategory.Simple,\n                        name: `p${index.toString()}`,\n                        isNameSynthesized: true,\n                        type: convertToInstance(entry.type),\n                        hasDeclaredType: true,\n                    });\n                });\n            } else if (isEllipsisType(typeArgs[0].type)) {\n                FunctionType.addDefaultParameters(functionType);\n                functionType.details.flags |= FunctionTypeFlags.SkipParamCompatibilityCheck;\n            } else if (isParamSpecType(typeArgs[0].type)) {\n                functionType.details.paramSpec = typeArgs[0].type as TypeVarType;\n            } else {\n                if (isClass(typeArgs[0].type) && ClassType.isBuiltIn(typeArgs[0].type, 'Concatenate')) {\n                    const concatTypeArgs = typeArgs[0].type.typeArguments;\n                    if (concatTypeArgs && concatTypeArgs.length > 0) {\n                        concatTypeArgs.forEach((typeArg, index) => {\n                            if (index === concatTypeArgs.length - 1) {\n                                if (isParamSpecType(typeArg)) {\n                                    functionType.details.paramSpec = typeArg as TypeVarType;\n                                }\n                            } else {\n                                FunctionType.addParameter(functionType, {\n                                    category: ParameterCategory.Simple,\n                                    name: `__p${index}`,\n                                    isNameSynthesized: true,\n                                    hasDeclaredType: true,\n                                    type: typeArg,\n                                });\n                            }\n                        });\n                    }\n                } else {\n                    addError(Localizer.Diagnostic.callableFirstArg(), typeArgs[0].node);\n                }\n            }\n        } else {\n            FunctionType.addDefaultParameters(functionType, /* useUnknown */ true);\n            functionType.details.flags |= FunctionTypeFlags.SkipParamCompatibilityCheck;\n        }\n\n        if (typeArgs && typeArgs.length > 1) {\n            if (isEllipsisType(typeArgs[1].type)) {\n                addError(Localizer.Diagnostic.ellipsisContext(), typeArgs[1].node);\n            } else if (isModule(typeArgs[1].type)) {\n                addError(Localizer.Diagnostic.moduleContext(), typeArgs[1].node);\n            } else if (isParamSpecType(typeArgs[1].type)) {\n                addError(Localizer.Diagnostic.paramSpecContext(), typeArgs[1].node);\n            }\n            functionType.details.declaredReturnType = convertToInstance(typeArgs[1].type);\n        } else {\n            functionType.details.declaredReturnType = UnknownType.create();\n        }\n\n        if (typeArgs && typeArgs.length > 2) {\n            addError(Localizer.Diagnostic.callableExtraArgs(), typeArgs[2].node);\n        }\n\n        return functionType;\n    }\n\n    // Creates an Optional[X, Y, Z] type.\n    function createOptionalType(errorNode: ParseNode, typeArgs?: TypeResult[]): Type {\n        if (!typeArgs || typeArgs.length !== 1) {\n            addError(Localizer.Diagnostic.optionalExtraArgs(), errorNode);\n            return UnknownType.create();\n        }\n\n        if (isEllipsisType(typeArgs[0].type)) {\n            addError(Localizer.Diagnostic.ellipsisContext(), typeArgs[0].node);\n        } else if (isModule(typeArgs[0].type)) {\n            addError(Localizer.Diagnostic.moduleContext(), typeArgs[0].node);\n        } else if (isParamSpecType(typeArgs[0].type)) {\n            addError(Localizer.Diagnostic.paramSpecContext(), typeArgs[0].node);\n        } else if (!TypeBase.isInstantiable(typeArgs[0].type)) {\n            addExpectedClassDiagnostic(typeArgs[0].type, typeArgs[0].node);\n        }\n\n        return combineTypes([typeArgs[0].type, NoneType.createType()]);\n    }\n\n    function cloneBuiltinObjectWithLiteral(node: ParseNode, builtInName: string, value: LiteralValue): Type {\n        const type = getBuiltInObject(node, builtInName);\n        if (isObject(type)) {\n            return ObjectType.create(ClassType.cloneWithLiteral(type.classType, value));\n        }\n\n        return UnknownType.create();\n    }\n\n    function cloneBuiltinClassWithLiteral(node: ParseNode, builtInName: string, value: LiteralValue): Type {\n        const type = getBuiltInObject(node, builtInName);\n        if (isObject(type)) {\n            return ClassType.cloneWithLiteral(type.classType, value);\n        }\n\n        return UnknownType.create();\n    }\n\n    // Creates a type that represents a Literal. This is not an officially-supported\n    // feature of Python but is instead a mypy extension described here:\n    // https://mypy.readthedocs.io/en/latest/literal_types.html\n    function createLiteralType(node: IndexNode, flags: EvaluatorFlags): Type {\n        if (node.items.items.length === 0) {\n            addError(Localizer.Diagnostic.literalEmptyArgs(), node.baseExpression);\n            return UnknownType.create();\n        }\n\n        // As per the specification, we support None, int, bool, str, bytes literals\n        // plus enum values.\n        const literalTypes: Type[] = [];\n\n        for (const item of node.items.items) {\n            let type: Type | undefined;\n\n            if (item.nodeType === ParseNodeType.StringList) {\n                const isBytes = (item.strings[0].token.flags & StringTokenFlags.Bytes) !== 0;\n                const value = item.strings.map((s) => s.value).join('');\n                if (isBytes) {\n                    type = cloneBuiltinClassWithLiteral(node, 'bytes', value);\n                } else {\n                    type = cloneBuiltinClassWithLiteral(node, 'str', value);\n                }\n            } else if (item.nodeType === ParseNodeType.Number) {\n                if (!item.isImaginary && item.isInteger) {\n                    type = cloneBuiltinClassWithLiteral(node, 'int', item.value);\n                }\n            } else if (item.nodeType === ParseNodeType.Constant) {\n                if (item.constType === KeywordType.True) {\n                    type = cloneBuiltinClassWithLiteral(node, 'bool', true);\n                } else if (item.constType === KeywordType.False) {\n                    type = cloneBuiltinClassWithLiteral(node, 'bool', false);\n                } else if (item.constType === KeywordType.None) {\n                    type = NoneType.createType();\n                }\n            } else if (item.nodeType === ParseNodeType.UnaryOperation && item.operator === OperatorType.Subtract) {\n                if (item.expression.nodeType === ParseNodeType.Number) {\n                    if (!item.expression.isImaginary && item.expression.isInteger) {\n                        type = cloneBuiltinClassWithLiteral(node, 'int', -item.expression.value);\n                    }\n                }\n            }\n\n            if (!type) {\n                const exprType = getTypeOfExpression(item);\n\n                // Is this an enum type?\n                if (\n                    isObject(exprType.type) &&\n                    ClassType.isEnumClass(exprType.type.classType) &&\n                    exprType.type.classType.literalValue !== undefined\n                ) {\n                    type = exprType.type.classType;\n                } else {\n                    // Is this a type alias to an existing literal type?\n                    let isLiteralType = true;\n\n                    doForSubtypes(exprType.type, (subtype) => {\n                        if (!isClass(subtype) || subtype.literalValue === undefined) {\n                            isLiteralType = false;\n                        }\n                        return undefined;\n                    });\n\n                    if (isLiteralType) {\n                        type = exprType.type;\n                    }\n                }\n            }\n\n            if (!type) {\n                if ((flags & EvaluatorFlags.ExpectingType) !== 0) {\n                    addError(Localizer.Diagnostic.literalUnsupportedType(), item);\n                    type = UnknownType.create();\n                } else {\n                    // This is a Literal[x] used in a context where we were not\n                    // expecting a type. Treat it as an \"Any\" type.\n                    type = AnyType.create();\n                }\n            }\n\n            literalTypes.push(type);\n        }\n\n        return combineTypes(literalTypes);\n    }\n\n    // Creates a ClassVar type.\n    function createClassVarType(errorNode: ParseNode, typeArgs: TypeResult[] | undefined): Type {\n        if (!typeArgs || typeArgs.length === 0) {\n            addError(Localizer.Diagnostic.classVarFirstArgMissing(), errorNode);\n            return UnknownType.create();\n        } else if (typeArgs.length > 1) {\n            addError(Localizer.Diagnostic.classVarTooManyArgs(), typeArgs[1].node);\n            return UnknownType.create();\n        }\n\n        let type = typeArgs[0].type;\n\n        if (requiresSpecialization(type)) {\n            // A ClassVar should not allow generic types, but the typeshed\n            // stubs use this in a few cases. For now, just specialize\n            // it in a general way.\n            type = specializeType(type, /* typeVarMap */ undefined);\n        }\n\n        return type;\n    }\n\n    // Creates a \"TypeGuard\" type.\n    function createTypeGuardType(errorNode: ParseNode, classType: ClassType, typeArgs: TypeResult[] | undefined): Type {\n        // The first time that we use the TypeGuard special type, it won't have\n        // a type parameter. We'll synthesize one here.\n        if (classType.details.typeParameters.length === 0) {\n            classType.details.typeParameters.push(\n                TypeVarType.createInstance('_T', /* isParamSpec */ false, /* isSynthesized */ true)\n            );\n        }\n\n        if (!typeArgs || typeArgs.length !== 1) {\n            addError(Localizer.Diagnostic.typeGuardArgCount(), errorNode);\n        }\n\n        let typeArg: Type;\n        if (typeArgs && typeArgs.length > 0) {\n            typeArg = typeArgs[0].type;\n\n            if (isEllipsisType(typeArg)) {\n                addError(Localizer.Diagnostic.ellipsisContext(), typeArgs[0].node);\n            } else if (isModule(typeArg)) {\n                addError(Localizer.Diagnostic.moduleContext(), typeArgs[0].node);\n            } else if (isParamSpecType(typeArg)) {\n                addError(Localizer.Diagnostic.paramSpecContext(), typeArgs[0].node);\n            }\n        } else {\n            typeArg = UnknownType.create();\n        }\n\n        return ClassType.cloneForSpecialization(classType, [convertToInstance(typeArg)], !!typeArgs);\n    }\n\n    // Creates a \"Final\" type.\n    function createFinalType(errorNode: ParseNode, typeArgs: TypeResult[] | undefined, flags: EvaluatorFlags): Type {\n        if (flags & EvaluatorFlags.FinalDisallowed) {\n            addError(Localizer.Diagnostic.finalContext(), errorNode);\n            return AnyType.create();\n        }\n\n        if (!typeArgs || typeArgs.length === 0) {\n            return AnyType.create();\n        }\n\n        if (typeArgs.length > 1) {\n            addError(Localizer.Diagnostic.finalTooManyArgs(), errorNode);\n        }\n\n        return typeArgs[0].type;\n    }\n\n    function createConcatenateType(\n        errorNode: ParseNode,\n        classType: ClassType,\n        typeArgs: TypeResult[] | undefined\n    ): Type {\n        if (!typeArgs || typeArgs.length === 0) {\n            addError(Localizer.Diagnostic.concatenateTypeArgsMissing(), errorNode);\n        } else {\n            typeArgs.forEach((typeArg, index) => {\n                if (index === typeArgs.length - 1) {\n                    if (!isParamSpecType(typeArg.type)) {\n                        addError(Localizer.Diagnostic.concatenateParamSpecMissing(), typeArg.node);\n                    }\n                } else {\n                    if (isParamSpecType(typeArg.type)) {\n                        addError(Localizer.Diagnostic.paramSpecContext(), typeArg.node);\n                    }\n                }\n            });\n        }\n\n        return createSpecialType(classType, typeArgs, /* paramLimit */ undefined, /* allowParamSpec */ true);\n    }\n\n    function createAnnotatedType(errorNode: ParseNode, typeArgs: TypeResult[] | undefined): Type {\n        if (!typeArgs || typeArgs.length < 1) {\n            addError(Localizer.Diagnostic.annotatedTypeArgMissing(), errorNode);\n            return AnyType.create();\n        }\n\n        if (isEllipsisType(typeArgs[0].type)) {\n            addError(Localizer.Diagnostic.ellipsisContext(), typeArgs[0].node);\n        } else if (isModule(typeArgs[0].type)) {\n            addError(Localizer.Diagnostic.moduleContext(), typeArgs[0].node);\n        } else if (isParamSpecType(typeArgs[0].type)) {\n            addError(Localizer.Diagnostic.paramSpecContext(), typeArgs[1].node);\n        }\n\n        return typeArgs[0].type;\n    }\n\n    // Creates one of several \"special\" types that are defined in typing.pyi\n    // but not declared in their entirety. This includes the likes of \"Tuple\",\n    // \"Dict\", etc.\n    function createSpecialType(\n        classType: ClassType,\n        typeArgs: TypeResult[] | undefined,\n        paramLimit?: number,\n        allowParamSpec = false\n    ): Type {\n        const isTuple = isTupleClass(classType);\n\n        if (typeArgs) {\n            // Verify that we didn't receive any inappropriate ellipses or modules.\n            typeArgs.forEach((typeArg, index) => {\n                if (isEllipsisType(typeArg.type)) {\n                    if (!isTuple) {\n                        addError(Localizer.Diagnostic.ellipsisContext(), typeArg.node);\n                    } else if (typeArgs!.length !== 2 || index !== 1) {\n                        addError(Localizer.Diagnostic.ellipsisSecondArg(), typeArg.node);\n                    }\n                } else if (isModule(typeArg.type)) {\n                    addError(Localizer.Diagnostic.moduleContext(), typeArg.node);\n                } else if (!allowParamSpec && isParamSpecType(typeArg.type)) {\n                    addError(Localizer.Diagnostic.paramSpecContext(), typeArg.node);\n                }\n            });\n\n            // Handle Tuple[()] as a special case, as defined in PEP 483.\n            if (isTuple) {\n                if (\n                    typeArgs.length === 1 &&\n                    isObject(typeArgs[0].type) &&\n                    isTupleClass(typeArgs[0].type.classType) &&\n                    typeArgs[0].type.classType.typeArguments &&\n                    typeArgs[0].type.classType.typeArguments.length === 0\n                ) {\n                    typeArgs = [];\n                }\n            }\n        }\n\n        let typeArgTypes = typeArgs ? typeArgs.map((t) => convertToInstance(t.type)) : [];\n\n        // Make sure the argument list count is correct.\n        if (paramLimit !== undefined) {\n            if (typeArgs && typeArgTypes.length > paramLimit) {\n                addError(\n                    Localizer.Diagnostic.typeArgsTooMany().format({\n                        name: classType.details.name,\n                        expected: paramLimit,\n                        received: typeArgTypes.length,\n                    }),\n                    typeArgs[paramLimit].node\n                );\n                typeArgTypes = typeArgTypes.slice(0, paramLimit);\n            } else if (typeArgTypes.length < paramLimit) {\n                // Fill up the remainder of the slots with unknown types.\n                while (typeArgTypes.length < paramLimit) {\n                    typeArgTypes.push(UnknownType.create());\n                }\n            }\n        }\n\n        // Handle tuple as a special case.\n        if (isTuple) {\n            // If no type args are provided and it's a tuple, default to [Any, ...].\n            if (!typeArgs) {\n                typeArgTypes.push(AnyType.create(false));\n                typeArgTypes.push(AnyType.create(true));\n            }\n\n            return cloneTupleForSpecialization(classType, typeArgTypes, typeArgs !== undefined);\n        }\n\n        return ClassType.cloneForSpecialization(classType, typeArgTypes, typeArgs !== undefined);\n    }\n\n    // Unpacks the index expression for a \"Union[X, Y, Z]\" type annotation.\n    function createUnionType(typeArgs?: TypeResult[]): Type {\n        const types: Type[] = [];\n\n        if (typeArgs) {\n            for (const typeArg of typeArgs) {\n                types.push(typeArg.type);\n\n                // Verify that we didn't receive any inappropriate ellipses.\n                if (isEllipsisType(typeArg.type)) {\n                    addError(Localizer.Diagnostic.ellipsisContext(), typeArg.node);\n                } else if (isModule(typeArg.type)) {\n                    addError(Localizer.Diagnostic.moduleContext(), typeArg.node);\n                } else if (isParamSpecType(typeArg.type)) {\n                    addError(Localizer.Diagnostic.paramSpecContext(), typeArg.node);\n                } else if (!TypeBase.isInstantiable(typeArg.type)) {\n                    addExpectedClassDiagnostic(typeArg.type, typeArg.node);\n                }\n            }\n        }\n\n        if (types.length > 0) {\n            return combineTypes(types);\n        }\n\n        return NeverType.create();\n    }\n\n    // Creates a type that represents \"Generic[T1, T2, ...]\", used in the\n    // definition of a generic class.\n    function createGenericType(errorNode: ParseNode, classType: ClassType, typeArgs?: TypeResult[]): Type {\n        // Make sure there's at least one type arg.\n        if (!typeArgs || typeArgs.length === 0) {\n            addError(Localizer.Diagnostic.genericTypeArgMissing(), errorNode);\n        }\n\n        // Make sure that all of the type args are typeVars and are unique.\n        const uniqueTypeVars: TypeVarType[] = [];\n        if (typeArgs) {\n            typeArgs.forEach((typeArg) => {\n                if (!isTypeVar(typeArg.type)) {\n                    addError(Localizer.Diagnostic.genericTypeArgTypeVar(), typeArg.node);\n                } else {\n                    for (const typeVar of uniqueTypeVars) {\n                        if (typeVar === typeArg.type) {\n                            addError(Localizer.Diagnostic.genericTypeArgUnique(), typeArg.node);\n                            break;\n                        }\n                    }\n\n                    uniqueTypeVars.push(typeArg.type);\n                }\n            });\n        }\n\n        return createSpecialType(classType, typeArgs, /* paramLimit */ undefined, /* allowParamSpec */ true);\n    }\n\n    function transformTypeForPossibleEnumClass(node: NameNode, typeOfExpr: Type): Type {\n        // If the node is within a class that derives from the metaclass\n        // \"EnumMeta\", we need to treat assignments differently.\n        const enclosingClassNode = ParseTreeUtils.getEnclosingClass(node, true);\n        if (enclosingClassNode) {\n            const enumClassInfo = getTypeOfClass(enclosingClassNode);\n\n            if (enumClassInfo && ClassType.isEnumClass(enumClassInfo.classType)) {\n                if (ClassType.isBuiltIn(enumClassInfo.classType)) {\n                    // Handle several built-in classes specially. We don't\n                    // want to interpret their class variables as enumerations.\n                    const className = enumClassInfo.classType.details.name;\n                    const builtInEnumClasses = ['Enum', 'IntEnum', 'Flag', 'IntFlag'];\n                    if (builtInEnumClasses.find((c) => c === className)) {\n                        return typeOfExpr;\n                    }\n                }\n\n                return ObjectType.create(\n                    ClassType.cloneWithLiteral(\n                        enumClassInfo.classType,\n                        new EnumLiteral(enumClassInfo.classType.details.name, node.value)\n                    )\n                );\n            }\n        }\n\n        return typeOfExpr;\n    }\n\n    function transformTypeForTypeAlias(type: Type, name: NameNode): Type {\n        if (!TypeBase.isInstantiable(type)) {\n            return type;\n        }\n\n        // If this is a recursive type alias that hasn't yet been fully resolved\n        // (i.e. there is no boundType associated with it), don't apply the transform.\n        if (isTypeAliasPlaceholder(type)) {\n            return type;\n        }\n\n        // Determine if there are any generic type parameters associated\n        // with this type alias.\n        let typeParameters: TypeVarType[] = [];\n\n        // Skip this for a simple TypeVar (one that's not part of a union).\n        if (!isTypeVar(type)) {\n            doForSubtypes(type, (subtype) => {\n                addTypeVarsToListIfUnique(typeParameters, getTypeVarArgumentsRecursive(subtype));\n                return undefined;\n            });\n        }\n\n        // Don't include any synthesized type variables.\n        typeParameters = typeParameters.filter((typeVar) => !typeVar.details.isSynthesized);\n\n        return TypeBase.cloneForTypeAlias(type, name.value, typeParameters.length > 0 ? typeParameters : undefined);\n    }\n\n    function createSpecialBuiltInClass(node: ParseNode, assignedName: string, aliasMapEntry: AliasMapEntry): ClassType {\n        const fileInfo = getFileInfo(node);\n        const specialClassType = ClassType.create(\n            assignedName,\n            getClassFullName(node, fileInfo.moduleName, assignedName),\n            fileInfo.moduleName,\n            ClassTypeFlags.BuiltInClass | ClassTypeFlags.SpecialBuiltIn,\n            /* typeSourceId */ undefined,\n            /* declaredMetaclass */ undefined,\n            /* effectiveMetaclass */ undefined\n        );\n\n        if (fileInfo.isTypingExtensionsStubFile) {\n            specialClassType.details.flags |= ClassTypeFlags.TypingExtensionClass;\n        }\n\n        const baseClassName = aliasMapEntry.alias ? aliasMapEntry.alias : 'object';\n\n        let aliasClass: Type | undefined;\n        if (aliasMapEntry.module === 'builtins') {\n            aliasClass = getBuiltInType(node, baseClassName);\n        } else if (aliasMapEntry.module === 'collections') {\n            // The typing.pyi file imports collections.\n            if (fileInfo.collectionsModulePath) {\n                const lookupResult = importLookup(fileInfo.collectionsModulePath);\n                if (lookupResult) {\n                    const symbol = lookupResult.symbolTable.get(baseClassName);\n                    if (symbol) {\n                        aliasClass = getEffectiveTypeOfSymbol(symbol);\n                    }\n                }\n            }\n        } else if (aliasMapEntry.module === 'self') {\n            const symbolWithScope = lookUpSymbolRecursive(node, baseClassName, /* honorCodeFlow */ false);\n            if (symbolWithScope) {\n                aliasClass = getEffectiveTypeOfSymbol(symbolWithScope.symbol);\n            }\n        }\n\n        if (aliasClass && isClass(aliasClass)) {\n            specialClassType.details.baseClasses.push(aliasClass);\n\n            if (aliasMapEntry.alias) {\n                specialClassType.details.aliasClass = aliasClass;\n            }\n            specialClassType.details.effectiveMetaclass = aliasClass.details.effectiveMetaclass;\n        } else {\n            specialClassType.details.baseClasses.push(UnknownType.create());\n            specialClassType.details.effectiveMetaclass = UnknownType.create();\n        }\n\n        computeMroLinearization(specialClassType);\n\n        return specialClassType;\n    }\n\n    // Handles some special-case type annotations that are found\n    // within the typings.pyi file.\n    function handleTypingStubTypeAnnotation(node: ExpressionNode): ClassType | undefined {\n        if (!node.parent || node.parent.nodeType !== ParseNodeType.TypeAnnotation) {\n            return undefined;\n        }\n\n        if (node.parent.valueExpression.nodeType !== ParseNodeType.Name) {\n            return undefined;\n        }\n\n        const nameNode = node.parent.valueExpression;\n        const assignedName = nameNode.value;\n\n        const specialTypes: { [name: string]: AliasMapEntry } = {\n            Tuple: { alias: 'tuple', module: 'builtins' },\n            Generic: { alias: '', module: 'builtins' },\n            Protocol: { alias: '', module: 'builtins' },\n            Callable: { alias: '', module: 'builtins' },\n            Type: { alias: 'type', module: 'builtins' },\n            ClassVar: { alias: '', module: 'builtins' },\n            Final: { alias: '', module: 'builtins' },\n            Literal: { alias: '', module: 'builtins' },\n            TypedDict: { alias: '_TypedDict', module: 'self' },\n            Union: { alias: '', module: 'builtins' },\n            Optional: { alias: '', module: 'builtins' },\n            Annotated: { alias: '', module: 'builtins' },\n            TypeAlias: { alias: '', module: 'builtins' },\n            Concatenate: { alias: '', module: 'builtins' },\n            TypeGuard: { alias: 'bool', module: 'builtins' },\n        };\n\n        const aliasMapEntry = specialTypes[assignedName];\n        if (aliasMapEntry) {\n            return createSpecialBuiltInClass(node, assignedName, aliasMapEntry);\n        }\n\n        return undefined;\n    }\n\n    // Handles some special-case assignment statements that are found\n    // within the typings.pyi file.\n    function handleTypingStubAssignment(node: AssignmentNode): Type | undefined {\n        if (node.leftExpression.nodeType !== ParseNodeType.Name) {\n            return undefined;\n        }\n\n        const nameNode = node.leftExpression;\n        const assignedName = nameNode.value;\n\n        if (assignedName === 'Any') {\n            return AnyType.create();\n        }\n\n        const specialTypes: { [name: string]: AliasMapEntry } = {\n            overload: { alias: '', module: 'builtins' },\n            TypeVar: { alias: '', module: 'builtins' },\n            _promote: { alias: '', module: 'builtins' },\n            no_type_check: { alias: '', module: 'builtins' },\n            NoReturn: { alias: '', module: 'builtins' },\n            Counter: { alias: 'Counter', module: 'collections' },\n            List: { alias: 'list', module: 'builtins' },\n            Dict: { alias: 'dict', module: 'builtins' },\n            DefaultDict: { alias: 'defaultdict', module: 'collections' },\n            Set: { alias: 'set', module: 'builtins' },\n            FrozenSet: { alias: 'frozenset', module: 'builtins' },\n            Deque: { alias: 'deque', module: 'collections' },\n            ChainMap: { alias: 'ChainMap', module: 'collections' },\n            OrderedDict: { alias: 'OrderedDict', module: 'collections' },\n        };\n\n        const aliasMapEntry = specialTypes[assignedName];\n        if (aliasMapEntry) {\n            return createSpecialBuiltInClass(node, assignedName, aliasMapEntry);\n        }\n\n        return undefined;\n    }\n\n    function evaluateTypesForAssignmentStatement(node: AssignmentNode): void {\n        const fileInfo = getFileInfo(node);\n\n        // If the entire statement has already been evaluated, don't\n        // re-evaluate it.\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        // Is this type already cached?\n        let rightHandType = readTypeCache(node.rightExpression);\n        let isResolutionCycle = false;\n        let expectedTypeDiagAddendum: DiagnosticAddendum | undefined;\n\n        if (!rightHandType) {\n            // Special-case the typing.pyi file, which contains some special\n            // types that the type analyzer needs to interpret differently.\n            if (fileInfo.isTypingStubFile || fileInfo.isTypingExtensionsStubFile) {\n                rightHandType = handleTypingStubAssignment(node);\n                if (rightHandType) {\n                    writeTypeCache(node.rightExpression, rightHandType);\n                }\n            }\n\n            if (!rightHandType) {\n                // Determine whether there is a declared type.\n                const declaredType = getDeclaredTypeForExpression(node.leftExpression);\n\n                let flags: EvaluatorFlags = EvaluatorFlags.DoNotSpecialize;\n                if (fileInfo.isStubFile) {\n                    // An assignment of ellipsis means \"Any\" within a type stub file.\n                    flags |= EvaluatorFlags.ConvertEllipsisToUnknown;\n                }\n\n                let typeAliasNameNode: NameNode | undefined;\n                let isSpeculativeTypeAlias = false;\n\n                if (isDeclaredTypeAlias(node.leftExpression)) {\n                    flags |=\n                        EvaluatorFlags.ExpectingType |\n                        EvaluatorFlags.EvaluateStringLiteralAsType |\n                        EvaluatorFlags.ParamSpecDisallowed;\n\n                    typeAliasNameNode = (node.leftExpression as TypeAnnotationNode).valueExpression as NameNode;\n                } else if (isPossibleImplicitTypeAlias(node.leftExpression)) {\n                    if (node.leftExpression.nodeType === ParseNodeType.Name) {\n                        typeAliasNameNode = node.leftExpression;\n                        isSpeculativeTypeAlias = true;\n                    }\n                }\n\n                // Synthesize a type variable that represents the type alias while we're\n                // evaluating it. This allows us to handle recursive definitions.\n                let typeAliasTypeVar: TypeVarType | undefined;\n                if (typeAliasNameNode) {\n                    typeAliasTypeVar = TypeVarType.createInstantiable(\n                        `__type_alias_${typeAliasNameNode.value}`,\n                        /* isParamSpec */ false,\n                        /* isSynthesized */ true\n                    );\n                    typeAliasTypeVar.details.recursiveTypeAliasName = typeAliasNameNode.value;\n\n                    // Write the type back to the type cache. It will be replaced below.\n                    writeTypeCache(node, typeAliasTypeVar);\n                    writeTypeCache(node.leftExpression, typeAliasTypeVar);\n                }\n\n                const srcTypeResult = getTypeOfExpression(node.rightExpression, declaredType, flags);\n                let srcType = srcTypeResult.type;\n                expectedTypeDiagAddendum = srcTypeResult.expectedTypeDiagAddendum;\n                if (srcTypeResult.isResolutionCyclical) {\n                    isResolutionCycle = true;\n                }\n\n                // If the RHS is a constant boolean expression, assign it a literal type.\n                const constExprValue = evaluateStaticBoolExpression(\n                    node.rightExpression,\n                    fileInfo.executionEnvironment\n                );\n\n                if (constExprValue !== undefined) {\n                    const boolType = getBuiltInObject(node, 'bool');\n                    if (isObject(boolType)) {\n                        srcType = ObjectType.create(ClassType.cloneWithLiteral(boolType.classType, constExprValue));\n                    }\n                }\n\n                // If there was a declared type, make sure the RHS value is compatible.\n                if (declaredType) {\n                    const diagAddendum = new DiagnosticAddendum();\n\n                    if (canAssignType(declaredType, srcType, diagAddendum)) {\n                        // Narrow the resulting type if possible.\n                        srcType = narrowTypeBasedOnAssignment(declaredType, srcType);\n                    }\n                }\n\n                // If this is an enum, transform the type as required.\n                rightHandType = srcType;\n                if (node.leftExpression.nodeType === ParseNodeType.Name && !node.typeAnnotationComment) {\n                    rightHandType = transformTypeForPossibleEnumClass(node.leftExpression, rightHandType);\n                }\n\n                if (typeAliasNameNode) {\n                    // Clear out the temporary types we wrote above.\n                    deleteTypeCacheEntry(node);\n                    deleteTypeCacheEntry(node.leftExpression);\n\n                    // If this was a speculative type alias, it becomes a real type alias\n                    // only if the evaluated type is an instantiable type.\n                    if (\n                        !isSpeculativeTypeAlias ||\n                        (TypeBase.isInstantiable(rightHandType) && !isAnyOrUnknown(rightHandType))\n                    ) {\n                        // If this is a type alias, record its name based on the assignment target.\n                        rightHandType = transformTypeForTypeAlias(rightHandType, typeAliasNameNode);\n\n                        if (isTypeAliasRecursive(typeAliasTypeVar!, rightHandType)) {\n                            addDiagnostic(\n                                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                                DiagnosticRule.reportGeneralTypeIssues,\n                                Localizer.Diagnostic.typeAliasIsRecursive().format({ name: typeAliasNameNode.value }),\n                                node.rightExpression\n                            );\n                        }\n\n                        // Set the resulting type to the boundType of the original type alias\n                        // to support recursive type aliases.\n                        typeAliasTypeVar!.details.boundType = rightHandType;\n\n                        // Record the type parameters within the recursive type alias so it\n                        // can be specialized.\n                        typeAliasTypeVar!.details.recursiveTypeParameters = rightHandType.typeAliasInfo?.typeParameters;\n                    }\n                }\n            }\n        }\n\n        // Don't write back an unbound type that results from a resolution cycle. We'll\n        // write back the type when the stack unwinds and the type is fully evaluated.\n        if (!isResolutionCycle) {\n            assignTypeToExpression(node.leftExpression, rightHandType, node.rightExpression, expectedTypeDiagAddendum);\n\n            writeTypeCache(node, rightHandType);\n        }\n    }\n\n    function evaluateTypesForAugmentedAssignment(node: AugmentedAssignmentNode): void {\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        const destType = getTypeFromAugmentedAssignment(node, /* expectedType */ undefined);\n        assignTypeToExpression(node.destExpression, destType, node.rightExpression);\n\n        writeTypeCache(node, destType);\n    }\n\n    function getTypeOfClass(node: ClassNode): ClassTypeResult | undefined {\n        // Is this type already cached?\n        const cachedClassType = readTypeCache(node.name);\n\n        if (cachedClassType) {\n            if (!isClass(cachedClassType)) {\n                // This can happen in rare circumstances where the class declaration\n                // is located in an unreachable code block.\n                return undefined;\n            }\n            return { classType: cachedClassType, decoratedType: readTypeCache(node) || UnknownType.create() };\n        }\n\n        // The type wasn't cached, so we need to create a new one.\n        const scope = ScopeUtils.getScopeForNode(node);\n\n        const fileInfo = getFileInfo(node);\n        let classFlags = ClassTypeFlags.None;\n        if (\n            scope?.type === ScopeType.Builtin ||\n            fileInfo.isTypingStubFile ||\n            fileInfo.isTypingExtensionsStubFile ||\n            fileInfo.isBuiltInStubFile\n        ) {\n            classFlags |= ClassTypeFlags.BuiltInClass;\n\n            if (fileInfo.isTypingExtensionsStubFile) {\n                classFlags |= ClassTypeFlags.TypingExtensionClass;\n            }\n\n            if (node.name.value === 'property') {\n                classFlags |= ClassTypeFlags.PropertyClass;\n            }\n        }\n\n        const classType = ClassType.create(\n            node.name.value,\n            getClassFullName(node, fileInfo.moduleName, node.name.value),\n            fileInfo.moduleName,\n            classFlags,\n            /* typeSourceId */ undefined,\n            /* declaredMetaclass */ undefined,\n            /* effectiveMetaclass */ undefined,\n            ParseTreeUtils.getDocString(node.suite.statements)\n        );\n\n        // Some classes refer to themselves within type arguments used within\n        // base classes. We'll register the partially-constructed class type\n        // to allow these to be resolved.\n        const classSymbol = scope?.lookUpSymbol(node.name.value);\n        let classDecl: ClassDeclaration | undefined;\n        const decl = AnalyzerNodeInfo.getDeclaration(node);\n        if (decl) {\n            classDecl = decl as ClassDeclaration;\n        }\n        if (classDecl) {\n            setSymbolResolutionPartialType(classSymbol!, classDecl, classType);\n        }\n        classType.details.flags |= ClassTypeFlags.PartiallyConstructed;\n        writeTypeCache(node, classType);\n        writeTypeCache(node.name, classType);\n\n        // Keep a list of unique type parameters that are used in the\n        // base class arguments.\n        const typeParameters: TypeVarType[] = [];\n\n        // If the class derives from \"Generic\" directly, it will provide\n        // all of the type parameters in the specified order.\n        let genericTypeParameters: TypeVarType[] | undefined;\n\n        let sawMetaclass = false;\n        const initSubclassArgs: FunctionArgument[] = [];\n\n        node.arguments.forEach((arg) => {\n            // Ignore keyword parameters other than metaclass or total.\n            if (!arg.name || arg.name.value === 'metaclass') {\n                let exprFlags =\n                    EvaluatorFlags.ExpectingType |\n                    EvaluatorFlags.GenericClassTypeAllowed |\n                    EvaluatorFlags.DisallowTypeVarsWithScopeId |\n                    EvaluatorFlags.AssociateTypeVarsWithCurrentScope;\n                if (fileInfo.isStubFile) {\n                    exprFlags |= EvaluatorFlags.AllowForwardReferences;\n                }\n\n                let argType = getTypeOfExpression(arg.valueExpression, undefined, exprFlags).type;\n                const isMetaclass = !!arg.name;\n\n                if (isMetaclass) {\n                    if (sawMetaclass) {\n                        addError(Localizer.Diagnostic.metaclassDuplicate(), arg);\n                    }\n                    sawMetaclass = true;\n                }\n\n                // In some stub files, classes are conditionally defined (e.g. based\n                // on platform type). We'll assume that the conditional logic is correct\n                // and strip off the \"unbound\" union.\n                if (argType.category === TypeCategory.Union) {\n                    argType = removeUnbound(argType);\n                }\n\n                if (!isAnyOrUnknown(argType) && !isUnbound(argType)) {\n                    // Handle \"Type[X]\" object.\n                    argType = transformTypeObjectToClass(argType);\n                    if (!isClass(argType)) {\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.baseClassInvalid(),\n                            arg\n                        );\n                        argType = UnknownType.create();\n                    } else {\n                        if (ClassType.isBuiltIn(argType, 'Protocol')) {\n                            if (\n                                !fileInfo.isStubFile &&\n                                !ClassType.isTypingExtensionClass(argType) &&\n                                fileInfo.executionEnvironment.pythonVersion < PythonVersion.V3_7\n                            ) {\n                                addError(Localizer.Diagnostic.protocolIllegal(), arg.valueExpression);\n                            }\n                            classType.details.flags |= ClassTypeFlags.ProtocolClass;\n                        }\n\n                        if (ClassType.isBuiltIn(argType, 'property')) {\n                            classType.details.flags |= ClassTypeFlags.PropertyClass;\n                        }\n\n                        // If the class directly derives from NamedTuple (in Python 3.6 or\n                        // newer), it's considered a dataclass.\n                        if (fileInfo.executionEnvironment.pythonVersion >= PythonVersion.V3_6) {\n                            if (ClassType.isBuiltIn(argType, 'NamedTuple')) {\n                                classType.details.flags |= ClassTypeFlags.DataClass;\n                            }\n                        }\n\n                        // If the class directly derives from TypedDict or from a class that is\n                        // a TypedDict, it is considered a TypedDict.\n                        if (ClassType.isBuiltIn(argType, 'TypedDict') || ClassType.isTypedDictClass(argType)) {\n                            classType.details.flags |= ClassTypeFlags.TypedDictClass;\n                        } else if (ClassType.isTypedDictClass(classType) && !ClassType.isTypedDictClass(argType)) {\n                            // TypedDict classes must derive only from other\n                            // TypedDict classes.\n                            addError(Localizer.Diagnostic.typedDictBaseClass(), arg);\n                        }\n\n                        // Validate that the class isn't deriving from itself, creating a\n                        // circular dependency.\n                        if (derivesFromClassRecursive(argType, classType, /* ignoreUnknown */ true)) {\n                            addError(Localizer.Diagnostic.baseClassCircular(), arg);\n                            argType = UnknownType.create();\n                        }\n                    }\n                }\n\n                if (isUnknown(argType)) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportUntypedBaseClass,\n                        DiagnosticRule.reportUntypedBaseClass,\n                        Localizer.Diagnostic.baseClassUnknown(),\n                        arg\n                    );\n                }\n\n                if (isMetaclass) {\n                    if (isClass(argType) || isUnknown(argType)) {\n                        classType.details.declaredMetaclass = argType;\n                        if (isClass(argType)) {\n                            if (ClassType.isBuiltIn(argType, 'EnumMeta')) {\n                                classType.details.flags |= ClassTypeFlags.EnumClass;\n                            } else if (ClassType.isBuiltIn(argType, 'ABCMeta')) {\n                                classType.details.flags |= ClassTypeFlags.SupportsAbstractMethods;\n                            }\n                        }\n                    }\n                } else {\n                    // Check for a duplicate class.\n                    if (\n                        classType.details.baseClasses.some((prevBaseClass) => {\n                            return (\n                                isClass(prevBaseClass) &&\n                                isClass(argType) &&\n                                ClassType.isSameGenericClass(argType, prevBaseClass)\n                            );\n                        })\n                    ) {\n                        addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.duplicateBaseClass(),\n                            arg.name || arg\n                        );\n                    }\n\n                    classType.details.baseClasses.push(argType);\n                    if (isClass(argType)) {\n                        if (ClassType.isEnumClass(argType)) {\n                            classType.details.flags |= ClassTypeFlags.EnumClass;\n                        }\n\n                        if (ClassType.supportsAbstractMethods(argType)) {\n                            classType.details.flags |= ClassTypeFlags.SupportsAbstractMethods;\n                        }\n\n                        if (ClassType.isPropertyClass(argType)) {\n                            classType.details.flags |= ClassTypeFlags.PropertyClass;\n                        }\n\n                        if (ClassType.isFinal(argType)) {\n                            const className = printObjectTypeForClass(argType);\n                            addError(\n                                Localizer.Diagnostic.baseClassFinal().format({ type: className }),\n                                arg.valueExpression\n                            );\n                        }\n                    }\n                }\n\n                addTypeVarsToListIfUnique(typeParameters, getTypeVarArgumentsRecursive(argType));\n                if (isClass(argType) && ClassType.isBuiltIn(argType, 'Generic')) {\n                    if (!genericTypeParameters) {\n                        genericTypeParameters = [];\n                        addTypeVarsToListIfUnique(genericTypeParameters, getTypeVarArgumentsRecursive(argType));\n                    }\n                }\n            } else if (arg.name.value === 'total' && ClassType.isTypedDictClass(classType)) {\n                // The \"total\" parameter name applies only for TypedDict classes.\n                // PEP 589 specifies that the parameter must be either True or False.\n                const constArgValue = evaluateStaticBoolExpression(arg.valueExpression, fileInfo.executionEnvironment);\n                if (constArgValue === undefined) {\n                    addError(Localizer.Diagnostic.typedDictTotalParam(), arg.valueExpression);\n                } else if (!constArgValue) {\n                    classType.details.flags |= ClassTypeFlags.CanOmitDictValues;\n                }\n            } else {\n                // Collect arguments that will be passed to the `__init_subclass__`\n                // method described in PEP 487.\n                initSubclassArgs.push({\n                    argumentCategory: ArgumentCategory.Simple,\n                    node: arg,\n                    name: arg.name,\n                    valueExpression: arg.valueExpression,\n                });\n            }\n        });\n\n        // Make sure we don't have 'object' derive from itself. Infinite\n        // recursion will result.\n        if (!ClassType.isBuiltIn(classType, 'object')) {\n            classType.details.baseClasses.push(getBuiltInType(node, 'object'));\n        }\n\n        // TODO - if genericTypeParameters are provided, make sure that\n        // typeParameters is a proper subset.\n        classType.details.typeParameters = genericTypeParameters || typeParameters;\n\n        if (!computeMroLinearization(classType)) {\n            addError(Localizer.Diagnostic.methodOrdering(), node.name);\n        }\n\n        // Determine the effective metaclass and detect metaclass conflicts.\n        let effectiveMetaclass = classType.details.declaredMetaclass;\n        let reportedMetaclassConflict = false;\n\n        if (!effectiveMetaclass || isClass(effectiveMetaclass)) {\n            for (const baseClass of classType.details.baseClasses) {\n                if (isClass(baseClass)) {\n                    const baseClassMeta = baseClass.details.effectiveMetaclass;\n                    if (baseClassMeta && isClass(baseClassMeta)) {\n                        // Make sure there is no metaclass conflict.\n                        if (!effectiveMetaclass) {\n                            effectiveMetaclass = baseClassMeta;\n                        } else if (\n                            derivesFromClassRecursive(baseClassMeta, effectiveMetaclass, /* ignoreUnknown */ true)\n                        ) {\n                            effectiveMetaclass = baseClassMeta;\n                        } else if (\n                            !derivesFromClassRecursive(effectiveMetaclass, baseClassMeta, /* ignoreUnknown */ true)\n                        ) {\n                            if (!reportedMetaclassConflict) {\n                                addDiagnostic(\n                                    fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                                    DiagnosticRule.reportGeneralTypeIssues,\n                                    Localizer.Diagnostic.metaclassConflict(),\n                                    node.name\n                                );\n                                // Don't report more than once.\n                                reportedMetaclassConflict = true;\n                            }\n                        }\n                    } else {\n                        effectiveMetaclass = UnknownType.create();\n                        break;\n                    }\n                } else {\n                    // If one of the base classes is unknown, then the effective\n                    // metaclass is also unknowable.\n                    effectiveMetaclass = UnknownType.create();\n                    break;\n                }\n            }\n        }\n\n        // If we haven't found an effective metaclass, assume \"type\", which\n        // is the metaclass for \"object\".\n        if (!effectiveMetaclass) {\n            const typeMetaclass = getBuiltInType(node, 'type');\n            effectiveMetaclass = typeMetaclass && isClass(typeMetaclass) ? typeMetaclass : UnknownType.create();\n        }\n\n        classType.details.effectiveMetaclass = effectiveMetaclass;\n\n        // The scope for this class becomes the \"fields\" for the corresponding type.\n        const innerScope = ScopeUtils.getScopeForNode(node.suite);\n        classType.details.fields = innerScope?.symbolTable || new Map<string, Symbol>();\n\n        if (ClassType.isTypedDictClass(classType)) {\n            synthesizeTypedDictClassMethods(node, classType);\n        }\n\n        // Determine if the class should be a \"pseudo-generic\" class, characterized\n        // by having an __init__ method with parameters that lack type annotations.\n        // For such classes, we'll treat them as generic, with the type arguments provided\n        // by the callers of the constructor.\n        if (!fileInfo.isStubFile && classType.details.typeParameters.length === 0) {\n            const initMethod = classType.details.fields.get('__init__');\n            if (initMethod) {\n                const initDecls = initMethod.getTypedDeclarations();\n                if (initDecls.length === 1 && initDecls[0].type === DeclarationType.Function) {\n                    const initDeclNode = initDecls[0].node;\n                    const initParams = initDeclNode.parameters;\n\n                    if (\n                        initParams.length > 1 &&\n                        !initParams.some((param, index) => !!getTypeAnnotationForParameter(initDeclNode, index))\n                    ) {\n                        const genericParams = initParams.filter(\n                            (param, index) => index > 0 && param.name && param.category === ParameterCategory.Simple\n                        );\n\n                        if (genericParams.length > 0) {\n                            classType.details.flags |= ClassTypeFlags.PseudoGenericClass;\n\n                            // Create a type parameter for each simple, named parameter\n                            // in the __init__ method.\n                            classType.details.typeParameters = genericParams.map((param) => {\n                                const typeVar = TypeVarType.createInstance(\n                                    `__type_of_${param.name!.value}`,\n                                    /* isParamSpec */ false,\n                                    /* isSynthesized */ true\n                                );\n                                return TypeVarType.cloneForScopeId(typeVar, node.id);\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        // Determine if the class is abstract.\n        if (ClassType.supportsAbstractMethods(classType)) {\n            if (getAbstractMethods(classType).length > 0) {\n                classType.details.flags |= ClassTypeFlags.HasAbstractMethods;\n            }\n        }\n\n        // Now determine the decorated type of the class.\n        let decoratedType: Type = classType;\n        let foundUnknown = false;\n\n        for (let i = node.decorators.length - 1; i >= 0; i--) {\n            const decorator = node.decorators[i];\n\n            const newDecoratedType = applyClassDecorator(decoratedType, classType, decorator);\n            if (isUnknown(newDecoratedType)) {\n                // Report this error only on the first unknown type.\n                if (!foundUnknown) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportUntypedClassDecorator,\n                        DiagnosticRule.reportUntypedClassDecorator,\n                        Localizer.Diagnostic.classDecoratorTypeUnknown(),\n                        node.decorators[i].expression\n                    );\n\n                    foundUnknown = true;\n                }\n            } else {\n                // Apply the decorator only if the type is known.\n                decoratedType = newDecoratedType;\n            }\n        }\n\n        if (ClassType.isDataClass(classType)) {\n            let skipSynthesizedInit = ClassType.isSkipSynthesizedInit(classType);\n            if (!skipSynthesizedInit) {\n                // See if there's already a non-synthesized __init__ method.\n                // We shouldn't override it.\n                const initSymbol = lookUpClassMember(classType, '__init__', ClassMemberLookupFlags.SkipBaseClasses);\n                if (initSymbol) {\n                    const initSymbolType = getTypeOfMember(initSymbol);\n                    if (initSymbolType.category === TypeCategory.Function) {\n                        if (!FunctionType.isSynthesizedMethod(initSymbolType)) {\n                            skipSynthesizedInit = true;\n                        }\n                    } else {\n                        skipSynthesizedInit = true;\n                    }\n                }\n            }\n\n            synthesizeDataClassMethods(node, classType, skipSynthesizedInit);\n        }\n\n        // Clear the \"partially constructed\" flag.\n        classType.details.flags &= ~ClassTypeFlags.PartiallyConstructed;\n\n        // Update the undecorated class type.\n        writeTypeCache(node.name, classType);\n\n        // Update the decorated class type.\n        writeTypeCache(node, decoratedType);\n\n        // Validate __init_subclass__ call.\n        if (initSubclassArgs.length > 0) {\n            validateInitSubclassArgs(node, classType, initSubclassArgs);\n        }\n\n        return { classType, decoratedType };\n    }\n\n    function applyClassDecorator(\n        inputClassType: Type,\n        originalClassType: ClassType,\n        decoratorNode: DecoratorNode\n    ): Type {\n        const decoratorType = getTypeOfExpression(decoratorNode.expression).type;\n\n        if (decoratorType.category === TypeCategory.OverloadedFunction) {\n            if (decoratorType.overloads[0].details.builtInName === 'dataclass') {\n                originalClassType.details.flags |= ClassTypeFlags.DataClass;\n            }\n        } else if (decoratorType.category === TypeCategory.Function) {\n            // Is this a @dataclass call?\n            if (decoratorNode.expression.nodeType === ParseNodeType.Call) {\n                const decoratorCallType = getTypeOfExpression(decoratorNode.expression.leftExpression).type;\n\n                if (\n                    decoratorCallType.category === TypeCategory.OverloadedFunction &&\n                    decoratorCallType.overloads[0].details.builtInName === 'dataclass'\n                ) {\n                    // Determine whether we should skip synthesizing the init method.\n                    let skipSynthesizeInit = false;\n\n                    if (decoratorNode.expression.arguments) {\n                        decoratorNode.expression.arguments.forEach((arg) => {\n                            if (arg.name && arg.name.value === 'init') {\n                                if (arg.valueExpression) {\n                                    const fileInfo = getFileInfo(decoratorNode);\n                                    const value = evaluateStaticBoolExpression(\n                                        arg.valueExpression,\n                                        fileInfo.executionEnvironment\n                                    );\n                                    if (!value) {\n                                        skipSynthesizeInit = true;\n                                    }\n                                }\n                            }\n                        });\n                    }\n\n                    originalClassType.details.flags |= ClassTypeFlags.DataClass;\n                    if (skipSynthesizeInit) {\n                        originalClassType.details.flags |= ClassTypeFlags.SkipSynthesizedInit;\n                    }\n                    return inputClassType;\n                }\n            }\n\n            if (decoratorType.details.builtInName === 'final') {\n                originalClassType.details.flags |= ClassTypeFlags.Final;\n            } else if (decoratorType.details.builtInName === 'runtime_checkable') {\n                originalClassType.details.flags |= ClassTypeFlags.RuntimeCheckable;\n            }\n        }\n\n        return getTypeFromDecorator(decoratorNode, inputClassType);\n    }\n\n    function validateInitSubclassArgs(node: ClassNode, classType: ClassType, argList: FunctionArgument[]) {\n        const errorNode = argList[0].node!.name!;\n        const initSubclassMethodInfo = getTypeFromClassMemberName(\n            errorNode,\n            classType,\n            '__init_subclass__',\n            { method: 'get' },\n            new DiagnosticAddendum(),\n            MemberAccessFlags.SkipForMethodLookup | MemberAccessFlags.SkipObjectBaseClass\n        );\n\n        if (initSubclassMethodInfo) {\n            const initSubclassMethodType = bindFunctionToClassOrObject(\n                classType,\n                initSubclassMethodInfo.type,\n                /* treatAsClassMember */ true,\n                errorNode\n            );\n\n            if (initSubclassMethodType)\n                validateCallArguments(\n                    errorNode,\n                    argList,\n                    initSubclassMethodType,\n                    new TypeVarMap(),\n                    /* skipUnknownArgCheck */ false,\n                    /* inferReturnTypeIfNeeded */ true,\n                    NoneType.createInstance()\n                );\n        }\n    }\n\n    function getTypeOfFunction(node: FunctionNode): FunctionTypeResult | undefined {\n        const fileInfo = getFileInfo(node);\n\n        // Is this type already cached?\n        const cachedFunctionType = readTypeCache(node.name) as FunctionType;\n\n        if (cachedFunctionType) {\n            if (!isFunction(cachedFunctionType)) {\n                // This can happen in certain rare circumstances where the\n                // function declaration falls within an unreachable code block.\n                return undefined;\n            }\n            return { functionType: cachedFunctionType, decoratedType: readTypeCache(node) || UnknownType.create() };\n        }\n\n        let functionDecl: FunctionDeclaration | undefined;\n        const decl = AnalyzerNodeInfo.getDeclaration(node);\n        if (decl) {\n            functionDecl = decl as FunctionDeclaration;\n        }\n\n        // There was no cached type, so create a new one.\n        // Retrieve the containing class node if the function is a method.\n        const containingClassNode = ParseTreeUtils.getEnclosingClass(node, true);\n        let containingClassType: ClassType | undefined;\n        if (containingClassNode) {\n            const classInfo = getTypeOfClass(containingClassNode);\n            if (!classInfo) {\n                return undefined;\n            }\n            containingClassType = classInfo.classType;\n        }\n\n        let functionFlags = getFunctionFlagsFromDecorators(node, !!containingClassNode);\n        if (functionDecl?.isGenerator) {\n            functionFlags |= FunctionTypeFlags.Generator;\n        }\n\n        if (fileInfo.isStubFile) {\n            functionFlags |= FunctionTypeFlags.StubDefinition;\n        } else if (fileInfo.isInPyTypedPackage && evaluatorOptions.disableInferenceForPyTypedSources) {\n            functionFlags |= FunctionTypeFlags.PyTypedDefinition;\n        }\n\n        if (node.isAsync) {\n            functionFlags |= FunctionTypeFlags.Async;\n        }\n\n        const functionType = FunctionType.createInstance(\n            node.name.value,\n            fileInfo.moduleName,\n            functionFlags,\n            ParseTreeUtils.getDocString(node.suite.statements)\n        );\n\n        if (fileInfo.isBuiltInStubFile || fileInfo.isTypingStubFile || fileInfo.isTypingExtensionsStubFile) {\n            // Stash away the name of the function since we need to handle\n            // 'namedtuple', 'abstractmethod', 'dataclass' and 'NewType'\n            // specially.\n            functionType.details.builtInName = node.name.value;\n        }\n\n        functionType.details.declaration = functionDecl;\n\n        // Allow recursion by registering the partially-constructed\n        // function type.\n        const scope = ScopeUtils.getScopeForNode(node);\n        const functionSymbol = scope?.lookUpSymbol(node.name.value);\n        if (functionDecl) {\n            setSymbolResolutionPartialType(functionSymbol!, functionDecl, functionType);\n        }\n        writeTypeCache(node, functionType);\n        writeTypeCache(node.name, functionType);\n\n        // Is this an \"__init__\" method within a pseudo-generic class? If so,\n        // we'll add generic types to the constructor's parameters.\n        const addGenericParamTypes =\n            containingClassType &&\n            ClassType.isPseudoGenericClass(containingClassType) &&\n            node.name.value === '__init__';\n\n        const paramTypes: Type[] = [];\n        let typeParamIndex = 0;\n\n        // Determine if the first parameter should be skipped for comment-based\n        // function annotations.\n        let firstCommentAnnotationIndex = 0;\n        if (containingClassType && (functionType.details.flags & FunctionTypeFlags.StaticMethod) === 0) {\n            firstCommentAnnotationIndex = 1;\n        }\n\n        // If there is a function annotation comment, validate that it has the correct\n        // number of parameter annotations.\n        if (node.functionAnnotationComment && !node.functionAnnotationComment.isParamListEllipsis) {\n            const expected = node.parameters.length - firstCommentAnnotationIndex;\n            const received = node.functionAnnotationComment.paramTypeAnnotations.length;\n\n            // For methods with \"self\" or \"cls\" parameters, the annotation list\n            // can either include or exclude the annotation for the first parameter.\n            if (firstCommentAnnotationIndex > 0 && received === node.parameters.length) {\n                firstCommentAnnotationIndex = 0;\n            } else if (received !== expected) {\n                addError(\n                    Localizer.Diagnostic.annotatedParamCountMismatch().format({\n                        expected,\n                        received,\n                    }),\n                    node.functionAnnotationComment\n                );\n            }\n        }\n\n        const typeParameters: TypeVarType[] = [];\n\n        node.parameters.forEach((param, index) => {\n            let paramType: Type | undefined;\n            let annotatedType: Type | undefined;\n            let concreteAnnotatedType: Type | undefined;\n            let isNoneWithoutOptional = false;\n            let paramTypeNode: ExpressionNode | undefined;\n\n            if (param.typeAnnotation) {\n                paramTypeNode = param.typeAnnotation;\n            } else if (param.typeAnnotationComment) {\n                paramTypeNode = param.typeAnnotationComment;\n            } else if (node.functionAnnotationComment && !node.functionAnnotationComment.isParamListEllipsis) {\n                const adjustedIndex = index - firstCommentAnnotationIndex;\n                if (adjustedIndex >= 0 && adjustedIndex < node.functionAnnotationComment.paramTypeAnnotations.length) {\n                    paramTypeNode = node.functionAnnotationComment.paramTypeAnnotations[adjustedIndex];\n                }\n            }\n\n            if (paramTypeNode) {\n                annotatedType = getTypeOfAnnotation(\n                    paramTypeNode,\n                    /* allowFinal */ false,\n                    /* associateTypeVarsWithScope */ true\n                );\n            }\n\n            if (!annotatedType && addGenericParamTypes) {\n                if (index > 0 && param.category === ParameterCategory.Simple && param.name) {\n                    annotatedType = containingClassType!.details.typeParameters[typeParamIndex];\n                    typeParamIndex++;\n                }\n            }\n\n            if (annotatedType) {\n                // PEP 484 indicates that if a parameter has a default value of 'None'\n                // the type checker should assume that the type is optional (i.e. a union\n                // of the specified type and 'None').\n                if (param.defaultValue && param.defaultValue.nodeType === ParseNodeType.Constant) {\n                    if (param.defaultValue.constType === KeywordType.None) {\n                        isNoneWithoutOptional = true;\n\n                        if (!fileInfo.diagnosticRuleSet.strictParameterNoneValue) {\n                            annotatedType = combineTypes([annotatedType, NoneType.createInstance()]);\n                        }\n                    }\n                }\n\n                concreteAnnotatedType = specializeType(annotatedType, /* typeVarMap */ undefined);\n            }\n\n            let defaultValueType: Type | undefined;\n            if (param.defaultValue) {\n                defaultValueType = getTypeOfExpression(\n                    param.defaultValue,\n                    annotatedType,\n                    EvaluatorFlags.ConvertEllipsisToAny\n                ).type;\n            }\n\n            if (annotatedType) {\n                // If there was both a type annotation and a default value, verify\n                // that the default value matches the annotation.\n                if (param.defaultValue && defaultValueType && concreteAnnotatedType) {\n                    const diagAddendum = new DiagnosticAddendum();\n\n                    if (!canAssignType(concreteAnnotatedType, defaultValueType, diagAddendum)) {\n                        const diag = addDiagnostic(\n                            fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.paramAssignmentMismatch().format({\n                                sourceType: printType(defaultValueType),\n                                paramType: printType(annotatedType),\n                            }) + diagAddendum.getString(),\n                            param.defaultValue\n                        );\n\n                        if (isNoneWithoutOptional && paramTypeNode) {\n                            const addOptionalAction: AddMissingOptionalToParamAction = {\n                                action: Commands.addMissingOptionalToParam,\n                                offsetOfTypeNode: paramTypeNode.start + 1,\n                            };\n                            if (diag) {\n                                diag.addAction(addOptionalAction);\n                            }\n                        }\n                    }\n                }\n\n                paramType = annotatedType;\n            }\n\n            const functionParam: FunctionParameter = {\n                category: param.category,\n                name: param.name ? param.name.value : undefined,\n                hasDefault: !!param.defaultValue,\n                defaultType: defaultValueType,\n                type: paramType || UnknownType.create(),\n                hasDeclaredType: !!paramTypeNode,\n            };\n\n            FunctionType.addParameter(functionType, functionParam);\n\n            if (param.name) {\n                const variadicParamType = transformVariadicParamType(node, param.category, functionParam.type);\n                paramTypes.push(variadicParamType);\n            } else {\n                paramTypes.push(functionParam.type);\n            }\n        });\n\n        if (containingClassNode && containingClassType) {\n            // If the first parameter doesn't have an explicit type annotation,\n            // provide a type if it's an instance, class or constructor method.\n            if (functionType.details.parameters.length > 0) {\n                const typeAnnotation = getTypeAnnotationForParameter(node, 0);\n                if (!typeAnnotation) {\n                    const inferredParamType = inferFirstParamType(\n                        functionType.details.flags,\n                        containingClassType,\n                        containingClassNode\n                    );\n                    if (inferredParamType) {\n                        functionType.details.parameters[0].type = inferredParamType;\n                        if (!isAnyOrUnknown(inferredParamType)) {\n                            functionType.details.parameters[0].isTypeInferred = true;\n                        }\n\n                        paramTypes[0] = inferredParamType;\n                    }\n                }\n            }\n        }\n\n        // Update the types for the nodes associated with the parameters.\n        paramTypes.forEach((paramType, index) => {\n            const paramNameNode = node.parameters[index].name;\n            if (paramNameNode) {\n                if (isUnknown(paramType)) {\n                    functionType.details.flags |= FunctionTypeFlags.UnannotatedParams;\n                }\n                writeTypeCache(paramNameNode, paramType);\n            }\n        });\n\n        // If there was a defined return type, analyze that first so when we\n        // walk the contents of the function, return statements can be\n        // validated against this type.\n        if (node.returnTypeAnnotation) {\n            // Temporarily set the return type to unknown in case of recursion.\n            functionType.details.declaredReturnType = UnknownType.create();\n\n            const returnType = getTypeOfAnnotation(\n                node.returnTypeAnnotation,\n                /* allowFinal */ false,\n                /* associateTypeVarsWithScope */ true\n            );\n            functionType.details.declaredReturnType = returnType;\n        } else if (node.functionAnnotationComment) {\n            // Temporarily set the return type to unknown in case of recursion.\n            functionType.details.declaredReturnType = UnknownType.create();\n\n            const returnType = getTypeOfAnnotation(\n                node.functionAnnotationComment.returnTypeAnnotation,\n                /* allowFinal */ false,\n                /* associateTypeVarsWithScope */ true\n            );\n            functionType.details.declaredReturnType = returnType;\n        } else {\n            // If there was no return type annotation and this is a type stub,\n            // we have no opportunity to infer the return type, so we'll indicate\n            // that it's unknown.\n            if (fileInfo.isStubFile) {\n                // Special-case the __init__ method, which is commonly left without\n                // an annotated return type, but we can assume it returns None.\n                if (node.name.value === '__init__') {\n                    functionType.details.declaredReturnType = NoneType.createInstance();\n                } else {\n                    functionType.details.declaredReturnType = UnknownType.create();\n                }\n            }\n        }\n\n        // If it's an async function, wrap the return type in an Awaitable or Generator.\n        const preDecoratedType = node.isAsync ? createAsyncFunction(node, functionType) : functionType;\n\n        // Apply all of the decorators in reverse order.\n        let decoratedType: Type = preDecoratedType;\n        let foundUnknown = false;\n        for (let i = node.decorators.length - 1; i >= 0; i--) {\n            const decorator = node.decorators[i];\n\n            const newDecoratedType = applyFunctionDecorator(decoratedType, functionType, decorator, node);\n            if (isUnknown(newDecoratedType)) {\n                // Report this error only on the first unknown type.\n                if (!foundUnknown) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportUntypedFunctionDecorator,\n                        DiagnosticRule.reportUntypedFunctionDecorator,\n                        Localizer.Diagnostic.functionDecoratorTypeUnknown(),\n                        node.decorators[i].expression\n                    );\n\n                    foundUnknown = true;\n                }\n            } else {\n                // Apply the decorator only if the type is known.\n                decoratedType = newDecoratedType;\n            }\n        }\n\n        // See if there are any overloads provided by previous function declarations.\n        if (decoratedType.category === TypeCategory.Function) {\n            decoratedType = addOverloadsToFunctionType(node, decoratedType);\n        }\n\n        writeTypeCache(node.name, functionType);\n        writeTypeCache(node, decoratedType);\n\n        return { functionType, decoratedType };\n    }\n\n    function inferFirstParamType(\n        flags: FunctionTypeFlags,\n        containingClassType: ClassType,\n        containingClassNode: ClassNode\n    ): Type | undefined {\n        if ((flags & FunctionTypeFlags.StaticMethod) === 0) {\n            if (containingClassType) {\n                if (flags & (FunctionTypeFlags.ClassMethod | FunctionTypeFlags.ConstructorMethod)) {\n                    // For class methods, the cls parameter is allowed to skip the\n                    // abstract class test because the caller is possibly passing\n                    // in a non-abstract subclass.\n                    const clsType = TypeVarType.createInstance(\n                        `__type_of_cls_${containingClassType.details.name}`,\n                        /* isParamSpec */ false,\n                        /* isSynthesized */ true\n                    );\n                    clsType.scopeName = TypeVarType.makeScopeName(clsType.details.name, containingClassNode.id);\n                    clsType.scopeId = containingClassNode.id;\n\n                    clsType.details.boundType = selfSpecializeClassType(\n                        containingClassType,\n                        /* setSkipAbstractClassTest */ true\n                    );\n                    return clsType;\n                } else if ((flags & FunctionTypeFlags.StaticMethod) === 0) {\n                    const selfType = TypeVarType.createInstance(\n                        `__type_of_self_${containingClassType.details.name}`,\n                        /* isParamSpec */ false,\n                        /* isSynthesized */ true\n                    );\n                    selfType.scopeName = TypeVarType.makeScopeName(selfType.details.name, containingClassNode.id);\n                    selfType.scopeId = containingClassNode.id;\n\n                    selfType.details.boundType = ObjectType.create(\n                        selfSpecializeClassType(containingClassType, /* setSkipAbstractClassTest */ true)\n                    );\n                    return selfType;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    // Transforms the parameter type based on its category. If it's a simple parameter,\n    // no transform is applied. If it's a var-arg or keyword-arg parameter, the type\n    // is wrapped in a List or Dict.\n    function transformVariadicParamType(node: ParseNode, paramCategory: ParameterCategory, type: Type): Type {\n        switch (paramCategory) {\n            case ParameterCategory.Simple: {\n                return type;\n            }\n\n            case ParameterCategory.VarArgList: {\n                // Create a Tuple[X, ...] type.\n                const tupleType = getTypingType(node, 'Tuple');\n                if (tupleType && isClass(tupleType)) {\n                    return ObjectType.create(\n                        ClassType.cloneForSpecialization(\n                            tupleType,\n                            [type, AnyType.create(true)],\n                            /* isTypeArgumentExplicit */ false\n                        )\n                    );\n                }\n\n                return UnknownType.create();\n            }\n\n            case ParameterCategory.VarArgDictionary: {\n                const dictType = getBuiltInType(node, 'Dict');\n                const strType = getBuiltInObject(node, 'str');\n\n                if (isClass(dictType) && isObject(strType)) {\n                    return ObjectType.create(\n                        ClassType.cloneForSpecialization(dictType, [strType, type], /* isTypeArgumentExplicit */ true)\n                    );\n                }\n\n                return UnknownType.create();\n            }\n        }\n    }\n\n    // Scans through the decorators to find a few built-in decorators\n    // that affect the function flags.\n    function getFunctionFlagsFromDecorators(node: FunctionNode, isInClass: boolean) {\n        const fileInfo = getFileInfo(node);\n        let flags = FunctionTypeFlags.None;\n\n        // The \"__new__\" magic method is not an instance method.\n        // It acts as a static method instead.\n        if (node.name.value === '__new__' && isInClass) {\n            flags |= FunctionTypeFlags.ConstructorMethod;\n        }\n\n        // The \"__init_subclass__\" magic method is not an instance method.\n        // It acts an an implicit class method instead.\n        if (node.name.value === '__init_subclass__' && isInClass) {\n            flags |= FunctionTypeFlags.ClassMethod;\n        }\n\n        for (const decoratorNode of node.decorators) {\n            let evaluatorFlags = EvaluatorFlags.DoNotSpecialize;\n            if (fileInfo.isStubFile) {\n                // Some stub files (e.g. builtins.pyi) rely on forward\n                // declarations of decorators.\n                evaluatorFlags |= EvaluatorFlags.AllowForwardReferences;\n            }\n\n            const decoratorType = getTypeOfExpression(decoratorNode.expression, undefined, evaluatorFlags).type;\n            if (decoratorType.category === TypeCategory.Function) {\n                if (decoratorType.details.builtInName === 'abstractmethod') {\n                    if (isInClass) {\n                        flags |= FunctionTypeFlags.AbstractMethod;\n                    }\n                } else if (decoratorType.details.builtInName === 'final') {\n                    flags |= FunctionTypeFlags.Final;\n                }\n            } else if (isClass(decoratorType)) {\n                if (ClassType.isBuiltIn(decoratorType, 'staticmethod')) {\n                    if (isInClass) {\n                        flags |= FunctionTypeFlags.StaticMethod;\n                    }\n                } else if (ClassType.isBuiltIn(decoratorType, 'classmethod')) {\n                    if (isInClass) {\n                        flags |= FunctionTypeFlags.ClassMethod;\n                    }\n                }\n            }\n        }\n\n        return flags;\n    }\n\n    // Transforms the input function type into an output type based on the\n    // decorator function described by the decoratorNode.\n    function applyFunctionDecorator(\n        inputFunctionType: Type,\n        originalFunctionType: FunctionType,\n        decoratorNode: DecoratorNode,\n        functionNode: FunctionNode\n    ): Type {\n        const fileInfo = getFileInfo(decoratorNode);\n\n        let evaluatorFlags = EvaluatorFlags.DoNotSpecialize;\n        if (fileInfo.isStubFile) {\n            // Some stub files (e.g. builtins.pyi) rely on forward\n            // declarations of decorators.\n            evaluatorFlags |= EvaluatorFlags.AllowForwardReferences;\n        }\n\n        const decoratorType = getTypeOfExpression(decoratorNode.expression, undefined, evaluatorFlags).type;\n\n        // Special-case the \"overload\" because it has no definition.\n        if (isClass(decoratorType) && ClassType.isSpecialBuiltIn(decoratorType, 'overload')) {\n            if (inputFunctionType.category === TypeCategory.Function) {\n                inputFunctionType.details.flags |= FunctionTypeFlags.Overloaded;\n                return inputFunctionType;\n            }\n        }\n\n        const returnType = getTypeFromDecorator(decoratorNode, inputFunctionType);\n\n        // Check for some built-in decorator types with known semantics.\n        if (decoratorType.category === TypeCategory.Function) {\n            if (decoratorType.details.builtInName === 'abstractmethod') {\n                return inputFunctionType;\n            }\n\n            // Handle property setters and deleters.\n            if (decoratorNode.expression.nodeType === ParseNodeType.MemberAccess) {\n                const baseType = getTypeOfExpression(decoratorNode.expression.leftExpression).type;\n                if (isProperty(baseType)) {\n                    const memberName = decoratorNode.expression.memberName.value;\n                    if (memberName === 'setter') {\n                        if (isFunction(inputFunctionType)) {\n                            validatePropertyMethod(inputFunctionType, decoratorNode);\n                            return clonePropertyWithSetter(baseType, inputFunctionType, functionNode);\n                        } else {\n                            return inputFunctionType;\n                        }\n                    } else if (memberName === 'deleter') {\n                        if (isFunction(inputFunctionType)) {\n                            validatePropertyMethod(inputFunctionType, decoratorNode);\n                            return clonePropertyWithDeleter(baseType, inputFunctionType);\n                        } else {\n                            return inputFunctionType;\n                        }\n                    }\n                }\n            }\n        } else if (isClass(decoratorType)) {\n            if (ClassType.isBuiltIn(decoratorType)) {\n                switch (decoratorType.details.name) {\n                    case 'classmethod':\n                    case 'staticmethod': {\n                        return inputFunctionType;\n                    }\n                }\n            }\n\n            // Handle properties and subclasses of properties specially.\n            if (ClassType.isPropertyClass(decoratorType)) {\n                if (inputFunctionType.category === TypeCategory.Function) {\n                    validatePropertyMethod(inputFunctionType, decoratorNode);\n                    return createProperty(\n                        decoratorNode,\n                        decoratorType.details.name,\n                        inputFunctionType,\n                        getTypeSourceId(decoratorNode)\n                    );\n                } else {\n                    return UnknownType.create();\n                }\n            }\n        }\n\n        // Copy the overload flag from the input function type.\n        if (inputFunctionType.category === TypeCategory.Function && returnType.category === TypeCategory.Function) {\n            if (FunctionType.isOverloaded(inputFunctionType)) {\n                returnType.details.flags |= FunctionTypeFlags.Overloaded;\n            }\n        }\n\n        return returnType;\n    }\n\n    function validatePropertyMethod(method: FunctionType, errorNode: ParseNode) {\n        if (FunctionType.isStaticMethod(method) || FunctionType.isClassMethod(method)) {\n            addDiagnostic(\n                getFileInfo(errorNode).diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                Localizer.Diagnostic.propertyStaticOrClassMethod(),\n                errorNode\n            );\n        }\n    }\n\n    function createProperty(\n        decoratorNode: DecoratorNode,\n        className: string,\n        fget: FunctionType,\n        typeSourceId: TypeSourceId\n    ): ObjectType {\n        const fileInfo = getFileInfo(decoratorNode);\n        const typeMetaclass = getBuiltInType(decoratorNode, 'type');\n        const propertyClass = ClassType.create(\n            className,\n            getClassFullName(decoratorNode, fileInfo.moduleName, className),\n            fileInfo.moduleName,\n            ClassTypeFlags.PropertyClass,\n            typeSourceId,\n            /* declaredMetaclass */ undefined,\n            isClass(typeMetaclass) ? typeMetaclass : UnknownType.create()\n        );\n        computeMroLinearization(propertyClass);\n\n        const propertyObject = ObjectType.create(propertyClass);\n\n        // Fill in the fget method.\n        const fields = propertyClass.details.fields;\n        const fgetSymbol = Symbol.createWithType(SymbolFlags.ClassMember, fget);\n        fields.set('fget', fgetSymbol);\n\n        // Fill in the __get__ method with an overload.\n        const getFunction1 = FunctionType.createInstance(\n            '__get__',\n            '',\n            FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.Overloaded\n        );\n        getFunction1.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'self',\n            type: propertyObject,\n            hasDeclaredType: true,\n        });\n        getFunction1.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'obj',\n            type: NoneType.createInstance(),\n            hasDeclaredType: true,\n        });\n        getFunction1.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'type',\n            type: AnyType.create(),\n            hasDeclaredType: true,\n            hasDefault: true,\n            defaultType: AnyType.create(),\n        });\n        getFunction1.details.declaredReturnType = propertyObject;\n        getFunction1.details.declaration = fget.details.declaration;\n\n        const getFunction2 = FunctionType.createInstance(\n            '__get__',\n            '',\n            FunctionTypeFlags.SynthesizedMethod | FunctionTypeFlags.Overloaded\n        );\n        getFunction2.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'self',\n            type: propertyObject,\n            hasDeclaredType: true,\n        });\n        getFunction2.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'obj',\n            type: fget.details.parameters.length > 0 ? fget.details.parameters[0].type : AnyType.create(),\n            hasDeclaredType: true,\n        });\n        getFunction2.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'type',\n            type: AnyType.create(),\n            hasDeclaredType: true,\n            hasDefault: true,\n            defaultType: AnyType.create(),\n        });\n        getFunction2.details.declaredReturnType = fget.details.declaredReturnType;\n        getFunction2.details.declaration = fget.details.declaration;\n\n        const getFunctionOverload = OverloadedFunctionType.create([getFunction1, getFunction2]);\n        const getSymbol = Symbol.createWithType(SymbolFlags.ClassMember, getFunctionOverload);\n        fields.set('__get__', getSymbol);\n\n        // Fill in the getter, setter and deleter methods.\n        ['getter', 'setter', 'deleter'].forEach((accessorName) => {\n            const accessorFunction = FunctionType.createInstance(accessorName, '', FunctionTypeFlags.SynthesizedMethod);\n            accessorFunction.details.parameters.push({\n                category: ParameterCategory.Simple,\n                name: 'self',\n                type: propertyObject,\n                hasDeclaredType: true,\n            });\n            accessorFunction.details.parameters.push({\n                category: ParameterCategory.Simple,\n                name: 'accessor',\n                type: AnyType.create(),\n                hasDeclaredType: true,\n            });\n            accessorFunction.details.declaredReturnType = propertyObject;\n            const accessorSymbol = Symbol.createWithType(SymbolFlags.ClassMember, accessorFunction);\n            fields.set(accessorName, accessorSymbol);\n        });\n\n        return propertyObject;\n    }\n\n    function clonePropertyWithSetter(prop: Type, fset: FunctionType, errorNode: FunctionNode): Type {\n        if (!isProperty(prop)) {\n            return prop;\n        }\n\n        const classType = (prop as ObjectType).classType;\n        const propertyClass = ClassType.create(\n            classType.details.name,\n            classType.details.fullName,\n            classType.details.moduleName,\n            classType.details.flags,\n            classType.details.typeSourceId,\n            classType.details.declaredMetaclass,\n            classType.details.effectiveMetaclass\n        );\n        computeMroLinearization(propertyClass);\n\n        const propertyObject = ObjectType.create(propertyClass);\n\n        // Clone the symbol table of the old class type.\n        const fields = propertyClass.details.fields;\n        classType.details.fields.forEach((symbol, name) => {\n            if (!symbol.isIgnoredForProtocolMatch()) {\n                fields.set(name, symbol);\n            }\n        });\n\n        // Verify parameters for fset.\n        // We'll skip this test if the diagnostic rule is disabled because it\n        // can be somewhat expensive, especially in code that is not annotated.\n        const fileInfo = getFileInfo(errorNode);\n        if (fileInfo.diagnosticRuleSet.reportPropertyTypeMismatch !== 'none') {\n            if (errorNode.parameters.length >= 2) {\n                const typeAnnotation = getTypeAnnotationForParameter(errorNode, 1);\n                if (typeAnnotation) {\n                    // Verify consistency of the type.\n                    const fgetType = getGetterTypeFromProperty(classType, /* inferTypeIfNeeded */ false);\n                    if (fgetType && !isAnyOrUnknown(fgetType)) {\n                        const fsetType = getTypeOfAnnotation(typeAnnotation);\n\n                        // The setter type should be assignable to the getter type.\n                        const diag = new DiagnosticAddendum();\n                        if (\n                            !canAssignType(\n                                fgetType,\n                                fsetType,\n                                diag,\n                                /* typeVarMap */ undefined,\n                                CanAssignFlags.DoNotSpecializeTypeVars\n                            )\n                        ) {\n                            addDiagnostic(\n                                fileInfo.diagnosticRuleSet.reportPropertyTypeMismatch,\n                                DiagnosticRule.reportPropertyTypeMismatch,\n                                Localizer.Diagnostic.setterGetterTypeMismatch() + diag.getString(),\n                                typeAnnotation\n                            );\n                        }\n                    }\n                }\n            }\n        }\n\n        // Fill in the fset method.\n        const fsetSymbol = Symbol.createWithType(SymbolFlags.ClassMember, fset);\n        fields.set('fset', fsetSymbol);\n\n        // Fill in the __set__ method.\n        const setFunction = FunctionType.createInstance('__set__', '', FunctionTypeFlags.SynthesizedMethod);\n        setFunction.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'self',\n            type: prop,\n            hasDeclaredType: true,\n        });\n        setFunction.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'obj',\n            type: fset.details.parameters.length > 0 ? fset.details.parameters[0].type : AnyType.create(),\n            hasDeclaredType: true,\n        });\n        setFunction.details.declaredReturnType = NoneType.createInstance();\n        let setParamType: Type = UnknownType.create();\n        if (\n            fset.details.parameters.length >= 2 &&\n            fset.details.parameters[1].category === ParameterCategory.Simple &&\n            fset.details.parameters[1].name\n        ) {\n            setParamType = fset.details.parameters[1].type;\n        }\n        setFunction.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'value',\n            type: setParamType,\n            hasDeclaredType: true,\n        });\n        const setSymbol = Symbol.createWithType(SymbolFlags.ClassMember, setFunction);\n        fields.set('__set__', setSymbol);\n\n        return propertyObject;\n    }\n\n    function clonePropertyWithDeleter(prop: Type, fdel: FunctionType): Type {\n        if (!isProperty(prop)) {\n            return prop;\n        }\n\n        const classType = (prop as ObjectType).classType;\n        const propertyClass = ClassType.create(\n            classType.details.name,\n            classType.details.fullName,\n            classType.details.moduleName,\n            classType.details.flags,\n            classType.details.typeSourceId,\n            classType.details.declaredMetaclass,\n            classType.details.effectiveMetaclass\n        );\n        computeMroLinearization(propertyClass);\n\n        const propertyObject = ObjectType.create(propertyClass);\n\n        // Clone the symbol table of the old class type.\n        const fields = propertyClass.details.fields;\n        classType.details.fields.forEach((symbol, name) => {\n            if (!symbol.isIgnoredForProtocolMatch()) {\n                fields.set(name, symbol);\n            }\n        });\n\n        // Fill in the fdel method.\n        const fdelSymbol = Symbol.createWithType(SymbolFlags.ClassMember, fdel);\n        fields.set('fdel', fdelSymbol);\n\n        // Fill in the __delete__ method.\n        const delFunction = FunctionType.createInstance('__delete__', '', FunctionTypeFlags.SynthesizedMethod);\n        delFunction.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'self',\n            type: prop,\n            hasDeclaredType: true,\n        });\n        delFunction.details.parameters.push({\n            category: ParameterCategory.Simple,\n            name: 'obj',\n            type: fdel.details.parameters.length > 0 ? fdel.details.parameters[0].type : AnyType.create(),\n            hasDeclaredType: true,\n        });\n        delFunction.details.declaredReturnType = NoneType.createInstance();\n        const delSymbol = Symbol.createWithType(SymbolFlags.ClassMember, delFunction);\n        fields.set('__delete__', delSymbol);\n\n        return propertyObject;\n    }\n\n    // Given a function node and the function type associated with it, this\n    // method searches for prior function nodes that are marked as @overload\n    // and creates an OverloadedFunctionType that includes this function and\n    // all previous ones.\n    function addOverloadsToFunctionType(node: FunctionNode, type: FunctionType): Type {\n        let functionDecl: FunctionDeclaration | undefined;\n        const decl = AnalyzerNodeInfo.getDeclaration(node);\n        if (decl) {\n            functionDecl = decl as FunctionDeclaration;\n        }\n        const symbolWithScope = lookUpSymbolRecursive(node, node.name.value, /* honorCodeFlow */ false);\n        if (symbolWithScope) {\n            const decls = symbolWithScope.symbol.getDeclarations();\n\n            // Find this function's declaration.\n            const declIndex = decls.findIndex((decl) => decl === functionDecl);\n            if (declIndex > 0) {\n                const overloadedTypes: FunctionType[] = [];\n\n                // Look at the previous declaration's type.\n                const prevDecl = decls[declIndex - 1];\n                if (prevDecl.type === DeclarationType.Function) {\n                    const prevDeclDeclTypeInfo = getTypeOfFunction(prevDecl.node);\n                    if (prevDeclDeclTypeInfo) {\n                        if (prevDeclDeclTypeInfo.decoratedType.category === TypeCategory.Function) {\n                            if (FunctionType.isOverloaded(prevDeclDeclTypeInfo.decoratedType)) {\n                                overloadedTypes.push(prevDeclDeclTypeInfo.decoratedType);\n                            }\n                        } else if (prevDeclDeclTypeInfo.decoratedType.category === TypeCategory.OverloadedFunction) {\n                            // If the previous declaration was itself an overloaded function,\n                            // copy the entries from it.\n                            overloadedTypes.push(...prevDeclDeclTypeInfo.decoratedType.overloads);\n                        }\n                    }\n                }\n\n                if (FunctionType.isOverloaded(type)) {\n                    overloadedTypes.push(type);\n                }\n\n                if (overloadedTypes.length === 1) {\n                    return overloadedTypes[0];\n                }\n\n                if (overloadedTypes.length > 1) {\n                    // Create a new overloaded type that copies the contents of the previous\n                    // one and adds a new function.\n                    const newOverload = OverloadedFunctionType.create(overloadedTypes);\n\n                    const prevOverload = overloadedTypes[overloadedTypes.length - 2];\n                    const isPrevOverloadAbstract = FunctionType.isAbstractMethod(prevOverload);\n                    const isCurrentOverloadAbstract = FunctionType.isAbstractMethod(type);\n\n                    if (isPrevOverloadAbstract !== isCurrentOverloadAbstract) {\n                        addDiagnostic(\n                            getFileInfo(node).diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.overloadAbstractMismatch().format({ name: node.name.value }),\n                            node.name\n                        );\n                    }\n\n                    return newOverload;\n                }\n            }\n        }\n\n        return type;\n    }\n\n    function createAsyncFunction(node: FunctionNode, functionType: FunctionType): FunctionType {\n        // Clone the original function and replace its return type with an\n        // Awaitable[<returnType>].\n        const awaitableFunctionType = FunctionType.clone(functionType);\n\n        if (functionType.details.declaredReturnType) {\n            awaitableFunctionType.details.declaredReturnType = createAwaitableReturnType(\n                node,\n                functionType.details.declaredReturnType\n            );\n        }\n\n        // Note that the inferred type, once lazily computed, needs to wrap the\n        // resulting type in an awaitable.\n        awaitableFunctionType.details.flags |= FunctionTypeFlags.WrapReturnTypeInAwait;\n\n        return awaitableFunctionType;\n    }\n\n    function createAwaitableReturnType(node: ParseNode, returnType: Type): Type {\n        let awaitableReturnType: Type | undefined;\n\n        if (isObject(returnType)) {\n            const classType = returnType.classType;\n            if (ClassType.isBuiltIn(classType)) {\n                if (classType.details.name === 'Generator') {\n                    // If the return type is a Generator, change it to an AsyncGenerator.\n                    const asyncGeneratorType = getTypingType(node, 'AsyncGenerator');\n                    if (asyncGeneratorType && isClass(asyncGeneratorType)) {\n                        const typeArgs: Type[] = [];\n                        const generatorTypeArgs = classType.typeArguments;\n                        if (generatorTypeArgs && generatorTypeArgs.length > 0) {\n                            typeArgs.push(generatorTypeArgs[0]);\n                        }\n                        if (generatorTypeArgs && generatorTypeArgs.length > 1) {\n                            typeArgs.push(generatorTypeArgs[1]);\n                        }\n                        awaitableReturnType = ObjectType.create(\n                            ClassType.cloneForSpecialization(\n                                asyncGeneratorType,\n                                typeArgs,\n                                /* isTypeArgumentExplicit */ true\n                            )\n                        );\n                    }\n                } else if (\n                    ['AsyncGenerator', 'AsyncIterator', 'AsyncIterable'].some((name) => name === classType.details.name)\n                ) {\n                    // If it's already an AsyncGenerator, AsyncIterator or AsyncIterable,\n                    // leave it as is.\n                    awaitableReturnType = returnType;\n                }\n            }\n        }\n\n        if (!awaitableReturnType) {\n            // Wrap in a Coroutine, which is a subclass of Awaitable.\n            const coroutineType = getTypingType(node, 'Coroutine');\n            if (coroutineType && isClass(coroutineType)) {\n                // Don't wrap a NoReturn in a Coroutine. Treat it as an Any.\n                if (isNoReturnType(returnType)) {\n                    returnType = AnyType.create();\n                }\n\n                awaitableReturnType = ObjectType.create(\n                    ClassType.cloneForSpecialization(\n                        coroutineType,\n                        [AnyType.create(), AnyType.create(), returnType],\n                        /* isTypeArgumentExplicit */ true\n                    )\n                );\n            } else {\n                awaitableReturnType = UnknownType.create();\n            }\n        }\n\n        return awaitableReturnType;\n    }\n\n    function inferFunctionReturnType(node: FunctionNode, isAbstract: boolean): Type | undefined {\n        const returnAnnotation = node.returnTypeAnnotation || node.functionAnnotationComment?.returnTypeAnnotation;\n\n        // This shouldn't be called if there is a declared return type, but it\n        // can happen if there are unexpected cycles between decorators and\n        // classes that they decorate. We'll just return an undefined type\n        // in this case.\n        if (returnAnnotation) {\n            return undefined;\n        }\n\n        // Is this type already cached?\n        let inferredReturnType = readTypeCache(node.suite);\n        if (inferredReturnType) {\n            return inferredReturnType;\n        }\n\n        if (!functionRecursionMap.has(node.id)) {\n            functionRecursionMap.set(node.id, true);\n\n            try {\n                let functionDecl: FunctionDeclaration | undefined;\n                const decl = AnalyzerNodeInfo.getDeclaration(node);\n                if (decl) {\n                    functionDecl = decl as FunctionDeclaration;\n                }\n\n                const functionNeverReturns = !isAfterNodeReachable(node);\n                const implicitlyReturnsNone = isAfterNodeReachable(node.suite);\n\n                // Infer the return type based on all of the return statements in the function's body.\n                if (getFileInfo(node).isStubFile) {\n                    // If a return type annotation is missing in a stub file, assume\n                    // it's an \"unknown\" type. In normal source files, we can infer the\n                    // type from the implementation.\n                    inferredReturnType = UnknownType.create();\n                } else {\n                    if (functionNeverReturns) {\n                        // If the function always raises and never returns, assume a \"NoReturn\" type.\n                        // Skip this for abstract methods which often are implemented with \"raise\n                        // NotImplementedError()\".\n                        if (isAbstract || methodAlwaysRaisesNotImplemented(functionDecl)) {\n                            inferredReturnType = UnknownType.create();\n                        } else {\n                            const noReturnClass = getTypingType(node, 'NoReturn');\n                            if (noReturnClass && isClass(noReturnClass)) {\n                                inferredReturnType = ObjectType.create(noReturnClass);\n                            } else {\n                                inferredReturnType = UnknownType.create();\n                            }\n                        }\n                    } else {\n                        const inferredReturnTypes: Type[] = [];\n                        if (functionDecl?.returnStatements) {\n                            functionDecl.returnStatements.forEach((returnNode) => {\n                                if (isNodeReachable(returnNode)) {\n                                    if (returnNode.returnExpression) {\n                                        const returnType = getTypeOfExpression(returnNode.returnExpression).type;\n                                        inferredReturnTypes.push(returnType || UnknownType.create());\n                                    } else {\n                                        inferredReturnTypes.push(NoneType.createInstance());\n                                    }\n                                }\n                            });\n                        }\n\n                        if (!functionNeverReturns && implicitlyReturnsNone) {\n                            inferredReturnTypes.push(NoneType.createInstance());\n                        }\n\n                        inferredReturnType = combineTypes(inferredReturnTypes);\n\n                        // Remove any unbound values since those would generate an exception\n                        // before being returned.\n                        inferredReturnType = removeUnbound(inferredReturnType);\n                    }\n\n                    // Is it a generator?\n                    if (functionDecl?.yieldStatements) {\n                        const inferredYieldTypes: Type[] = [];\n                        functionDecl.yieldStatements.forEach((yieldNode) => {\n                            if (isNodeReachable(yieldNode)) {\n                                if (yieldNode.nodeType === ParseNodeType.YieldFrom) {\n                                    const iteratorType = getTypeOfExpression(yieldNode.expression).type;\n                                    const yieldType = getTypeFromIterable(\n                                        iteratorType,\n                                        /* isAsync */ false,\n                                        yieldNode,\n                                        /* supportGetItem */ false\n                                    );\n                                    inferredYieldTypes.push(yieldType || UnknownType.create());\n                                } else {\n                                    if (yieldNode.expression) {\n                                        const yieldType = getTypeOfExpression(yieldNode.expression).type;\n                                        inferredYieldTypes.push(yieldType || UnknownType.create());\n                                    } else {\n                                        inferredYieldTypes.push(NoneType.createInstance());\n                                    }\n                                }\n                            }\n                        });\n\n                        if (inferredYieldTypes.length === 0) {\n                            inferredYieldTypes.push(NoneType.createInstance());\n                        }\n                        const inferredYieldType = combineTypes(inferredYieldTypes);\n\n                        // Inferred yield types need to be wrapped in a Generator to\n                        // produce the final result.\n                        const generatorType = getTypingType(node, 'Generator');\n                        if (generatorType && isClass(generatorType)) {\n                            inferredReturnType = ObjectType.create(\n                                ClassType.cloneForSpecialization(\n                                    generatorType,\n                                    [\n                                        inferredYieldType,\n                                        NoneType.createInstance(),\n                                        isNoReturnType(inferredReturnType)\n                                            ? NoneType.createInstance()\n                                            : inferredReturnType,\n                                    ],\n                                    /* isTypeArgumentExplicit */ true\n                                )\n                            );\n                        } else {\n                            inferredReturnType = UnknownType.create();\n                        }\n                    }\n                }\n\n                writeTypeCache(node.suite, inferredReturnType);\n            } finally {\n                functionRecursionMap.delete(node.id);\n            }\n        }\n\n        return inferredReturnType;\n    }\n\n    // Determines whether the function consists only of a \"raise\" statement\n    // and the exception type raised is a NotImplementedError. This is commonly\n    // used for abstract methods that\n    function methodAlwaysRaisesNotImplemented(functionDecl?: FunctionDeclaration): boolean {\n        if (\n            !functionDecl ||\n            !functionDecl.isMethod ||\n            functionDecl.returnStatements ||\n            functionDecl.yieldStatements ||\n            !functionDecl.raiseStatements\n        ) {\n            return false;\n        }\n\n        for (const raiseStatement of functionDecl.raiseStatements) {\n            if (!raiseStatement.typeExpression || raiseStatement.valueExpression) {\n                return false;\n            }\n            const raiseType = getTypeOfExpression(raiseStatement.typeExpression).type;\n            const classType = isClass(raiseType) ? raiseType : isObject(raiseType) ? raiseType.classType : undefined;\n            if (!classType || !ClassType.isBuiltIn(classType, 'NotImplementedError')) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function evaluateTypesForForStatement(node: ForNode): void {\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        const iteratorType = getTypeOfExpression(node.iterableExpression).type;\n        const iteratedType = getTypeFromIterable(iteratorType, !!node.isAsync, node.iterableExpression, !node.isAsync);\n\n        assignTypeToExpression(node.targetExpression, iteratedType, node.targetExpression);\n\n        writeTypeCache(node, iteratedType);\n    }\n\n    function evaluateTypesForExceptStatement(node: ExceptNode): void {\n        // This should be called only if the except node has a target exception.\n        assert(node.typeExpression !== undefined);\n\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        const exceptionTypes = getTypeOfExpression(node.typeExpression!).type;\n\n        function getExceptionType(exceptionType: Type, errorNode: ParseNode) {\n            if (isAnyOrUnknown(exceptionType)) {\n                return exceptionType;\n            }\n\n            if (isObject(exceptionType)) {\n                exceptionType = transformTypeObjectToClass(exceptionType);\n            }\n\n            if (isClass(exceptionType)) {\n                return ObjectType.create(exceptionType);\n            }\n\n            if (isObject(exceptionType)) {\n                const iterableType = getTypeFromIterable(\n                    exceptionType,\n                    /* isAsync */ false,\n                    errorNode,\n                    /* supportGetItem */ false\n                );\n\n                return doForSubtypes(iterableType, (subtype) => {\n                    if (isAnyOrUnknown(subtype)) {\n                        return subtype;\n                    }\n\n                    const transformedSubtype = transformTypeObjectToClass(subtype);\n                    if (isClass(transformedSubtype)) {\n                        return ObjectType.create(transformedSubtype);\n                    }\n\n                    return UnknownType.create();\n                });\n            }\n\n            return UnknownType.create();\n        }\n\n        const targetType = doForSubtypes(exceptionTypes, (subType) => {\n            // If more than one type was specified for the exception, we'll receive\n            // a specialized tuple object here.\n            const tupleType = getSpecializedTupleType(subType);\n            if (tupleType && tupleType.typeArguments) {\n                const entryTypes = tupleType.typeArguments.map((t) => {\n                    return getExceptionType(t, node.typeExpression!);\n                });\n                return combineTypes(entryTypes);\n            }\n\n            return getExceptionType(subType, node.typeExpression!);\n        });\n\n        if (node.name) {\n            assignTypeToExpression(node.name, targetType);\n        }\n\n        writeTypeCache(node, targetType);\n    }\n\n    function evaluateTypesForWithStatement(node: WithItemNode): void {\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        let exprType = getTypeOfExpression(node.expression).type;\n        const isAsync = node.parent && node.parent.nodeType === ParseNodeType.With && !!node.parent.isAsync;\n\n        if (isOptionalType(exprType)) {\n            const fileInfo = getFileInfo(node);\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportOptionalContextManager,\n                DiagnosticRule.reportOptionalContextManager,\n                Localizer.Diagnostic.noneNotUsableWith(),\n                node.expression\n            );\n            exprType = removeNoneFromUnion(exprType);\n        }\n\n        // Verify that the target has an __enter__ or __aenter__ method defined.\n        const enterMethodName = isAsync ? '__aenter__' : '__enter__';\n        const scopedType = doForSubtypes(exprType, (subtype) => {\n            subtype = makeTypeVarsConcrete(subtype);\n\n            if (isAnyOrUnknown(subtype)) {\n                return subtype;\n            }\n\n            const diag = new DiagnosticAddendum();\n            const additionalHelp = new DiagnosticAddendum();\n\n            if (isObject(subtype)) {\n                const enterType = getTypeFromObjectMember(\n                    node.expression,\n                    subtype,\n                    enterMethodName,\n                    { method: 'get' },\n                    diag,\n                    MemberAccessFlags.None\n                );\n\n                if (enterType) {\n                    let memberReturnType: Type;\n                    if (enterType.category === TypeCategory.Function) {\n                        memberReturnType = getFunctionEffectiveReturnType(enterType);\n                    } else {\n                        memberReturnType = UnknownType.create();\n                    }\n\n                    // For \"async while\", an implicit \"await\" is performed.\n                    if (isAsync) {\n                        memberReturnType = getTypeFromAwaitable(memberReturnType, node);\n                    }\n\n                    return memberReturnType;\n                }\n\n                if (!isAsync) {\n                    const memberType = getTypeFromObjectMember(\n                        node.expression,\n                        subtype,\n                        '__aenter__',\n                        { method: 'get' },\n                        diag,\n                        MemberAccessFlags.None\n                    );\n                    if (memberType) {\n                        additionalHelp.addMessage(Localizer.DiagnosticAddendum.asyncHelp());\n                    }\n                }\n            }\n\n            const fileInfo = getFileInfo(node);\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                Localizer.Diagnostic.typeNotUsableWith().format({ type: printType(subtype), method: enterMethodName }) +\n                    additionalHelp.getString(),\n                node.expression\n            );\n            return UnknownType.create();\n        });\n\n        // Verify that the target has an __exit__ or __aexit__ method defined.\n        const exitMethodName = isAsync ? '__aexit__' : '__exit__';\n        doForSubtypes(exprType, (subtype) => {\n            subtype = makeTypeVarsConcrete(subtype);\n\n            if (isAnyOrUnknown(subtype)) {\n                return undefined;\n            }\n\n            const diag = new DiagnosticAddendum();\n\n            if (isObject(subtype)) {\n                const exitType = getTypeFromObjectMember(\n                    node.expression,\n                    subtype,\n                    exitMethodName,\n                    { method: 'get' },\n                    diag,\n                    MemberAccessFlags.None\n                );\n\n                if (exitType) {\n                    return undefined;\n                }\n            }\n\n            const fileInfo = getFileInfo(node);\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                Localizer.Diagnostic.typeNotUsableWith().format({ type: printType(subtype), method: exitMethodName }),\n                node.expression\n            );\n            return undefined;\n        });\n\n        if (node.target) {\n            assignTypeToExpression(node.target, scopedType, node.target);\n        }\n\n        writeTypeCache(node, scopedType);\n    }\n\n    function evaluateTypesForImportAs(node: ImportAsNode): void {\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        let symbolNameNode: NameNode;\n        if (node.alias) {\n            // The symbol name is defined by the alias.\n            symbolNameNode = node.alias;\n        } else {\n            // There was no alias, so we need to use the first element of\n            // the name parts as the symbol.\n            symbolNameNode = node.module.nameParts[0];\n        }\n\n        if (!symbolNameNode) {\n            // This can happen in certain cases where there are parse errors.\n            return;\n        }\n\n        // Look up the symbol to find the alias declaration.\n        let symbolType = getAliasedSymbolTypeForName(node, symbolNameNode.value) || UnknownType.create();\n\n        // Is there a cached module type associated with this node? If so, use\n        // it instead of the type we just created.\n        const cachedModuleType = readTypeCache(node) as ModuleType;\n        if (cachedModuleType && isModule(cachedModuleType) && symbolType) {\n            if (isTypeSame(symbolType, cachedModuleType)) {\n                symbolType = cachedModuleType;\n            }\n        }\n\n        assignTypeToNameNode(symbolNameNode, symbolType);\n\n        writeTypeCache(node, symbolType);\n    }\n\n    function evaluateTypesForImportFromAs(node: ImportFromAsNode): void {\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        const aliasNode = node.alias || node.name;\n\n        let symbolType = getAliasedSymbolTypeForName(node, aliasNode.value);\n        if (!symbolType) {\n            const parentNode = node.parent as ImportFromNode;\n            assert(parentNode && parentNode.nodeType === ParseNodeType.ImportFrom);\n            assert(!parentNode.isWildcardImport);\n\n            const importInfo = AnalyzerNodeInfo.getImportInfo(parentNode.module);\n            if (importInfo && importInfo.isImportFound && !importInfo.isNativeLib) {\n                const resolvedPath = importInfo.resolvedPaths[importInfo.resolvedPaths.length - 1];\n\n                const importLookupInfo = importLookup(resolvedPath);\n                const fileInfo = getFileInfo(node);\n                let reportError = false;\n\n                // If we were able to resolve the import, report the error as\n                // an unresolved symbol.\n                if (importLookupInfo) {\n                    // Handle PEP 562 support for module-level __getattr__ function,\n                    // introduced in Python 3.7.\n                    if (\n                        fileInfo.executionEnvironment.pythonVersion < PythonVersion.V3_7 ||\n                        !importLookupInfo.symbolTable.get('__getattr__')\n                    ) {\n                        reportError = true;\n                    }\n                } else if (!resolvedPath) {\n                    // This corresponds to the \"from . import a\" form.\n                    reportError = true;\n                }\n\n                if (reportError) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.importSymbolUnknown().format({ name: node.name.value }),\n                        node.name\n                    );\n                }\n            }\n\n            symbolType = UnknownType.create();\n        }\n\n        assignTypeToNameNode(aliasNode, symbolType);\n        writeTypeCache(node, symbolType);\n    }\n\n    function evaluateTypesForImportFrom(node: ImportFromNode): void {\n        if (readTypeCache(node)) {\n            return;\n        }\n\n        // Use the first element of the name parts as the symbol.\n        const symbolNameNode = node.module.nameParts[0];\n\n        // Look up the symbol to find the alias declaration.\n        let symbolType = getAliasedSymbolTypeForName(node, symbolNameNode.value) || UnknownType.create();\n\n        // Is there a cached module type associated with this node? If so, use\n        // it instead of the type we just created.\n        const cachedModuleType = readTypeCache(node) as ModuleType;\n        if (cachedModuleType && isModule(cachedModuleType) && symbolType) {\n            if (isTypeSame(symbolType, cachedModuleType)) {\n                symbolType = cachedModuleType;\n            }\n        }\n\n        assignTypeToNameNode(symbolNameNode, symbolType);\n\n        writeTypeCache(node, symbolType);\n    }\n\n    function getAliasedSymbolTypeForName(\n        node: ImportAsNode | ImportFromAsNode | ImportFromNode,\n        name: string\n    ): Type | undefined {\n        const symbolWithScope = lookUpSymbolRecursive(node, name, /* honorCodeFlow */ true);\n        if (!symbolWithScope) {\n            return undefined;\n        }\n\n        let aliasDecl = symbolWithScope.symbol.getDeclarations().find((decl) => decl.node === node);\n\n        // If we didn't find an exact match, look for any alias associated with\n        // this symbol. In cases where we have multiple ImportAs nodes that share\n        // the same first-part name (e.g. \"import asyncio\" and \"import asyncio.tasks\"),\n        // we may not find the declaration associated with this node.\n        if (!aliasDecl) {\n            aliasDecl = symbolWithScope.symbol.getDeclarations().find((decl) => decl.type === DeclarationType.Alias);\n        }\n\n        if (!aliasDecl) {\n            return undefined;\n        }\n\n        assert(aliasDecl.type === DeclarationType.Alias);\n\n        const resolvedDecl = resolveAliasDeclaration(aliasDecl, /* resolveLocalNames */ true);\n        if (!resolvedDecl) {\n            return resolvedDecl;\n        }\n\n        return getInferredTypeOfDeclaration(aliasDecl);\n    }\n\n    // In some cases, an expression must be evaluated in the context of another\n    // expression or statement that contains it. This contextual evaluation\n    // allows for bidirectional type evaluation.\n    function evaluateTypesForExpressionInContext(node: ExpressionNode): void {\n        let lastContextualExpression = node;\n        let curNode: ParseNode | undefined = node;\n\n        function isContextual(node: ParseNode) {\n            // Parameters are contextual only for lambdas.\n            if (\n                node.nodeType === ParseNodeType.Parameter &&\n                node.parent &&\n                node.parent.nodeType === ParseNodeType.Lambda\n            ) {\n                return true;\n            }\n\n            // Arguments are contextual only for call nodes.\n            if (\n                node.nodeType === ParseNodeType.Argument &&\n                node.parent &&\n                node.parent.nodeType === ParseNodeType.Call\n            ) {\n                return true;\n            }\n\n            return (\n                node.nodeType === ParseNodeType.Call ||\n                node.nodeType === ParseNodeType.Dictionary ||\n                node.nodeType === ParseNodeType.FormatString ||\n                node.nodeType === ParseNodeType.List ||\n                node.nodeType === ParseNodeType.Lambda ||\n                node.nodeType === ParseNodeType.MemberAccess ||\n                node.nodeType === ParseNodeType.Set ||\n                node.nodeType === ParseNodeType.String ||\n                node.nodeType === ParseNodeType.Tuple ||\n                node.nodeType === ParseNodeType.Unpack ||\n                node.nodeType === ParseNodeType.DictionaryKeyEntry ||\n                node.nodeType === ParseNodeType.DictionaryExpandEntry ||\n                node.nodeType === ParseNodeType.ListComprehension ||\n                node.nodeType === ParseNodeType.ListComprehensionFor ||\n                node.nodeType === ParseNodeType.ListComprehensionIf\n            );\n        }\n\n        // Check for a couple of special cases where the node is a NameNode but\n        // is technically not part of an expression. We'll handle these here so\n        // callers don't need to include special-case logic.\n        if (node.nodeType === ParseNodeType.Name && node.parent) {\n            if (node.parent.nodeType === ParseNodeType.Function && node.parent.name === node) {\n                getTypeOfFunction(node.parent);\n                return;\n            } else if (node.parent.nodeType === ParseNodeType.Class && node.parent.name === node) {\n                getTypeOfClass(node.parent);\n                return;\n            } else if (\n                node.parent.nodeType === ParseNodeType.Global ||\n                node.parent.nodeType === ParseNodeType.Nonlocal\n            ) {\n                // For global and nonlocal statements, allow forward references so\n                // we don't use code flow during symbol lookups.\n                getTypeOfExpression(node, /* expectedType */ undefined, EvaluatorFlags.AllowForwardReferences);\n                return;\n            }\n        }\n\n        // Scan up the parse tree until we find a non-expression (while\n        // looking for contextual expressions in the process).\n        while (curNode) {\n            const isNodeContextual = isContextual(curNode);\n            if (!isNodeContextual && !isExpressionNode(curNode)) {\n                break;\n            }\n            if (isNodeContextual) {\n                lastContextualExpression = curNode as ExpressionNode;\n            }\n\n            curNode = curNode.parent;\n        }\n\n        const parent = lastContextualExpression.parent!;\n        if (parent.nodeType === ParseNodeType.Assignment) {\n            if (lastContextualExpression === parent.typeAnnotationComment) {\n                getTypeOfAnnotation(\n                    lastContextualExpression,\n                    ParseTreeUtils.isFinalAllowedForAssignmentTarget(parent.leftExpression)\n                );\n            } else {\n                evaluateTypesForAssignmentStatement(parent);\n            }\n            return;\n        }\n\n        if (parent.nodeType === ParseNodeType.AugmentedAssignment) {\n            evaluateTypesForAugmentedAssignment(parent);\n            return;\n        }\n\n        const evaluateTypeAnnotationExpression = (node: TypeAnnotationNode) => {\n            const annotationParent = node.parent;\n            if (annotationParent?.nodeType === ParseNodeType.Assignment && annotationParent.leftExpression === parent) {\n                evaluateTypesForAssignmentStatement(annotationParent);\n            } else {\n                const annotationType = getTypeOfAnnotation(\n                    node.typeAnnotation,\n                    ParseTreeUtils.isFinalAllowedForAssignmentTarget(node.valueExpression)\n                );\n                if (annotationType) {\n                    writeTypeCache(node.valueExpression, annotationType);\n                }\n            }\n        };\n\n        if (parent.nodeType === ParseNodeType.TypeAnnotation) {\n            evaluateTypeAnnotationExpression(parent);\n            return;\n        }\n\n        if (parent.nodeType === ParseNodeType.ModuleName) {\n            // A name within a module name isn't an expression,\n            // so there's nothing we can evaluate here.\n            return;\n        }\n\n        if (parent.nodeType === ParseNodeType.Argument && lastContextualExpression === parent.name) {\n            // A name used to specify a named parameter in an argument isn't an\n            // expression, so there's nothing we can evaluate here.\n            return;\n        }\n\n        if (parent.nodeType === ParseNodeType.Return && parent.returnExpression) {\n            const enclosingFunctionNode = ParseTreeUtils.getEnclosingFunction(node);\n            const declaredReturnType = enclosingFunctionNode\n                ? getFunctionDeclaredReturnType(enclosingFunctionNode)\n                : undefined;\n            getTypeOfExpression(parent.returnExpression, declaredReturnType, EvaluatorFlags.None);\n            return;\n        }\n\n        // If the parent is an expression, we'll evaluate it to provide\n        // the context for its child. If it's not, we'll evaluate the\n        // child directly without any context.\n        const nodeToEvaluate =\n            isExpressionNode(parent) && parent.nodeType !== ParseNodeType.Error\n                ? (parent as ExpressionNode)\n                : lastContextualExpression;\n\n        if (nodeToEvaluate.nodeType === ParseNodeType.TypeAnnotation) {\n            evaluateTypeAnnotationExpression(nodeToEvaluate);\n        } else {\n            getTypeOfExpression(nodeToEvaluate);\n        }\n    }\n\n    function evaluateTypeOfParameter(node: ParameterNode): void {\n        assert(node.name !== undefined);\n\n        // We need to handle lambdas differently from functions because\n        // the former never have parameter type annotations but can\n        // be inferred, whereas the latter sometimes have type annotations\n        // but cannot be inferred.\n        const parent = node.parent!;\n        if (parent.nodeType === ParseNodeType.Lambda) {\n            evaluateTypesForExpressionInContext(parent);\n            return;\n        }\n\n        assert(parent.nodeType === ParseNodeType.Function);\n        const functionNode = parent as FunctionNode;\n\n        const paramIndex = functionNode.parameters.findIndex((param) => param === node);\n        const typeAnnotation = getTypeAnnotationForParameter(functionNode, paramIndex);\n\n        if (typeAnnotation) {\n            writeTypeCache(\n                node.name!,\n                transformVariadicParamType(\n                    node,\n                    node.category,\n                    getTypeOfAnnotation(typeAnnotation, /* allowFinal */ false, /* associateTypeVarsWithScope */ true)\n                )\n            );\n            return;\n        }\n\n        // We may be able to infer the type of the first parameter.\n        if (paramIndex === 0) {\n            const containingClassNode = ParseTreeUtils.getEnclosingClass(functionNode, true);\n            if (containingClassNode) {\n                const classInfo = getTypeOfClass(containingClassNode);\n                if (classInfo) {\n                    const functionFlags = getFunctionFlagsFromDecorators(functionNode, true);\n                    // If the first parameter doesn't have an explicit type annotation,\n                    // provide a type if it's an instance, class or constructor method.\n                    const inferredParamType = inferFirstParamType(\n                        functionFlags,\n                        classInfo.classType,\n                        containingClassNode\n                    );\n                    writeTypeCache(node.name!, inferredParamType || UnknownType.create());\n                    return;\n                }\n            }\n        }\n\n        // We weren't able to infer the input parameter type. Set its\n        // type to unknown.\n        writeTypeCache(node.name!, transformVariadicParamType(node, node.category, UnknownType.create()));\n    }\n\n    // Evaluates the types that are assigned within the statement that contains\n    // the specified parse node. In some cases, a broader statement may need to\n    // be evaluated to provide sufficient context for the type. Evaluated types\n    // are written back to the type cache for later retrieval.\n    function evaluateTypesForStatement(node: ParseNode): void {\n        let curNode: ParseNode | undefined = node;\n\n        while (curNode) {\n            switch (curNode.nodeType) {\n                case ParseNodeType.Assignment: {\n                    // See if the assignment is part of a chain of assignments. If so,\n                    // evaluate the entire chain.\n                    const isInAssignmentChain =\n                        curNode.parent &&\n                        (curNode.parent.nodeType === ParseNodeType.Assignment ||\n                            curNode.parent.nodeType === ParseNodeType.AssignmentExpression ||\n                            curNode.parent.nodeType === ParseNodeType.AugmentedAssignment) &&\n                        curNode.parent.rightExpression === curNode;\n                    if (!isInAssignmentChain) {\n                        evaluateTypesForAssignmentStatement(curNode);\n                        return;\n                    }\n                    break;\n                }\n\n                case ParseNodeType.AssignmentExpression: {\n                    getTypeOfExpression(curNode);\n                    return;\n                }\n\n                case ParseNodeType.AugmentedAssignment: {\n                    evaluateTypesForAugmentedAssignment(curNode);\n                    return;\n                }\n\n                case ParseNodeType.Class: {\n                    getTypeOfClass(curNode);\n                    return;\n                }\n\n                case ParseNodeType.Parameter: {\n                    evaluateTypeOfParameter(curNode);\n                    return;\n                }\n\n                case ParseNodeType.Lambda: {\n                    evaluateTypesForExpressionInContext(curNode);\n                    return;\n                }\n\n                case ParseNodeType.Function: {\n                    getTypeOfFunction(curNode);\n                    return;\n                }\n\n                case ParseNodeType.For: {\n                    evaluateTypesForForStatement(curNode);\n                    return;\n                }\n\n                case ParseNodeType.Except: {\n                    evaluateTypesForExceptStatement(curNode);\n                    return;\n                }\n\n                case ParseNodeType.WithItem: {\n                    evaluateTypesForWithStatement(curNode);\n                    return;\n                }\n\n                case ParseNodeType.ListComprehensionFor: {\n                    const listComprehension = curNode.parent as ListComprehensionNode;\n                    assert(listComprehension.nodeType === ParseNodeType.ListComprehension);\n                    evaluateTypesForExpressionInContext(listComprehension);\n                    return;\n                }\n\n                case ParseNodeType.ImportAs: {\n                    evaluateTypesForImportAs(curNode);\n                    return;\n                }\n\n                case ParseNodeType.ImportFromAs: {\n                    evaluateTypesForImportFromAs(curNode);\n                    return;\n                }\n\n                case ParseNodeType.ImportFrom: {\n                    evaluateTypesForImportFrom(curNode);\n                    return;\n                }\n            }\n\n            curNode = curNode.parent;\n        }\n\n        fail('Unexpected assignment target');\n        return undefined;\n    }\n\n    function getTypeFromWildcardImport(flowNode: FlowWildcardImport, name: string): Type {\n        const importInfo = AnalyzerNodeInfo.getImportInfo(flowNode.node.module);\n        assert(importInfo !== undefined && importInfo.isImportFound);\n        assert(flowNode.node.isWildcardImport);\n\n        const symbolWithScope = lookUpSymbolRecursive(flowNode.node, name, /* honorCodeFlow */ false);\n        assert(symbolWithScope !== undefined);\n        const decls = symbolWithScope!.symbol.getDeclarations();\n        const wildcardDecl = decls.find((decl) => decl.node === flowNode.node);\n\n        if (!wildcardDecl) {\n            return UnknownType.create();\n        }\n\n        return getInferredTypeOfDeclaration(wildcardDecl) || UnknownType.create();\n    }\n\n    // When we're evaluating a call to determine whether it returns NoReturn,\n    // we don't want to do a full type evaluation, which would be expensive\n    // and create circular dependencies in type evaluation. Instead, we do\n    // a best-effort evaluation using only declared types (functions, parameters,\n    // etc.).\n    function getDeclaredCallBaseType(node: ExpressionNode): Type | undefined {\n        if (node.nodeType === ParseNodeType.Name) {\n            const symbolWithScope = lookUpSymbolRecursive(node, node.value, /* honorCodeFlow */ false);\n\n            if (!symbolWithScope) {\n                return undefined;\n            }\n\n            const symbol = symbolWithScope.symbol;\n            const type = getDeclaredTypeOfSymbol(symbol);\n            if (type) {\n                return type;\n            }\n\n            // There was no declared type. Before we give up, see if the\n            // symbol is a function parameter whose value can be inferred\n            // or an imported symbol.\n            const declarations = symbol.getDeclarations();\n            if (declarations.length === 0) {\n                return undefined;\n            }\n\n            const decl = declarations[declarations.length - 1];\n            if (decl.type === DeclarationType.Parameter) {\n                evaluateTypeOfParameter(decl.node);\n                return readTypeCache(decl.node.name!);\n            }\n\n            if (decl.type === DeclarationType.Alias) {\n                return getInferredTypeOfDeclaration(decl);\n            }\n\n            return undefined;\n        }\n\n        if (node.nodeType === ParseNodeType.MemberAccess) {\n            const memberName = node.memberName.value;\n            let baseType = getDeclaredCallBaseType(node.leftExpression);\n            if (!baseType) {\n                return undefined;\n            }\n\n            baseType = makeTypeVarsConcrete(baseType);\n\n            let symbol: Symbol | undefined;\n            if (isModule(baseType)) {\n                symbol = ModuleType.getField(baseType, memberName);\n            } else if (isClass(baseType)) {\n                const classMemberInfo = lookUpClassMember(baseType, memberName);\n                symbol = classMemberInfo ? classMemberInfo.symbol : undefined;\n            } else if (isObject(baseType)) {\n                const classMemberInfo = lookUpClassMember(baseType.classType, memberName);\n                symbol = classMemberInfo ? classMemberInfo.symbol : undefined;\n            }\n\n            if (!symbol) {\n                return undefined;\n            }\n\n            return getDeclaredTypeOfSymbol(symbol);\n        }\n\n        return undefined;\n    }\n\n    // Determines whether a call never returns without fully evaluating its type.\n    function isCallNoReturn(node: CallNode) {\n        // See if this information is cached already.\n        if (callIsNoReturnCache.has(node.id)) {\n            return callIsNoReturnCache.get(node.id);\n        }\n\n        // Initially set to false to avoid infinite recursion.\n        callIsNoReturnCache.set(node.id, false);\n\n        let callIsNoReturn = false;\n\n        // Evaluate the call base type.\n        const callType = getDeclaredCallBaseType(node.leftExpression);\n        if (callType) {\n            // We assume here that no constructors or __call__ methods\n            // will be inferred \"no return\" types, so we can restrict\n            // our check to functions.\n            let functionType: FunctionType | undefined;\n            if (callType.category === TypeCategory.Function) {\n                functionType = callType;\n            } else if (callType.category === TypeCategory.OverloadedFunction) {\n                // Use the last overload, which should be the most general.\n                const overloadedFunction = callType;\n                functionType = overloadedFunction.overloads[overloadedFunction.overloads.length - 1];\n            }\n\n            if (functionType && !FunctionType.isAsync(functionType)) {\n                if (functionType.details.declaredReturnType) {\n                    callIsNoReturn = isNoReturnType(functionType.details.declaredReturnType);\n                } else if (functionType.inferredReturnType) {\n                    // If the inferred return type has already been lazily\n                    // evaluated, use it.\n                    callIsNoReturn = isNoReturnType(functionType.inferredReturnType);\n                } else if (functionType.details.declaration) {\n                    // If the function has yield expressions, it's a generator, and\n                    // we'll assume the yield statements are reachable. Also, don't\n                    // infer a \"no return\" type for abstract methods.\n                    if (\n                        !functionType.details.declaration.yieldStatements &&\n                        !FunctionType.isAbstractMethod(functionType) &&\n                        !FunctionType.isStubDefinition(functionType) &&\n                        !FunctionType.isPyTypedDefinition(functionType)\n                    ) {\n                        callIsNoReturn = !isAfterNodeReachable(functionType.details.declaration.node);\n                    }\n                }\n            }\n        }\n\n        // Cache the value for next time.\n        callIsNoReturnCache.set(node.id, callIsNoReturn);\n\n        return callIsNoReturn;\n    }\n\n    // Attempts to determine the type of the reference expression at the\n    // point in the code. If the code flow analysis has nothing to say\n    // about that expression, it return undefined.\n    function getFlowTypeOfReference(\n        reference: NameNode | MemberAccessNode,\n        targetSymbolId: number,\n        initialType: Type | undefined\n    ): Type | undefined {\n        // See if this execution scope requires code flow for this reference expression.\n        const referenceKey = createKeyForReference(reference);\n        const executionScope = ParseTreeUtils.getExecutionScopeNode(reference);\n        const codeFlowExpressions = AnalyzerNodeInfo.getCodeFlowExpressions(executionScope);\n\n        assert(codeFlowExpressions !== undefined);\n        if (!codeFlowExpressions!.has(referenceKey)) {\n            return undefined;\n        }\n\n        // Is there an code flow analyzer cached for this execution scope?\n        const executionNode = ParseTreeUtils.getExecutionScopeNode(reference);\n        let analyzer: CodeFlowAnalyzer | undefined;\n\n        if (isNodeInReturnTypeInferenceContext(executionNode)) {\n            // If we're performing the analysis within a temporary\n            // context of a function for purposes of inferring its\n            // return type for a specified set of arguments, use\n            // a temporary analyzer that we'll use only for this context.\n            analyzer = getCodeFlowAnalyzerForReturnTypeInferenceContext();\n        } else {\n            analyzer = codeFlowAnalyzerCache.get(executionNode.id);\n\n            if (!analyzer) {\n                // Allocate a new code flow analyzer.\n                analyzer = createCodeFlowAnalyzer();\n                codeFlowAnalyzerCache.set(executionNode.id, analyzer);\n            }\n        }\n\n        const wasIncompleteTypeMode = incompleteTypeTracker.isIncompleteTypeMode();\n        const codeFlowResult = analyzer.getTypeFromCodeFlow(reference, targetSymbolId, initialType);\n\n        if (codeFlowResult.isIncomplete) {\n            incompleteTypeTracker.enterIncompleteTypeMode();\n        } else if (!wasIncompleteTypeMode) {\n            incompleteTypeTracker.leaveIncompleteTypeMode();\n        }\n\n        return codeFlowResult.type;\n    }\n\n    // Creates a new code flow analyzer that can be used to narrow the types\n    // of the expressions within an execution context. Each code flow analyzer\n    // instance maintains a cache of types it has already determined.\n    function createCodeFlowAnalyzer(): CodeFlowAnalyzer {\n        const flowNodeTypeCacheSet = new Map<string, TypeCache>();\n\n        function getTypeFromCodeFlow(\n            reference: NameNode | MemberAccessNode,\n            targetSymbolId: number,\n            initialType: Type | undefined\n        ): FlowNodeTypeResult {\n            const flowNode = AnalyzerNodeInfo.getFlowNode(reference);\n            const referenceKey = createKeyForReference(reference) + `.${targetSymbolId.toString()}`;\n            let flowNodeTypeCache = flowNodeTypeCacheSet.get(referenceKey);\n            if (!flowNodeTypeCache) {\n                flowNodeTypeCache = new Map<number, CachedType | undefined>();\n                flowNodeTypeCacheSet.set(referenceKey, flowNodeTypeCache);\n            }\n\n            // Caches the type of the flow node in our local cache, keyed by the flow node ID.\n            function setCacheEntry(\n                flowNode: FlowNode,\n                type: Type | undefined,\n                isIncomplete: boolean\n            ): FlowNodeTypeResult {\n                if (!isIncomplete) {\n                    flowIncompleteGeneration++;\n                } else {\n                    const prevEntry = flowNodeTypeCache!.get(flowNode.id);\n                    if (prevEntry === undefined) {\n                        flowIncompleteGeneration++;\n                    } else if (type && (prevEntry as IncompleteType).isIncompleteType) {\n                        const prevIncompleteType = prevEntry as IncompleteType;\n                        if (prevIncompleteType.type && !isTypeSame(prevIncompleteType.type, type)) {\n                            flowIncompleteGeneration++;\n                        }\n                    }\n                }\n\n                // For speculative or incomplete types, we'll create a separate\n                // object. For non-speculative and complete types, we'll store\n                // the type directly.\n                const entry: CachedType | undefined = isIncomplete\n                    ? {\n                          isIncompleteType: true,\n                          type,\n                          incompleteSubtypes: [],\n                          generationCount: flowIncompleteGeneration,\n                      }\n                    : type;\n\n                flowNodeTypeCache!.set(flowNode.id, entry);\n                speculativeTypeTracker.trackEntry(flowNodeTypeCache!, flowNode.id);\n\n                return {\n                    type,\n                    isIncomplete,\n                    generationCount: flowIncompleteGeneration,\n                    incompleteSubtypes: isIncomplete ? [] : undefined,\n                };\n            }\n\n            function setIncompleteSubtype(flowNode: FlowNode, index: number, type: Type | undefined) {\n                const cachedEntry = flowNodeTypeCache!.get(flowNode.id);\n                if (cachedEntry === undefined || !isIncompleteType(cachedEntry)) {\n                    fail('setIncompleteSubtype can be called only on a valid incomplete cache entry');\n                }\n\n                const incompleteEntries = cachedEntry.incompleteSubtypes;\n                if (index < incompleteEntries.length) {\n                    incompleteEntries[index] = type;\n                } else {\n                    assert(incompleteEntries.length === index);\n                    incompleteEntries.push(type);\n                }\n\n                flowIncompleteGeneration++;\n\n                return getCacheEntry(flowNode);\n            }\n\n            function deleteCacheEntry(flowNode: FlowNode) {\n                flowNodeTypeCache!.delete(flowNode.id);\n            }\n\n            function getCacheEntry(flowNode: FlowNode): FlowNodeTypeResult | undefined {\n                if (!flowNodeTypeCache!.has(flowNode.id)) {\n                    return undefined;\n                }\n\n                const cachedEntry = flowNodeTypeCache!.get(flowNode.id);\n                if (cachedEntry === undefined) {\n                    return {\n                        type: cachedEntry,\n                        isIncomplete: false,\n                    };\n                }\n\n                if (!isIncompleteType(cachedEntry)) {\n                    return {\n                        type: cachedEntry,\n                        isIncomplete: false,\n                    };\n                }\n\n                let type = cachedEntry.type;\n\n                if (cachedEntry.incompleteSubtypes.length > 0) {\n                    // Recompute the effective type based on all of the incomplete\n                    // types we've accumulated so far.\n                    const typesToCombine: Type[] = [];\n                    cachedEntry.incompleteSubtypes.forEach((t) => {\n                        if (t) {\n                            typesToCombine.push(t);\n                        }\n                    });\n                    type = typesToCombine.length > 0 ? combineTypes(typesToCombine) : undefined;\n                }\n\n                return {\n                    type,\n                    isIncomplete: true,\n                    incompleteSubtypes: cachedEntry.incompleteSubtypes,\n                    generationCount: cachedEntry.generationCount,\n                };\n            }\n\n            function evaluateAssignmentFlowNode(flowNode: FlowAssignment): Type | undefined {\n                // For function and class nodes, the reference node is the name\n                // node, but we need to use the parent node (the FunctionNode or ClassNode)\n                // to access the decorated type in the type cache.\n                let nodeForCacheLookup: ParseNode = flowNode.node;\n                const parentNode = flowNode.node.parent;\n                if (parentNode) {\n                    if (parentNode.nodeType === ParseNodeType.Function || parentNode.nodeType === ParseNodeType.Class) {\n                        nodeForCacheLookup = parentNode;\n                    }\n                }\n\n                let cachedType = readTypeCache(nodeForCacheLookup);\n                if (!cachedType) {\n                    // There is no cached type for this expression, so we need to\n                    // evaluate it.\n                    evaluateTypesForStatement(flowNode.node);\n                    cachedType = readTypeCache(nodeForCacheLookup);\n                }\n\n                return cachedType;\n            }\n\n            // If this flow has no knowledge of the target expression, it returns undefined.\n            // If the start flow node for this scope is reachable, the typeAtStart value is\n            // returned.\n            function getTypeFromFlowNode(\n                flowNode: FlowNode,\n                reference: NameNode | MemberAccessNode,\n                targetSymbolId: number,\n                initialType: Type | undefined\n            ): FlowNodeTypeResult {\n                let curFlowNode = flowNode;\n\n                // This is a frequently-called routine, so it's a good place to call\n                // the cancellation check. If the operation is canceled, an exception\n                // will be thrown at this point.\n                checkForCancellation();\n\n                while (true) {\n                    // Have we already been here? If so, use the cached value.\n                    const cachedEntry = getCacheEntry(curFlowNode);\n                    if (cachedEntry) {\n                        // If the cached entry is incomplete, we can use it only if nothing\n                        // has changed that may cause the previously-reported incomplete type to change.\n                        if (!cachedEntry.isIncomplete || cachedEntry.generationCount === flowIncompleteGeneration) {\n                            return cachedEntry;\n                        }\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.Unreachable) {\n                        // We can get here if there are nodes in a compound logical expression\n                        // (e.g. \"False and x\") that are never executed but are evaluated.\n                        // The type doesn't matter in this case.\n                        return setCacheEntry(curFlowNode, undefined, /* isIncomplete */ false);\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.Call) {\n                        const callFlowNode = curFlowNode as FlowCall;\n\n                        // If this function returns a \"NoReturn\" type, that means\n                        // it always raises an exception or otherwise doesn't return,\n                        // so we can assume that the code before this is unreachable.\n                        if (isCallNoReturn(callFlowNode.node)) {\n                            return setCacheEntry(curFlowNode, undefined, /* isIncomplete */ false);\n                        }\n\n                        curFlowNode = callFlowNode.antecedent;\n                        continue;\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.Assignment) {\n                        const assignmentFlowNode = curFlowNode as FlowAssignment;\n                        // Are we targeting the same symbol? We need to do this extra check because the same\n                        // symbol name might refer to different symbols in different scopes (e.g. a list\n                        // comprehension introduces a new scope).\n                        if (\n                            targetSymbolId === assignmentFlowNode.targetSymbolId &&\n                            ParseTreeUtils.isMatchingExpression(reference, assignmentFlowNode.node)\n                        ) {\n                            // Is this a special \"unbind\" assignment? If so,\n                            // we can handle it immediately without any further evaluation.\n                            if (curFlowNode.flags & FlowFlags.Unbind) {\n                                return setCacheEntry(curFlowNode, UnboundType.create(), /* isIncomplete */ false);\n                            }\n\n                            // If there was a cache entry already, that means we hit a recursive\n                            // case (something like \"int: int = 4\"). Avoid infinite recursion\n                            // by returning an undefined type.\n                            if (cachedEntry) {\n                                return { type: undefined, isIncomplete: true };\n                            }\n\n                            // Set the cache entry to undefined before evaluating the\n                            // expression in case it depends on itself.\n                            setCacheEntry(curFlowNode, undefined, /* isIncomplete */ true);\n                            let flowType = evaluateAssignmentFlowNode(assignmentFlowNode);\n                            if (flowType && isTypeAliasPlaceholder(flowType)) {\n                                flowType = undefined;\n                            }\n                            return setCacheEntry(curFlowNode, flowType, /* isIncomplete */ false);\n                        }\n\n                        curFlowNode = assignmentFlowNode.antecedent;\n                        continue;\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.AssignmentAlias) {\n                        const aliasFlowNode = curFlowNode as FlowAssignmentAlias;\n\n                        // If the target symbol ID matches, replace with its alias\n                        // and continue to traverse the code flow graph.\n                        if (targetSymbolId === aliasFlowNode.targetSymbolId) {\n                            targetSymbolId = aliasFlowNode.aliasSymbolId;\n                        }\n                        curFlowNode = aliasFlowNode.antecedent;\n                        continue;\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.BranchLabel) {\n                        const labelNode = curFlowNode as FlowLabel;\n                        const typesToCombine: Type[] = [];\n\n                        let sawIncomplete = false;\n\n                        labelNode.antecedents.forEach((antecedent) => {\n                            const flowTypeResult = getTypeFromFlowNode(\n                                antecedent,\n                                reference,\n                                targetSymbolId,\n                                initialType\n                            );\n\n                            if (flowTypeResult.isIncomplete) {\n                                sawIncomplete = true;\n                            }\n\n                            if (flowTypeResult.type) {\n                                typesToCombine.push(flowTypeResult.type);\n                            }\n                        });\n\n                        const effectiveType = combineTypes(typesToCombine);\n                        return setCacheEntry(curFlowNode, effectiveType, sawIncomplete);\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.LoopLabel) {\n                        const labelNode = curFlowNode as FlowLabel;\n\n                        let firstWasIncomplete = false;\n                        let isFirstTimeInLoop = false;\n\n                        // See if we've been here before. If so, there will be an incomplete cache entry.\n                        let cacheEntry = getCacheEntry(curFlowNode);\n                        if (cacheEntry === undefined) {\n                            // We haven't been here before, so create a new incomplete cache entry.\n                            isFirstTimeInLoop = true;\n                            cacheEntry = setCacheEntry(curFlowNode, undefined, /* isIncomplete */ true);\n                        }\n\n                        labelNode.antecedents.forEach((antecedent, index) => {\n                            // Have we already been here? If so, there will be an entry\n                            // for this index, and we can use the type that was already\n                            // computed.\n                            if (index >= cacheEntry!.incompleteSubtypes!.length) {\n                                // Set the incomplete type for this index to undefined to prevent\n                                // infinite recursion. We'll set it to the computed value below.\n                                cacheEntry = setIncompleteSubtype(curFlowNode, index, undefined);\n                                const flowTypeResult = getTypeFromFlowNode(\n                                    antecedent,\n                                    reference,\n                                    targetSymbolId,\n                                    initialType\n                                );\n\n                                if (flowTypeResult.isIncomplete && index === 0) {\n                                    firstWasIncomplete = true;\n                                }\n\n                                cacheEntry = setIncompleteSubtype(curFlowNode, index, flowTypeResult.type);\n                            }\n                        });\n\n                        if (!isFirstTimeInLoop) {\n                            // This was not the first time through the loop, so we are recursively trying\n                            // to resolve other parts of the incomplete type. It will be marked complete\n                            // once the stack pops back up to the first caller.\n                            return cacheEntry;\n                        }\n\n                        // The result is incomplete only if the first antecedent (the edge\n                        // that feeds the loop) is incomplete.\n                        if (firstWasIncomplete) {\n                            deleteCacheEntry(curFlowNode);\n                            return { type: cacheEntry!.type, isIncomplete: true };\n                        }\n\n                        // We have made it all the way through all the antecedents, and we can\n                        // mark the type as complete.\n                        return setCacheEntry(curFlowNode, cacheEntry!.type, /* isIncomplete */ false);\n                    }\n\n                    if (curFlowNode.flags & (FlowFlags.TrueCondition | FlowFlags.FalseCondition)) {\n                        const conditionalFlowNode = curFlowNode as FlowCondition;\n                        const typeNarrowingCallback = getTypeNarrowingCallback(reference, conditionalFlowNode);\n                        if (typeNarrowingCallback) {\n                            const flowTypeResult = getTypeFromFlowNode(\n                                conditionalFlowNode.antecedent,\n                                reference,\n                                targetSymbolId,\n                                initialType\n                            );\n                            let flowType = flowTypeResult.type;\n                            if (flowType) {\n                                flowType = typeNarrowingCallback(flowType);\n                            }\n\n                            return setCacheEntry(curFlowNode, flowType, flowTypeResult.isIncomplete);\n                        }\n\n                        curFlowNode = conditionalFlowNode.antecedent;\n                        continue;\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.PreFinallyGate) {\n                        const preFinallyFlowNode = curFlowNode as FlowPreFinallyGate;\n                        if (preFinallyFlowNode.isGateClosed) {\n                            return { type: undefined, isIncomplete: false };\n                        }\n                        curFlowNode = preFinallyFlowNode.antecedent;\n                        continue;\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.PostFinally) {\n                        const postFinallyFlowNode = curFlowNode as FlowPostFinally;\n                        const wasGateClosed = postFinallyFlowNode.preFinallyGate.isGateClosed;\n                        try {\n                            postFinallyFlowNode.preFinallyGate.isGateClosed = true;\n                            const flowTypeResult = getTypeFromFlowNode(\n                                postFinallyFlowNode.antecedent,\n                                reference,\n                                targetSymbolId,\n                                initialType\n                            );\n\n                            // If the type is incomplete, don't write back to the cache.\n                            return flowTypeResult.isIncomplete\n                                ? flowTypeResult\n                                : setCacheEntry(curFlowNode, flowTypeResult.type, /* isIncomplete */ false);\n                        } finally {\n                            postFinallyFlowNode.preFinallyGate.isGateClosed = wasGateClosed;\n                        }\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.Start) {\n                        return setCacheEntry(curFlowNode, initialType, /* isIncomplete */ false);\n                    }\n\n                    if (curFlowNode.flags & FlowFlags.WildcardImport) {\n                        const wildcardImportFlowNode = curFlowNode as FlowWildcardImport;\n                        if (reference.nodeType === ParseNodeType.Name) {\n                            const nameValue = reference.value;\n                            if (wildcardImportFlowNode.names.some((name) => name === nameValue)) {\n                                const type = getTypeFromWildcardImport(wildcardImportFlowNode, nameValue);\n                                return setCacheEntry(curFlowNode, type, /* isIncomplete */ false);\n                            }\n                        }\n\n                        curFlowNode = wildcardImportFlowNode.antecedent;\n                        continue;\n                    }\n\n                    // We shouldn't get here.\n                    fail('Unexpected flow node flags');\n                    return setCacheEntry(curFlowNode, undefined, /* isIncomplete */ false);\n                }\n            }\n\n            if (!flowNode) {\n                // This should happen only in cases where we're evaluating\n                // parse nodes that are created after the initial parse\n                // (namely, string literals that are used for forward\n                // referenced types).\n                return {\n                    type: initialType,\n                    isIncomplete: false,\n                };\n            }\n\n            return getTypeFromFlowNode(flowNode, reference, targetSymbolId, initialType);\n        }\n\n        return {\n            getTypeFromCodeFlow,\n        };\n    }\n\n    // Determines whether the specified flowNode can be reached by any\n    // control flow path within the execution context. If sourceFlowNode\n    // is specified, it returns true only if at least one control flow\n    // path passes through sourceFlowNode.\n    function isFlowNodeReachable(flowNode: FlowNode, sourceFlowNode?: FlowNode): boolean {\n        const visitedFlowNodeMap = new Map<number, true>();\n\n        function isFlowNodeReachableRecursive(flowNode: FlowNode, sourceFlowNode: FlowNode | undefined): boolean {\n            let curFlowNode = flowNode;\n\n            while (true) {\n                // If we've already visited this node, we can assume\n                // it wasn't reachable.\n                if (visitedFlowNodeMap.has(curFlowNode.id)) {\n                    return false;\n                }\n\n                // Note that we've been here before.\n                visitedFlowNodeMap.set(curFlowNode.id, true);\n\n                if (curFlowNode.flags & FlowFlags.Unreachable) {\n                    return false;\n                }\n\n                if (curFlowNode === sourceFlowNode) {\n                    return true;\n                }\n\n                if (curFlowNode.flags & FlowFlags.Call) {\n                    const callFlowNode = curFlowNode as FlowCall;\n\n                    // If we're determining whether a specified source flow node is\n                    // reachable, don't take into consideration possible \"no return\"\n                    // calls.\n                    if (sourceFlowNode === undefined) {\n                        // If this function returns a \"NoReturn\" type, that means\n                        // it always raises an exception or otherwise doesn't return,\n                        // so we can assume that the code before this is unreachable.\n                        if (isCallNoReturn(callFlowNode.node)) {\n                            return false;\n                        }\n                    }\n\n                    curFlowNode = callFlowNode.antecedent;\n                    continue;\n                }\n\n                if (curFlowNode.flags & FlowFlags.Assignment) {\n                    const assignmentFlowNode = curFlowNode as FlowAssignment;\n                    curFlowNode = assignmentFlowNode.antecedent;\n                    continue;\n                }\n\n                if (curFlowNode.flags & FlowFlags.AssignmentAlias) {\n                    const aliasFlowNode = curFlowNode as FlowAssignmentAlias;\n                    curFlowNode = aliasFlowNode.antecedent;\n                    continue;\n                }\n\n                if (curFlowNode.flags & (FlowFlags.BranchLabel | FlowFlags.LoopLabel)) {\n                    const labelNode = curFlowNode as FlowLabel;\n                    for (const antecedent of labelNode.antecedents) {\n                        if (isFlowNodeReachableRecursive(antecedent, sourceFlowNode)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n\n                if (curFlowNode.flags & (FlowFlags.TrueCondition | FlowFlags.FalseCondition)) {\n                    const conditionalFlowNode = curFlowNode as FlowCondition;\n                    curFlowNode = conditionalFlowNode.antecedent;\n                    continue;\n                }\n\n                if (curFlowNode.flags & FlowFlags.PreFinallyGate) {\n                    const preFinallyFlowNode = curFlowNode as FlowPreFinallyGate;\n                    if (preFinallyFlowNode.isGateClosed) {\n                        return false;\n                    }\n                    curFlowNode = preFinallyFlowNode.antecedent;\n                    continue;\n                }\n\n                if (curFlowNode.flags & FlowFlags.PostFinally) {\n                    const postFinallyFlowNode = curFlowNode as FlowPostFinally;\n                    const wasGateClosed = postFinallyFlowNode.preFinallyGate.isGateClosed;\n\n                    try {\n                        postFinallyFlowNode.preFinallyGate.isGateClosed = true;\n                        return isFlowNodeReachableRecursive(postFinallyFlowNode.antecedent, sourceFlowNode);\n                    } finally {\n                        postFinallyFlowNode.preFinallyGate.isGateClosed = wasGateClosed;\n                    }\n                }\n\n                if (curFlowNode.flags & FlowFlags.Start) {\n                    // If we hit the start but were looking for a particular source flow\n                    // node, return false. Otherwise, the start is what we're looking for.\n                    return sourceFlowNode ? false : true;\n                }\n\n                if (curFlowNode.flags & FlowFlags.WildcardImport) {\n                    const wildcardImportFlowNode = curFlowNode as FlowWildcardImport;\n                    curFlowNode = wildcardImportFlowNode.antecedent;\n                    continue;\n                }\n\n                // We shouldn't get here.\n                fail('Unexpected flow node flags');\n                return false;\n            }\n        }\n\n        // Protect against infinite recursion.\n        if (isReachableRecursionMap.has(flowNode.id)) {\n            return true;\n        }\n        isReachableRecursionMap.set(flowNode.id, true);\n\n        try {\n            return isFlowNodeReachableRecursive(flowNode, sourceFlowNode);\n        } finally {\n            isReachableRecursionMap.delete(flowNode.id);\n        }\n    }\n\n    // Given a reference expression and a flow node, returns a callback that\n    // can be used to narrow the type described by the target expression.\n    // If the specified flow node is not associated with the target expression,\n    // it returns undefined.\n    function getTypeNarrowingCallback(\n        reference: ExpressionNode,\n        flowNode: FlowCondition\n    ): TypeNarrowingCallback | undefined {\n        let testExpression = flowNode.expression;\n        const isPositiveTest = !!(flowNode.flags & FlowFlags.TrueCondition);\n\n        if (testExpression.nodeType === ParseNodeType.AssignmentExpression) {\n            if (ParseTreeUtils.isMatchingExpression(reference, testExpression.rightExpression)) {\n                testExpression = testExpression.rightExpression;\n            } else if (ParseTreeUtils.isMatchingExpression(reference, testExpression.name)) {\n                testExpression = testExpression.name;\n            }\n        }\n\n        if (testExpression.nodeType === ParseNodeType.BinaryOperation) {\n            const isOrIsNotOperator =\n                testExpression.operator === OperatorType.Is || testExpression.operator === OperatorType.IsNot;\n            const equalsOrNotEqualsOperator =\n                testExpression.operator === OperatorType.Equals || testExpression.operator === OperatorType.NotEquals;\n\n            if (isOrIsNotOperator || equalsOrNotEqualsOperator) {\n                // Invert the \"isPositiveTest\" value if this is an \"is not\" operation.\n                const adjIsPositiveTest =\n                    testExpression.operator === OperatorType.Is || testExpression.operator === OperatorType.Equals\n                        ? isPositiveTest\n                        : !isPositiveTest;\n\n                // Look for \"X is None\", \"X is not None\", \"X == None\", and \"X != None\".\n                // These are commonly-used patterns used in control flow.\n                if (\n                    testExpression.rightExpression.nodeType === ParseNodeType.Constant &&\n                    testExpression.rightExpression.constType === KeywordType.None\n                ) {\n                    // Allow the LHS to be either a simple expression or an assignment\n                    // expression that assigns to a simple name.\n                    let leftExpression = testExpression.leftExpression;\n                    if (leftExpression.nodeType === ParseNodeType.AssignmentExpression) {\n                        leftExpression = leftExpression.name;\n                    }\n\n                    if (ParseTreeUtils.isMatchingExpression(reference, leftExpression)) {\n                        // Narrow the type by filtering on \"None\".\n                        return (type: Type) => {\n                            if (type.category === TypeCategory.Union) {\n                                const remainingTypes = type.subtypes.filter((t) => {\n                                    if (isAnyOrUnknown(t)) {\n                                        // We need to assume that \"Any\" is always both None and not None,\n                                        // so it matches regardless of whether the test is positive or negative.\n                                        return true;\n                                    }\n\n                                    // See if it's a match for None.\n                                    return isNone(t) === adjIsPositiveTest;\n                                });\n\n                                return combineTypes(remainingTypes);\n                            } else if (isNone(type)) {\n                                if (!adjIsPositiveTest) {\n                                    // Use a \"Never\" type (which is a special form\n                                    // of None) to indicate that the condition will\n                                    // always evaluate to false.\n                                    return NeverType.create();\n                                }\n                            }\n\n                            return type;\n                        };\n                    }\n                }\n\n                // Look for \"type(X) is Y\" or \"type(X) is not Y\".\n                if (isOrIsNotOperator && testExpression.leftExpression.nodeType === ParseNodeType.Call) {\n                    const callType = getTypeOfExpression(testExpression.leftExpression.leftExpression).type;\n                    if (\n                        isClass(callType) &&\n                        ClassType.isBuiltIn(callType, 'type') &&\n                        testExpression.leftExpression.arguments.length === 1 &&\n                        testExpression.leftExpression.arguments[0].argumentCategory === ArgumentCategory.Simple\n                    ) {\n                        const arg0Expr = testExpression.leftExpression.arguments[0].valueExpression;\n                        if (ParseTreeUtils.isMatchingExpression(reference, arg0Expr)) {\n                            const classType = getTypeOfExpression(testExpression.rightExpression).type;\n                            if (isClass(classType)) {\n                                return (type: Type) => {\n                                    // Narrow the type based on whether the type matches the specified type.\n                                    return doForSubtypes(type, (subtype) => {\n                                        if (isObject(subtype)) {\n                                            const matches = ClassType.isSameGenericClass(subtype.classType, classType);\n                                            if (adjIsPositiveTest) {\n                                                return matches ? subtype : undefined;\n                                            } else {\n                                                return matches ? undefined : subtype;\n                                            }\n                                        } else if (isNone(subtype)) {\n                                            return adjIsPositiveTest ? undefined : subtype;\n                                        }\n\n                                        return subtype;\n                                    });\n                                };\n                            }\n                        }\n                    }\n                }\n\n                // Look for \"X is Y\" or \"X is not Y\" where Y is a an enum.\n                if (isOrIsNotOperator) {\n                    if (ParseTreeUtils.isMatchingExpression(reference, testExpression.leftExpression)) {\n                        const rightType = getTypeOfExpression(testExpression.rightExpression).type;\n                        if (\n                            isObject(rightType) &&\n                            ClassType.isEnumClass(rightType.classType) &&\n                            rightType.classType.literalValue !== undefined\n                        ) {\n                            return (type: Type) => {\n                                return narrowTypeForLiteralComparison(type, rightType, adjIsPositiveTest);\n                            };\n                        }\n                    }\n                }\n\n                if (equalsOrNotEqualsOperator) {\n                    // Look for X == <literal> or X != <literal>\n                    const adjIsPositiveTest =\n                        testExpression.operator === OperatorType.Equals ? isPositiveTest : !isPositiveTest;\n\n                    if (ParseTreeUtils.isMatchingExpression(reference, testExpression.leftExpression)) {\n                        const rightType = getTypeOfExpression(testExpression.rightExpression).type;\n                        if (isObject(rightType) && rightType.classType.literalValue !== undefined) {\n                            return (type: Type) => {\n                                return narrowTypeForLiteralComparison(type, rightType, adjIsPositiveTest);\n                            };\n                        }\n                    }\n\n                    if (ParseTreeUtils.isMatchingExpression(reference, testExpression.rightExpression)) {\n                        const leftType = getTypeOfExpression(testExpression.leftExpression).type;\n                        if (isObject(leftType) && leftType.classType.literalValue !== undefined) {\n                            return (type: Type) => {\n                                return narrowTypeForLiteralComparison(type, leftType, adjIsPositiveTest);\n                            };\n                        }\n                    }\n\n                    // Look for X.Y == <literal> or X.Y != <literal>\n                    if (\n                        testExpression.leftExpression.nodeType === ParseNodeType.MemberAccess &&\n                        ParseTreeUtils.isMatchingExpression(reference, testExpression.leftExpression.leftExpression)\n                    ) {\n                        const rightType = getTypeOfExpression(testExpression.rightExpression).type;\n                        const memberName = testExpression.leftExpression.memberName;\n                        if (isObject(rightType) && rightType.classType.literalValue !== undefined) {\n                            return (type: Type) => {\n                                return narrowTypeForDiscriminatedFieldComparison(\n                                    type,\n                                    memberName.value,\n                                    rightType,\n                                    adjIsPositiveTest\n                                );\n                            };\n                        }\n                    }\n                }\n            }\n\n            if (testExpression.operator === OperatorType.In) {\n                // Look for \"x in y\" where y is one of several built-in types.\n                if (isPositiveTest && ParseTreeUtils.isMatchingExpression(reference, testExpression.leftExpression)) {\n                    const rightType = getTypeOfExpression(testExpression.rightExpression).type;\n                    return (type: Type) => {\n                        return narrowTypeForContains(type, rightType);\n                    };\n                }\n            }\n\n            if (testExpression.operator === OperatorType.In || testExpression.operator === OperatorType.NotIn) {\n                if (ParseTreeUtils.isMatchingExpression(reference, testExpression.rightExpression)) {\n                    // Look for <string literal> in y where y is a union that contains\n                    // one or more TypedDicts.\n                    const leftType = getTypeOfExpression(testExpression.leftExpression).type;\n                    if (\n                        isObject(leftType) &&\n                        ClassType.isBuiltIn(leftType.classType, 'str') &&\n                        leftType.classType.literalValue !== undefined\n                    ) {\n                        const adjIsPositiveTest =\n                            testExpression.operator === OperatorType.In ? isPositiveTest : !isPositiveTest;\n                        return (type: Type) => {\n                            return narrowTypeForTypedDictKey(type, leftType.classType, adjIsPositiveTest);\n                        };\n                    }\n                }\n            }\n        }\n\n        if (testExpression.nodeType === ParseNodeType.Call) {\n            if (testExpression.leftExpression.nodeType === ParseNodeType.Name) {\n                // Look for \"isinstance(X, Y)\" or \"issubclass(X, Y)\".\n                if (\n                    (testExpression.leftExpression.value === 'isinstance' ||\n                        testExpression.leftExpression.value === 'issubclass') &&\n                    testExpression.arguments.length === 2\n                ) {\n                    // Make sure the first parameter is a supported expression type\n                    // and the second parameter is a valid class type or a tuple\n                    // of valid class types.\n                    const isInstanceCheck = testExpression.leftExpression.value === 'isinstance';\n                    const arg0Expr = testExpression.arguments[0].valueExpression;\n                    const arg1Expr = testExpression.arguments[1].valueExpression;\n                    if (ParseTreeUtils.isMatchingExpression(reference, arg0Expr)) {\n                        const arg1Type = getTypeOfExpression(\n                            arg1Expr,\n                            undefined,\n                            EvaluatorFlags.EvaluateStringLiteralAsType | EvaluatorFlags.ParamSpecDisallowed\n                        ).type;\n                        const classTypeList = getIsInstanceClassTypes(arg1Type);\n                        if (classTypeList) {\n                            return (type: Type) => {\n                                return narrowTypeForIsInstance(type, classTypeList, isInstanceCheck, isPositiveTest);\n                            };\n                        }\n                    }\n                } else if (\n                    testExpression.leftExpression.value === 'callable' &&\n                    testExpression.arguments.length === 1\n                ) {\n                    const arg0Expr = testExpression.arguments[0].valueExpression;\n                    if (ParseTreeUtils.isMatchingExpression(reference, arg0Expr)) {\n                        return (type: Type) => {\n                            return narrowTypeForCallable(type, isPositiveTest, testExpression);\n                        };\n                    }\n                }\n            }\n\n            if (testExpression.arguments.length >= 1) {\n                const arg0Expr = testExpression.arguments[0].valueExpression;\n                if (ParseTreeUtils.isMatchingExpression(reference, arg0Expr)) {\n                    const functionType = getTypeOfExpression(testExpression.leftExpression).type;\n\n                    // Does this look like it's a custom type guard function?\n                    if (\n                        isFunction(functionType) &&\n                        functionType.details.declaredReturnType &&\n                        isObject(functionType.details.declaredReturnType) &&\n                        ClassType.isBuiltIn(functionType.details.declaredReturnType.classType, 'TypeGuard')\n                    ) {\n                        // Evaluate the type guard call expression.\n                        const functionReturnType = getTypeOfExpression(testExpression).type;\n                        if (\n                            isObject(functionReturnType) &&\n                            ClassType.isBuiltIn(functionReturnType.classType, 'TypeGuard')\n                        ) {\n                            const typeGuardTypeArgs = functionReturnType.classType.typeArguments;\n                            const typeGuardTypeArg =\n                                typeGuardTypeArgs && typeGuardTypeArgs.length > 0\n                                    ? typeGuardTypeArgs[0]\n                                    : UnknownType.create();\n\n                            return (type: Type) => {\n                                return isPositiveTest ? typeGuardTypeArg : type;\n                            };\n                        }\n                    }\n                }\n            }\n        }\n\n        if (ParseTreeUtils.isMatchingExpression(reference, testExpression)) {\n            return (type: Type) => {\n                // Narrow the type based on whether the subtype can be true or false.\n                return doForSubtypes(type, (subtype) => {\n                    if (isPositiveTest) {\n                        if (canBeTruthy(subtype)) {\n                            return removeFalsinessFromType(subtype);\n                        }\n                    } else {\n                        if (canBeFalsy(subtype)) {\n                            return removeTruthinessFromType(subtype);\n                        }\n                    }\n                    return undefined;\n                });\n            };\n        }\n\n        return undefined;\n    }\n\n    // The \"isinstance\" and \"issubclass\" calls support two forms - a simple form\n    // that accepts a single class, and a more complex form that accepts a tuple\n    // of classes. This method determines which form and returns a list of classes\n    // or undefined.\n    function getIsInstanceClassTypes(argType: Type): ClassType[] | undefined {\n        if (isClass(argType)) {\n            return [argType];\n        }\n\n        if (isObject(argType)) {\n            const objClass = argType.classType;\n            if (isTupleClass(objClass) && objClass.typeArguments) {\n                let foundNonClassType = false;\n                const classTypeList: ClassType[] = [];\n                objClass.typeArguments.forEach((typeArg) => {\n                    if (isClass(typeArg)) {\n                        classTypeList.push(typeArg);\n                    } else {\n                        foundNonClassType = true;\n                    }\n                });\n\n                if (!foundNonClassType) {\n                    return classTypeList;\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    // Attempts to narrow a type (make it more constrained) based on a\n    // call to isinstance or issubclass. For example, if the original\n    // type of expression \"x\" is \"Mammal\" and the test expression is\n    // \"isinstance(x, Cow)\", (assuming \"Cow\" is a subclass of \"Mammal\"),\n    // we can conclude that x must be constrained to \"Cow\".\n    function narrowTypeForIsInstance(\n        type: Type,\n        classTypeList: ClassType[],\n        isInstanceCheck: boolean,\n        isPositiveTest: boolean\n    ): Type {\n        let effectiveType = doForSubtypes(type, (subtype) => {\n            subtype = transformPossibleRecursiveTypeAlias(subtype);\n            return transformTypeObjectToClass(subtype);\n        });\n\n        // Handle bound TypeVar.\n        effectiveType = makeTypeVarsConcrete(effectiveType);\n\n        // Filters the varType by the parameters of the isinstance\n        // and returns the list of types the varType could be after\n        // applying the filter.\n        const filterType = (varType: ClassType): ObjectType[] | ClassType[] => {\n            const filteredTypes: ClassType[] = [];\n\n            let foundSuperclass = false;\n            let isClassRelationshipIndeterminate = false;\n\n            for (const filterType of classTypeList) {\n                const filterIsSuperclass = ClassType.isDerivedFrom(varType, filterType);\n                const filterIsSubclass = ClassType.isDerivedFrom(filterType, varType);\n\n                if (filterIsSuperclass) {\n                    foundSuperclass = true;\n                }\n\n                // Normally, a type should never be both a subclass or a superclass.\n                // This can happen if either of the class types derives from a\n                // class whose type is unknown (e.g. an import failed). We'll\n                // note this case specially so we don't do any narrowing, which\n                // will generate false positives.\n                if (filterIsSubclass && filterIsSuperclass && !ClassType.isSameGenericClass(varType, filterType)) {\n                    isClassRelationshipIndeterminate = true;\n                }\n\n                if (isPositiveTest) {\n                    if (filterIsSuperclass) {\n                        // If the variable type is a subclass of the isinstance\n                        // filter, we haven't learned anything new about the\n                        // variable type.\n                        filteredTypes.push(varType);\n                    } else if (filterIsSubclass) {\n                        // If the variable type is a superclass of the isinstance\n                        // filter, we can narrow the type to the subclass.\n                        filteredTypes.push(filterType);\n                    }\n                }\n            }\n\n            // In the negative case, if one or more of the filters\n            // always match the type (i.e. they are an exact match or\n            // a superclass of the type), then there's nothing left after\n            // the filter is applied. If we didn't find any superclass\n            // match, then the original variable type survives the filter.\n            if (!isPositiveTest) {\n                if (!foundSuperclass || isClassRelationshipIndeterminate) {\n                    filteredTypes.push(varType);\n                }\n            }\n\n            if (!isInstanceCheck) {\n                return filteredTypes;\n            }\n\n            return filteredTypes.map((t) => ObjectType.create(t));\n        };\n\n        if (isInstanceCheck && isObject(effectiveType)) {\n            const filteredType = filterType(effectiveType.classType);\n            return combineTypes(filteredType);\n        } else if (!isInstanceCheck && isClass(effectiveType)) {\n            const filteredType = filterType(effectiveType);\n            return combineTypes(filteredType);\n        } else if (effectiveType.category === TypeCategory.Union) {\n            let remainingTypes: Type[] = [];\n\n            effectiveType.subtypes.forEach((t) => {\n                if (isAnyOrUnknown(t)) {\n                    // Any types always remain for both positive and negative\n                    // checks because we can't say anything about them.\n                    remainingTypes.push(t);\n                } else if (isInstanceCheck && isObject(t)) {\n                    remainingTypes = remainingTypes.concat(filterType(t.classType));\n                } else if (!isInstanceCheck && isClass(t)) {\n                    remainingTypes = remainingTypes.concat(filterType(t));\n                } else {\n                    // All other types are never instances of a class.\n                    if (!isPositiveTest) {\n                        remainingTypes.push(t);\n                    }\n                }\n            });\n\n            return combineTypes(remainingTypes);\n        } else if (isInstanceCheck && isPositiveTest && isAnyOrUnknown(effectiveType)) {\n            // If this is a positive test for isinstance and the effective\n            // type is Any or Unknown, we can assume that the type matches\n            // one of the specified types.\n            type = combineTypes(classTypeList.map((classType) => ObjectType.create(classType)));\n        }\n\n        // Return the original type.\n        return type;\n    }\n\n    // Attempts to narrow a type (make it more constrained) based on an \"in\" or\n    // \"not in\" binary expression.\n    function narrowTypeForContains(referenceType: Type, containerType: Type) {\n        // We support contains narrowing only for certain built-in types that have been specialized.\n        if (!isObject(containerType) || !ClassType.isBuiltIn(containerType.classType)) {\n            return referenceType;\n        }\n\n        const classType = containerType.classType;\n        const builtInName = ClassType.getAliasClass(classType).details.name;\n\n        if (!['list', 'set', 'frozenset', 'deque'].some((name) => name === builtInName)) {\n            return referenceType;\n        }\n\n        if (!classType.typeArguments || classType.typeArguments.length !== 1) {\n            return referenceType;\n        }\n\n        const typeArg = classType.typeArguments[0];\n        let canNarrow = true;\n\n        const narrowedType = doForSubtypes(referenceType, (subtype) => {\n            if (isAnyOrUnknown(subtype)) {\n                canNarrow = false;\n                return subtype;\n            }\n\n            if (!canAssignType(typeArg, subtype, new DiagnosticAddendum())) {\n                // If the reference type isn't assignable to the element type, we will\n                // assume that the __contains__ method will return false.\n                return undefined;\n            }\n\n            return subtype;\n        });\n\n        return canNarrow ? narrowedType : referenceType;\n    }\n\n    // Attempts to narrow a type based on whether it is a TypedDict with\n    // a literal key value.\n    function narrowTypeForTypedDictKey(referenceType: Type, literalKey: ClassType, isPositiveTest: boolean): Type {\n        const narrowedType = doForSubtypes(referenceType, (subtype) => {\n            if (isObject(subtype) && ClassType.isTypedDictClass(subtype.classType)) {\n                const entries = getTypedDictMembersForClass(subtype.classType);\n                const tdEntry = entries.get(literalKey.literalValue as string);\n\n                if (isPositiveTest) {\n                    return tdEntry === undefined ? undefined : subtype;\n                } else {\n                    return tdEntry !== undefined && tdEntry.isRequired ? undefined : subtype;\n                }\n            }\n\n            return subtype;\n        });\n\n        return narrowedType;\n    }\n\n    // Attempts to narrow a type based on a comparison (equal or not equal)\n    // between a discriminating node that has a declared literal type to a\n    // literal value.\n    function narrowTypeForDiscriminatedFieldComparison(\n        referenceType: Type,\n        memberName: string,\n        literalType: ObjectType,\n        isPositiveTest: boolean\n    ): Type {\n        let canNarrow = true;\n\n        const narrowedType = doForSubtypes(referenceType, (subtype) => {\n            subtype = transformTypeObjectToClass(subtype);\n\n            let memberInfo: ClassMember | undefined;\n            if (isObject(subtype)) {\n                memberInfo = lookUpObjectMember(subtype, memberName);\n            } else if (isClass(subtype)) {\n                memberInfo = lookUpClassMember(subtype, memberName);\n            }\n\n            if (memberInfo && memberInfo.isTypeDeclared) {\n                const memberType = getTypeOfMember(memberInfo);\n\n                if (isLiteralType(memberType, /* allowLiteralUnions */ false)) {\n                    const isAssignable = canAssignType(memberType, literalType, new DiagnosticAddendum());\n                    return isAssignable === isPositiveTest ? subtype : undefined;\n                }\n            }\n\n            canNarrow = false;\n            return subtype;\n        });\n\n        return canNarrow ? narrowedType : referenceType;\n    }\n\n    // Attempts to narrow a type (make it more constrained) based on a comparison\n    // (equal or not equal) to a literal value.\n    function narrowTypeForLiteralComparison(\n        referenceType: Type,\n        literalType: ObjectType,\n        isPositiveTest: boolean\n    ): Type {\n        let canNarrow = true;\n        const narrowedType = doForSubtypes(referenceType, (subtype) => {\n            if (isObject(subtype) && ClassType.isSameGenericClass(literalType.classType, subtype.classType)) {\n                if (subtype.classType.literalValue !== undefined) {\n                    const literalValueMatches = ClassType.isLiteralValueSame(subtype.classType, literalType.classType);\n                    if ((literalValueMatches && !isPositiveTest) || (!literalValueMatches && isPositiveTest)) {\n                        return undefined;\n                    }\n                    return subtype;\n                } else if (isPositiveTest) {\n                    return literalType;\n                } else {\n                    // If we're able to enumerate all possible literal values\n                    // (for bool or enum), we can eliminate all others in a negative test.\n                    const allLiteralTypes = enumerateLiteralsForType(subtype);\n                    if (allLiteralTypes) {\n                        return combineTypes(\n                            allLiteralTypes.filter(\n                                (type) => !ClassType.isLiteralValueSame(type.classType, literalType.classType)\n                            )\n                        );\n                    }\n                }\n            }\n            canNarrow = false;\n            return subtype;\n        });\n\n        return canNarrow ? narrowedType : referenceType;\n    }\n\n    // Attempts to narrow a type (make it more constrained) based on a\n    // call to \"callable\". For example, if the original type of expression \"x\" is\n    // Union[Callable[..., Any], Type[int], int], it would remove the \"int\" because\n    // it's not callable.\n    function narrowTypeForCallable(type: Type, isPositiveTest: boolean, errorNode: ExpressionNode): Type {\n        return doForSubtypes(type, (subtype) => {\n            switch (subtype.category) {\n                case TypeCategory.Function:\n                case TypeCategory.OverloadedFunction:\n                case TypeCategory.Class: {\n                    return isPositiveTest ? subtype : undefined;\n                }\n\n                case TypeCategory.None:\n                case TypeCategory.Module: {\n                    return isPositiveTest ? undefined : subtype;\n                }\n\n                case TypeCategory.Object: {\n                    const classFromTypeObject = getClassFromPotentialTypeObject(subtype);\n                    if (classFromTypeObject && isClass(classFromTypeObject)) {\n                        // It's a Type object, which is a class.\n                        return isPositiveTest ? subtype : undefined;\n                    }\n\n                    // See if the object is callable.\n                    const callMemberType = getTypeFromObjectMember(\n                        errorNode,\n                        subtype,\n                        '__call__',\n                        { method: 'get' },\n                        new DiagnosticAddendum(),\n                        MemberAccessFlags.SkipForMethodLookup\n                    );\n                    if (!callMemberType) {\n                        return isPositiveTest ? undefined : subtype;\n                    } else {\n                        return isPositiveTest ? subtype : undefined;\n                    }\n                }\n\n                default: {\n                    // For all other types, we can't determine whether it's\n                    // callable or not, so we can't eliminate them.\n                    return subtype;\n                }\n            }\n        });\n    }\n\n    // Specializes the specified (potentially generic) class type using\n    // the specified type arguments, reporting errors as appropriate.\n    // Returns the specialized type and a boolean indicating whether\n    // the type indicates a class type (true) or an object type (false).\n    function createSpecializedClassType(\n        classType: ClassType,\n        typeArgs: TypeResult[] | undefined,\n        flags: EvaluatorFlags,\n        errorNode: ParseNode\n    ): Type {\n        // Handle the special-case classes that are not defined\n        // in the type stubs.\n        if (ClassType.isSpecialBuiltIn(classType)) {\n            switch (classType.details.name) {\n                case 'Callable': {\n                    return createCallableType(typeArgs);\n                }\n\n                case 'Optional': {\n                    return createOptionalType(errorNode, typeArgs);\n                }\n\n                case 'Type': {\n                    return createSpecialType(classType, typeArgs, 1);\n                }\n\n                case 'ClassVar': {\n                    return createClassVarType(errorNode, typeArgs);\n                }\n\n                case 'Deque':\n                case 'List':\n                case 'FrozenSet':\n                case 'Set': {\n                    return createSpecialType(classType, typeArgs, 1);\n                }\n\n                case 'ChainMap':\n                case 'Dict':\n                case 'DefaultDict': {\n                    return createSpecialType(classType, typeArgs, 2);\n                }\n\n                case 'Protocol': {\n                    return createSpecialType(classType, typeArgs, undefined);\n                }\n\n                case 'Tuple': {\n                    return createSpecialType(classType, typeArgs, undefined);\n                }\n\n                case 'Union': {\n                    return createUnionType(typeArgs);\n                }\n\n                case 'Generic': {\n                    return createGenericType(errorNode, classType, typeArgs);\n                }\n\n                case 'Final': {\n                    return createFinalType(errorNode, typeArgs, flags);\n                }\n\n                case 'Annotated': {\n                    return createAnnotatedType(errorNode, typeArgs);\n                }\n\n                case 'Concatenate': {\n                    return createConcatenateType(errorNode, classType, typeArgs);\n                }\n\n                case 'TypeGuard': {\n                    return createTypeGuardType(errorNode, classType, typeArgs);\n                }\n            }\n        }\n\n        // Handle \"tuple\" specially, since it needs to act like \"Tuple\"\n        // in Python 3.9 and newer.\n        if (ClassType.isBuiltIn(classType, 'tuple')) {\n            return createSpecialType(classType, typeArgs, undefined);\n        }\n\n        let typeArgCount = typeArgs ? typeArgs.length : 0;\n\n        // Make sure the argument list count is correct.\n        const typeParameters = ClassType.getTypeParameters(classType);\n\n        // If there are no type parameters or args, the class is already specialized.\n        // No need to do any more work.\n        if (typeParameters.length === 0 && typeArgCount === 0) {\n            return classType;\n        }\n\n        if (typeArgs && typeArgCount > typeParameters.length) {\n            if (!ClassType.isPartiallyConstructed(classType)) {\n                const fileInfo = getFileInfo(errorNode);\n                if (typeParameters.length === 0) {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.typeArgsExpectingNone(),\n                        typeArgs[typeParameters.length].node\n                    );\n                } else {\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.typeArgsTooMany().format({\n                            name: classType.details.name,\n                            expected: typeParameters.length,\n                            received: typeArgCount,\n                        }),\n                        typeArgs[typeParameters.length].node\n                    );\n                }\n            }\n            typeArgCount = typeParameters.length;\n        } else if (typeArgs && typeArgCount < typeParameters.length) {\n            const fileInfo = getFileInfo(errorNode);\n            addDiagnostic(\n                fileInfo.diagnosticRuleSet.reportMissingTypeArgument,\n                DiagnosticRule.reportMissingTypeArgument,\n                Localizer.Diagnostic.typeArgsTooFew().format({\n                    name: classType.details.name,\n                    expected: typeParameters.length,\n                    received: typeArgCount,\n                }),\n                typeArgs[0].node.parent!\n            );\n        }\n\n        if (typeArgs) {\n            typeArgs.forEach((typeArg) => {\n                // Verify that we didn't receive any inappropriate ellipses or modules.\n                if (isEllipsisType(typeArg.type)) {\n                    addError(Localizer.Diagnostic.ellipsisContext(), typeArg.node);\n                } else if (isModule(typeArg.type)) {\n                    addError(Localizer.Diagnostic.moduleContext(), typeArg.node);\n                }\n            });\n        }\n\n        // Fill in any missing type arguments with Any.\n        const typeArgTypes = typeArgs ? typeArgs.map((t) => convertToInstance(t.type)) : [];\n        const typeParams = ClassType.getTypeParameters(classType);\n        for (let i = typeArgTypes.length; i < typeParams.length; i++) {\n            typeArgTypes.push(getConcreteTypeFromTypeVar(typeParams[i]));\n        }\n\n        typeArgTypes.forEach((typeArgType, index) => {\n            if (index < typeArgCount) {\n                const diag = new DiagnosticAddendum();\n                if (!canAssignToTypeVar(typeParameters[index], typeArgType, diag)) {\n                    const fileInfo = getFileInfo(typeArgs![index].node);\n                    addDiagnostic(\n                        fileInfo.diagnosticRuleSet.reportGeneralTypeIssues,\n                        DiagnosticRule.reportGeneralTypeIssues,\n                        Localizer.Diagnostic.typeVarAssignmentMismatch().format({\n                            type: printType(typeArgType),\n                            name: typeParameters[index].details.name,\n                        }) + diag.getString(),\n                        typeArgs![index].node\n                    );\n                }\n            }\n        });\n\n        const specializedClass = ClassType.cloneForSpecialization(classType, typeArgTypes, typeArgs !== undefined);\n\n        return specializedClass;\n    }\n\n    function getTypeForArgument(arg: FunctionArgument): Type {\n        if (arg.type) {\n            return arg.type;\n        }\n\n        // If there was no defined type provided, there should always\n        // be a value expression from which we can retrieve the type.\n        return getTypeOfExpression(arg.valueExpression!).type;\n    }\n\n    // This function is like getTypeForArgument except that it is\n    // used in cases where the argument is expected to be a type\n    // and therefore follows the normal rules of types (e.g. they\n    // can be forward-declared in stubs, etc.).\n    function getTypeForArgumentExpectingType(\n        arg: FunctionArgument,\n        fileInfo: AnalyzerFileInfo,\n        allowMissingTypeArgs = false\n    ): Type {\n        if (arg.type) {\n            return arg.type;\n        }\n\n        let flags =\n            EvaluatorFlags.ExpectingType |\n            EvaluatorFlags.EvaluateStringLiteralAsType |\n            EvaluatorFlags.ParamSpecDisallowed;\n\n        if (fileInfo.isStubFile) {\n            flags |= EvaluatorFlags.AllowForwardReferences;\n        }\n\n        if (allowMissingTypeArgs) {\n            flags |= EvaluatorFlags.AllowMissingTypeArgs;\n        }\n\n        // If there was no defined type provided, there should always\n        // be a value expression from which we can retrieve the type.\n        return getTypeOfExpression(arg.valueExpression!, undefined, flags).type;\n    }\n\n    function getBuiltInType(node: ParseNode, name: string): Type {\n        const scope = ScopeUtils.getScopeForNode(node);\n        if (scope) {\n            const builtInScope = ScopeUtils.getBuiltInScope(scope);\n            const nameType = builtInScope.lookUpSymbol(name);\n            if (nameType) {\n                return getEffectiveTypeOfSymbol(nameType);\n            }\n        }\n\n        return UnknownType.create();\n    }\n\n    function getBuiltInObject(node: ParseNode, name: string, typeArguments?: Type[]) {\n        const nameType = getBuiltInType(node, name);\n        if (isClass(nameType)) {\n            let classType = nameType;\n            if (typeArguments) {\n                classType = ClassType.cloneForSpecialization(\n                    classType,\n                    typeArguments,\n                    /* isTypeArgumentExplicit */ typeArguments !== undefined\n                );\n            }\n\n            return ObjectType.create(classType);\n        }\n\n        return nameType;\n    }\n\n    function lookUpSymbolRecursive(node: ParseNode, name: string, honorCodeFlow: boolean) {\n        const scope = ScopeUtils.getScopeForNode(node);\n        let symbolWithScope = scope?.lookUpSymbolRecursive(name);\n\n        if (symbolWithScope && honorCodeFlow) {\n            // Filter the declarations based on flow reachability.\n            const decls = symbolWithScope.symbol.getDeclarations().filter((decl) => {\n                if (decl.type !== DeclarationType.Alias) {\n                    // Is the declaration in the same execution scope as the \"usageNode\" node?\n                    const usageScope = ParseTreeUtils.getExecutionScopeNode(node);\n                    const declNode =\n                        decl.type === DeclarationType.Class || decl.type === DeclarationType.Function\n                            ? decl.node.name\n                            : decl.node;\n                    const declScope = ParseTreeUtils.getExecutionScopeNode(declNode);\n                    if (usageScope === declScope) {\n                        if (!isFlowPathBetweenNodes(declNode, node)) {\n                            // If there was no control flow path from the usage back\n                            // to the source, see if the usage node is reachable by\n                            // any path.\n                            const flowNode = AnalyzerNodeInfo.getFlowNode(node);\n                            const isReachable = flowNode && isFlowNodeReachable(flowNode);\n                            return !isReachable;\n                        }\n                    }\n                }\n\n                return true;\n            });\n\n            // If none of the declarations are reachable from the current node,\n            // search for the symbol in outer scopes.\n            if (decls.length === 0) {\n                if (symbolWithScope.scope.parent) {\n                    symbolWithScope = symbolWithScope.scope.parent.lookUpSymbolRecursive(name);\n                } else {\n                    symbolWithScope = undefined;\n                }\n            }\n        }\n\n        return symbolWithScope;\n    }\n\n    // Disables recording of errors and warnings.\n    function suppressDiagnostics<T>(callback: () => T) {\n        const wasSuppressed = isDiagnosticSuppressed;\n        isDiagnosticSuppressed = true;\n        try {\n            return callback();\n        } finally {\n            isDiagnosticSuppressed = wasSuppressed;\n        }\n    }\n\n    // Disables recording of errors and warnings and disables\n    // any caching of types, under the assumption that we're\n    // performing speculative evaluations.\n    function useSpeculativeMode<T>(speculativeNode: ParseNode, callback: () => T) {\n        speculativeTypeTracker.enterSpeculativeContext(speculativeNode);\n\n        try {\n            return callback();\n        } finally {\n            speculativeTypeTracker.leaveSpeculativeContext();\n        }\n    }\n\n    // Determines whether the specified node is within a part of the parse tree that\n    // is being \"speculatively\" evaluated. If so, it should not be written to the type\n    // cache, and diagnostics should not be reported for it.\n    function isSpeculativeMode(node: ParseNode | undefined) {\n        const speculativeRootNode = speculativeTypeTracker.getSpeculativeRootNode();\n        if (!speculativeRootNode) {\n            return false;\n        }\n        return node === undefined || ParseTreeUtils.isNodeContainedWithin(node, speculativeRootNode);\n    }\n\n    function disableSpeculativeMode(callback: () => void) {\n        const stack = speculativeTypeTracker.disableSpeculativeMode();\n        try {\n            callback();\n        } finally {\n            speculativeTypeTracker.enableSpeculativeMode(stack);\n        }\n    }\n\n    function getFileInfo(node: ParseNode): AnalyzerFileInfo {\n        while (node.nodeType !== ParseNodeType.Module) {\n            node = node.parent!;\n        }\n        return AnalyzerNodeInfo.getFileInfo(node)!;\n    }\n\n    function getDeclarationFromFunctionNamedParameter(type: FunctionType, paramName: string): Declaration | undefined {\n        if (type.category === TypeCategory.Function) {\n            if (type.details.declaration) {\n                const functionDecl = type.details.declaration;\n                if (functionDecl.type === DeclarationType.Function) {\n                    const functionNode = functionDecl.node;\n                    const functionScope = AnalyzerNodeInfo.getScope(functionNode);\n                    if (functionScope) {\n                        const paramSymbol = functionScope.lookUpSymbol(paramName)!;\n                        if (paramSymbol) {\n                            return paramSymbol\n                                .getDeclarations()\n                                .find((decl) => decl.type === DeclarationType.Parameter);\n                        }\n                    }\n                }\n            }\n        }\n\n        return undefined;\n    }\n\n    function getDeclarationsForNameNode(node: NameNode): Declaration[] | undefined {\n        if (AnalyzerNodeInfo.isCodeUnreachable(node)) {\n            return undefined;\n        }\n\n        const declarations: Declaration[] = [];\n\n        // If the node is part of a \"from X import Y as Z\" statement and the node\n        // is the \"Y\" (non-aliased) name, we need to look up the alias symbol\n        // since the non-aliased name is not in the symbol table.\n        if (\n            node.parent &&\n            node.parent.nodeType === ParseNodeType.ImportFromAs &&\n            node.parent.alias &&\n            node === node.parent.name\n        ) {\n            const scope = ScopeUtils.getScopeForNode(node);\n            if (scope) {\n                // Look up the alias symbol.\n                const symbolInScope = scope.lookUpSymbolRecursive(node.parent.alias.value);\n                if (symbolInScope) {\n                    // The alias could have more decls that don't refer to this import. Filter\n                    // out the one(s) that specifically associated with this import statement.\n                    const declsForThisImport = symbolInScope.symbol.getDeclarations().filter((decl) => {\n                        return decl.type === DeclarationType.Alias && decl.node === node.parent;\n                    });\n\n                    // Make a shallow copy and clear the \"usesLocalName\" field.\n                    const nonLocalDecls = declsForThisImport.map((localDecl) => {\n                        if (localDecl.type === DeclarationType.Alias) {\n                            const nonLocalDecl: AliasDeclaration = { ...localDecl };\n                            nonLocalDecl.usesLocalName = false;\n                            return nonLocalDecl;\n                        }\n                        return localDecl;\n                    });\n\n                    declarations.push(...nonLocalDecls);\n                }\n            }\n        } else if (\n            node.parent &&\n            node.parent.nodeType === ParseNodeType.MemberAccess &&\n            node === node.parent.memberName\n        ) {\n            let baseType = getType(node.parent.leftExpression);\n            if (baseType) {\n                baseType = specializeType(baseType, /* typeVarMap */ undefined);\n                const memberName = node.parent.memberName.value;\n                doForSubtypes(baseType, (subtype) => {\n                    let symbol: Symbol | undefined;\n\n                    if (isClass(subtype)) {\n                        // Try to find a member that has a declared type. If so, that\n                        // overrides any inferred types.\n                        let member = lookUpClassMember(subtype, memberName, ClassMemberLookupFlags.DeclaredTypesOnly);\n                        if (!member) {\n                            member = lookUpClassMember(subtype, memberName);\n                        }\n                        if (member) {\n                            symbol = member.symbol;\n                        }\n                    } else if (isObject(subtype)) {\n                        // Try to find a member that has a declared type. If so, that\n                        // overrides any inferred types.\n                        let member = lookUpObjectMember(subtype, memberName, ClassMemberLookupFlags.DeclaredTypesOnly);\n                        if (!member) {\n                            member = lookUpObjectMember(subtype, memberName);\n                        }\n                        if (member) {\n                            symbol = member.symbol;\n                        }\n                    } else if (isModule(subtype)) {\n                        symbol = ModuleType.getField(subtype, memberName);\n                    }\n\n                    if (symbol) {\n                        // By default, report only the declarations that have type annotations.\n                        // If there are none, then report all of the unannotated declarations,\n                        // which includes every assignment of that symbol.\n                        const typedDecls = symbol.getTypedDeclarations();\n                        if (typedDecls.length > 0) {\n                            declarations.push(...typedDecls);\n                        } else {\n                            declarations.push(...symbol.getDeclarations());\n                        }\n                    }\n\n                    return subtype;\n                });\n            }\n        } else if (node.parent && node.parent.nodeType === ParseNodeType.ModuleName) {\n            const namePartIndex = node.parent.nameParts.findIndex((part) => part === node);\n            const importInfo = AnalyzerNodeInfo.getImportInfo(node.parent);\n            if (\n                namePartIndex >= 0 &&\n                importInfo &&\n                !importInfo.isNativeLib &&\n                namePartIndex < importInfo.resolvedPaths.length\n            ) {\n                if (importInfo.resolvedPaths[namePartIndex]) {\n                    evaluateTypesForStatement(node);\n\n                    // Synthesize an alias declaration for this name part. The only\n                    // time this case is used is for the hover provider.\n                    const aliasDeclaration: AliasDeclaration = {\n                        type: DeclarationType.Alias,\n                        node: undefined!,\n                        path: importInfo.resolvedPaths[namePartIndex],\n                        range: getEmptyRange(),\n                        implicitImports: new Map<string, ModuleLoaderActions>(),\n                        usesLocalName: false,\n                        moduleName: '',\n                    };\n                    declarations.push(aliasDeclaration);\n                }\n            }\n        } else if (node.parent && node.parent.nodeType === ParseNodeType.Argument && node === node.parent.name) {\n            // The target node is the name in a named argument. We need to determine whether\n            // the corresponding named parameter can be determined from the context.\n            const argNode = node.parent;\n            const paramName = node.value;\n            if (argNode.parent && argNode.parent.nodeType === ParseNodeType.Call) {\n                const baseType = getType(argNode.parent.leftExpression);\n\n                if (baseType) {\n                    if (baseType.category === TypeCategory.Function && baseType.details.declaration) {\n                        const paramDecl = getDeclarationFromFunctionNamedParameter(baseType, paramName);\n                        if (paramDecl) {\n                            declarations.push(paramDecl);\n                        }\n                    } else if (isClass(baseType)) {\n                        const initMethodType = getTypeFromObjectMember(\n                            argNode.parent.leftExpression,\n                            ObjectType.create(baseType),\n                            '__init__',\n                            { method: 'get' },\n                            new DiagnosticAddendum(),\n                            MemberAccessFlags.SkipForMethodLookup | MemberAccessFlags.SkipObjectBaseClass\n                        );\n\n                        if (initMethodType && initMethodType.category === TypeCategory.Function) {\n                            const paramDecl = getDeclarationFromFunctionNamedParameter(initMethodType, paramName);\n                            if (paramDecl) {\n                                declarations.push(paramDecl);\n                            } else if (ClassType.isDataClass(baseType)) {\n                                const lookupResults = lookUpClassMember(baseType, paramName);\n                                if (lookupResults) {\n                                    declarations.push(...lookupResults.symbol.getDeclarations());\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            let allowForwardReferences = false;\n\n            // Determine if this node is within a quoted type annotation.\n            if (ParseTreeUtils.isWithinTypeAnnotation(node, !isAnnotationEvaluationPostponed(getFileInfo(node)))) {\n                allowForwardReferences = true;\n            }\n\n            const symbolWithScope = lookUpSymbolRecursive(node, node.value, !allowForwardReferences);\n            if (symbolWithScope) {\n                declarations.push(...symbolWithScope.symbol.getDeclarations());\n            }\n        }\n\n        return declarations;\n    }\n\n    function getTypeForDeclaration(declaration: Declaration): Type | undefined {\n        switch (declaration.type) {\n            case DeclarationType.Intrinsic: {\n                if (declaration.intrinsicType === 'Any') {\n                    return AnyType.create();\n                }\n\n                if (declaration.intrinsicType === 'class') {\n                    const classNode = ParseTreeUtils.getEnclosingClass(declaration.node) as ClassNode;\n                    const classTypeInfo = getTypeOfClass(classNode);\n                    return classTypeInfo ? classTypeInfo.classType : undefined;\n                }\n\n                const strType = getBuiltInObject(declaration.node, 'str');\n                const intType = getBuiltInObject(declaration.node, 'int');\n                if (isObject(intType) && isObject(strType)) {\n                    if (declaration.intrinsicType === 'str') {\n                        return strType;\n                    }\n\n                    if (declaration.intrinsicType === 'int') {\n                        return intType;\n                    }\n\n                    if (declaration.intrinsicType === 'List[str]') {\n                        const listType = getBuiltInType(declaration.node, 'List');\n                        if (isClass(listType)) {\n                            return ObjectType.create(\n                                ClassType.cloneForSpecialization(listType, [strType], /* isTypeArgumentExplicit */ true)\n                            );\n                        }\n                    }\n\n                    if (declaration.intrinsicType === 'Dict[str, Any]') {\n                        const dictType = getBuiltInType(declaration.node, 'Dict');\n                        if (isClass(dictType)) {\n                            return ObjectType.create(\n                                ClassType.cloneForSpecialization(\n                                    dictType,\n                                    [strType, AnyType.create()],\n                                    /* isTypeArgumentExplicit */ true\n                                )\n                            );\n                        }\n                    }\n                }\n\n                return UnknownType.create();\n            }\n\n            case DeclarationType.Class: {\n                const classTypeInfo = getTypeOfClass(declaration.node);\n                return classTypeInfo ? classTypeInfo.decoratedType : undefined;\n            }\n\n            case DeclarationType.SpecialBuiltInClass: {\n                return getTypeOfAnnotation(declaration.node.typeAnnotation);\n            }\n\n            case DeclarationType.Function: {\n                const functionTypeInfo = getTypeOfFunction(declaration.node);\n                return functionTypeInfo ? functionTypeInfo.decoratedType : undefined;\n            }\n\n            case DeclarationType.Parameter: {\n                let typeAnnotationNode = declaration.node.typeAnnotation || declaration.node.typeAnnotationComment;\n\n                // If there wasn't an annotation, see if the parent function\n                // has a function-level annotation comment that provides\n                // this parameter's annotation type.\n                if (!typeAnnotationNode) {\n                    if (declaration.node.parent?.nodeType === ParseNodeType.Function) {\n                        const functionNode = declaration.node.parent;\n                        if (\n                            functionNode.functionAnnotationComment &&\n                            !functionNode.functionAnnotationComment.isParamListEllipsis\n                        ) {\n                            const paramIndex = functionNode.parameters.findIndex((param) => param === declaration.node);\n                            typeAnnotationNode = getTypeAnnotationForParameter(functionNode, paramIndex);\n                        }\n                    }\n                }\n\n                if (typeAnnotationNode) {\n                    const declaredType = getTypeOfAnnotation(\n                        typeAnnotationNode,\n                        /* allowFinal */ false,\n                        /* associateTypeVarsWithScope */ true\n                    );\n                    return transformVariadicParamType(declaration.node, declaration.node.category, declaredType);\n                }\n\n                return undefined;\n            }\n\n            case DeclarationType.Variable: {\n                const typeAnnotationNode = declaration.typeAnnotationNode;\n\n                if (typeAnnotationNode) {\n                    const typeAliasNode = isDeclaredTypeAlias(typeAnnotationNode)\n                        ? ParseTreeUtils.getTypeAnnotationNode(typeAnnotationNode)\n                        : undefined;\n                    let declaredType = getTypeOfAnnotation(typeAnnotationNode);\n\n                    if (declaredType) {\n                        // Apply enum transform if appropriate.\n                        if (declaration.node.nodeType === ParseNodeType.Name) {\n                            declaredType = transformTypeForPossibleEnumClass(declaration.node, declaredType);\n                        }\n\n                        if (typeAliasNode && typeAliasNode.valueExpression.nodeType === ParseNodeType.Name) {\n                            declaredType = transformTypeForTypeAlias(declaredType, typeAliasNode.valueExpression);\n                        }\n\n                        return declaredType;\n                    }\n                }\n\n                return undefined;\n            }\n\n            case DeclarationType.Alias: {\n                return undefined;\n            }\n        }\n    }\n\n    function getInferredTypeOfDeclaration(decl: Declaration): Type | undefined {\n        const resolvedDecl = resolveAliasDeclaration(decl, /* resolveLocalNames */ true);\n\n        // We couldn't resolve the alias. Substitute an unknown\n        // type in this case.\n        if (!resolvedDecl) {\n            return UnknownType.create();\n        }\n\n        function applyLoaderActionsToModuleType(\n            moduleType: ModuleType,\n            loaderActions: ModuleLoaderActions,\n            importLookup: ImportLookup\n        ): Type {\n            if (loaderActions.path) {\n                const lookupResults = importLookup(loaderActions.path);\n                if (lookupResults) {\n                    moduleType.fields = lookupResults.symbolTable;\n                    moduleType.docString = lookupResults.docString;\n                } else {\n                    return UnknownType.create();\n                }\n            }\n\n            if (loaderActions.implicitImports) {\n                loaderActions.implicitImports.forEach((implicitImport, name) => {\n                    // Recursively apply loader actions.\n                    const moduleName = moduleType.moduleName ? moduleType.moduleName + '.' + name : '';\n                    const importedModuleType = ModuleType.create(moduleName);\n                    const symbolType = applyLoaderActionsToModuleType(importedModuleType, implicitImport, importLookup);\n\n                    const importedModuleSymbol = Symbol.createWithType(SymbolFlags.None, symbolType);\n                    moduleType.loaderFields.set(name, importedModuleSymbol);\n                });\n            }\n\n            return moduleType;\n        }\n\n        // If the resolved declaration is still an alias, the alias\n        // is pointing at a module, and we need to synthesize a\n        // module type.\n        if (resolvedDecl.type === DeclarationType.Alias) {\n            // Build a module type that corresponds to the declaration and\n            // its associated loader actions.\n            const moduleType = ModuleType.create(resolvedDecl.moduleName);\n            if (resolvedDecl.symbolName) {\n                if (resolvedDecl.submoduleFallback) {\n                    return applyLoaderActionsToModuleType(\n                        moduleType,\n                        resolvedDecl.symbolName && resolvedDecl.submoduleFallback\n                            ? resolvedDecl.submoduleFallback\n                            : resolvedDecl,\n                        importLookup\n                    );\n                }\n            } else {\n                return applyLoaderActionsToModuleType(moduleType, resolvedDecl, importLookup);\n            }\n        }\n\n        const declaredType = getTypeForDeclaration(resolvedDecl);\n        if (declaredType) {\n            return declaredType;\n        }\n\n        // If this is part of a \"py.typed\" package, don't fall back on type inference\n        // unless it's marked Final, is a constant, or is a declared type alias.\n        const fileInfo = getFileInfo(resolvedDecl.node);\n        let isSpeculativeTypeAliasFromPyTypedFile = false;\n\n        if (fileInfo.isInPyTypedPackage && !fileInfo.isStubFile && evaluatorOptions.disableInferenceForPyTypedSources) {\n            if (resolvedDecl.type !== DeclarationType.Variable) {\n                return UnknownType.create();\n            }\n\n            // Special-case variables within an enum class. These are effectively\n            // constants, so we'll treat them as such.\n            const enclosingClass = ParseTreeUtils.getEnclosingClass(resolvedDecl.node, /* stopAtFunction */ true);\n            let isEnumValue = false;\n            if (enclosingClass) {\n                const classTypeInfo = getTypeOfClass(enclosingClass);\n                if (classTypeInfo && ClassType.isEnumClass(classTypeInfo.classType)) {\n                    isEnumValue = true;\n                }\n            }\n\n            if (!resolvedDecl.isFinal && !resolvedDecl.isConstant && !isEnumValue) {\n                if (!resolvedDecl.typeAliasName) {\n                    return UnknownType.create();\n                } else if (!resolvedDecl.typeAliasAnnotation) {\n                    isSpeculativeTypeAliasFromPyTypedFile = true;\n                }\n            }\n        }\n\n        // If the resolved declaration had no defined type, use the\n        // inferred type for this node.\n        if (resolvedDecl.type === DeclarationType.Parameter) {\n            const cachedValue = readTypeCache(resolvedDecl.node.name!);\n            if (cachedValue) {\n                return cachedValue;\n            }\n            evaluateTypeOfParameter(resolvedDecl.node);\n            return readTypeCache(resolvedDecl.node.name!);\n        }\n\n        if (resolvedDecl.type === DeclarationType.Variable && resolvedDecl.inferredTypeSource) {\n            let inferredType = readTypeCache(resolvedDecl.node);\n\n            if (!inferredType) {\n                // If this is a type alias, evaluate types for the entire assignment\n                // statement rather than just the RHS of the assignment.\n                const typeSource =\n                    resolvedDecl.typeAliasName && resolvedDecl.inferredTypeSource.parent\n                        ? resolvedDecl.inferredTypeSource.parent\n                        : resolvedDecl.inferredTypeSource;\n                evaluateTypesForStatement(typeSource);\n                inferredType = readTypeCache(resolvedDecl.node);\n            }\n\n            if (inferredType && resolvedDecl.node.nodeType === ParseNodeType.Name) {\n                inferredType = transformTypeForPossibleEnumClass(resolvedDecl.node, inferredType);\n            }\n\n            if (inferredType && resolvedDecl.typeAliasName) {\n                // If this was a speculative type alias, it becomes a real type alias only\n                // in the event that its inferred type is instantiable.\n                if (TypeBase.isInstantiable(inferredType) && !isAnyOrUnknown(inferredType)) {\n                    inferredType = transformTypeForTypeAlias(inferredType, resolvedDecl.typeAliasName);\n                } else if (isSpeculativeTypeAliasFromPyTypedFile) {\n                    return UnknownType.create();\n                }\n            }\n\n            return inferredType;\n        }\n\n        return undefined;\n    }\n\n    // If the specified declaration is an alias declaration that points to a symbol,\n    // it resolves the alias and looks up the symbol, then returns the first declaration\n    // associated with that symbol. It does this recursively if necessary. If a symbol\n    // lookup fails, undefined is returned. If resolveLocalNames is true, the method\n    // resolves aliases through local renames (\"as\" clauses found in import statements).\n    function resolveAliasDeclaration(declaration: Declaration, resolveLocalNames: boolean): Declaration | undefined {\n        return DeclarationUtils.resolveAliasDeclaration(importLookup, declaration, resolveLocalNames);\n    }\n\n    // Returns the type of the symbol. If the type is explicitly declared, that type\n    // is returned. If not, the type is inferred from assignments to the symbol. All\n    // assigned types are evaluated and combined into a union. If a \"usageNode\"\n    // node is specified, only declarations that are outside of the current execution\n    // scope or that are reachable (as determined by code flow analysis) are considered.\n    // This helps in cases where there are cyclical dependencies between symbols.\n    function getEffectiveTypeOfSymbol(symbol: Symbol): Type {\n        return getEffectiveTypeOfSymbolForUsage(symbol).type;\n    }\n\n    function getEffectiveTypeOfSymbolForUsage(symbol: Symbol, usageNode?: NameNode): EffectiveTypeResult {\n        // If there's a declared type, it takes precedence over inferred types.\n        if (symbol.hasTypedDeclarations()) {\n            return {\n                type: getDeclaredTypeOfSymbol(symbol) || UnknownType.create(),\n                isResolutionCyclical: false,\n            };\n        }\n\n        // Infer the type.\n        const typesToCombine: Type[] = [];\n        const isPrivate = symbol.isPrivateMember();\n        const decls = symbol.getDeclarations();\n        const isFinalVar = isFinalVariable(symbol);\n        let isResolutionCyclical = false;\n\n        decls.forEach((decl) => {\n            let considerDecl = true;\n            if (usageNode !== undefined) {\n                if (decl.type !== DeclarationType.Alias) {\n                    // Is the declaration in the same execution scope as the \"usageNode\" node?\n                    const usageScope = ParseTreeUtils.getExecutionScopeNode(usageNode);\n                    const declScope = ParseTreeUtils.getExecutionScopeNode(decl.node);\n                    if (usageScope === declScope) {\n                        if (!isFlowPathBetweenNodes(decl.node, usageNode)) {\n                            considerDecl = false;\n                        }\n                    }\n                }\n            }\n\n            if (considerDecl) {\n                const isTypeAlias = isExplicitTypeAliasDeclaration(decl) || isPossibleTypeAliasDeclaration(decl);\n\n                // If this is a type alias, evaluate it outside of the recursive symbol\n                // resolution check so we can evaluate the full assignment statement.\n                if (\n                    isTypeAlias &&\n                    decl.type === DeclarationType.Variable &&\n                    decl.inferredTypeSource?.parent?.nodeType === ParseNodeType.Assignment\n                ) {\n                    evaluateTypesForAssignmentStatement(decl.inferredTypeSource.parent);\n\n                    if (decl.typeAliasAnnotation) {\n                        // Mark \"TypeAlias\" declaration as accessed.\n                        getTypeOfExpression(decl.typeAliasAnnotation);\n                    }\n                }\n\n                if (pushSymbolResolution(symbol, decl)) {\n                    try {\n                        let type = getInferredTypeOfDeclaration(decl);\n\n                        if (popSymbolResolution(symbol)) {\n                            isResolutionCyclical = true;\n                        }\n\n                        if (type) {\n                            if (decl.type === DeclarationType.Variable) {\n                                let isConstant = decl.type === DeclarationType.Variable && !!decl.isConstant;\n\n                                // Treat enum values declared within an enum class as though they are const even\n                                // though they may not be named as such.\n                                if (\n                                    isObject(type) &&\n                                    ClassType.isEnumClass(type.classType) &&\n                                    isDeclInEnumClass(decl)\n                                ) {\n                                    isConstant = true;\n                                }\n\n                                // If the symbol is private or constant, we can retain the literal\n                                // value. Otherwise, strip literal values to widen the type.\n                                if (\n                                    TypeBase.isInstance(type) &&\n                                    !isTypeAlias &&\n                                    !isPrivate &&\n                                    !isConstant &&\n                                    !isFinalVar\n                                ) {\n                                    type = stripLiteralValue(type);\n                                }\n                            }\n                            typesToCombine.push(type);\n                        }\n                    } catch (e) {\n                        // Clean up the stack before rethrowing.\n                        popSymbolResolution(symbol);\n                        throw e;\n                    }\n                } else {\n                    isResolutionCyclical = true;\n                }\n            }\n        });\n\n        if (typesToCombine.length > 0) {\n            return {\n                type: combineTypes(typesToCombine),\n                isResolutionCyclical: false,\n            };\n        }\n\n        return {\n            type: UnboundType.create(),\n            isResolutionCyclical,\n        };\n    }\n\n    function getDeclaredTypeOfSymbol(symbol: Symbol): Type | undefined {\n        const synthesizedType = symbol.getSynthesizedType();\n        if (synthesizedType) {\n            return synthesizedType;\n        }\n\n        const typedDecls = symbol.getTypedDeclarations();\n\n        if (typedDecls.length === 0) {\n            // There was no declaration with a defined type.\n            return undefined;\n        }\n\n        // Start with the last decl. If that's already being resolved,\n        // use the next-to-last decl, etc. This can happen when resolving\n        // property methods. Often the setter method is defined in reference to\n        // the initial property, which defines the getter method with the same\n        // symbol name.\n        let declIndex = typedDecls.length - 1;\n        while (declIndex >= 0) {\n            const decl = typedDecls[declIndex];\n\n            // If there's a partially-constructed type that is allowed\n            // for recursive symbol resolution, return it as the resolved type.\n            const partialType = getSymbolResolutionPartialType(symbol, decl);\n            if (partialType) {\n                return partialType;\n            }\n\n            if (getIndexOfSymbolResolution(symbol, decl) < 0) {\n                if (pushSymbolResolution(symbol, decl)) {\n                    try {\n                        const type = getTypeForDeclaration(decl);\n\n                        if (!popSymbolResolution(symbol)) {\n                            return undefined;\n                        }\n\n                        return type;\n                    } catch (e) {\n                        // Clean up the stack before rethrowing.\n                        popSymbolResolution(symbol);\n                        throw e;\n                    }\n                }\n\n                break;\n            }\n\n            declIndex--;\n        }\n\n        return undefined;\n    }\n\n    function isDeclInEnumClass(decl: VariableDeclaration): boolean {\n        const classNode = ParseTreeUtils.getEnclosingClass(decl.node, /* stopAtFunction */ true);\n        if (!classNode) {\n            return false;\n        }\n\n        const classInfo = getTypeOfClass(classNode);\n        if (!classInfo) {\n            return false;\n        }\n\n        return ClassType.isEnumClass(classInfo.classType);\n    }\n\n    // Returns the return type of the function. If the type is explicitly provided in\n    // a type annotation, that type is returned. If not, an attempt is made to infer\n    // the return type. If a list of args is provided, the inference logic may take\n    // into account argument types to infer the return type.\n    function getFunctionEffectiveReturnType(\n        type: FunctionType,\n        args?: ValidateArgTypeParams[],\n        inferTypeIfNeeded = true\n    ) {\n        const specializedReturnType = FunctionType.getSpecializedReturnType(type);\n        if (specializedReturnType) {\n            return specializedReturnType;\n        }\n\n        if (inferTypeIfNeeded) {\n            return getFunctionInferredReturnType(type, args);\n        }\n\n        return UnknownType.create();\n    }\n\n    function getFunctionInferredReturnType(type: FunctionType, args?: ValidateArgTypeParams[]) {\n        let returnType: Type | undefined;\n\n        // Don't attempt to infer the return type for a stub file or a py.typed module.\n        if (FunctionType.isStubDefinition(type) || FunctionType.isPyTypedDefinition(type)) {\n            return UnknownType.create();\n        }\n\n        // If the return type has already been lazily evaluated,\n        // don't bother computing it again.\n        if (type.inferredReturnType) {\n            returnType = type.inferredReturnType;\n        } else {\n            if (type.details.declaration) {\n                const functionNode = type.details.declaration.node;\n\n                // Temporarily disable speculative mode while we\n                // lazily evaluate the return type.\n                disableSpeculativeMode(() => {\n                    returnType = inferFunctionReturnType(functionNode, FunctionType.isAbstractMethod(type));\n                });\n\n                // Do we need to wrap this in an awaitable?\n                if (returnType && FunctionType.isWrapReturnTypeInAwait(type)) {\n                    returnType = createAwaitableReturnType(functionNode, returnType);\n                }\n            }\n\n            if (!returnType) {\n                returnType = UnknownType.create();\n            }\n\n            // Cache the type for next time.\n            type.inferredReturnType = returnType;\n        }\n\n        // If the type is partially unknown and the function has one or more unannotated\n        // params, try to analyze the function with the provided argument types and\n        // attempt to do a better job at inference.\n        if (\n            isPartlyUnknown(returnType) &&\n            FunctionType.hasUnannotatedParams(type) &&\n            !FunctionType.isStubDefinition(type) &&\n            !FunctionType.isPyTypedDefinition(type) &&\n            args\n        ) {\n            const contextualReturnType = getFunctionInferredReturnTypeUsingArguments(type, args);\n            if (contextualReturnType) {\n                returnType = contextualReturnType;\n            }\n        }\n\n        return returnType;\n    }\n\n    function getFunctionInferredReturnTypeUsingArguments(\n        type: FunctionType,\n        args: ValidateArgTypeParams[]\n    ): Type | undefined {\n        let contextualReturnType: Type | undefined;\n\n        if (!type.details.declaration) {\n            return undefined;\n        }\n        const functionNode = type.details.declaration.node;\n\n        // If an arg hasn't been matched to a specific named parameter,\n        // it's an unpacked value that corresponds to multiple parameters.\n        // That's an edge case that we don't handle here.\n        if (args.some((arg) => !arg.paramName)) {\n            return undefined;\n        }\n\n        // Detect recurrence. If a function invokes itself either directly\n        // or indirectly, we won't attempt to infer contextual return\n        // types any further.\n        if (returnTypeInferenceContextStack.some((context) => context.functionNode === functionNode)) {\n            return undefined;\n        }\n\n        const functionType = getTypeOfFunction(functionNode);\n        if (!functionType) {\n            return undefined;\n        }\n\n        // Don't explore arbitrarily deep in the call graph.\n        if (returnTypeInferenceContextStack.length >= maxReturnTypeInferenceStackSize) {\n            return undefined;\n        }\n\n        // Suppress diagnostics because we don't want to generate errors.\n        suppressDiagnostics(() => {\n            // Allocate a new temporary type cache for the context of just\n            // this function so we can analyze it separately without polluting\n            // the main type cache.\n            const prevTypeCache = returnTypeInferenceTypeCache;\n            returnTypeInferenceContextStack.push({\n                functionNode,\n                codeFlowAnalyzer: createCodeFlowAnalyzer(),\n            });\n\n            try {\n                returnTypeInferenceTypeCache = new Map<number, CachedType>();\n\n                let allArgTypesAreUnknown = true;\n                functionNode.parameters.forEach((param, index) => {\n                    if (param.name) {\n                        let paramType: Type | undefined;\n                        const arg = args.find((arg) => param.name!.value === arg.paramName);\n                        if (arg && arg.argument.valueExpression) {\n                            paramType = getTypeOfExpression(arg.argument.valueExpression).type;\n                            allArgTypesAreUnknown = false;\n                        } else if (param.defaultValue) {\n                            paramType = getTypeOfExpression(param.defaultValue).type;\n                            allArgTypesAreUnknown = false;\n                        } else if (index === 0) {\n                            // If this is an instance or class method, use the implied\n                            // parameter type for the \"self\" or \"cls\" parameter.\n                            if (\n                                FunctionType.isInstanceMethod(functionType.functionType) ||\n                                FunctionType.isClassMethod(functionType.functionType)\n                            ) {\n                                if (functionType.functionType.details.parameters.length > 0) {\n                                    if (functionNode.parameters[0].name) {\n                                        paramType = functionType.functionType.details.parameters[0].type;\n                                    }\n                                }\n                            }\n                        }\n\n                        if (!paramType) {\n                            paramType = UnknownType.create();\n                        }\n\n                        writeTypeCache(param.name, paramType);\n                    }\n                });\n\n                // Don't bother trying to determine the contextual return\n                // type if none of the argument types are known.\n                if (!allArgTypesAreUnknown) {\n                    contextualReturnType = inferFunctionReturnType(functionNode, FunctionType.isAbstractMethod(type));\n                }\n            } finally {\n                returnTypeInferenceContextStack.pop();\n                returnTypeInferenceTypeCache = prevTypeCache;\n            }\n        });\n\n        if (contextualReturnType) {\n            contextualReturnType = removeUnbound(contextualReturnType);\n\n            // Do we need to wrap this in an awaitable?\n            if (FunctionType.isWrapReturnTypeInAwait(type) && !isNoReturnType(contextualReturnType)) {\n                contextualReturnType = createAwaitableReturnType(functionNode, contextualReturnType);\n            }\n\n            return contextualReturnType;\n        }\n\n        return undefined;\n    }\n\n    function getFunctionDeclaredReturnType(node: FunctionNode): Type | undefined {\n        const functionTypeInfo = getTypeOfFunction(node)!;\n        if (!functionTypeInfo) {\n            // We hit a recursive dependency.\n            return AnyType.create();\n        }\n\n        // Ignore this check for abstract methods, which often\n        // don't actually return any value.\n        if (FunctionType.isAbstractMethod(functionTypeInfo.functionType)) {\n            return AnyType.create();\n        }\n\n        if (FunctionType.isGenerator(functionTypeInfo.functionType)) {\n            return getDeclaredGeneratorReturnType(functionTypeInfo.functionType);\n        }\n\n        return functionTypeInfo.functionType.details.declaredReturnType;\n    }\n\n    function getTypeOfMember(member: ClassMember): Type {\n        if (isClass(member.classType)) {\n            return partiallySpecializeType(getEffectiveTypeOfSymbol(member.symbol), member.classType);\n        }\n        return UnknownType.create();\n    }\n\n    function canAssignClassToProtocol(\n        destType: ClassType,\n        srcType: ClassType,\n        diag: DiagnosticAddendum,\n        typeVarMap: TypeVarMap | undefined,\n        flags: CanAssignFlags,\n        recursionCount: number\n    ): boolean {\n        const destClassFields = destType.details.fields;\n\n        // Some protocol definitions include recursive references to themselves.\n        // We need to protect against infinite recursion, so we'll check for that here.\n        if (isTypeSame(srcType, destType)) {\n            return true;\n        }\n\n        // Strip the type arguments off the dest protocol if they are provided.\n        const genericDestType = ClassType.cloneForSpecialization(\n            destType,\n            undefined,\n            /* isTypeArgumentExplicit */ false\n        );\n        const genericDestTypeVarMap = new TypeVarMap();\n\n        let typesAreConsistent = true;\n        const srcClassTypeVarMap = buildTypeVarMapFromSpecializedClass(srcType);\n\n        destClassFields.forEach((symbol, name) => {\n            if (symbol.isClassMember() && !symbol.isIgnoredForProtocolMatch()) {\n                const memberInfo = lookUpClassMember(srcType, name);\n                if (!memberInfo) {\n                    diag.addMessage(Localizer.DiagnosticAddendum.protocolMemberMissing().format({ name }));\n                    typesAreConsistent = false;\n                } else {\n                    const declaredType = getDeclaredTypeOfSymbol(symbol);\n                    if (declaredType) {\n                        const srcMemberType = specializeType(\n                            getTypeOfMember(memberInfo),\n                            srcClassTypeVarMap,\n                            /* makeConcrete */ false\n                        );\n\n                        if (\n                            !canAssignType(\n                                declaredType,\n                                srcMemberType,\n                                diag.createAddendum(),\n                                genericDestTypeVarMap,\n                                CanAssignFlags.Default,\n                                recursionCount + 1\n                            )\n                        ) {\n                            diag.addMessage(Localizer.DiagnosticAddendum.memberTypeMismatch().format({ name }));\n                            typesAreConsistent = false;\n                        }\n                    }\n\n                    if (symbol.isClassVar() && !memberInfo.symbol.isClassMember()) {\n                        diag.addMessage(Localizer.DiagnosticAddendum.protocolMemberClassVar().format({ name }));\n                        typesAreConsistent = false;\n                    }\n                }\n            }\n        });\n\n        // Now handle base classes of the dest protocol.\n        destType.details.baseClasses.forEach((baseClass) => {\n            if (\n                isClass(baseClass) &&\n                !ClassType.isBuiltIn(baseClass, 'object') &&\n                !ClassType.isBuiltIn(baseClass, 'Protocol')\n            ) {\n                const specializedBaseClass = specializeForBaseClass(destType, baseClass, recursionCount + 1);\n                if (\n                    !canAssignClassToProtocol(\n                        specializedBaseClass,\n                        srcType,\n                        diag,\n                        typeVarMap,\n                        flags,\n                        recursionCount + 1\n                    )\n                ) {\n                    typesAreConsistent = false;\n                }\n            }\n        });\n\n        // If the dest protocol has type parameters, make sure the source type arguments match.\n        if (typesAreConsistent && destType.details.typeParameters.length > 0 && destType.typeArguments) {\n            // Create a specialized version of the protocol defined by the dest and\n            // make sure the resulting type args can be assigned.\n            const specializedSrcProtocol = specializeType(\n                genericDestType,\n                genericDestTypeVarMap,\n                /* makeConcrete */ false\n            ) as ClassType;\n\n            if (\n                !verifyTypeArgumentsAssignable(\n                    destType,\n                    specializedSrcProtocol,\n                    diag,\n                    typeVarMap,\n                    flags,\n                    recursionCount\n                )\n            ) {\n                typesAreConsistent = false;\n            }\n        }\n\n        return typesAreConsistent;\n    }\n\n    function canAssignTypedDict(\n        destType: ClassType,\n        srcType: ClassType,\n        diag: DiagnosticAddendum,\n        recursionCount: number\n    ) {\n        let typesAreConsistent = true;\n        const destEntries = getTypedDictMembersForClass(destType);\n        const srcEntries = getTypedDictMembersForClass(srcType);\n\n        destEntries.forEach((destEntry, name) => {\n            const srcEntry = srcEntries.get(name);\n            if (!srcEntry) {\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typedDictFieldMissing().format({ name, type: printType(srcType) })\n                );\n                typesAreConsistent = false;\n            } else {\n                if (destEntry.isRequired && !srcEntry.isRequired) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typedDictFieldRequired().format({\n                            name,\n                            type: printType(destType),\n                        })\n                    );\n                    typesAreConsistent = false;\n                } else if (!destEntry.isRequired && srcEntry.isRequired) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typedDictFieldNotRequired().format({\n                            name,\n                            type: printType(destType),\n                        })\n                    );\n                    typesAreConsistent = false;\n                }\n\n                if (!isTypeSame(destEntry.valueType, srcEntry.valueType, recursionCount + 1)) {\n                    diag.addMessage(Localizer.DiagnosticAddendum.memberTypeMismatch().format({ name }));\n                    typesAreConsistent = false;\n                }\n            }\n        });\n\n        return typesAreConsistent;\n    }\n\n    function canAssignClass(\n        destType: ClassType,\n        srcType: ClassType,\n        diag: DiagnosticAddendum,\n        typeVarMap: TypeVarMap | undefined,\n        flags: CanAssignFlags,\n        recursionCount: number,\n        reportErrorsUsingObjType: boolean\n    ): boolean {\n        // Is it a structural type (i.e. a protocol)? If so, we need to\n        // perform a member-by-member check.\n        if (ClassType.isProtocolClass(destType)) {\n            return canAssignClassToProtocol(destType, srcType, diag, typeVarMap, flags, recursionCount);\n        }\n\n        // Handle typed dicts. They also use a form of structural typing for type\n        // checking, as defined in PEP 589.\n        if (ClassType.isTypedDictClass(destType) && ClassType.isTypedDictClass(srcType)) {\n            return canAssignTypedDict(destType, srcType, diag, recursionCount);\n        }\n\n        // Handle property classes. They are special because each property\n        // class has a different source ID, so they wouldn't otherwise match.\n        // We need to see if the return types of the properties match.\n        if (ClassType.isPropertyClass(destType) && ClassType.isPropertyClass(srcType)) {\n            let typesAreConsistent = true;\n\n            const fgetDestReturnType = getGetterTypeFromProperty(destType, /* inferTypeIfNeeded */ true);\n            const fgetSrcReturnType = getGetterTypeFromProperty(srcType, /* inferTypeIfNeeded */ true);\n            if (fgetDestReturnType && fgetSrcReturnType) {\n                if (\n                    !canAssignType(\n                        fgetDestReturnType,\n                        fgetSrcReturnType,\n                        diag,\n                        /* typeVarMap */ undefined,\n                        CanAssignFlags.Default,\n                        recursionCount + 1\n                    )\n                ) {\n                    typesAreConsistent = false;\n                }\n            }\n\n            return typesAreConsistent;\n        }\n\n        // Special-case conversion for the \"numeric tower\".\n        if (ClassType.isBuiltIn(destType, 'float')) {\n            if (ClassType.isBuiltIn(srcType, 'int')) {\n                if ((flags & CanAssignFlags.EnforceInvariance) === 0) {\n                    return true;\n                }\n            }\n        }\n\n        if (ClassType.isBuiltIn(destType, 'complex')) {\n            if (ClassType.isBuiltIn(srcType, 'int') || ClassType.isBuiltIn(srcType, 'float')) {\n                if ((flags & CanAssignFlags.EnforceInvariance) === 0) {\n                    return true;\n                }\n            }\n        }\n\n        if ((flags & CanAssignFlags.EnforceInvariance) === 0 || ClassType.isSameGenericClass(srcType, destType)) {\n            const inheritanceChain: InheritanceChain = [];\n            if (ClassType.isDerivedFrom(srcType, destType, inheritanceChain)) {\n                assert(inheritanceChain.length > 0);\n\n                return canAssignClassWithTypeArgs(\n                    destType,\n                    srcType,\n                    inheritanceChain,\n                    diag,\n                    typeVarMap,\n                    flags,\n                    recursionCount + 1\n                );\n            }\n        }\n\n        // Everything is assignable to an object.\n        if (ClassType.isBuiltIn(destType, 'object')) {\n            return true;\n        }\n\n        const destErrorType = reportErrorsUsingObjType ? ObjectType.create(destType) : destType;\n        const srcErrorType = reportErrorsUsingObjType ? ObjectType.create(srcType) : srcType;\n        diag.addMessage(\n            Localizer.DiagnosticAddendum.typeIncompatible().format({\n                sourceType: printType(srcErrorType),\n                destType: printType(destErrorType),\n            })\n        );\n        return false;\n    }\n\n    // Determines the specialized base class type that srcType derives from.\n    function specializeForBaseClass(srcType: ClassType, baseClass: ClassType, recursionCount: number): ClassType {\n        const typeParams = ClassType.getTypeParameters(baseClass);\n\n        // If there are no type parameters for the specified base class,\n        // no specialization is required.\n        if (typeParams.length === 0) {\n            return baseClass;\n        }\n\n        const typeVarMap = buildTypeVarMapFromSpecializedClass(srcType);\n        const specializedType = specializeType(baseClass, typeVarMap, /* makeConcrete */ false, recursionCount + 1);\n        assert(isClass(specializedType));\n        return specializedType as ClassType;\n    }\n\n    // Determines whether the specified type can be assigned to the\n    // specified inheritance chain, taking into account its type arguments.\n    function canAssignClassWithTypeArgs(\n        destType: ClassType,\n        srcType: ClassType,\n        inheritanceChain: InheritanceChain,\n        diag: DiagnosticAddendum,\n        typeVarMap: TypeVarMap | undefined,\n        flags: CanAssignFlags,\n        recursionCount: number\n    ): boolean {\n        let curSrcType = srcType;\n        let curTypeVarMap = typeVarMap;\n\n        for (let ancestorIndex = inheritanceChain.length - 1; ancestorIndex >= 0; ancestorIndex--) {\n            const ancestorType = inheritanceChain[ancestorIndex];\n\n            // If we've hit an \"unknown\", all bets are off, and we need to assume\n            // that the type is assignable.\n            if (isUnknown(ancestorType)) {\n                return true;\n            }\n\n            // If we've hit an 'object', it's assignable.\n            if (ClassType.isBuiltIn(ancestorType, 'object')) {\n                return true;\n            }\n\n            // If this isn't the first time through the loop, specialize\n            // for the next ancestor in the chain.\n            if (ancestorIndex < inheritanceChain.length - 1) {\n                curSrcType = specializeForBaseClass(curSrcType, ancestorType, recursionCount + 1);\n            }\n\n            // Do we need to do special-case processing for various built-in classes?\n            if (ancestorIndex === 0 && ClassType.isBuiltIn(destType)) {\n                // Handle built-in types that support arbitrary numbers\n                // of type parameters like Tuple.\n                if (isTupleClass(destType)) {\n                    if (destType.typeArguments && curSrcType.typeArguments) {\n                        const destTypeArgs = destType.typeArguments;\n                        let destArgCount = destTypeArgs.length;\n                        const isDestHomogenousTuple = destArgCount === 2 && isEllipsisType(destTypeArgs[1]);\n                        if (isDestHomogenousTuple) {\n                            destArgCount = 1;\n                        }\n\n                        const srcTypeArgs = curSrcType.typeArguments;\n                        let srcArgCount = srcTypeArgs.length;\n                        const isSrcHomogeneousType = srcArgCount === 2 && isEllipsisType(srcTypeArgs[1]);\n                        if (isSrcHomogeneousType) {\n                            srcArgCount = 1;\n                        }\n\n                        if ((srcTypeArgs.length === destArgCount && !isSrcHomogeneousType) || isDestHomogenousTuple) {\n                            for (let i = 0; i < Math.max(destArgCount, srcArgCount); i++) {\n                                const expectedDestType =\n                                    (isDestHomogenousTuple ? destTypeArgs[0] : destTypeArgs[i]) || AnyType.create();\n                                const expectedSrcType =\n                                    (isSrcHomogeneousType ? srcTypeArgs[0] : srcTypeArgs[i]) || AnyType.create();\n                                const entryDiag = diag.createAddendum();\n\n                                if (\n                                    !canAssignType(\n                                        expectedDestType,\n                                        expectedSrcType,\n                                        entryDiag.createAddendum(),\n                                        curTypeVarMap,\n                                        flags,\n                                        recursionCount + 1\n                                    )\n                                ) {\n                                    entryDiag.addMessage(\n                                        Localizer.DiagnosticAddendum.tupleEntryTypeMismatch().format({ entry: i + 1 })\n                                    );\n                                    return false;\n                                }\n                            }\n                        } else {\n                            diag.addMessage(\n                                Localizer.DiagnosticAddendum.tupleSizeMismatch().format({\n                                    expected: destArgCount,\n                                    received: srcTypeArgs.length,\n                                })\n                            );\n                            return false;\n                        }\n                    }\n\n                    return true;\n                }\n            }\n\n            // If there are no type parameters on this class, we're done.\n            const ancestorTypeParams = ClassType.getTypeParameters(ancestorType);\n            if (ancestorTypeParams.length === 0) {\n                continue;\n            }\n\n            // If the dest type isn't specialized, there are no type args to validate.\n            if (!ancestorType.typeArguments) {\n                return true;\n            }\n\n            // Validate that the type arguments match.\n            if (!verifyTypeArgumentsAssignable(ancestorType, curSrcType, diag, curTypeVarMap, flags, recursionCount)) {\n                return false;\n            }\n\n            // Allocate a new type var map for the next time through the loop.\n            curTypeVarMap = new TypeVarMap();\n        }\n\n        if (destType.typeArguments) {\n            // If the dest type is specialized, make sure the specialized source\n            // type arguments are assignable to the dest type arguments.\n            if (!verifyTypeArgumentsAssignable(destType, curSrcType, diag, typeVarMap, flags, recursionCount)) {\n                return false;\n            }\n        } else if (\n            typeVarMap &&\n            destType.details.typeParameters.length > 0 &&\n            curSrcType.typeArguments &&\n            !typeVarMap.isLocked()\n        ) {\n            // Populate the typeVar map with type arguments of the source.\n            const srcTypeArgs = curSrcType.effectiveTypeArguments || curSrcType.typeArguments;\n            for (let i = 0; i < destType.details.typeParameters.length; i++) {\n                const typeArgType = i < srcTypeArgs.length ? srcTypeArgs[i] : UnknownType.create();\n                typeVarMap.setTypeVar(destType.details.typeParameters[i], typeArgType, /* isNarrowable */ true);\n            }\n        }\n\n        return true;\n    }\n\n    function getGetterTypeFromProperty(propertyClass: ClassType, inferTypeIfNeeded: boolean): Type | undefined {\n        if (!ClassType.isPropertyClass(propertyClass)) {\n            return undefined;\n        }\n\n        const fgetSymbol = propertyClass.details.fields.get('fget');\n\n        if (fgetSymbol) {\n            const fgetType = getDeclaredTypeOfSymbol(fgetSymbol);\n            if (fgetType && fgetType.category === TypeCategory.Function) {\n                return getFunctionEffectiveReturnType(fgetType, /* args */ undefined, inferTypeIfNeeded);\n            }\n        }\n\n        return undefined;\n    }\n\n    function verifyTypeArgumentsAssignable(\n        destType: ClassType,\n        srcType: ClassType,\n        diag: DiagnosticAddendum,\n        typeVarMap: TypeVarMap | undefined,\n        flags: CanAssignFlags,\n        recursionCount: number\n    ) {\n        assert(ClassType.isSameGenericClass(destType, srcType));\n\n        const destTypeParams = ClassType.getTypeParameters(destType);\n        const destTypeArgs = destType.effectiveTypeArguments || destType.typeArguments!;\n        assert(destTypeArgs !== undefined);\n        const srcTypeArgs = srcType.effectiveTypeArguments || srcType.typeArguments;\n\n        if (srcTypeArgs && srcType.isTypeArgumentExplicit) {\n            if (ClassType.isSpecialBuiltIn(srcType) || srcTypeArgs.length === destTypeParams.length) {\n                for (let srcArgIndex = 0; srcArgIndex < srcTypeArgs.length; srcArgIndex++) {\n                    const srcTypeArg = srcTypeArgs[srcArgIndex];\n\n                    // In most cases, the number of type args should match the number\n                    // of type arguments, but there are a few special cases where this\n                    // isn't true (e.g. assigning a Tuple[X, Y, Z] to a tuple[W]).\n                    const destArgIndex = srcArgIndex >= destTypeArgs.length ? destTypeArgs.length - 1 : srcArgIndex;\n                    const destTypeArg = destArgIndex >= 0 ? destTypeArgs[destArgIndex] : UnknownType.create();\n                    const destTypeParam =\n                        destArgIndex < destTypeParams.length ? destTypeParams[destArgIndex] : undefined;\n                    const assignmentDiag = new DiagnosticAddendum();\n\n                    if (!destTypeParam || destTypeParam.details.isCovariant) {\n                        if (\n                            !canAssignType(\n                                destTypeArg,\n                                srcTypeArg,\n                                assignmentDiag,\n                                typeVarMap,\n                                flags,\n                                recursionCount + 1\n                            )\n                        ) {\n                            if (destTypeParam) {\n                                const childDiag = diag.createAddendum();\n                                childDiag.addMessage(\n                                    Localizer.DiagnosticAddendum.typeVarIsCovariant().format({\n                                        name: destTypeParam.details.name,\n                                    })\n                                );\n                                childDiag.addAddendum(assignmentDiag);\n                            }\n                            return false;\n                        }\n                    } else if (destTypeParam.details.isContravariant) {\n                        if (\n                            !canAssignType(\n                                srcTypeArg,\n                                destTypeArg,\n                                assignmentDiag,\n                                typeVarMap,\n                                flags | CanAssignFlags.ReverseTypeVarMatching,\n                                recursionCount + 1\n                            )\n                        ) {\n                            const childDiag = diag.createAddendum();\n                            childDiag.addMessage(\n                                Localizer.DiagnosticAddendum.typeVarIsContravariant().format({\n                                    name: destTypeParam.details.name,\n                                })\n                            );\n                            childDiag.addAddendum(assignmentDiag);\n                            return false;\n                        }\n                    } else {\n                        if (\n                            !canAssignType(\n                                destTypeArg,\n                                srcTypeArg,\n                                assignmentDiag,\n                                typeVarMap,\n                                flags | CanAssignFlags.EnforceInvariance,\n                                recursionCount + 1\n                            )\n                        ) {\n                            const childDiag = diag.createAddendum();\n                            childDiag.addMessage(\n                                Localizer.DiagnosticAddendum.typeVarIsInvariant().format({\n                                    name: destTypeParam.details.name,\n                                })\n                            );\n                            childDiag.addAddendum(assignmentDiag);\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n\n    // Assigns the source type to the dest type var in the type map. If an existing type is\n    // already associated with that type var name, it attempts to either widen or narrow\n    // the type (depending on the value of the canNarrowType parameter). The goal is to\n    // produce the narrowest type that meets all of the requirements. If the type var map\n    // has been \"locked\", it simply validates that the srcType is compatible (with no attempt\n    // to widen or narrow).\n    function assignTypeToTypeVar(\n        destType: TypeVarType,\n        srcType: Type,\n        canNarrowType: boolean,\n        diag: DiagnosticAddendum,\n        typeVarMap: TypeVarMap,\n        flags = CanAssignFlags.Default,\n        recursionCount = 0\n    ): boolean {\n        const curTypeVarMapping = typeVarMap.getTypeVar(destType);\n\n        if (destType.details.isParamSpec) {\n            diag.addMessage(\n                Localizer.DiagnosticAddendum.typeParamSpec().format({\n                    type: printType(srcType),\n                    name: destType.details.name,\n                })\n            );\n            return false;\n        }\n\n        // Handle the constrained case.\n        if (destType.details.constraints.length > 0) {\n            // Find the narrowest constrained type that is compatible.\n            let constrainedType: Type | undefined;\n            destType.details.constraints.forEach((t) => {\n                if (canAssignType(t, srcType, new DiagnosticAddendum())) {\n                    if (!constrainedType || canAssignType(constrainedType, t, new DiagnosticAddendum())) {\n                        constrainedType = t;\n                    }\n                }\n            });\n\n            if (!constrainedType) {\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typeConstraint().format({\n                        type: printType(srcType),\n                        name: destType.details.name,\n                    })\n                );\n                return false;\n            }\n\n            const isSrcTypeVar = isTypeVar(srcType) && !srcType.details.isSynthesized;\n            if (curTypeVarMapping && !isAnyOrUnknown(curTypeVarMapping) && !isSrcTypeVar) {\n                if (!canAssignType(curTypeVarMapping, constrainedType, new DiagnosticAddendum())) {\n                    // Handle the case where one of the constrained types is a wider\n                    // version of another constrained type that was previously assigned\n                    // to the type variable.\n                    if (canAssignType(constrainedType, curTypeVarMapping, new DiagnosticAddendum())) {\n                        if (!typeVarMap.isLocked()) {\n                            typeVarMap.setTypeVar(destType, constrainedType, /* isNarrowable */ false);\n                        }\n                    } else {\n                        diag.addMessage(\n                            Localizer.DiagnosticAddendum.typeConstraint().format({\n                                type: printType(constrainedType),\n                                name: printType(curTypeVarMapping),\n                            })\n                        );\n                        return false;\n                    }\n                }\n            } else {\n                // Assign the type to the type var. If the source is a TypeVar, don't\n                // specialize it to one of the constrained types. Leave it generic.\n                if (!typeVarMap.isLocked()) {\n                    typeVarMap.setTypeVar(destType, isSrcTypeVar ? srcType : constrainedType, /* isNarrowable */ false);\n                }\n            }\n\n            return true;\n        }\n\n        // Handle the unconstrained (but possibly bound) case.\n        let updatedType = srcType;\n        const curTypeIsNarrowable = typeVarMap.isNarrowable(destType) && !typeVarMap.isLocked();\n        const updatedTypeIsNarrowable = canNarrowType && curTypeIsNarrowable;\n\n        if (curTypeVarMapping) {\n            const diagAddendum = new DiagnosticAddendum();\n            if (canNarrowType) {\n                // Handle the narrowing case (used for contravariant type matching).\n                if (\n                    curTypeIsNarrowable &&\n                    canAssignType(srcType, curTypeVarMapping, diagAddendum, typeVarMap, flags, recursionCount + 1)\n                ) {\n                    // No need to narrow. Stick with the existing type unless it's an Unknown,\n                    // in which case we'll try to replace it with a known type.\n                    if (!isAnyOrUnknown(curTypeVarMapping) && !isUnknown(srcType)) {\n                        updatedType = curTypeVarMapping;\n                    }\n                } else if (\n                    !canAssignType(\n                        curTypeVarMapping,\n                        srcType,\n                        new DiagnosticAddendum(),\n                        typeVarMap,\n                        flags,\n                        recursionCount + 1\n                    )\n                ) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                            sourceType: printType(srcType),\n                            destType: printType(curTypeVarMapping),\n                        })\n                    );\n                    return false;\n                }\n            } else {\n                // Handle the widen case.\n                if (canAssignType(curTypeVarMapping, srcType, diagAddendum, typeVarMap, flags, recursionCount + 1)) {\n                    if (curTypeIsNarrowable) {\n                        // The new srcType is narrower than the current type, but the current\n                        // type is allowed to be narrowed, so replace the current type with\n                        // the srcType.\n                    } else {\n                        // No need to widen. Stick with the existing type unless it's an Unknown,\n                        // in which case we'll replace it with a known type.\n                        if (!isUnknown(curTypeVarMapping)) {\n                            updatedType = curTypeVarMapping;\n                        }\n                    }\n                } else {\n                    if (typeVarMap.isLocked()) {\n                        diag.addMessage(\n                            Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                                sourceType: printType(curTypeVarMapping),\n                                destType: printType(srcType),\n                            })\n                        );\n                        return false;\n                    }\n\n                    if (\n                        !canAssignType(\n                            srcType,\n                            curTypeVarMapping,\n                            new DiagnosticAddendum(),\n                            typeVarMap,\n                            flags,\n                            recursionCount + 1\n                        )\n                    ) {\n                        // Create a union, widening the type.\n                        updatedType = combineTypes([curTypeVarMapping, srcType]);\n                    }\n                }\n            }\n        }\n\n        // If there's a bound type, make sure the source is derived from it.\n        if (destType.details.boundType) {\n            if (\n                !canAssignType(\n                    destType.details.boundType,\n                    updatedType,\n                    diag.createAddendum(),\n                    undefined,\n                    CanAssignFlags.Default,\n                    recursionCount + 1\n                )\n            ) {\n                // Avoid adding a message that will confuse users if the TypeVar was\n                // synthesized for internal purposes.\n                if (!destType.details.isSynthesized) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeBound().format({\n                            sourceType: printType(updatedType),\n                            destType: printType(destType.details.boundType),\n                            name: destType.details.name,\n                        })\n                    );\n                }\n                return false;\n            }\n        }\n\n        if (!typeVarMap.isLocked()) {\n            typeVarMap.setTypeVar(destType, updatedType, updatedTypeIsNarrowable);\n        }\n\n        return true;\n    }\n\n    // Determines if the source type can be assigned to the dest type.\n    // If typeVarMap is provided, type variables within the destType are\n    // matched against existing type variables in the map. If a type variable\n    // in the dest type is not in the type map already, it is assigned a type\n    // and added to the map.\n    function canAssignType(\n        destType: Type,\n        srcType: Type,\n        diag: DiagnosticAddendum,\n        typeVarMap?: TypeVarMap,\n        flags = CanAssignFlags.Default,\n        recursionCount = 0\n    ): boolean {\n        destType = transformPossibleRecursiveTypeAlias(destType);\n        srcType = transformPossibleRecursiveTypeAlias(srcType);\n\n        if (recursionCount > maxTypeRecursionCount) {\n            return true;\n        }\n\n        if (destType === srcType) {\n            return true;\n        }\n\n        // If the source or dest is unbound, allow the assignment. The\n        // error will be reported elsewhere.\n        if (isUnbound(destType) || isUnbound(srcType)) {\n            return true;\n        }\n\n        // Strip the ReverseTypeVarMatching from the incoming flags.\n        // We don't want to propagate this flag to any nested calls to\n        // canAssignType.\n        const reverseTypeVarMatching = (flags & CanAssignFlags.ReverseTypeVarMatching) !== 0;\n        flags &= ~CanAssignFlags.ReverseTypeVarMatching;\n\n        // Before performing any other checks, see if the dest type is a\n        // TypeVar that we are attempting to match.\n        if (isTypeVar(destType)) {\n            // If it's an exact match, no need to do any more work.\n            if (isTypeVar(srcType) && srcType.scopeId !== undefined && srcType.scopeId === destType.scopeId) {\n                return true;\n            }\n\n            if (flags & CanAssignFlags.MatchTypeVarsExactly) {\n                if (isTypeVar(srcType) && destType.details.name === srcType.details.name) {\n                    return true;\n                }\n            } else if (!reverseTypeVarMatching) {\n                return assignTypeToTypeVar(\n                    destType,\n                    srcType,\n                    /* canNarrowType */ false,\n                    diag,\n                    typeVarMap || new TypeVarMap(),\n                    flags,\n                    recursionCount + 1\n                );\n            }\n        }\n\n        if (isTypeVar(srcType)) {\n            if (flags & CanAssignFlags.MatchTypeVarsExactly) {\n                if (isTypeVar(destType) && destType.details.name === srcType.details.name) {\n                    return true;\n                }\n\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                        sourceType: printType(srcType),\n                        destType: printType(destType),\n                    })\n                );\n                return false;\n            }\n        }\n\n        if (isAnyOrUnknown(destType)) {\n            return true;\n        }\n\n        if (isAnyOrUnknown(srcType)) {\n            if (typeVarMap) {\n                // If it's an ellipsis type, convert it to a regular \"Any\"\n                // type. These are functionally equivalent, but \"Any\" looks\n                // better in the text representation.\n                const typeVarSubstitution = isEllipsisType(srcType) ? AnyType.create() : srcType;\n                setTypeArgumentsRecursive(destType, typeVarSubstitution, typeVarMap);\n            }\n            if ((flags & CanAssignFlags.DisallowAssignFromAny) === 0) {\n                return true;\n            }\n        }\n\n        if (isNever(srcType)) {\n            if (typeVarMap) {\n                setTypeArgumentsRecursive(destType, UnknownType.create(), typeVarMap);\n            }\n            return true;\n        }\n\n        if (isTypeVar(srcType)) {\n            // In most cases, the source type will be specialized before\n            // canAssignType is called, so we won't get here. However, there\n            // are cases where this can occur (e.g. when we swap the src and dest\n            // types because they are contravariant).\n            if (reverseTypeVarMatching) {\n                return assignTypeToTypeVar(\n                    srcType,\n                    destType,\n                    /* canNarrowType */ true,\n                    diag,\n                    typeVarMap || new TypeVarMap(),\n                    flags,\n                    recursionCount + 1\n                );\n            }\n\n            if (flags & CanAssignFlags.DoNotSpecializeTypeVars) {\n                if (destType !== srcType) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                            sourceType: printType(srcType),\n                            destType: printType(destType),\n                        })\n                    );\n                    return false;\n                }\n                return true;\n            }\n\n            const specializedSrcType = getConcreteTypeFromTypeVar(srcType);\n            return canAssignType(destType, specializedSrcType, diag, undefined, flags, recursionCount + 1);\n        }\n\n        if (recursionCount > maxTypeRecursionCount) {\n            return true;\n        }\n\n        // If we need to enforce invariance, union types must match exactly.\n        if (flags & CanAssignFlags.EnforceInvariance) {\n            if (srcType.category === TypeCategory.Union || destType.category === TypeCategory.Union) {\n                if (!isTypeSame(srcType, destType)) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                            sourceType: printType(srcType),\n                            destType: printType(destType),\n                        })\n                    );\n                    return false;\n                }\n\n                return true;\n            }\n        }\n\n        if (srcType.category === TypeCategory.Union) {\n            let isIncompatible = false;\n\n            // For union sources, all of the types need to be assignable to the dest.\n            srcType.subtypes.forEach((t) => {\n                if (!canAssignType(destType, t, diag.createAddendum(), typeVarMap, flags, recursionCount + 1)) {\n                    isIncompatible = true;\n                }\n            });\n\n            if (isIncompatible) {\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                        sourceType: printType(srcType),\n                        destType: printType(destType),\n                    })\n                );\n                return false;\n            }\n\n            return true;\n        }\n\n        if (destType.category === TypeCategory.Union) {\n            // For union destinations, we just need to match one of the types.\n            const diagAddendum = new DiagnosticAddendum();\n\n            let foundMatch = false;\n            // Run through all subtypes in the union. Don't stop at the first\n            // match we find because we may need to match TypeVars in other\n            // subtypes. We special-case \"None\" so we can handle Optional[T]\n            // without matching the None to the type var.\n            if (\n                srcType.category === TypeCategory.None &&\n                destType.subtypes.some((subtype) => subtype.category === TypeCategory.None)\n            ) {\n                foundMatch = true;\n            } else {\n                let bestTypeVarMap: TypeVarMap | undefined;\n                let bestTypeVarMapScore: number | undefined;\n\n                destType.subtypes.forEach((subtype) => {\n                    // Make a temporary clone of the typeVarMap. We don't want to modify\n                    // the original typeVarMap until we find the \"optimal\" typeVar mapping.\n                    const typeVarMapClone = typeVarMap?.clone();\n                    if (canAssignType(subtype, srcType, diagAddendum, typeVarMapClone, flags, recursionCount + 1)) {\n                        foundMatch = true;\n\n                        if (typeVarMapClone) {\n                            // Ask the typeVarMap to compute a \"score\" for the current\n                            // contents of the table.\n                            const typeVarMapScore = typeVarMapClone.getScore();\n                            if (bestTypeVarMapScore === undefined || bestTypeVarMapScore <= typeVarMapScore) {\n                                // We found a typeVar mapping with a higher score than before.\n                                bestTypeVarMapScore = typeVarMapScore;\n                                bestTypeVarMap = typeVarMapClone;\n                            }\n                        }\n                    }\n                });\n\n                // If we found a winning type var mapping, copy it back to typeVarMap.\n                if (typeVarMap && bestTypeVarMap) {\n                    typeVarMap.copyFromClone(bestTypeVarMap);\n                }\n            }\n\n            if (!foundMatch) {\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                        sourceType: printType(srcType),\n                        destType: printType(destType),\n                    })\n                );\n                diag.addAddendum(diagAddendum);\n                return false;\n            }\n            return true;\n        }\n\n        if (destType.category === TypeCategory.None && srcType.category === TypeCategory.None) {\n            return true;\n        }\n\n        // Is the src a specialized \"Type\" object?\n        if (isObject(srcType) && ClassType.isBuiltIn(srcType.classType, 'Type')) {\n            const srcTypeArgs = srcType.classType.typeArguments;\n            if (srcTypeArgs && srcTypeArgs.length >= 1) {\n                if (isAnyOrUnknown(srcTypeArgs[0])) {\n                    return true;\n                } else if (isObject(srcTypeArgs[0])) {\n                    if (\n                        canAssignType(\n                            destType,\n                            srcTypeArgs[0].classType,\n                            diag.createAddendum(),\n                            typeVarMap,\n                            flags,\n                            recursionCount + 1\n                        )\n                    ) {\n                        return true;\n                    }\n\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                            sourceType: printType(srcType),\n                            destType: printType(destType),\n                        })\n                    );\n                    return false;\n                }\n            }\n        }\n\n        if (isClass(destType)) {\n            if (isClass(srcType)) {\n                if (\n                    canAssignClass(\n                        destType,\n                        srcType,\n                        diag,\n                        typeVarMap,\n                        flags,\n                        recursionCount + 1,\n                        /* reportErrorsUsingObjType */ false\n                    )\n                ) {\n                    return true;\n                }\n\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                        sourceType: printType(srcType),\n                        destType: printType(destType),\n                    })\n                );\n                return false;\n            }\n        }\n\n        if (isObject(destType)) {\n            const destClassType = destType.classType;\n\n            // Is the dest a generic \"type\" object?\n            if (ClassType.isBuiltIn(destClassType, 'type')) {\n                if (\n                    isClass(srcType) ||\n                    srcType.category === TypeCategory.Function ||\n                    srcType.category === TypeCategory.OverloadedFunction\n                ) {\n                    return true;\n                }\n            }\n\n            // Is the dest a specialized \"Type\" object?\n            if (ClassType.isBuiltIn(destClassType, 'Type')) {\n                const destTypeArgs = destClassType.typeArguments;\n                if (destTypeArgs && destTypeArgs.length >= 1) {\n                    if (isAnyOrUnknown(destTypeArgs[0])) {\n                        return true;\n                    } else if (isObject(destTypeArgs[0])) {\n                        return canAssignType(\n                            destTypeArgs[0].classType,\n                            srcType,\n                            diag,\n                            typeVarMap,\n                            flags,\n                            recursionCount + 1\n                        );\n                    } else if (isTypeVar(destTypeArgs[0])) {\n                        if (isClass(srcType) || (isNone(srcType) && TypeBase.isInstantiable(srcType))) {\n                            return canAssignType(\n                                destTypeArgs[0],\n                                convertToInstance(srcType),\n                                diag,\n                                typeVarMap,\n                                flags,\n                                recursionCount + 1\n                            );\n                        } else if (\n                            srcType.category === TypeCategory.Function ||\n                            srcType.category === TypeCategory.OverloadedFunction\n                        ) {\n                            return canAssignType(destTypeArgs[0], srcType, diag, typeVarMap, flags, recursionCount + 1);\n                        } else if (isObject(srcType) && ClassType.isProtocolClass(srcType.classType)) {\n                            // This case is used for protocol matching when the dest is a metaclass.\n                            // For example, when matching an Enum class against Iterable.\n                            return true;\n                        }\n                    }\n                }\n            }\n\n            if (isObject(srcType)) {\n                if (destType.classType.literalValue !== undefined) {\n                    const srcLiteral = srcType.classType.literalValue;\n                    if (\n                        srcLiteral === undefined ||\n                        !ClassType.isLiteralValueSame(srcType.classType, destType.classType)\n                    ) {\n                        diag.addMessage(\n                            Localizer.DiagnosticAddendum.literalAssignmentMismatch().format({\n                                sourceType: printType(srcType),\n                                destType: printType(destType),\n                            })\n                        );\n\n                        return false;\n                    }\n                }\n\n                if (\n                    !canAssignClass(\n                        destClassType,\n                        srcType.classType,\n                        diag,\n                        typeVarMap,\n                        flags,\n                        recursionCount + 1,\n                        /* reportErrorsUsingObjType */ true\n                    )\n                ) {\n                    return false;\n                }\n\n                return true;\n            } else if (srcType.category === TypeCategory.Function) {\n                // Is the destination a callback protocol (defined in PEP 544)?\n                const callbackType = getCallbackProtocolType(destType);\n                if (callbackType) {\n                    return canAssignFunction(callbackType, srcType, diag, typeVarMap, flags, recursionCount + 1);\n                }\n\n                // All functions are assignable to \"object\".\n                if (ClassType.isBuiltIn(destType.classType) && destType.classType.details.name === 'object') {\n                    return true;\n                }\n            } else if (isModule(srcType)) {\n                // Is the destination the built-in \"ModuleType\"?\n                if (ClassType.isBuiltIn(destClassType, 'ModuleType')) {\n                    return true;\n                }\n            } else if (isClass(srcType)) {\n                // All classes are assignable to \"object\".\n                if (ClassType.isBuiltIn(destType.classType, 'object')) {\n                    return true;\n                }\n\n                // Determine if the metaclass can be assigned to the object.\n                const metaclass = srcType.details.effectiveMetaclass;\n                if (metaclass) {\n                    if (isAnyOrUnknown(metaclass)) {\n                        return true;\n                    } else if (isClass(metaclass) && !ClassType.isBuiltIn(metaclass, 'type')) {\n                        return canAssignClass(\n                            destClassType,\n                            metaclass,\n                            diag,\n                            typeVarMap,\n                            flags,\n                            recursionCount + 1,\n                            /* reportErrorsUsingObjType */ false\n                        );\n                    }\n                }\n            }\n\n            // See if the destType is an instantiation of a Protocol\n            // class that is effectively a function.\n            const callbackType = getCallbackProtocolType(destType);\n            if (callbackType) {\n                destType = callbackType;\n            }\n        }\n\n        if (destType.category === TypeCategory.Function) {\n            let srcFunction: FunctionType | undefined;\n\n            if (srcType.category === TypeCategory.OverloadedFunction) {\n                // Find first overloaded function that matches the parameters.\n                // We don't want to pollute the current typeVarMap, so we'll\n                // make a copy of the existing one if it's specified.\n                const overloads = srcType.overloads;\n                const overloadIndex = overloads.findIndex((overload) => {\n                    const typeVarMapClone = typeVarMap ? typeVarMap.clone() : undefined;\n                    return canAssignType(\n                        destType,\n                        overload,\n                        diag.createAddendum(),\n                        typeVarMapClone,\n                        flags,\n                        recursionCount + 1\n                    );\n                });\n                if (overloadIndex < 0) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.noOverloadAssignable().format({ type: printType(destType) })\n                    );\n                    return false;\n                }\n                srcFunction = overloads[overloadIndex];\n            } else if (srcType.category === TypeCategory.Function) {\n                srcFunction = srcType;\n            } else if (isObject(srcType)) {\n                const callMember = lookUpObjectMember(srcType, '__call__');\n                if (callMember) {\n                    const memberType = getTypeOfMember(callMember);\n                    if (memberType.category === TypeCategory.Function) {\n                        srcFunction = stripFirstParameter(memberType);\n                    }\n                }\n            } else if (isClass(srcType)) {\n                // Synthesize a function that represents the constructor for this class.\n                const constructorFunction = FunctionType.createInstance(\n                    '__init__',\n                    '',\n                    FunctionTypeFlags.StaticMethod |\n                        FunctionTypeFlags.ConstructorMethod |\n                        FunctionTypeFlags.SynthesizedMethod\n                );\n                constructorFunction.details.declaredReturnType = ObjectType.create(srcType);\n\n                let constructorInfo = lookUpClassMember(\n                    srcType,\n                    '__init__',\n                    ClassMemberLookupFlags.SkipInstanceVariables | ClassMemberLookupFlags.SkipObjectBaseClass\n                );\n\n                if (!constructorInfo) {\n                    constructorInfo = lookUpClassMember(\n                        srcType,\n                        '__new__',\n                        ClassMemberLookupFlags.SkipInstanceVariables | ClassMemberLookupFlags.SkipObjectBaseClass\n                    );\n                }\n\n                const constructorType = constructorInfo ? getTypeOfMember(constructorInfo) : undefined;\n                if (constructorType && constructorType.category === TypeCategory.Function) {\n                    constructorType.details.parameters.forEach((param, index) => {\n                        // Skip the 'cls' or 'self' parameter.\n                        if (index > 0) {\n                            FunctionType.addParameter(constructorFunction, param);\n                        }\n                    });\n                } else {\n                    FunctionType.addDefaultParameters(constructorFunction);\n                }\n\n                srcFunction = constructorFunction;\n            }\n\n            if (srcFunction) {\n                if (\n                    canAssignFunction(\n                        destType,\n                        srcFunction,\n                        diag.createAddendum(),\n                        typeVarMap,\n                        flags,\n                        recursionCount + 1\n                    )\n                ) {\n                    return true;\n                }\n            }\n        }\n\n        if (destType.category === TypeCategory.OverloadedFunction) {\n            const overloadDiag = diag.createAddendum();\n\n            // All overloads in the dest must be assignable.\n            const isAssignable = !destType.overloads.some((destOverload) => {\n                return !canAssignType(\n                    destOverload,\n                    srcType,\n                    overloadDiag.createAddendum(),\n                    new TypeVarMap(),\n                    flags,\n                    recursionCount + 1\n                );\n            });\n\n            if (!isAssignable) {\n                overloadDiag.addMessage(\n                    Localizer.DiagnosticAddendum.overloadNotAssignable().format({\n                        name: destType.overloads[0].details.name,\n                    })\n                );\n                return false;\n            }\n\n            return true;\n        }\n\n        if (isObject(destType) && ClassType.isBuiltIn(destType.classType, 'object')) {\n            // All types (including None, Module, OverloadedFunction) derive from object.\n            return true;\n        }\n\n        // Are we trying to assign None to a protocol?\n        if (isNone(srcType) && isObject(destType) && ClassType.isProtocolClass(destType.classType)) {\n            if (noneType && isClass(noneType)) {\n                return canAssignClassToProtocol(destType.classType, noneType, diag, typeVarMap, flags, recursionCount);\n            }\n        }\n\n        if (isNone(destType)) {\n            diag.addMessage(Localizer.DiagnosticAddendum.assignToNone());\n            return false;\n        }\n\n        diag.addMessage(\n            Localizer.DiagnosticAddendum.typeAssignmentMismatch().format({\n                sourceType: printType(srcType),\n                destType: printType(destType),\n            })\n        );\n\n        return false;\n    }\n\n    function getCallbackProtocolType(objType: ObjectType): FunctionType | undefined {\n        if (!ClassType.isProtocolClass(objType.classType)) {\n            return undefined;\n        }\n\n        const callMember = lookUpObjectMember(objType, '__call__');\n        if (!callMember) {\n            return undefined;\n        }\n\n        const memberType = getTypeOfMember(callMember);\n        if (memberType.category === TypeCategory.Function) {\n            const boundMethod = bindFunctionToClassOrObject(\n                objType,\n                memberType,\n                /* treatAsClassMember */ false,\n                /* errorNode */ undefined\n            );\n\n            if (boundMethod) {\n                return boundMethod as FunctionType;\n            }\n        }\n\n        return undefined;\n    }\n\n    function canAssignFunctionParameter(\n        destType: Type,\n        srcType: Type,\n        paramIndex: number,\n        diag: DiagnosticAddendum,\n        typeVarMap: TypeVarMap | undefined,\n        flags: CanAssignFlags,\n        recursionCount: number\n    ) {\n        // Handle the special case where the dest type is a synthesized\n        // \"self\" for a protocol class.\n        if (\n            isTypeVar(destType) &&\n            destType.details.isSynthesized &&\n            destType.details.boundType &&\n            isObject(destType.details.boundType) &&\n            ClassType.isProtocolClass(destType.details.boundType.classType)\n        ) {\n            return true;\n        }\n\n        // Call canAssignType once to perform any typeVarMap population.\n        canAssignType(\n            srcType,\n            destType,\n            new DiagnosticAddendum(),\n            typeVarMap,\n            flags | CanAssignFlags.ReverseTypeVarMatching,\n            recursionCount + 1\n        );\n\n        // Make sure we can assign the specialized dest type to the source type.\n        const specializedDestType = specializeType(destType, typeVarMap, /* makeConcrete */ false, recursionCount + 1);\n\n        if (!canAssignType(srcType, specializedDestType, diag.createAddendum(), undefined, flags, recursionCount + 1)) {\n            diag.addMessage(\n                Localizer.DiagnosticAddendum.paramAssignment().format({\n                    index: paramIndex + 1,\n                    sourceType: printType(specializedDestType),\n                    destType: printType(srcType),\n                })\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n    function canAssignFunction(\n        destType: FunctionType,\n        srcType: FunctionType,\n        diag: DiagnosticAddendum,\n        typeVarMap: TypeVarMap | undefined,\n        flags: CanAssignFlags,\n        recursionCount: number\n    ): boolean {\n        let canAssign = true;\n        const checkReturnType = (flags & CanAssignFlags.SkipFunctionReturnTypeCheck) === 0;\n        flags &= ~CanAssignFlags.SkipFunctionReturnTypeCheck;\n\n        const srcParams = srcType.details.parameters;\n        const destParams = destType.details.parameters;\n\n        const srcStartOfNamed = srcParams.findIndex(\n            (p, index) =>\n                p.category === ParameterCategory.VarArgDictionary ||\n                (p.category === ParameterCategory.VarArgList && !p.name) ||\n                (index > 0 && srcParams[index - 1].category === ParameterCategory.VarArgList)\n        );\n        let srcPositionals = srcStartOfNamed < 0 ? srcParams : srcParams.slice(0, srcStartOfNamed);\n        const srcArgsIndex = srcPositionals.findIndex((p) => p.category === ParameterCategory.VarArgList && p.name);\n        srcPositionals = srcPositionals.filter((p) => p.category === ParameterCategory.Simple && p.name);\n\n        const destStartOfNamed = destParams.findIndex(\n            (p, index) =>\n                p.category === ParameterCategory.VarArgDictionary ||\n                (p.category === ParameterCategory.VarArgList && !p.name) ||\n                (index > 0 && destParams[index - 1].category === ParameterCategory.VarArgList)\n        );\n        let destPositionals = destStartOfNamed < 0 ? destParams : destParams.slice(0, destStartOfNamed);\n        const destArgsIndex = destPositionals.findIndex((p) => p.category === ParameterCategory.VarArgList && p.name);\n        destPositionals = destPositionals.filter((p) => p.category === ParameterCategory.Simple && p.name);\n\n        const positionalsToMatch = Math.min(srcPositionals.length, destPositionals.length);\n\n        if (!FunctionType.shouldSkipParamCompatibilityCheck(destType)) {\n            // Match positional parameters.\n            for (let paramIndex = 0; paramIndex < positionalsToMatch; paramIndex++) {\n                const srcParamType = FunctionType.getEffectiveParameterType(\n                    srcType,\n                    srcParams.findIndex((p) => p === srcPositionals[paramIndex])\n                );\n                const destParamType = FunctionType.getEffectiveParameterType(\n                    destType,\n                    destParams.findIndex((p) => p === destPositionals[paramIndex])\n                );\n\n                if (\n                    !canAssignFunctionParameter(\n                        destParamType,\n                        srcParamType,\n                        paramIndex + 1,\n                        diag.createAddendum(),\n                        typeVarMap,\n                        flags,\n                        recursionCount\n                    )\n                ) {\n                    canAssign = false;\n                }\n            }\n\n            if (destPositionals.length < srcPositionals.length) {\n                // If the dest type includes a ParamSpec, the additional parameters\n                // can be assigned to it, so no need to report an error here.\n                if (!destType.details.paramSpec) {\n                    const nonDefaultSrcParamCount = srcParams.filter((p) => !!p.name && !p.hasDefault).length;\n                    if (destArgsIndex < 0) {\n                        if (destPositionals.length < nonDefaultSrcParamCount) {\n                            diag.createAddendum().addMessage(\n                                Localizer.DiagnosticAddendum.functionTooFewParams().format({\n                                    expected: nonDefaultSrcParamCount,\n                                    received: destPositionals.length,\n                                })\n                            );\n                            canAssign = false;\n                        }\n                    } else {\n                        // Make sure the remaining positional arguments are of the\n                        // correct type for the *args parameter.\n                        const destArgsType = FunctionType.getEffectiveParameterType(destType, destArgsIndex);\n                        if (!isAnyOrUnknown(destArgsType)) {\n                            for (\n                                let paramIndex = destPositionals.length;\n                                paramIndex < srcPositionals.length;\n                                paramIndex++\n                            ) {\n                                const srcParamType = FunctionType.getEffectiveParameterType(\n                                    srcType,\n                                    srcParams.findIndex((p) => p === srcPositionals[paramIndex])\n                                );\n                                if (\n                                    !canAssignFunctionParameter(\n                                        destArgsType,\n                                        srcParamType,\n                                        paramIndex + 1,\n                                        diag.createAddendum(),\n                                        typeVarMap,\n                                        flags,\n                                        recursionCount\n                                    )\n                                ) {\n                                    canAssign = false;\n                                }\n                            }\n                        }\n                    }\n                }\n            } else if (srcPositionals.length < destPositionals.length) {\n                if (srcArgsIndex >= 0) {\n                    // Make sure the remaining dest parameters can be assigned to the source\n                    // *args parameter type.\n                    const srcArgsType = FunctionType.getEffectiveParameterType(srcType, srcArgsIndex);\n                    if (!isAnyOrUnknown(srcArgsType)) {\n                        for (\n                            let paramIndex = srcPositionals.length;\n                            paramIndex < destPositionals.length;\n                            paramIndex++\n                        ) {\n                            const destParamType = FunctionType.getEffectiveParameterType(\n                                destType,\n                                destParams.findIndex((p) => p === destPositionals[paramIndex])\n                            );\n                            if (\n                                !canAssignFunctionParameter(\n                                    destParamType,\n                                    srcArgsType,\n                                    paramIndex + 1,\n                                    diag.createAddendum(),\n                                    typeVarMap,\n                                    flags,\n                                    recursionCount\n                                )\n                            ) {\n                                canAssign = false;\n                            }\n                        }\n                    }\n                } else {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.functionTooManyParams().format({\n                            expected: srcPositionals.length,\n                            received: destPositionals.length,\n                        })\n                    );\n                    canAssign = false;\n                }\n            }\n\n            // If both src and dest have an \"*args\" parameter, make sure\n            // their types are compatible.\n            if (srcArgsIndex >= 0 && destArgsIndex >= 0) {\n                const srcArgsType = FunctionType.getEffectiveParameterType(srcType, srcArgsIndex);\n                const destArgsType = FunctionType.getEffectiveParameterType(destType, destArgsIndex);\n                if (\n                    !canAssignFunctionParameter(\n                        destArgsType,\n                        srcArgsType,\n                        destArgsIndex + 1,\n                        diag.createAddendum(),\n                        typeVarMap,\n                        flags,\n                        recursionCount\n                    )\n                ) {\n                    canAssign = false;\n                }\n            }\n\n            // If the dest has an \"*args\" but the source doesn't, report the incompatibility.\n            // The converse situation is OK.\n            if (srcArgsIndex < 0 && destArgsIndex >= 0) {\n                diag.createAddendum().addMessage(\n                    Localizer.DiagnosticAddendum.argsParamMissing().format({\n                        paramName: destParams[destArgsIndex].name!,\n                    })\n                );\n                canAssign = false;\n            }\n\n            // Handle matching of named (keyword) parameters.\n            // Build a dictionary of named parameters in the dest.\n            const destParamMap = new Map<string, FunctionParameter>();\n            let destHasKwargsParam = false;\n            if (destStartOfNamed >= 0) {\n                destParams.forEach((param, index) => {\n                    if (index >= destStartOfNamed) {\n                        if (param.category === ParameterCategory.VarArgDictionary) {\n                            destHasKwargsParam = true;\n                        } else if (param.name && param.category === ParameterCategory.Simple) {\n                            destParamMap.set(param.name, param);\n                        }\n                    }\n                });\n            }\n\n            if (srcStartOfNamed >= 0) {\n                srcParams.forEach((param, index) => {\n                    if (index >= srcStartOfNamed) {\n                        if (param.name && param.category === ParameterCategory.Simple) {\n                            const destParam = destParamMap.get(param.name);\n                            const paramDiag = diag.createAddendum();\n                            if (!destParam) {\n                                if (!destHasKwargsParam && !param.hasDefault) {\n                                    paramDiag.addMessage(\n                                        Localizer.DiagnosticAddendum.namedParamMissingInDest().format({\n                                            name: param.name,\n                                        })\n                                    );\n                                    canAssign = false;\n                                }\n                            } else {\n                                const specializedDestParamType = specializeType(\n                                    destParam.type,\n                                    typeVarMap,\n                                    /* makeConcrete */ false,\n                                    recursionCount + 1\n                                );\n                                if (\n                                    !canAssignType(\n                                        param.type,\n                                        specializedDestParamType,\n                                        paramDiag.createAddendum(),\n                                        undefined,\n                                        flags,\n                                        recursionCount + 1\n                                    )\n                                ) {\n                                    paramDiag.addMessage(\n                                        Localizer.DiagnosticAddendum.namedParamTypeMismatch().format({\n                                            name: param.name,\n                                            sourceType: printType(specializedDestParamType),\n                                            destType: printType(param.type),\n                                        })\n                                    );\n                                    canAssign = false;\n                                }\n                                destParamMap.delete(param.name);\n                            }\n                        }\n                    }\n                });\n            }\n\n            // See if there are any unmatched named parameters.\n            destParamMap.forEach((_, paramName) => {\n                const paramDiag = diag.createAddendum();\n                paramDiag.addMessage(\n                    Localizer.DiagnosticAddendum.namedParamMissingInSource().format({ name: paramName })\n                );\n                canAssign = false;\n            });\n        }\n\n        // Perform partial specialization of type variables to allow for\n        // \"higher-order\" type variables.\n        if (typeVarMap && !typeVarMap.isLocked()) {\n            typeVarMap.getTypeVars().forEach((entry) => {\n                const specializedType = specializeType(entry.type, typeVarMap, /* makeConcrete */ false);\n                if (specializedType !== entry.type) {\n                    typeVarMap.setTypeVar(entry.typeVar, specializedType, typeVarMap.isNarrowable(entry.typeVar));\n                }\n            });\n        }\n\n        // Match the return parameter.\n        if (checkReturnType) {\n            const destReturnType = getFunctionEffectiveReturnType(destType);\n            if (!isAnyOrUnknown(destReturnType)) {\n                let srcReturnType = getFunctionEffectiveReturnType(srcType);\n                if (typeVarMap) {\n                    srcReturnType = specializeType(srcReturnType, typeVarMap, /* makeConcrete */ false);\n                }\n                const returnDiag = diag.createAddendum();\n\n                if (\n                    !canAssignType(\n                        destReturnType,\n                        srcReturnType,\n                        returnDiag.createAddendum(),\n                        typeVarMap,\n                        flags,\n                        recursionCount + 1\n                    )\n                ) {\n                    returnDiag.addMessage(\n                        Localizer.DiagnosticAddendum.functionReturnTypeMismatch().format({\n                            sourceType: printType(srcReturnType),\n                            destType: printType(destReturnType),\n                        })\n                    );\n                    canAssign = false;\n                }\n            }\n\n            // Are we assigning to a function with a ParamSpec?\n            if (destType.details.paramSpec && typeVarMap && !typeVarMap.isLocked()) {\n                typeVarMap.setParamSpec(\n                    destType.details.paramSpec,\n                    srcType.details.parameters\n                        .map((p, index) => {\n                            const paramSpecEntry: ParamSpecEntry = {\n                                name: p.name || `__p${index}`,\n                                type: p.type,\n                            };\n                            return paramSpecEntry;\n                        })\n                        .slice(destType.details.parameters.length, srcType.details.parameters.length)\n                );\n            }\n        }\n\n        return canAssign;\n    }\n\n    // If the declaredType contains type arguments that are \"Any\" and\n    // the corresponding type argument in the assignedType is not \"Any\",\n    // replace that type argument in the assigned type. This function assumes\n    // that the caller has already verified that the assignedType is assignable\n    // tot he declaredType.\n    function replaceTypeArgsWithAny(declaredType: ClassType, assignedType: ClassType): ClassType | undefined {\n        const assignedTypeAlias = ClassType.getAliasClass(assignedType);\n\n        if (\n            assignedTypeAlias.details.typeParameters.length > 0 &&\n            assignedType.typeArguments &&\n            assignedType.typeArguments.length <= assignedTypeAlias.details.typeParameters.length\n        ) {\n            const typeVarMap = new TypeVarMap();\n            populateTypeVarMapBasedOnExpectedType(\n                ClassType.cloneForSpecialization(\n                    assignedTypeAlias,\n                    /* typeArguments */ undefined,\n                    /* isTypeArgumentExplicit */ false\n                ),\n                ObjectType.create(declaredType),\n                typeVarMap\n            );\n\n            let replacedTypeArg = false;\n            const newTypeArgs = assignedType.typeArguments.map((typeArg, index) => {\n                const typeParam = assignedTypeAlias.details.typeParameters[index];\n                const expectedTypeArgType = typeVarMap.getTypeVar(typeParam);\n\n                if (expectedTypeArgType) {\n                    if (expectedTypeArgType.category === TypeCategory.Any || isAnyOrUnknown(typeArg)) {\n                        replacedTypeArg = true;\n                        return expectedTypeArgType;\n                    }\n                }\n\n                return typeArg;\n            });\n\n            if (replacedTypeArg) {\n                return ClassType.cloneForSpecialization(assignedType, newTypeArgs, /* isTypeArgumentExplicit */ true);\n            }\n        }\n\n        return undefined;\n    }\n\n    // When a value is assigned to a variable with a declared type,\n    // we may be able to narrow the type based on the assignment.\n    function narrowTypeBasedOnAssignment(declaredType: Type, assignedType: Type): Type {\n        const diag = new DiagnosticAddendum();\n\n        const narrowedType = doForSubtypes(assignedType, (assignedSubtype) => {\n            const narrowedSubtype = doForSubtypes(declaredType, (declaredSubtype) => {\n                // We can't narrow \"Any\".\n                if (isAnyOrUnknown(declaredType)) {\n                    return declaredType;\n                }\n\n                if (canAssignType(declaredSubtype, assignedSubtype, diag)) {\n                    // If the source is generic and has unspecified type arguments,\n                    // see if we can determine then based on the declared type.\n                    if (isClass(declaredSubtype) && isClass(assignedSubtype)) {\n                        const result = replaceTypeArgsWithAny(declaredSubtype, assignedSubtype);\n                        if (result) {\n                            assignedSubtype = result;\n                        }\n                    } else if (isObject(declaredSubtype) && isObject(assignedSubtype)) {\n                        const result = replaceTypeArgsWithAny(declaredSubtype.classType, assignedSubtype.classType);\n                        if (result) {\n                            assignedSubtype = ObjectType.create(result);\n                        }\n                    }\n\n                    return assignedSubtype;\n                }\n\n                return undefined;\n            });\n\n            // If we couldn't assign the assigned subtype any of the declared\n            // subtypes, the types are incompatible. Return the unnarrowed form.\n            if (isNever(narrowedSubtype)) {\n                return assignedSubtype;\n            }\n\n            return narrowedSubtype;\n        });\n\n        // If the result of narrowing is Any, stick with the declared (unnarrowed) type.\n        if (isAnyOrUnknown(assignedType)) {\n            return declaredType;\n        }\n\n        return narrowedType;\n    }\n\n    function canOverrideMethod(baseMethod: Type, overrideMethod: FunctionType, diag: DiagnosticAddendum): boolean {\n        // If we're overriding an overloaded method, uses the last overload.\n        if (baseMethod.category === TypeCategory.OverloadedFunction) {\n            baseMethod = baseMethod.overloads[baseMethod.overloads.length - 1];\n        }\n\n        // If we're overriding a non-method with a method, report it as an error.\n        // This occurs when a non-property overrides a property.\n        if (baseMethod.category !== TypeCategory.Function) {\n            diag.addMessage(Localizer.DiagnosticAddendum.overrideType().format({ type: printType(baseMethod) }));\n            return false;\n        }\n\n        let canOverride = true;\n        const baseParams = baseMethod.details.parameters;\n        const overrideParams = overrideMethod.details.parameters;\n\n        // Verify that the param count matches exactly or that the override\n        // adds only params that preserve the original signature.\n        let foundParamCountMismatch = false;\n        if (overrideParams.length < baseParams.length) {\n            foundParamCountMismatch = true;\n        } else if (overrideParams.length > baseParams.length) {\n            // Verify that all of the override parameters that extend the\n            // signature are either *vars, **kwargs or parameters with\n            // default values.\n\n            for (let i = baseParams.length; i < overrideParams.length; i++) {\n                const overrideParam = overrideParams[i];\n\n                if (\n                    overrideParam.category === ParameterCategory.Simple &&\n                    overrideParam.name &&\n                    !overrideParam.hasDefault\n                ) {\n                    foundParamCountMismatch = true;\n                }\n            }\n        }\n\n        if (foundParamCountMismatch) {\n            diag.addMessage(\n                Localizer.DiagnosticAddendum.overrideParamCount().format({\n                    baseCount: baseParams.length,\n                    overrideCount: overrideParams.length,\n                })\n            );\n            canOverride = false;\n        }\n\n        const paramCount = Math.min(baseParams.length, overrideParams.length);\n        const positionOnlyIndex = baseParams.findIndex(\n            (param) => !param.name && param.category === ParameterCategory.Simple\n        );\n\n        for (let i = 0; i < paramCount; i++) {\n            const baseParam = baseParams[i];\n            const overrideParam = overrideParams[i];\n\n            if (\n                i > positionOnlyIndex &&\n                !isPrivateOrProtectedName(baseParam.name || '') &&\n                baseParam.category === ParameterCategory.Simple &&\n                baseParam.name !== overrideParam.name\n            ) {\n                diag.addMessage(\n                    Localizer.DiagnosticAddendum.overrideParamName().format({\n                        index: i + 1,\n                        baseName: baseParam.name || '*',\n                        overrideName: overrideParam.name || '*',\n                    })\n                );\n                canOverride = false;\n            } else {\n                const baseParamType = FunctionType.getEffectiveParameterType(baseMethod, i);\n                const overrideParamType = FunctionType.getEffectiveParameterType(overrideMethod, i);\n\n                const baseIsSynthesizedTypeVar = isTypeVar(baseParamType) && baseParamType.details.isSynthesized;\n                const overrideIsSynthesizedTypeVar =\n                    isTypeVar(overrideParamType) && overrideParamType.details.isSynthesized;\n                if (!baseIsSynthesizedTypeVar && !overrideIsSynthesizedTypeVar) {\n                    if (\n                        baseParam.category !== overrideParam.category ||\n                        !canAssignType(overrideParamType, baseParamType, diag.createAddendum())\n                    ) {\n                        diag.addMessage(\n                            Localizer.DiagnosticAddendum.overrideParamType().format({\n                                index: i + 1,\n                                baseType: printType(baseParamType),\n                                overrideType: printType(overrideParamType),\n                            })\n                        );\n                        canOverride = false;\n                    }\n                }\n            }\n        }\n\n        const baseReturnType = getFunctionEffectiveReturnType(baseMethod);\n        const overrideReturnType = getFunctionEffectiveReturnType(overrideMethod);\n        if (!canAssignType(baseReturnType, overrideReturnType, diag.createAddendum())) {\n            diag.addMessage(\n                Localizer.DiagnosticAddendum.overrideReturnType().format({\n                    baseType: printType(baseReturnType),\n                    overrideType: printType(overrideReturnType),\n                })\n            );\n\n            canOverride = false;\n        }\n\n        return canOverride;\n    }\n\n    // Validates that the specified source type matches the constraints\n    // of the type variable.\n    function canAssignToTypeVar(\n        destType: TypeVarType,\n        srcType: Type,\n        diag: DiagnosticAddendum,\n        flags = CanAssignFlags.Default,\n        recursionCount = 0\n    ): boolean {\n        if (recursionCount > maxTypeRecursionCount) {\n            return true;\n        }\n\n        if (isAnyOrUnknown(srcType)) {\n            return true;\n        }\n\n        let effectiveSrcType: Type = srcType;\n\n        if (isTypeVar(srcType)) {\n            if (isTypeSame(srcType, destType)) {\n                return true;\n            }\n\n            if (srcType.details.boundType) {\n                // If the source type is a type var itself and has a bound type,\n                // convert it to that bound type.\n                effectiveSrcType = getConcreteTypeFromTypeVar(\n                    srcType,\n                    /* convertConstraintsToUnion */ false,\n                    recursionCount + 1\n                );\n            } else if (srcType.details.constraints) {\n                effectiveSrcType = combineTypes(srcType.details.constraints);\n            } else {\n                effectiveSrcType = AnyType.create();\n            }\n        }\n\n        // If there's a bound type, make sure the source is derived from it.\n        const boundType = destType.details.boundType;\n        if (boundType) {\n            if (\n                !canAssignType(boundType, effectiveSrcType, diag.createAddendum(), undefined, flags, recursionCount + 1)\n            ) {\n                // Avoid adding a message that will confuse users if the TypeVar was\n                // synthesized for internal purposes.\n                if (!destType.details.isSynthesized) {\n                    diag.addMessage(\n                        Localizer.DiagnosticAddendum.typeBound().format({\n                            sourceType: printType(effectiveSrcType),\n                            destType: printType(boundType),\n                            name: destType.details.name,\n                        })\n                    );\n                }\n                return false;\n            }\n        }\n\n        // If there are no constraints, we're done.\n        const constraints = destType.details.constraints;\n        if (constraints.length === 0) {\n            return true;\n        }\n\n        // Try to find a match among the constraints.\n        for (const constraint of constraints) {\n            if (isAnyOrUnknown(constraint)) {\n                return true;\n            } else if (effectiveSrcType.category === TypeCategory.Union) {\n                // Does it match at least one of the constraints?\n                if (effectiveSrcType.subtypes.find((t) => isSameWithoutLiteralValue(constraint, t))) {\n                    return true;\n                }\n            } else if (isSameWithoutLiteralValue(constraint, effectiveSrcType)) {\n                return true;\n            }\n        }\n\n        diag.addMessage(\n            Localizer.DiagnosticAddendum.typeConstrainedTypeVar().format({\n                type: printType(effectiveSrcType),\n                name: destType.details.name,\n            })\n        );\n\n        return false;\n    }\n\n    function getAbstractMethods(classType: ClassType): AbstractMethod[] {\n        const symbolTable = new Map<string, AbstractMethod>();\n\n        classType.details.mro.forEach((mroClass) => {\n            if (isClass(mroClass)) {\n                // See if this class is introducing a new abstract method that has not been\n                // introduced previously or if it is overriding an abstract method with\n                // a non-abstract one.\n                mroClass.details.fields.forEach((symbol, symbolName) => {\n                    // We do a quick-and-dirty evaluation of methods based on\n                    // decorators to determine which ones are abstract. This allows\n                    // us to avoid evaluating the full function types.\n                    if (symbol.isClassMember()) {\n                        let isAbstract: boolean;\n\n                        const decl = getLastTypedDeclaredForSymbol(symbol);\n                        if (decl && decl.type === DeclarationType.Function) {\n                            const functionFlags = getFunctionFlagsFromDecorators(decl.node, true);\n                            isAbstract = !!(functionFlags & FunctionTypeFlags.AbstractMethod);\n                        } else {\n                            // If a symbol is overridden by a non-function, it is no longer\n                            // considered abstract. This can happen in some code, for example,\n                            // when a base class declares an abstract property and a subclass\n                            // \"overrides\" it with an instance variable.\n                            isAbstract = false;\n                        }\n\n                        if (!symbolTable.has(symbolName)) {\n                            symbolTable.set(symbolName, {\n                                symbol,\n                                symbolName,\n                                isAbstract,\n                                classType: mroClass,\n                            });\n                        }\n                    }\n                });\n            }\n        });\n\n        // Create a final list of methods that are abstract.\n        const methodList: AbstractMethod[] = [];\n        symbolTable.forEach((method) => {\n            if (method.isAbstract) {\n                methodList.push(method);\n            }\n        });\n\n        return methodList;\n    }\n\n    // Determines whether the specified keys and values can be assigned to\n    // a typed dictionary class. The caller should have already validated\n    // that the class is indeed a typed dict.\n    function canAssignToTypedDict(\n        classType: ClassType,\n        keyTypes: Type[],\n        valueTypes: Type[],\n        diagAddendum: DiagnosticAddendum\n    ): boolean {\n        assert(ClassType.isTypedDictClass(classType));\n        assert(keyTypes.length === valueTypes.length);\n\n        let isMatch = true;\n\n        const symbolMap = getTypedDictMembersForClass(classType);\n\n        keyTypes.forEach((keyType, index) => {\n            if (\n                !isObject(keyType) ||\n                !ClassType.isBuiltIn(keyType.classType, 'str') ||\n                keyType.classType.literalValue === undefined\n            ) {\n                isMatch = false;\n            } else {\n                const keyValue = keyType.classType.literalValue as string;\n                const symbolEntry = symbolMap.get(keyValue);\n\n                if (!symbolEntry) {\n                    // The provided key name doesn't exist.\n                    isMatch = false;\n                    diagAddendum.addMessage(\n                        Localizer.DiagnosticAddendum.typedDictFieldUndefined().format({\n                            name: keyType.classType.literalValue as string,\n                            type: printType(ObjectType.create(classType)),\n                        })\n                    );\n                } else {\n                    // Can we assign the value to the declared type?\n                    const assignDiag = new DiagnosticAddendum();\n                    if (!canAssignType(symbolEntry.valueType, valueTypes[index], assignDiag)) {\n                        diagAddendum.addMessage(\n                            Localizer.DiagnosticAddendum.typedDictFieldTypeMismatch().format({\n                                name: keyType.classType.literalValue as string,\n                                type: printType(valueTypes[index]),\n                            })\n                        );\n                        isMatch = false;\n                    }\n                    symbolEntry.isProvided = true;\n                }\n            }\n        });\n\n        if (!isMatch) {\n            return false;\n        }\n\n        // See if any required keys are missing.\n        symbolMap.forEach((entry, name) => {\n            if (entry.isRequired && !entry.isProvided) {\n                diagAddendum.addMessage(\n                    Localizer.DiagnosticAddendum.typedDictFieldRequired().format({\n                        name,\n                        type: printType(ObjectType.create(classType)),\n                    })\n                );\n                isMatch = false;\n            }\n        });\n\n        return isMatch;\n    }\n\n    function getTypedDictMembersForClass(classType: ClassType) {\n        // Were the entries already calculated and cached?\n        if (!classType.details.typedDictEntries) {\n            const entries = new Map<string, TypedDictEntry>();\n            getTypedDictMembersForClassRecursive(classType, entries);\n\n            // Cache the entries for next time.\n            classType.details.typedDictEntries = entries;\n        }\n\n        // Create a copy of the entries so the caller can mutate them.\n        const entries = new Map<string, TypedDictEntry>();\n        classType.details.typedDictEntries!.forEach((value, key) => {\n            entries.set(key, { ...value });\n        });\n\n        return entries;\n    }\n\n    function getTypedDictMembersForClassRecursive(\n        classType: ClassType,\n        keyMap: Map<string, TypedDictEntry>,\n        recursionCount = 0\n    ) {\n        assert(ClassType.isTypedDictClass(classType));\n        if (recursionCount > maxTypeRecursionCount) {\n            return;\n        }\n\n        classType.details.baseClasses.forEach((baseClassType) => {\n            if (isClass(baseClassType) && ClassType.isTypedDictClass(baseClassType)) {\n                getTypedDictMembersForClassRecursive(baseClassType, keyMap, recursionCount + 1);\n            }\n        });\n\n        // Add any new typed dict entries from this class.\n        classType.details.fields.forEach((symbol, name) => {\n            if (!symbol.isIgnoredForProtocolMatch()) {\n                // Only variables (not functions, classes, etc.) are considered.\n                const lastDecl = getLastTypedDeclaredForSymbol(symbol);\n                if (lastDecl && lastDecl.type === DeclarationType.Variable) {\n                    keyMap.set(name, {\n                        valueType: getDeclaredTypeOfSymbol(symbol) || UnknownType.create(),\n                        isRequired: !ClassType.isCanOmitDictValues(classType),\n                        isProvided: false,\n                    });\n                }\n            }\n        });\n    }\n\n    // If the memberType is an instance or class method, creates a new\n    // version of the function that has the \"self\" or \"cls\" parameter bound\n    // to it. If treatAsClassMethod is true, the function is treated like a\n    // class method even if it's not marked as such. That's needed to\n    // special-case the __new__ magic method when it's invoked as a\n    // constructor (as opposed to by name).\n    function bindFunctionToClassOrObject(\n        baseType: ClassType | ObjectType | undefined,\n        memberType: Type,\n        treatAsClassMethod: boolean,\n        errorNode: ParseNode | undefined = undefined\n    ): Type | undefined {\n        if (memberType.category === TypeCategory.Function) {\n            // If the caller specified no base type, always strip the\n            // first parameter. This is used in cases like constructors.\n            if (!baseType) {\n                return stripFirstParameter(memberType);\n            } else if (FunctionType.isInstanceMethod(memberType) && !treatAsClassMethod) {\n                if (isObject(baseType)) {\n                    return partiallySpecializeFunctionForBoundClassOrObject(baseType, memberType, errorNode);\n                }\n            } else if (FunctionType.isClassMethod(memberType) || treatAsClassMethod) {\n                return partiallySpecializeFunctionForBoundClassOrObject(\n                    isClass(baseType) ? baseType : baseType.classType,\n                    memberType,\n                    errorNode\n                );\n            }\n        } else if (memberType.category === TypeCategory.OverloadedFunction) {\n            const newOverloadType = OverloadedFunctionType.create();\n            memberType.overloads.forEach((overload) => {\n                const boundMethod = bindFunctionToClassOrObject(\n                    baseType,\n                    overload,\n                    treatAsClassMethod,\n                    /* errorNode */ undefined\n                );\n                if (boundMethod) {\n                    OverloadedFunctionType.addOverload(newOverloadType, boundMethod as FunctionType);\n                }\n            });\n\n            if (newOverloadType.overloads.length === 1) {\n                return newOverloadType.overloads[0];\n            } else if (newOverloadType.overloads.length === 0) {\n                // No overloads matched, so rebind with the errorNode\n                // to report the error(s) to the user.\n                memberType.overloads.forEach((overload) => {\n                    bindFunctionToClassOrObject(baseType, overload, treatAsClassMethod, errorNode);\n                });\n                return undefined;\n            }\n\n            return newOverloadType;\n        }\n\n        return memberType;\n    }\n\n    function partiallySpecializeFunctionForBoundClassOrObject(\n        baseType: ClassType | ObjectType,\n        memberType: FunctionType,\n        errorNode: ParseNode | undefined\n    ): Type | undefined {\n        const classType = isClass(baseType) ? baseType : baseType.classType;\n\n        // If the class has already been specialized (fully or partially), use its\n        // existing type arg mappings. If it hasn't, use a fresh type arg map.\n        const typeVarMap = classType.typeArguments ? buildTypeVarMapFromSpecializedClass(classType) : new TypeVarMap();\n\n        if (memberType.details.parameters.length > 0) {\n            const firstParam = memberType.details.parameters[0];\n\n            // Fill out the typeVarMap.\n            canAssignType(firstParam.type, baseType, new DiagnosticAddendum(), typeVarMap);\n        }\n\n        // Get the effective return type, which will have the side effect of lazily\n        // evaluating (and caching) the inferred return type if there is no defined return type.\n        getFunctionEffectiveReturnType(memberType);\n\n        const specializedFunction = specializeType(memberType, typeVarMap, /* makeConcrete */ false) as FunctionType;\n\n        // If the method has an annotated cls or self parameter, make sure the\n        // base type is compatible with it.\n        if (memberType.details.parameters.length > 0) {\n            const firstParam = memberType.details.parameters[0];\n\n            if (firstParam.name && !firstParam.isNameSynthesized && firstParam.hasDeclaredType) {\n                const paramType = makeTypeVarsConcrete(FunctionType.getEffectiveParameterType(memberType, 0));\n                const diag = new DiagnosticAddendum();\n                if (!canAssignType(paramType, baseType, diag)) {\n                    if (errorNode) {\n                        addDiagnostic(\n                            getFileInfo(errorNode).diagnosticRuleSet.reportGeneralTypeIssues,\n                            DiagnosticRule.reportGeneralTypeIssues,\n                            Localizer.Diagnostic.bindTypeMismatch().format({\n                                type: printType(baseType),\n                                methodName: memberType.details.name,\n                                paramName: firstParam.name,\n                            }) + diag.getString(),\n                            errorNode\n                        );\n                    } else {\n                        // If there was no errorNode, we couldn't report the error,\n                        // so we will instead return undefined and let the caller\n                        // deal with the error.\n                        return undefined;\n                    }\n                }\n            }\n        }\n\n        return stripFirstParameter(specializedFunction);\n    }\n\n    function printObjectTypeForClass(type: ClassType, recursionCount = 0): string {\n        let objName = type.details.name;\n\n        // If this is a pseudo-generic class, don't display the type arguments\n        // or type parameters because it will confuse users.\n        if (!ClassType.isPseudoGenericClass(type)) {\n            // If there is a type arguments array, it's a specialized class.\n            if (type.typeArguments) {\n                // Handle Tuple[()] as a special case.\n                if (type.typeArguments.length > 0) {\n                    if (\n                        (evaluatorOptions.printTypeFlags & PrintTypeFlags.OmitTypeArgumentsIfAny) === 0 ||\n                        type.typeArguments.some((typeArg) => !isAnyOrUnknown(typeArg))\n                    ) {\n                        objName +=\n                            '[' +\n                            type.typeArguments\n                                .map((typeArg) => {\n                                    return printType(typeArg, /* expandTypeAlias */ false, recursionCount + 1);\n                                })\n                                .join(', ') +\n                            ']';\n                    }\n                } else {\n                    if (isTupleClass(type)) {\n                        objName += '[()]';\n                    }\n                }\n            } else {\n                const typeParams = ClassType.getTypeParameters(type);\n\n                if (typeParams.length > 0) {\n                    if (\n                        (evaluatorOptions.printTypeFlags & PrintTypeFlags.OmitTypeArgumentsIfAny) === 0 ||\n                        typeParams.some((typeParam) => !isAnyOrUnknown(typeParam))\n                    ) {\n                        objName +=\n                            '[' +\n                            typeParams\n                                .map((typeParam) => {\n                                    return printType(typeParam, /* expandTypeAlias */ false, recursionCount + 1);\n                                })\n                                .join(', ') +\n                            ']';\n                    }\n                }\n            }\n        }\n\n        return objName;\n    }\n\n    function printFunctionParts(type: FunctionType, recursionCount = 0): [string[], string] {\n        const paramTypeStrings = type.details.parameters.map((param, index) => {\n            let paramString = '';\n            if (param.category === ParameterCategory.VarArgList) {\n                paramString += '*';\n            } else if (param.category === ParameterCategory.VarArgDictionary) {\n                paramString += '**';\n            }\n\n            if (param.name) {\n                paramString += param.name;\n            }\n\n            let defaultValueAssignment = '=';\n            if (param.name) {\n                // Avoid printing type types if parameter have unknown type.\n                if (param.hasDeclaredType || param.isTypeInferred) {\n                    const paramType = FunctionType.getEffectiveParameterType(type, index);\n                    const paramTypeString =\n                        recursionCount < maxTypeRecursionCount\n                            ? printType(paramType, /* expandTypeAlias */ false, recursionCount + 1)\n                            : '';\n                    paramString += ': ' + paramTypeString;\n\n                    // PEP8 indicates that the \"=\" for the default value should have surrounding\n                    // spaces when used with a type annotation.\n                    defaultValueAssignment = ' = ';\n                } else if ((evaluatorOptions.printTypeFlags & PrintTypeFlags.OmitTypeArgumentsIfAny) === 0) {\n                    paramString += ': Unknown';\n                    defaultValueAssignment = ' = ';\n                }\n            } else if (param.category === ParameterCategory.Simple) {\n                paramString += '/';\n            }\n\n            if (type.details.declaration) {\n                const adjustedIndex = type.ignoreFirstParamOfDeclaration ? index + 1 : index;\n                const paramNode = type.details.declaration.node.parameters[adjustedIndex];\n                if (paramNode.defaultValue) {\n                    paramString += defaultValueAssignment + ParseTreeUtils.printExpression(paramNode.defaultValue);\n                }\n            }\n\n            return paramString;\n        });\n\n        const returnType = getFunctionEffectiveReturnType(type);\n        let returnTypeString =\n            recursionCount < maxTypeRecursionCount\n                ? printType(returnType, /* expandTypeAlias */ false, recursionCount + 1)\n                : '';\n\n        if (\n            evaluatorOptions.printTypeFlags & PrintTypeFlags.PEP604 &&\n            returnType.category === TypeCategory.Union &&\n            recursionCount > 0\n        ) {\n            returnTypeString = `(${returnTypeString})`;\n        }\n\n        return [paramTypeStrings, returnTypeString];\n    }\n\n    function printType(type: Type, expandTypeAlias = false, recursionCount = 0): string {\n        if (recursionCount >= maxTypeRecursionCount) {\n            return '...';\n        }\n\n        // If this is a type alias, use its name rather than the type\n        // it represents.\n        if (type.typeAliasInfo && !expandTypeAlias) {\n            let aliasName = type.typeAliasInfo.aliasName;\n\n            // If there is a type arguments array, it's a specialized type alias.\n            if (type.typeAliasInfo.typeArguments) {\n                if (\n                    (evaluatorOptions.printTypeFlags & PrintTypeFlags.OmitTypeArgumentsIfAny) === 0 ||\n                    type.typeAliasInfo.typeArguments.some((typeArg) => !isAnyOrUnknown(typeArg))\n                ) {\n                    aliasName +=\n                        '[' +\n                        type.typeAliasInfo.typeArguments\n                            .map((typeArg) => {\n                                return printType(typeArg, /* expandTypeAlias */ false, recursionCount + 1);\n                            })\n                            .join(', ') +\n                        ']';\n                }\n            } else {\n                if (type.typeAliasInfo.typeParameters) {\n                    if (\n                        (evaluatorOptions.printTypeFlags & PrintTypeFlags.OmitTypeArgumentsIfAny) === 0 ||\n                        type.typeAliasInfo.typeParameters.some((typeParam) => !isAnyOrUnknown(typeParam))\n                    ) {\n                        aliasName +=\n                            '[' +\n                            type.typeAliasInfo.typeParameters\n                                .map((typeParam) => {\n                                    return printType(typeParam, /* expandTypeAlias */ false, recursionCount + 1);\n                                })\n                                .join(', ') +\n                            ']';\n                    }\n                }\n            }\n\n            return aliasName;\n        }\n\n        switch (type.category) {\n            case TypeCategory.Unbound: {\n                return 'Unbound';\n            }\n\n            case TypeCategory.Unknown: {\n                return (evaluatorOptions.printTypeFlags & PrintTypeFlags.PrintUnknownWithAny) !== 0 ? 'Any' : 'Unknown';\n            }\n\n            case TypeCategory.Module: {\n                return `Module(\"${type.moduleName}\")`;\n            }\n\n            case TypeCategory.Class: {\n                if (type.literalValue !== undefined) {\n                    return `Type[Literal[${printLiteralValue(type)}]]`;\n                }\n\n                return `Type[${printObjectTypeForClass(type, recursionCount + 1)}]`;\n            }\n\n            case TypeCategory.Object: {\n                if (type.classType.literalValue !== undefined) {\n                    return `Literal[${printLiteralValue(type.classType)}]`;\n                }\n\n                return printObjectTypeForClass(type.classType, recursionCount + 1);\n            }\n\n            case TypeCategory.Function: {\n                // If it's a Callable with a ParamSpec, use the\n                // Callable notation.\n                const parts = printFunctionParts(type, recursionCount);\n                if (type.details.paramSpec) {\n                    if (type.details.parameters.length > 0) {\n                        // Remove the args and kwargs parameters from the end.\n                        const paramTypes = type.details.parameters.map((param) => printType(param.type));\n                        return `Callable[Concatenate[${paramTypes.join(', ')}, ${\n                            type.details.paramSpec.details.name\n                        }], ${parts[1]}]`;\n                    }\n                    return `Callable[${type.details.paramSpec.details.name}, ${parts[1]}]`;\n                }\n                return `(${parts[0].join(', ')}) -> ${parts[1]}`;\n            }\n\n            case TypeCategory.OverloadedFunction: {\n                const overloadedType = type;\n                const overloads = overloadedType.overloads.map((overload) =>\n                    printType(overload, /* expandTypeAlias */ false, recursionCount + 1)\n                );\n                return `Overload[${overloads.join(', ')}]`;\n            }\n\n            case TypeCategory.Union: {\n                const unionType = type;\n                let subtypes: Type[] = unionType.subtypes;\n\n                if (subtypes.find((t) => t.category === TypeCategory.None) !== undefined) {\n                    const optionalType = printType(\n                        removeNoneFromUnion(unionType),\n                        /* expandTypeAlias */ false,\n                        recursionCount + 1\n                    );\n\n                    if (evaluatorOptions.printTypeFlags & PrintTypeFlags.PEP604) {\n                        return optionalType + ' | None';\n                    }\n\n                    return 'Optional[' + optionalType + ']';\n                }\n\n                // Make a shallow copy of the array so we can manipulate it.\n                subtypes = [];\n                subtypes = subtypes.concat(...unionType.subtypes);\n\n                // If we're printing \"Unknown\" as \"Any\", remove redundant\n                // unknowns so we don't see two Any's appear in the union.\n                if ((evaluatorOptions.printTypeFlags & PrintTypeFlags.PrintUnknownWithAny) !== 0) {\n                    if (subtypes.some((t) => t.category === TypeCategory.Any)) {\n                        subtypes = subtypes.filter((t) => !isUnknown(t));\n                    }\n                }\n\n                // If one or more subtypes are pseudo-generic, remove any other pseudo-generics\n                // of the same type because we don't print type arguments for pseudo-generic\n                // types, and we'll end up displaying seemingly-duplicated types.\n                const isPseudoGeneric = (type: Type) =>\n                    (isClass(type) && ClassType.isPseudoGenericClass(type)) ||\n                    (isObject(type) && ClassType.isPseudoGenericClass(type.classType));\n                if (subtypes.some((t) => isPseudoGeneric(t))) {\n                    const filteredSubtypes: Type[] = [];\n                    subtypes.forEach((type) => {\n                        if (!isPseudoGeneric(type)) {\n                            filteredSubtypes.push(type);\n                        } else if (isClass(type)) {\n                            if (!filteredSubtypes.some((t) => isClass(t) && ClassType.isSameGenericClass(t, type))) {\n                                filteredSubtypes.push(type);\n                            }\n                        } else if (isObject(type)) {\n                            if (\n                                !filteredSubtypes.some(\n                                    (t) => isObject(t) && ClassType.isSameGenericClass(t.classType, type.classType)\n                                )\n                            ) {\n                                filteredSubtypes.push(type);\n                            }\n                        }\n                    });\n                    subtypes = filteredSubtypes;\n                }\n\n                const isLiteralObject = (type: Type) => isObject(type) && type.classType.literalValue !== undefined;\n                const isLiteralClass = (type: Type) => isClass(type) && type.literalValue !== undefined;\n\n                const subtypeStrings: string[] = [];\n                while (subtypes.length > 0) {\n                    const subtype = subtypes.shift()!;\n                    if (isLiteralObject(subtype)) {\n                        // Combine all literal objects. Rather than printing Union[Literal[1],\n                        // Literal[2]], print Literal[1, 2].\n                        const literals = subtypes.filter((t) => isLiteralObject(t));\n                        literals.unshift(subtype);\n                        const literalValues = literals.map((t) => printLiteralValue((t as ObjectType).classType));\n                        subtypeStrings.push(`Literal[${literalValues.join(', ')}]`);\n\n                        // Remove the items we've handled.\n                        if (literals.length > 1) {\n                            subtypes = subtypes.filter((t) => !isLiteralObject(t));\n                        }\n                    } else if (isLiteralClass(subtype)) {\n                        // Combine all literal classes.\n                        const literals = subtypes.filter((t) => isLiteralClass(t));\n                        literals.unshift(subtype);\n                        const literalValues = literals.map((t) => printLiteralValue(t as ClassType));\n                        subtypeStrings.push(`Type[Literal[${literalValues.join(', ')}]]`);\n\n                        // Remove the items we've handled.\n                        if (literals.length > 1) {\n                            subtypes = subtypes.filter((t) => !isLiteralClass(t));\n                        }\n                    } else {\n                        subtypeStrings.push(printType(subtype, /* expandTypeAlias */ false, recursionCount + 1));\n                    }\n                }\n\n                if (subtypeStrings.length === 1) {\n                    return subtypeStrings[0];\n                }\n\n                if (evaluatorOptions.printTypeFlags & PrintTypeFlags.PEP604) {\n                    return subtypeStrings.join(' | ');\n                }\n\n                return `Union[${subtypeStrings.join(', ')}]`;\n            }\n\n            case TypeCategory.TypeVar: {\n                // If it's synthesized, don't expose the internal name we generated.\n                // This will confuse users. The exception is if it's a bound synthesized\n                // type, in which case we'll print the bound type. This is used for\n                // \"self\" and \"cls\" parameters.\n                if (type.details.isSynthesized) {\n                    // If it's a synthesized type var used to implement recursive type\n                    // aliases, return the type alias name.\n                    if (type.details.recursiveTypeAliasName) {\n                        if (expandTypeAlias && type.details.boundType) {\n                            return printType(type.details.boundType, expandTypeAlias, recursionCount + 1);\n                        }\n                        return type.details.recursiveTypeAliasName;\n                    }\n\n                    if (type.details.boundType) {\n                        return printType(type.details.boundType, /* expandTypeAlias */ false, recursionCount + 1);\n                    }\n\n                    return (evaluatorOptions.printTypeFlags & PrintTypeFlags.PrintUnknownWithAny) !== 0\n                        ? 'Any'\n                        : 'Unknown';\n                }\n\n                if (type.details.isParamSpec) {\n                    return `ParamSpec('${type.details.name}')`;\n                }\n\n                return `TypeVar('${type.details.name}')`;\n            }\n\n            case TypeCategory.None: {\n                return TypeBase.isInstantiable(type) ? 'NoneType' : 'None';\n            }\n\n            case TypeCategory.Never: {\n                return 'Never';\n            }\n\n            case TypeCategory.Any: {\n                const anyType = type;\n                return anyType.isEllipsis ? '...' : 'Any';\n            }\n        }\n\n        return '';\n    }\n\n    // Calls back into the parser to parse the contents of a string literal.\n    // This is unfortunately needed in some cases — specifically where the\n    // parser couldn't determine that the string literal would be used in\n    // a context where it should be treated as a forward-declared type. This\n    // call produces an expression tree that is not attached to the main parse\n    // expression tree because we don't want to mutate the latter; the\n    // expression tree created by this function is therefore used only temporarily.\n    function parseStringAsTypeAnnotation(node: StringListNode): ExpressionNode | undefined {\n        const fileInfo = getFileInfo(node);\n        const parser = new Parser();\n        const textValue = node.strings[0].value;\n\n        // Determine the offset within the file where the string\n        // literal's contents begin.\n        const valueOffset =\n            node.strings[0].start + node.strings[0].token.prefixLength + node.strings[0].token.quoteMarkLength;\n\n        const parseOptions = new ParseOptions();\n        parseOptions.isStubFile = fileInfo.isStubFile;\n        parseOptions.pythonVersion = fileInfo.executionEnvironment.pythonVersion;\n\n        const parseResults = parser.parseTextExpression(\n            fileInfo.fileContents,\n            valueOffset,\n            textValue.length,\n            parseOptions\n        );\n\n        if (parseResults.parseTree) {\n            parseResults.diagnostics.forEach((diag) => {\n                addError(diag.message, node);\n            });\n\n            parseResults.parseTree.parent = node;\n            return parseResults.parseTree;\n        }\n\n        return undefined;\n    }\n\n    // Create an ID that is based on the file and the location\n    // within the file. This allows us to disambiguate between\n    // different types that don't have unique names (those that\n    // are not created with class declarations).\n    function getTypeSourceId(node: ParseNode): TypeSourceId {\n        const fileInfo = getFileInfo(node);\n\n        return `${fileInfo.moduleName}-${node.start.toString()}`;\n    }\n\n    return {\n        runWithCancellationToken,\n        getType,\n        getTypeOfClass,\n        getTypeOfFunction,\n        evaluateTypesForStatement,\n        getDeclaredTypeForExpression,\n        verifyRaiseExceptionType,\n        verifyDeleteExpression,\n        isAfterNodeReachable,\n        isNodeReachable,\n        suppressDiagnostics,\n        getDeclarationsForNameNode,\n        getTypeForDeclaration,\n        resolveAliasDeclaration,\n        getTypeFromIterable,\n        getTypedDictMembersForClass,\n        getGetterTypeFromProperty,\n        markNamesAccessed,\n        getEffectiveTypeOfSymbol,\n        getFunctionDeclaredReturnType,\n        getFunctionInferredReturnType,\n        getBuiltInType,\n        getTypeOfMember,\n        bindFunctionToClassOrObject,\n        getBoundMethod,\n        getCallSignatureInfo,\n        getTypeAnnotationForParameter,\n        canAssignType,\n        canOverrideMethod,\n        addError,\n        addWarning,\n        addInformation,\n        addUnusedCode,\n        addDiagnostic,\n        addDiagnosticForTextRange,\n        printType,\n        printFunctionParts,\n        getTypeCacheSize,\n    };\n}\n","/*\n * typeStubWriter.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic to emit a type stub file for a corresponding parsed\n * and analyzed python source file.\n */\n\nimport {\n    ArgumentCategory,\n    ArgumentNode,\n    AssignmentNode,\n    AugmentedAssignmentNode,\n    ClassNode,\n    DecoratorNode,\n    ExpressionNode,\n    ForNode,\n    FunctionNode,\n    IfNode,\n    ImportFromNode,\n    ImportNode,\n    ModuleNameNode,\n    NameNode,\n    ParameterCategory,\n    ParameterNode,\n    ParseNode,\n    ParseNodeType,\n    StatementListNode,\n    StringNode,\n    TryNode,\n    TypeAnnotationNode,\n    WhileNode,\n    WithNode,\n} from '../parser/parseNodes';\nimport * as AnalyzerNodeInfo from './analyzerNodeInfo';\nimport * as ParseTreeUtils from './parseTreeUtils';\nimport { ParseTreeWalker } from './parseTreeWalker';\nimport { getScopeForNode } from './scopeUtils';\nimport { SourceFile } from './sourceFile';\nimport { Symbol } from './symbol';\nimport * as SymbolNameUtils from './symbolNameUtils';\nimport { TypeEvaluator } from './typeEvaluator';\n\nclass TrackedImport {\n    constructor(public importName: string) {}\n\n    isAccessed = false;\n}\n\nclass TrackedImportAs extends TrackedImport {\n    constructor(importName: string, public alias: string | undefined, public symbol: Symbol) {\n        super(importName);\n    }\n}\n\ninterface TrackedImportSymbol {\n    symbol?: Symbol;\n    name: string;\n    alias?: string;\n    isAccessed: boolean;\n}\n\nclass TrackedImportFrom extends TrackedImport {\n    symbols: TrackedImportSymbol[] = [];\n\n    constructor(importName: string, public isWildcardImport: boolean, public node?: ImportFromNode) {\n        super(importName);\n    }\n\n    addSymbol(symbol: Symbol | undefined, name: string, alias: string | undefined, isAccessed = false) {\n        if (!this.symbols.find((s) => s.name === name)) {\n            this.symbols.push({\n                symbol,\n                name,\n                alias,\n                isAccessed,\n            });\n        }\n    }\n}\n\nclass ImportSymbolWalker extends ParseTreeWalker {\n    constructor(private _accessedImportedSymbols: Map<string, boolean>, private _treatStringsAsSymbols: boolean) {\n        super();\n    }\n\n    analyze(node: ExpressionNode) {\n        this.walk(node);\n    }\n\n    walk(node: ParseNode) {\n        if (!AnalyzerNodeInfo.isCodeUnreachable(node)) {\n            super.walk(node);\n        }\n    }\n\n    visitName(node: NameNode) {\n        this._accessedImportedSymbols.set(node.value, true);\n        return true;\n    }\n\n    visitString(node: StringNode) {\n        if (this._treatStringsAsSymbols) {\n            this._accessedImportedSymbols.set(node.value, true);\n        }\n\n        return true;\n    }\n}\n\nexport class TypeStubWriter extends ParseTreeWalker {\n    private _indentAmount = 0;\n    private _includeAllImports = false;\n    private _typeStubText = '';\n    private _lineEnd = '\\n';\n    private _tab = '    ';\n    private _classNestCount = 0;\n    private _functionNestCount = 0;\n    private _ifNestCount = 0;\n    private _emittedSuite = false;\n    private _emitDocString = true;\n    private _trackedImportAs = new Map<string, TrackedImportAs>();\n    private _trackedImportFrom = new Map<string, TrackedImportFrom>();\n    private _accessedImportedSymbols = new Map<string, boolean>();\n\n    constructor(private _stubPath: string, private _sourceFile: SourceFile, private _evaluator: TypeEvaluator) {\n        super();\n\n        // As a heuristic, we'll include all of the import statements\n        // in \"__init__.pyi\" files even if they're not locally referenced\n        // because these are often used as ways to re-export symbols.\n        if (this._stubPath.endsWith('__init__.pyi')) {\n            this._includeAllImports = true;\n        }\n    }\n\n    write() {\n        const parseResults = this._sourceFile.getParseResults()!;\n        this._lineEnd = parseResults.tokenizerOutput.predominantEndOfLineSequence;\n        this._tab = parseResults.tokenizerOutput.predominantTabSequence;\n\n        this.walk(parseResults.parseTree);\n\n        this._writeFile();\n    }\n\n    walk(node: ParseNode) {\n        if (!AnalyzerNodeInfo.isCodeUnreachable(node)) {\n            super.walk(node);\n        }\n    }\n\n    visitClass(node: ClassNode) {\n        const className = node.name.value;\n\n        this._emittedSuite = true;\n        this._emitDocString = true;\n        this._emitDecorators(node.decorators);\n        let line = `class ${className}`;\n        if (node.arguments.length > 0) {\n            line += `(${node.arguments\n                .map((arg) => {\n                    let argString = '';\n                    if (arg.name) {\n                        argString = arg.name.value + '=';\n                    }\n                    argString += this._printExpression(arg.valueExpression);\n                    return argString;\n                })\n                .join(', ')})`;\n        }\n        line += ':';\n        this._emitLine(line);\n\n        this._emitSuite(() => {\n            this._classNestCount++;\n            this.walk(node.suite);\n            this._classNestCount--;\n        });\n\n        this._emitLine('');\n        this._emitLine('');\n\n        return false;\n    }\n\n    visitFunction(node: FunctionNode) {\n        const functionName = node.name.value;\n\n        // Skip if we're already within a function or if the name is private/protected.\n        if (this._functionNestCount === 0 && !SymbolNameUtils.isPrivateOrProtectedName(functionName)) {\n            this._emittedSuite = true;\n            this._emitDocString = true;\n            this._emitDecorators(node.decorators);\n            let line = node.isAsync ? 'async ' : '';\n            line += `def ${functionName}`;\n            line += `(${node.parameters.map((param, index) => this._printParameter(param, node, index)).join(', ')})`;\n\n            let returnAnnotation: string | undefined;\n            if (node.returnTypeAnnotation) {\n                returnAnnotation = this._printExpression(node.returnTypeAnnotation, /* treatStringsAsSymbols */ true);\n            } else if (node.functionAnnotationComment) {\n                returnAnnotation = this._printExpression(\n                    node.functionAnnotationComment.returnTypeAnnotation,\n                    /* treatStringsAsSymbols */ true\n                );\n            } else {\n                // Handle a few common cases where we always know the answer.\n                if (node.name.value === '__init__') {\n                    returnAnnotation = 'None';\n                } else if (node.name.value === '__str__') {\n                    returnAnnotation = 'str';\n                } else if (['__int__', '__hash__'].some((name) => name === node.name.value)) {\n                    returnAnnotation = 'int';\n                } else if (\n                    ['__eq__', '__ne__', '__gt__', '__lt__', '__ge__', '__le__'].some(\n                        (name) => name === node.name.value\n                    )\n                ) {\n                    returnAnnotation = 'bool';\n                }\n            }\n\n            if (returnAnnotation) {\n                line += ' -> ' + returnAnnotation;\n            }\n\n            line += ':';\n            this._emitLine(line);\n\n            this._emitSuite(() => {\n                // Don't emit any nested functions.\n                this._functionNestCount++;\n                this.walk(node.suite);\n                this._functionNestCount--;\n            });\n\n            this._emitLine('');\n        }\n\n        return false;\n    }\n\n    visitWhile(node: WhileNode) {\n        // Don't emit a doc string after the first statement.\n        this._emitDocString = false;\n        return false;\n    }\n\n    visitFor(node: ForNode) {\n        // Don't emit a doc string after the first statement.\n        this._emitDocString = false;\n        return false;\n    }\n\n    visitTry(node: TryNode) {\n        // Don't emit a doc string after the first statement.\n        this._emitDocString = false;\n        return false;\n    }\n\n    visitWith(node: WithNode) {\n        // Don't emit a doc string after the first statement.\n        this._emitDocString = false;\n        return false;\n    }\n\n    visitIf(node: IfNode) {\n        // Don't emit a doc string after the first statement.\n        this._emitDocString = false;\n\n        // Include if statements if they are located\n        // at the global scope.\n        if (this._functionNestCount === 0 && this._ifNestCount === 0) {\n            this._ifNestCount++;\n            this._emittedSuite = true;\n            this._emitLine('if ' + this._printExpression(node.testExpression) + ':');\n            this._emitSuite(() => {\n                this.walkMultiple(node.ifSuite.statements);\n            });\n\n            const elseSuite = node.elseSuite;\n            if (elseSuite) {\n                this._emitLine('else:');\n                this._emitSuite(() => {\n                    if (elseSuite.nodeType === ParseNodeType.If) {\n                        this.walkMultiple([elseSuite.testExpression, elseSuite.ifSuite, elseSuite.elseSuite]);\n                    } else {\n                        this.walkMultiple(elseSuite.statements);\n                    }\n                });\n            }\n            this._ifNestCount--;\n        }\n\n        return false;\n    }\n\n    visitAssignment(node: AssignmentNode) {\n        let line = '';\n\n        if (node.leftExpression.nodeType === ParseNodeType.Name) {\n            // Strip out \"__all__\" assignments.\n            if (node.leftExpression.value === '__all__') {\n                return false;\n            }\n\n            if (this._functionNestCount === 0) {\n                line = this._printExpression(node.leftExpression);\n                if (node.typeAnnotationComment) {\n                    line += ': ' + this._printExpression(node.typeAnnotationComment, /* treatStringsAsSymbols */ true);\n                }\n            }\n        } else if (node.leftExpression.nodeType === ParseNodeType.TypeAnnotation) {\n            const valueExpr = node.leftExpression.valueExpression;\n\n            if (valueExpr.nodeType === ParseNodeType.Name) {\n                if (this._functionNestCount === 0) {\n                    line = `${this._printExpression(valueExpr)}: ${this._printExpression(\n                        node.leftExpression.typeAnnotation,\n                        /* treatStringsAsSymbols */ true\n                    )}`;\n                }\n            }\n        }\n\n        if (line) {\n            const emitValue = this._functionNestCount === 0 && this._classNestCount === 0;\n            this._emittedSuite = true;\n\n            line += ' = ';\n\n            if (emitValue) {\n                line += this._printExpression(node.rightExpression);\n            } else {\n                line += '...';\n            }\n            this._emitLine(line);\n        }\n\n        return false;\n    }\n\n    visitAugmentedAssignment(node: AugmentedAssignmentNode) {\n        return false;\n    }\n\n    visitTypeAnnotation(node: TypeAnnotationNode) {\n        if (this._functionNestCount === 0) {\n            let line = '';\n            if (node.valueExpression.nodeType === ParseNodeType.Name) {\n                line = this._printExpression(node.valueExpression);\n            } else if (node.valueExpression.nodeType === ParseNodeType.MemberAccess) {\n                const baseExpression = node.valueExpression.leftExpression;\n                if (baseExpression.nodeType === ParseNodeType.Name) {\n                    if (baseExpression.value === 'self') {\n                        const memberName = node.valueExpression.memberName.value;\n                        if (!SymbolNameUtils.isPrivateOrProtectedName(memberName)) {\n                            line = this._printExpression(node.valueExpression);\n                        }\n                    }\n                }\n            }\n\n            if (line) {\n                line += ': ' + this._printExpression(node.typeAnnotation, /* treatStringsAsSymbols */ true);\n                this._emitLine(line);\n            }\n        }\n\n        return false;\n    }\n\n    visitImport(node: ImportNode) {\n        if (this._functionNestCount > 0 || this._classNestCount > 0) {\n            return false;\n        }\n\n        const currentScope = getScopeForNode(node);\n        if (currentScope) {\n            // Record the input for later.\n            node.list.forEach((imp) => {\n                const moduleName = this._printModuleName(imp.module);\n                if (!this._trackedImportAs.has(moduleName)) {\n                    const symbolName = imp.alias\n                        ? imp.alias.value\n                        : imp.module.nameParts.length > 0\n                        ? imp.module.nameParts[0].value\n                        : '';\n                    const symbolInfo = currentScope.lookUpSymbolRecursive(symbolName);\n                    if (symbolInfo) {\n                        const trackedImportAs = new TrackedImportAs(\n                            moduleName,\n                            imp.alias ? imp.alias.value : undefined,\n                            symbolInfo.symbol\n                        );\n                        this._trackedImportAs.set(moduleName, trackedImportAs);\n                    }\n                }\n            });\n        }\n\n        return false;\n    }\n\n    visitImportFrom(node: ImportFromNode) {\n        if (this._functionNestCount > 0 || this._classNestCount > 0) {\n            return false;\n        }\n\n        const currentScope = getScopeForNode(node);\n        if (currentScope) {\n            // Record the input for later.\n            const moduleName = this._printModuleName(node.module);\n            let trackedImportFrom = this._trackedImportFrom.get(moduleName);\n            if (!trackedImportFrom) {\n                trackedImportFrom = new TrackedImportFrom(moduleName, node.isWildcardImport, node);\n                this._trackedImportFrom.set(moduleName, trackedImportFrom);\n            }\n\n            node.imports.forEach((imp) => {\n                const symbolName = imp.alias ? imp.alias.value : imp.name.value;\n                const symbolInfo = currentScope.lookUpSymbolRecursive(symbolName);\n                if (symbolInfo) {\n                    trackedImportFrom!.addSymbol(\n                        symbolInfo.symbol,\n                        imp.name.value,\n                        imp.alias ? imp.alias.value : undefined,\n                        false\n                    );\n                }\n            });\n        }\n\n        return false;\n    }\n\n    visitStatementList(node: StatementListNode) {\n        if (node.statements.length > 0 && node.statements[0].nodeType === ParseNodeType.StringList) {\n            // Is this the first statement in a suite? If it's a string\n            // literal, assume it's a doc string and emit it.\n            if (!this._emittedSuite && this._emitDocString) {\n                this._emitLine(this._printExpression(node.statements[0]));\n            }\n        }\n\n        // Don't emit a doc string after the first statement.\n        this._emitDocString = false;\n\n        this.walkMultiple(node.statements);\n        return false;\n    }\n\n    private _emitSuite(callback: () => void) {\n        this._increaseIndent(() => {\n            const prevEmittedSuite = this._emittedSuite;\n            this._emittedSuite = false;\n\n            callback();\n\n            if (!this._emittedSuite) {\n                this._emitLine('...');\n            }\n\n            this._emittedSuite = prevEmittedSuite;\n        });\n    }\n\n    private _increaseIndent(callback: () => void) {\n        this._indentAmount++;\n        callback();\n        this._indentAmount--;\n    }\n\n    private _emitDecorators(decorators: DecoratorNode[]) {\n        decorators.forEach((decorator) => {\n            this._emitLine('@' + this._printExpression(decorator.expression));\n        });\n    }\n\n    private _printHeaderDocString() {\n        return (\n            '\"\"\"' +\n            this._lineEnd +\n            'This type stub file was generated by pyright.' +\n            this._lineEnd +\n            '\"\"\"' +\n            this._lineEnd +\n            this._lineEnd\n        );\n    }\n\n    private _emitLine(line: string) {\n        for (let i = 0; i < this._indentAmount; i++) {\n            this._typeStubText += this._tab;\n        }\n\n        this._typeStubText += line + this._lineEnd;\n    }\n\n    private _printModuleName(node: ModuleNameNode): string {\n        let line = '';\n        for (let i = 0; i < node.leadingDots; i++) {\n            line += '.';\n        }\n        line += node.nameParts.map((part) => part.value).join('.');\n        return line;\n    }\n\n    private _printParameter(paramNode: ParameterNode, functionNode: FunctionNode, paramIndex: number): string {\n        let line = '';\n        if (paramNode.category === ParameterCategory.VarArgList) {\n            line += '*';\n        } else if (paramNode.category === ParameterCategory.VarArgDictionary) {\n            line += '**';\n        }\n\n        if (paramNode.name) {\n            line += paramNode.name.value;\n        }\n\n        const paramTypeAnnotation = this._evaluator.getTypeAnnotationForParameter(functionNode, paramIndex);\n        let paramType = '';\n        if (paramTypeAnnotation) {\n            paramType = this._printExpression(paramTypeAnnotation, /* treatStringsAsSymbols */ true);\n        }\n\n        if (paramType) {\n            line += ': ' + paramType;\n        }\n\n        if (paramNode.defaultValue) {\n            // Follow PEP8 spacing rules. Include spaces if type\n            // annotation is present, no space otherwise.\n            if (paramType) {\n                line += ' = ...';\n            } else {\n                line += '=...';\n            }\n        }\n\n        return line;\n    }\n\n    private _printExpression(node: ExpressionNode, isType = false, treatStringsAsSymbols = false): string {\n        const importSymbolWalker = new ImportSymbolWalker(this._accessedImportedSymbols, treatStringsAsSymbols);\n        importSymbolWalker.analyze(node);\n\n        return ParseTreeUtils.printExpression(\n            node,\n            isType ? ParseTreeUtils.PrintExpressionFlags.ForwardDeclarations : ParseTreeUtils.PrintExpressionFlags.None\n        );\n    }\n\n    private _printTrackedImports() {\n        let importStr = '';\n        let lineEmitted = false;\n\n        // Emit the \"import\" statements.\n        this._trackedImportAs.forEach((imp) => {\n            if (this._accessedImportedSymbols.get(imp.alias || imp.importName)) {\n                imp.isAccessed = true;\n            }\n\n            if (imp.isAccessed || this._includeAllImports) {\n                importStr += `import ${imp.importName}`;\n                if (imp.alias) {\n                    importStr += ` as ${imp.alias}`;\n                }\n                importStr += this._lineEnd;\n                lineEmitted = true;\n            }\n        });\n\n        // Emit the \"import from\" statements.\n        this._trackedImportFrom.forEach((imp) => {\n            imp.symbols.forEach((s) => {\n                if (this._accessedImportedSymbols.get(s.alias || s.name)) {\n                    s.isAccessed = true;\n                }\n            });\n\n            if (imp.isWildcardImport) {\n                importStr += `from ${imp.importName} import *` + this._lineEnd;\n                lineEmitted = true;\n            }\n\n            const sortedSymbols = imp.symbols\n                .filter((s) => s.isAccessed || this._includeAllImports)\n                .sort((a, b) => {\n                    if (a.name < b.name) {\n                        return -1;\n                    } else if (a.name > b.name) {\n                        return 1;\n                    }\n                    return 0;\n                });\n\n            if (sortedSymbols.length > 0) {\n                importStr += `from ${imp.importName} import `;\n\n                importStr += sortedSymbols\n                    .map((symbol) => {\n                        let symStr = symbol.name;\n                        if (symbol.alias) {\n                            symStr += ' as ' + symbol.alias;\n                        }\n                        return symStr;\n                    })\n                    .join(', ');\n\n                importStr += this._lineEnd;\n                lineEmitted = true;\n            }\n        });\n\n        if (lineEmitted) {\n            importStr += this._lineEnd;\n        }\n\n        return importStr;\n    }\n\n    private _writeFile() {\n        let finalText = this._printHeaderDocString();\n        finalText += this._printTrackedImports();\n        finalText += this._typeStubText;\n\n        this._sourceFile.fileSystem.writeFileSync(this._stubPath, finalText, 'utf8');\n    }\n}\n","/*\n * typeUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Collection of functions that operate on Type objects.\n */\n\nimport { ParameterCategory } from '../parser/parseNodes';\nimport { DeclarationType } from './declaration';\nimport { Symbol, SymbolFlags, SymbolTable } from './symbol';\nimport { isTypedDictMemberAccessedThroughIndex } from './symbolUtils';\nimport {\n    AnyType,\n    ClassType,\n    combineTypes,\n    EnumLiteral,\n    FunctionType,\n    isAnyOrUnknown,\n    isClass,\n    isNone,\n    isObject,\n    isTypeSame,\n    isTypeVar,\n    isUnknown,\n    maxTypeRecursionCount,\n    ModuleType,\n    NeverType,\n    NoneType,\n    ObjectType,\n    OverloadedFunctionType,\n    SpecializedFunctionTypes,\n    Type,\n    TypeBase,\n    TypeCategory,\n    TypeVarType,\n    UnknownType,\n} from './types';\nimport { TypeVarMap } from './typeVarMap';\n\nexport interface ClassMember {\n    // Symbol\n    symbol: Symbol;\n\n    // Partially-specialized class that contains the class member\n    classType: Type;\n\n    // True if instance member, false if class member\n    isInstanceMember: boolean;\n\n    // True if member has declared type, false if inferred\n    isTypeDeclared: boolean;\n}\n\nexport const enum ClassMemberLookupFlags {\n    Default = 0,\n\n    // By default, the original (derived) class is searched along\n    // with its base classes. If this flag is set, the original\n    // class is skipped and only the base classes are searched.\n    SkipOriginalClass = 1 << 0,\n\n    // By default, base classes are searched as well as the\n    // original (derived) class. If this flag is set, no recursion\n    // is performed.\n    SkipBaseClasses = 1 << 1,\n\n    // Skip the 'object' base class in particular.\n    SkipObjectBaseClass = 1 << 2,\n\n    // By default, both class and instance variables are searched.\n    // If this flag is set, the instance variables are skipped.\n    SkipInstanceVariables = 1 << 3,\n\n    // By default, the first symbol is returned even if it has only\n    // an inferred type associated with it. If this flag is set,\n    // the search looks only for symbols with declared types.\n    DeclaredTypesOnly = 1 << 4,\n}\n\nexport const enum CanAssignFlags {\n    Default = 0,\n\n    // Require invariance with respect to class matching? Normally\n    // subclasses are allowed.\n    EnforceInvariance = 1 << 0,\n\n    // The caller has swapped the source and dest types because\n    // the types are contravariant. Perform type var matching\n    // on dest type vars rather than source type var.\n    ReverseTypeVarMatching = 1 << 1,\n\n    // Normally type vars are treated as variables that need to\n    // be \"solved\". If this flag is set, they are treated as types\n    // that must match exactly.\n    MatchTypeVarsExactly = 1 << 2,\n\n    // If the dest is not Any but the src is Any, treat it\n    // as incompatible.\n    DisallowAssignFromAny = 1 << 3,\n\n    // For function types, skip the return type check.\n    SkipFunctionReturnTypeCheck = 1 << 4,\n\n    // Normally type vars are specialized during type comparisons.\n    // With this flag, a type var must match a type var exactly.\n    DoNotSpecializeTypeVars = 1 << 5,\n}\n\nconst singleTickRegEx = /'/g;\nconst tripleTickRegEx = /'''/g;\n\nexport function isOptionalType(type: Type): boolean {\n    if (type.category === TypeCategory.Union) {\n        return type.subtypes.some((t) => isNone(t));\n    }\n\n    return false;\n}\n\n// Calls a callback for each subtype and combines the results\n// into a final type.\nexport function doForSubtypes(type: Type, callback: (type: Type) => Type | undefined): Type {\n    if (type.category === TypeCategory.Union) {\n        const newTypes: Type[] = [];\n\n        type.subtypes.forEach((typeEntry) => {\n            const transformedType = callback(typeEntry);\n            if (transformedType) {\n                newTypes.push(transformedType);\n            }\n        });\n\n        return combineTypes(newTypes);\n    }\n\n    return callback(type) || NeverType.create();\n}\n\n// Determines if all of the types in the array are the same.\nexport function areTypesSame(types: Type[]): boolean {\n    if (types.length < 2) {\n        return true;\n    }\n\n    for (let i = 1; i < types.length; i++) {\n        if (!isTypeSame(types[0], types[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function derivesFromAnyOrUnknown(type: Type): boolean {\n    let anyOrUnknown = false;\n\n    doForSubtypes(type, (subtype) => {\n        if (isAnyOrUnknown(type)) {\n            anyOrUnknown = true;\n        } else if (isClass(subtype)) {\n            if (ClassType.hasUnknownBaseClass(subtype)) {\n                anyOrUnknown = true;\n            }\n        } else if (isObject(subtype)) {\n            if (ClassType.hasUnknownBaseClass(subtype.classType)) {\n                anyOrUnknown = true;\n            }\n        }\n\n        return undefined;\n    });\n\n    return anyOrUnknown;\n}\n\nexport function stripLiteralValue(type: Type): Type {\n    if (isObject(type)) {\n        if (type.classType.literalValue !== undefined) {\n            type = ObjectType.create(ClassType.cloneWithLiteral(type.classType, undefined));\n        }\n\n        return type;\n    }\n\n    if (isClass(type)) {\n        if (type.literalValue !== undefined) {\n            type = ClassType.cloneWithLiteral(type, undefined);\n        }\n\n        return type;\n    }\n\n    if (type.category === TypeCategory.Union) {\n        let typeChanged = false;\n        const strippedValue = doForSubtypes(type, (subtype) => {\n            const strippedValue = stripLiteralValue(subtype);\n            if (strippedValue !== subtype) {\n                typeChanged = true;\n            }\n            return strippedValue;\n        });\n\n        return typeChanged ? strippedValue : type;\n    }\n\n    return type;\n}\n\nexport function enumerateLiteralsForType(type: ObjectType): ObjectType[] | undefined {\n    if (ClassType.isBuiltIn(type.classType, 'bool')) {\n        // Booleans have only two types: True and False.\n        return [\n            ObjectType.create(ClassType.cloneWithLiteral(type.classType, true)),\n            ObjectType.create(ClassType.cloneWithLiteral(type.classType, false)),\n        ];\n    }\n\n    if (ClassType.isEnumClass(type.classType)) {\n        // Enumerate all of the values in this enumeration.\n        const enumList: ObjectType[] = [];\n        const fields = type.classType.details.fields;\n        fields.forEach((symbol, name) => {\n            if (!symbol.isIgnoredForProtocolMatch() && !symbol.isInstanceMember()) {\n                enumList.push(\n                    ObjectType.create(\n                        ClassType.cloneWithLiteral(type.classType, new EnumLiteral(type.classType.details.name, name))\n                    )\n                );\n            }\n        });\n\n        return enumList;\n    }\n\n    return undefined;\n}\n\n// If the type is a concrete class X described by the object Type[X],\n// returns X. Otherwise returns the original type.\nexport function transformTypeObjectToClass(type: Type): Type {\n    if (!isObject(type)) {\n        return type;\n    }\n\n    const classType = type.classType;\n    if (!ClassType.isBuiltIn(classType, 'Type')) {\n        return type;\n    }\n\n    // If it's a generic Type, we can't get the class.\n    if (!classType.typeArguments || classType.typeArguments.length < 1) {\n        return type;\n    }\n\n    const typeArg = classType.typeArguments[0];\n    if (!isObject(typeArg)) {\n        return type;\n    }\n\n    return typeArg.classType;\n}\n\n// Indicates whether the specified type is a recursive type alias\n// placeholder that has not yet been resolved.\nexport function isTypeAliasPlaceholder(type: Type): type is TypeVarType {\n    if (!isTypeVar(type)) {\n        return false;\n    }\n\n    return !!type.details.recursiveTypeAliasName && !type.details.boundType;\n}\n\n// Determines whether the type alias placeholder is used directly\n// within the specified type. It's OK if it's used indirectly as\n// a type argument.\nexport function isTypeAliasRecursive(typeAliasPlaceholder: TypeVarType, type: Type) {\n    if (type.category !== TypeCategory.Union) {\n        // Handle the specific case where the type alias directly refers to itself.\n        // In this case, the type will be unbound because it could not be resolved.\n        return (\n            type.category === TypeCategory.Unbound &&\n            type.typeAliasInfo &&\n            type.typeAliasInfo.aliasName === typeAliasPlaceholder.details.recursiveTypeAliasName\n        );\n    }\n\n    for (const subtype of type.subtypes) {\n        if (isTypeSame(typeAliasPlaceholder, subtype)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function transformPossibleRecursiveTypeAlias(type: Type): Type;\nexport function transformPossibleRecursiveTypeAlias(type: Type | undefined): Type | undefined;\nexport function transformPossibleRecursiveTypeAlias(type: Type | undefined): Type | undefined {\n    if (type) {\n        if (isTypeVar(type) && type.details.recursiveTypeAliasName && type.details.boundType) {\n            const unspecializedType = TypeBase.isInstance(type)\n                ? convertToInstance(type.details.boundType)\n                : type.details.boundType;\n\n            if (!type.typeAliasInfo?.typeArguments || !type.details.recursiveTypeParameters) {\n                return unspecializedType;\n            }\n\n            const typeVarMap = buildTypeVarMap(type.details.recursiveTypeParameters, type.typeAliasInfo.typeArguments);\n            return specializeType(unspecializedType, typeVarMap);\n        }\n    }\n\n    return type;\n}\n\n// None is always falsy. All other types are generally truthy\n// unless they are objects that support the __bool__ or __len__\n// methods.\nexport function canBeFalsy(type: Type, recursionLevel = 0): boolean {\n    if (recursionLevel > maxTypeRecursionCount) {\n        return true;\n    }\n\n    switch (type.category) {\n        case TypeCategory.Unbound:\n        case TypeCategory.Unknown:\n        case TypeCategory.Any:\n        case TypeCategory.Never:\n        case TypeCategory.None: {\n            return true;\n        }\n\n        case TypeCategory.Union: {\n            return type.subtypes.some((t) => canBeFalsy(t, recursionLevel + 1));\n        }\n\n        case TypeCategory.Function:\n        case TypeCategory.OverloadedFunction:\n        case TypeCategory.Class:\n        case TypeCategory.Module:\n        case TypeCategory.TypeVar: {\n            return false;\n        }\n\n        case TypeCategory.Object: {\n            // Handle tuples specially.\n            if (isTupleClass(type.classType) && type.classType.typeArguments) {\n                if (type.classType.typeArguments.length === 0) {\n                    return true;\n                }\n\n                const lastTypeArg = type.classType.typeArguments[type.classType.typeArguments.length - 1];\n                if (isEllipsisType(lastTypeArg)) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            const lenMethod = lookUpObjectMember(type, '__len__');\n            if (lenMethod) {\n                return true;\n            }\n\n            const boolMethod = lookUpObjectMember(type, '__bool__');\n            if (boolMethod) {\n                return true;\n            }\n\n            // Check for Literal[False].\n            if (ClassType.isBuiltIn(type.classType, 'bool')) {\n                if (type.classType.literalValue === false) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    }\n}\n\nexport function canBeTruthy(type: Type, recursionLevel = 0): boolean {\n    if (recursionLevel > maxTypeRecursionCount) {\n        return true;\n    }\n\n    switch (type.category) {\n        case TypeCategory.Unknown:\n        case TypeCategory.Function:\n        case TypeCategory.OverloadedFunction:\n        case TypeCategory.Class:\n        case TypeCategory.Module:\n        case TypeCategory.TypeVar:\n        case TypeCategory.Never:\n        case TypeCategory.Any: {\n            return true;\n        }\n\n        case TypeCategory.Union: {\n            return type.subtypes.some((t) => canBeTruthy(t, recursionLevel + 1));\n        }\n\n        case TypeCategory.Unbound:\n        case TypeCategory.None: {\n            return false;\n        }\n\n        case TypeCategory.Object: {\n            // Check for Tuple[()] (an empty tuple).\n            if (isTupleClass(type.classType)) {\n                if (type.classType.typeArguments && type.classType.typeArguments.length === 0) {\n                    return false;\n                }\n            }\n\n            // Check for Literal[False].\n            if (ClassType.isBuiltIn(type.classType, 'bool')) {\n                if (type.classType.literalValue === false) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    }\n}\n\n// Determines whether the type is a Tuple class or object.\nexport function getSpecializedTupleType(type: Type): ClassType | undefined {\n    let classType: ClassType | undefined;\n\n    if (isClass(type)) {\n        classType = type;\n    } else if (isObject(type)) {\n        classType = type.classType;\n    }\n\n    if (!classType) {\n        return undefined;\n    }\n\n    // See if this class derives from Tuple or tuple. If it does, we'll assume that it\n    // hasn't been overridden in a way that changes the behavior of the tuple class.\n    const tupleClass = classType.details.mro.find((mroClass) => isClass(mroClass) && isTupleClass(mroClass));\n    if (!tupleClass || !isClass(tupleClass)) {\n        return undefined;\n    }\n\n    if (ClassType.isSameGenericClass(classType, tupleClass)) {\n        return classType;\n    }\n\n    const typeVarMap = buildTypeVarMapFromSpecializedClass(classType);\n    return specializeType(tupleClass, typeVarMap) as ClassType;\n}\n\nexport function isLiteralType(type: Type, allowLiteralUnions = true): boolean {\n    if (isObject(type)) {\n        return type.classType.literalValue !== undefined;\n    }\n\n    if (allowLiteralUnions && type.category === TypeCategory.Union) {\n        return !type.subtypes.some((t) => !isObject(t) || t.classType.literalValue === undefined);\n    }\n\n    return false;\n}\n\nexport function isEllipsisType(type: Type): boolean {\n    // Ellipses are translated into both a special form of \"Any\" or\n    // a distinct class depending on the context.\n    if (type.category === TypeCategory.Any && type.isEllipsis) {\n        return true;\n    }\n\n    return isClass(type) && ClassType.isBuiltIn(type, 'ellipsis');\n}\n\nexport function isNoReturnType(type: Type): boolean {\n    if (isObject(type)) {\n        const classType = type.classType;\n        if (ClassType.isBuiltIn(classType, 'NoReturn')) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function isParamSpecType(type: Type): boolean {\n    if (!isTypeVar(type)) {\n        return false;\n    }\n\n    return type.details.isParamSpec;\n}\n\nexport function isProperty(type: Type): type is ObjectType {\n    return isObject(type) && ClassType.isPropertyClass(type.classType);\n}\n\nexport function isTupleClass(type: ClassType) {\n    return ClassType.isBuiltIn(type) && (type.details.name === 'Tuple' || type.details.name === 'tuple');\n}\n\n// Partially specializes a type within the context of a specified\n// (presumably specialized) class.\nexport function partiallySpecializeType(type: Type, contextClassType: ClassType): Type {\n    // If the context class is not specialized (or doesn't need specialization),\n    // then there's no need to do any more work.\n    if (ClassType.isGeneric(contextClassType)) {\n        return type;\n    }\n\n    // Partially specialize the type using the specialized class type vars.\n    const typeVarMap = buildTypeVarMapFromSpecializedClass(contextClassType);\n    return specializeType(type, typeVarMap, /* makeConcrete */ false);\n}\n\n// Replaces all of the top-level TypeVars (as opposed to TypeVars\n// used as type arguments in other types) with their concrete form.\nexport function makeTypeVarsConcrete(type: Type): Type {\n    return doForSubtypes(type, (subtype) => {\n        if (isTypeVar(subtype) && !subtype.details.recursiveTypeAliasName) {\n            if (subtype.details.boundType) {\n                return subtype.details.boundType;\n            }\n\n            // If this is a recursive type alias placeholder\n            // that hasn't yet been resolved, return it as is.\n            if (subtype.details.recursiveTypeAliasName) {\n                return subtype;\n            }\n\n            // Normally, we would use UnknownType here, but we need\n            // to use Any because unknown types will generate diagnostics\n            // in strictly-typed files that cannot be suppressed in\n            // any reasonable manner.\n            return AnyType.create();\n        }\n\n        return subtype;\n    });\n}\n\n// Specializes a (potentially generic) type by substituting\n// type variables with specified types. If typeVarMap is not\n// provided or makeConcrete is true, type variables are replaced\n// with a concrete type derived from the type variable if there\n// is no corresponding definition in the typeVarMap.\nexport function specializeType(\n    type: Type,\n    typeVarMap: TypeVarMap | undefined,\n    makeConcrete = false,\n    recursionLevel = 0\n): Type {\n    if (recursionLevel > maxTypeRecursionCount) {\n        return type;\n    }\n\n    // Shortcut the operation if possible.\n    if (!requiresSpecialization(type)) {\n        return type;\n    }\n\n    // Shortcut if there are no type variables defined.\n    if (typeVarMap && !makeConcrete && typeVarMap.typeVarCount() === 0) {\n        return type;\n    }\n\n    if (isAnyOrUnknown(type)) {\n        return type;\n    }\n\n    if (isNone(type)) {\n        return type;\n    }\n\n    if (isTypeVar(type)) {\n        // Handle recursive type aliases specially. In particular,\n        // we need to specialize type arguments for generic recursive\n        // type aliases.\n        if (type.details.recursiveTypeAliasName) {\n            if (!type.typeAliasInfo?.typeArguments) {\n                return type;\n            }\n\n            const typeArgs = type.typeAliasInfo.typeArguments.map((typeArg) =>\n                specializeType(typeArg, typeVarMap, /* makeConcrete */ false, recursionLevel + 1)\n            );\n\n            return TypeBase.cloneForTypeAlias(\n                type,\n                type.typeAliasInfo.aliasName,\n                type.typeAliasInfo.typeParameters,\n                typeArgs\n            );\n        }\n\n        if (typeVarMap) {\n            const replacementType = typeVarMap.getTypeVar(type);\n            if (replacementType) {\n                // If we're replacing a TypeVar with another type and the\n                // original is not an instance, convert the replacement so it's also\n                // not an instance. This happens in the case where a type alias refers\n                // to a union that includes a TypeVar.\n                if (TypeBase.isInstantiable(type) && !TypeBase.isInstantiable(replacementType)) {\n                    return convertToInstantiable(replacementType);\n                }\n                return replacementType;\n            }\n        } else {\n            if (type.details.boundType) {\n                return specializeType(type.details.boundType, undefined, /* makeConcrete */ false, recursionLevel + 1);\n            }\n\n            return makeConcrete ? UnknownType.create() : type;\n        }\n\n        return type;\n    }\n\n    if (type.category === TypeCategory.Union) {\n        const subtypes: Type[] = [];\n        type.subtypes.forEach((typeEntry) => {\n            subtypes.push(specializeType(typeEntry, typeVarMap, makeConcrete, recursionLevel + 1));\n        });\n\n        return combineTypes(subtypes);\n    }\n\n    if (isObject(type)) {\n        const classType = _specializeClassType(type.classType, typeVarMap, makeConcrete, recursionLevel + 1);\n\n        // Handle the \"Type\" special class.\n        if (ClassType.isBuiltIn(classType, 'Type')) {\n            const typeArgs = classType.typeArguments;\n            if (typeArgs && typeArgs.length >= 1) {\n                const firstTypeArg = typeArgs[0];\n                if (isObject(firstTypeArg)) {\n                    return specializeType(firstTypeArg.classType, typeVarMap, makeConcrete, recursionLevel + 1);\n                } else if (isTypeVar(firstTypeArg)) {\n                    if (typeVarMap) {\n                        const replacementType = typeVarMap.getTypeVar(firstTypeArg);\n                        if (replacementType && isObject(replacementType)) {\n                            return replacementType.classType;\n                        }\n                    }\n                }\n            }\n        }\n\n        // Don't allocate a new ObjectType class if the class\n        // didn't need to be specialized.\n        if (classType === type.classType) {\n            return type;\n        }\n        return ObjectType.create(classType);\n    }\n\n    if (isClass(type)) {\n        return _specializeClassType(type, typeVarMap, makeConcrete, recursionLevel + 1);\n    }\n\n    if (type.category === TypeCategory.Function) {\n        return _specializeFunctionType(type, typeVarMap, makeConcrete, recursionLevel + 1);\n    }\n\n    if (type.category === TypeCategory.OverloadedFunction) {\n        return _specializeOverloadedFunctionType(type, typeVarMap, makeConcrete, recursionLevel + 1);\n    }\n\n    return type;\n}\n\nexport function lookUpObjectMember(\n    objectType: Type,\n    memberName: string,\n    flags = ClassMemberLookupFlags.Default\n): ClassMember | undefined {\n    if (isObject(objectType)) {\n        return lookUpClassMember(objectType.classType, memberName, flags);\n    }\n\n    return undefined;\n}\n\n// Looks up a member in a class using the multiple-inheritance rules\n// defined by Python. For more details, see this note on method resolution\n// order: https://www.python.org/download/releases/2.3/mro/.\n// As it traverses the inheritance tree, it applies partial specialization\n// to the the base class and member. For example, if ClassA inherits from\n// ClassB[str] which inherits from Dict[_T1, int], a search for '__iter__'\n// would return a class type of Dict[str, int] and a symbolType of\n// (self) -> Iterator[str].\nexport function lookUpClassMember(\n    classType: Type,\n    memberName: string,\n    flags = ClassMemberLookupFlags.Default\n): ClassMember | undefined {\n    const declaredTypesOnly = (flags & ClassMemberLookupFlags.DeclaredTypesOnly) !== 0;\n\n    if (isClass(classType)) {\n        let foundUnknownBaseClass = false;\n\n        for (const mroClass of classType.details.mro) {\n            if (!isClass(mroClass)) {\n                foundUnknownBaseClass = true;\n                continue;\n            }\n\n            // If mroClass is an ancestor of classType, partially specialize\n            // it in the context of classType.\n            const specializedMroClass = partiallySpecializeType(mroClass, classType);\n            if (!isClass(specializedMroClass)) {\n                continue;\n            }\n\n            // Should we ignore members on the 'object' base class?\n            if (flags & ClassMemberLookupFlags.SkipObjectBaseClass) {\n                if (ClassType.isBuiltIn(specializedMroClass, 'object')) {\n                    continue;\n                }\n            }\n\n            if (\n                (flags & ClassMemberLookupFlags.SkipOriginalClass) === 0 ||\n                specializedMroClass.details !== classType.details\n            ) {\n                const memberFields = specializedMroClass.details.fields;\n\n                // Look at instance members first if requested.\n                if ((flags & ClassMemberLookupFlags.SkipInstanceVariables) === 0) {\n                    const symbol = memberFields.get(memberName);\n                    if (symbol && symbol.isInstanceMember()) {\n                        const hasDeclaredType = symbol.hasTypedDeclarations();\n                        if (!declaredTypesOnly || hasDeclaredType) {\n                            return {\n                                symbol,\n                                isInstanceMember: true,\n                                classType: specializedMroClass,\n                                isTypeDeclared: hasDeclaredType,\n                            };\n                        }\n                    }\n                }\n\n                // Next look at class members.\n                const symbol = memberFields.get(memberName);\n                if (symbol && symbol.isClassMember()) {\n                    const hasDeclaredType = symbol.hasTypedDeclarations();\n                    if (!declaredTypesOnly || hasDeclaredType) {\n                        let isInstanceMember = false;\n\n                        // For data classes and typed dicts, variables that are declared\n                        // within the class are treated as instance variables. This distinction\n                        // is important in cases where a variable is a callable type because\n                        // we don't want to bind it to the instance like we would for a\n                        // class member.\n                        if (\n                            ClassType.isDataClass(specializedMroClass) ||\n                            ClassType.isTypedDictClass(specializedMroClass)\n                        ) {\n                            const decls = symbol.getDeclarations();\n                            if (decls.length > 0 && decls[0].type === DeclarationType.Variable) {\n                                isInstanceMember = true;\n                            }\n                        }\n\n                        return {\n                            symbol,\n                            isInstanceMember,\n                            classType: specializedMroClass,\n                            isTypeDeclared: hasDeclaredType,\n                        };\n                    }\n                }\n            }\n\n            if ((flags & ClassMemberLookupFlags.SkipBaseClasses) !== 0) {\n                break;\n            }\n        }\n\n        if (foundUnknownBaseClass && !declaredTypesOnly) {\n            // The class derives from an unknown type, so all bets are off\n            // when trying to find a member. Return an unknown symbol.\n            return {\n                symbol: Symbol.createWithType(SymbolFlags.None, UnknownType.create()),\n                isInstanceMember: false,\n                classType: UnknownType.create(),\n                isTypeDeclared: false,\n            };\n        }\n    } else if (isAnyOrUnknown(classType)) {\n        // The class derives from an unknown type, so all bets are off\n        // when trying to find a member. Return an unknown symbol.\n        return {\n            symbol: Symbol.createWithType(SymbolFlags.None, UnknownType.create()),\n            isInstanceMember: false,\n            classType: UnknownType.create(),\n            isTypeDeclared: false,\n        };\n    }\n\n    return undefined;\n}\n\n// Combines two lists of type var types, maintaining the combined order\n// but removing any duplicates.\nexport function addTypeVarsToListIfUnique(list1: TypeVarType[], list2: TypeVarType[]) {\n    for (const type2 of list2) {\n        if (!list1.find((type1) => isTypeSame(type1, type2))) {\n            list1.push(type2);\n        }\n    }\n}\n\n// Walks the type recursively (in a depth-first manner), finds all\n// type variables that are referenced, and returns an ordered list\n// of unique type variables. For example, if the type is\n// Union[List[Dict[_T1, _T2]], _T1, _T3], the result would be\n// [_T1, _T2, _T3].\nexport function getTypeVarArgumentsRecursive(type: Type, recursionCount = 0): TypeVarType[] {\n    if (recursionCount > maxTypeRecursionCount) {\n        return [];\n    }\n\n    const getTypeVarsFromClass = (classType: ClassType) => {\n        const combinedList: TypeVarType[] = [];\n        if (classType.typeArguments) {\n            classType.typeArguments.forEach((typeArg) => {\n                addTypeVarsToListIfUnique(combinedList, getTypeVarArgumentsRecursive(typeArg, recursionCount + 1));\n            });\n        }\n\n        return combinedList;\n    };\n\n    if (isTypeVar(type)) {\n        // Don't return any recursive type alias placeholders.\n        if (type.details.recursiveTypeAliasName) {\n            return [];\n        }\n        return [type];\n    } else if (isClass(type)) {\n        return getTypeVarsFromClass(type);\n    } else if (isObject(type)) {\n        return getTypeVarsFromClass(type.classType);\n    } else if (type.category === TypeCategory.Union) {\n        const combinedList: TypeVarType[] = [];\n        for (const subtype of type.subtypes) {\n            addTypeVarsToListIfUnique(combinedList, getTypeVarArgumentsRecursive(subtype, recursionCount + 1));\n        }\n        return combinedList;\n    } else if (type.category === TypeCategory.Function) {\n        const combinedList: TypeVarType[] = [];\n\n        type.details.parameters.forEach((param) => {\n            addTypeVarsToListIfUnique(combinedList, getTypeVarArgumentsRecursive(param.type, recursionCount + 1));\n        });\n\n        if (type.details.declaredReturnType) {\n            addTypeVarsToListIfUnique(\n                combinedList,\n                getTypeVarArgumentsRecursive(type.details.declaredReturnType, recursionCount + 1)\n            );\n        }\n\n        return combinedList;\n    }\n\n    return [];\n}\n\n// If the class is generic, the type is cloned, and its own\n// type parameters are used as type arguments. This is useful\n// for typing \"self\" or \"cls\" within a class's implementation.\nexport function selfSpecializeClassType(type: ClassType, setSkipAbstractClassTest = false): ClassType {\n    if (!ClassType.isGeneric(type) && !setSkipAbstractClassTest) {\n        return type;\n    }\n\n    const typeArgs = ClassType.getTypeParameters(type);\n    return ClassType.cloneForSpecialization(\n        type,\n        typeArgs,\n        /* isTypeArgumentExplicit */ false,\n        setSkipAbstractClassTest\n    );\n}\n\n// Removes the first parameter of the function and returns a new function.\nexport function stripFirstParameter(type: FunctionType): FunctionType {\n    if (type.details.parameters.length > 0 && type.details.parameters[0].category === ParameterCategory.Simple) {\n        return FunctionType.clone(type, true);\n    }\n    return type;\n}\n\n// Recursively finds all of the type arguments and sets them\n// to the specified srcType.\nexport function setTypeArgumentsRecursive(destType: Type, srcType: Type, typeVarMap: TypeVarMap, recursionCount = 0) {\n    if (recursionCount > maxTypeRecursionCount) {\n        return;\n    }\n\n    if (typeVarMap.isLocked()) {\n        return;\n    }\n\n    switch (destType.category) {\n        case TypeCategory.Union:\n            destType.subtypes.forEach((subtype) => {\n                setTypeArgumentsRecursive(subtype, srcType, typeVarMap, recursionCount + 1);\n            });\n            break;\n\n        case TypeCategory.Class:\n            if (destType.typeArguments) {\n                destType.typeArguments.forEach((typeArg) => {\n                    setTypeArgumentsRecursive(typeArg, srcType, typeVarMap, recursionCount + 1);\n                });\n            }\n            if (destType.effectiveTypeArguments) {\n                destType.effectiveTypeArguments.forEach((typeArg) => {\n                    setTypeArgumentsRecursive(typeArg, srcType, typeVarMap, recursionCount + 1);\n                });\n            }\n            break;\n\n        case TypeCategory.Object:\n            setTypeArgumentsRecursive(destType.classType, srcType, typeVarMap, recursionCount + 1);\n            break;\n\n        case TypeCategory.Function:\n            if (destType.specializedTypes) {\n                destType.specializedTypes.parameterTypes.forEach((paramType) => {\n                    setTypeArgumentsRecursive(paramType, srcType, typeVarMap, recursionCount + 1);\n                });\n                if (destType.specializedTypes.returnType) {\n                    setTypeArgumentsRecursive(\n                        destType.specializedTypes.returnType,\n                        srcType,\n                        typeVarMap,\n                        recursionCount + 1\n                    );\n                }\n            } else {\n                destType.details.parameters.forEach((param) => {\n                    setTypeArgumentsRecursive(param.type, srcType, typeVarMap, recursionCount + 1);\n                });\n                if (destType.details.declaredReturnType) {\n                    setTypeArgumentsRecursive(\n                        destType.details.declaredReturnType,\n                        srcType,\n                        typeVarMap,\n                        recursionCount + 1\n                    );\n                }\n            }\n            break;\n\n        case TypeCategory.OverloadedFunction:\n            destType.overloads.forEach((subtype) => {\n                setTypeArgumentsRecursive(subtype, srcType, typeVarMap, recursionCount + 1);\n            });\n            break;\n\n        case TypeCategory.TypeVar:\n            if (!typeVarMap.hasTypeVar(destType)) {\n                typeVarMap.setTypeVar(destType, srcType, typeVarMap.isNarrowable(destType));\n            }\n            break;\n    }\n}\n\n// Builds a mapping between type parameters and their specialized\n// types. For example, if the generic type is Dict[_T1, _T2] and the\n// specialized type is Dict[str, int], it returns a map that associates\n// _T1 with str and _T2 with int.\nexport function buildTypeVarMapFromSpecializedClass(classType: ClassType, makeConcrete = true): TypeVarMap {\n    const typeParameters = ClassType.getTypeParameters(classType);\n    let typeArguments = classType.typeArguments;\n\n    // If there are no type arguments, we can either use the type variables\n    // from the type parameters (keeping the type arguments generic) or\n    // fill in concrete types.\n    if (!typeArguments && !makeConcrete) {\n        typeArguments = typeParameters;\n    }\n\n    return buildTypeVarMap(typeParameters, typeArguments);\n}\n\nexport function buildTypeVarMap(typeParameters: TypeVarType[], typeArgs: Type[] | undefined): TypeVarMap {\n    const typeVarMap = new TypeVarMap();\n    typeParameters.forEach((typeParam, index) => {\n        let typeArgType: Type;\n\n        if (typeArgs) {\n            if (index >= typeArgs.length) {\n                typeArgType = AnyType.create();\n            } else {\n                typeArgType = typeArgs[index];\n            }\n        } else {\n            typeArgType = getConcreteTypeFromTypeVar(typeParam);\n        }\n\n        typeVarMap.setTypeVar(typeParam, typeArgType, false);\n    });\n\n    return typeVarMap;\n}\n\n// If ignoreUnknown is true, an unknown base class is ignored when\n// checking for derivation. If ignoreUnknown is false, a return value\n// of true is assumed.\nexport function derivesFromClassRecursive(classType: ClassType, baseClassToFind: ClassType, ignoreUnknown: boolean) {\n    if (ClassType.isSameGenericClass(classType, baseClassToFind)) {\n        return true;\n    }\n\n    for (const baseClass of classType.details.baseClasses) {\n        if (isClass(baseClass)) {\n            if (derivesFromClassRecursive(baseClass, baseClassToFind, ignoreUnknown)) {\n                return true;\n            }\n        } else if (!ignoreUnknown && isAnyOrUnknown(baseClass)) {\n            // If the base class is unknown, we have to make a conservative assumption.\n            return true;\n        }\n    }\n\n    return false;\n}\n\n// Filters a type such that that no part of it is definitely\n// falsy. For example, if a type is a union of None\n// and an \"int\", this method would strip off the \"None\"\n// and return only the \"int\".\nexport function removeFalsinessFromType(type: Type): Type {\n    return doForSubtypes(type, (subtype) => {\n        if (isObject(subtype)) {\n            if (subtype.classType.literalValue !== undefined) {\n                // If the object is already definitely truthy, it's fine to\n                // include, otherwise it should be removed.\n                return subtype.classType.literalValue ? subtype : undefined;\n            }\n\n            // If the object is a bool, make it \"true\", since\n            // \"false\" is a falsy value.\n            if (ClassType.isBuiltIn(subtype.classType, 'bool')) {\n                return ObjectType.create(ClassType.cloneWithLiteral(subtype.classType, true));\n            }\n        }\n\n        // If it's possible for the type to be truthy, include it.\n        if (canBeTruthy(subtype)) {\n            return subtype;\n        }\n\n        return undefined;\n    });\n}\n\n// Filters a type such that that no part of it is definitely\n// truthy. For example, if a type is a union of None\n// and a custom class \"Foo\" that has no __len__ or __nonzero__\n// method, this method would strip off the \"Foo\"\n// and return only the \"None\".\nexport function removeTruthinessFromType(type: Type): Type {\n    return doForSubtypes(type, (subtype) => {\n        if (isObject(subtype)) {\n            if (subtype.classType.literalValue !== undefined) {\n                // If the object is already definitely falsy, it's fine to\n                // include, otherwise it should be removed.\n                return !subtype.classType.literalValue ? subtype : undefined;\n            }\n\n            // If the object is a bool, make it \"false\", since\n            // \"true\" is a truthy value.\n            if (ClassType.isBuiltIn(subtype.classType, 'bool')) {\n                return ObjectType.create(ClassType.cloneWithLiteral(subtype.classType, false));\n            }\n        }\n\n        // If it's possible for the type to be falsy, include it.\n        if (canBeFalsy(subtype)) {\n            return subtype;\n        }\n\n        return undefined;\n    });\n}\n\n// Returns the declared yield type if provided, or undefined otherwise.\nexport function getDeclaredGeneratorYieldType(functionType: FunctionType, iteratorType: Type): Type | undefined {\n    const returnType = FunctionType.getSpecializedReturnType(functionType);\n    if (returnType) {\n        const generatorTypeArgs = _getGeneratorReturnTypeArgs(returnType);\n\n        if (generatorTypeArgs && generatorTypeArgs.length >= 1 && isClass(iteratorType)) {\n            // The yield type is the first type arg. Wrap it in an iterator.\n            return ObjectType.create(\n                ClassType.cloneForSpecialization(\n                    iteratorType,\n                    [generatorTypeArgs[0]],\n                    /* isTypeArgumentExplicit */ true\n                )\n            );\n        }\n\n        // If the return type isn't a Generator, assume that it's the\n        // full return type.\n        return returnType;\n    }\n\n    return undefined;\n}\n\n// Returns the declared \"send\" type (the type returned from the yield\n// statement) if it was declared, or undefined otherwise.\nexport function getDeclaredGeneratorSendType(functionType: FunctionType): Type | undefined {\n    const returnType = FunctionType.getSpecializedReturnType(functionType);\n    if (returnType) {\n        const generatorTypeArgs = _getGeneratorReturnTypeArgs(returnType);\n\n        if (generatorTypeArgs && generatorTypeArgs.length >= 2) {\n            // The send type is the second type arg.\n            return generatorTypeArgs[1];\n        }\n\n        return UnknownType.create();\n    }\n\n    return undefined;\n}\n\n// Returns the declared \"return\" type (the type returned from a return statement)\n// if it was declared, or undefined otherwise.\nexport function getDeclaredGeneratorReturnType(functionType: FunctionType): Type | undefined {\n    const returnType = FunctionType.getSpecializedReturnType(functionType);\n    if (returnType) {\n        const generatorTypeArgs = _getGeneratorReturnTypeArgs(returnType);\n\n        if (generatorTypeArgs && generatorTypeArgs.length >= 3) {\n            // The send type is the third type arg.\n            return generatorTypeArgs[2];\n        }\n\n        return UnknownType.create();\n    }\n\n    return undefined;\n}\n\nexport function convertToInstance(type: Type): Type {\n    let result = doForSubtypes(type, (subtype) => {\n        subtype = transformTypeObjectToClass(subtype);\n\n        switch (subtype.category) {\n            case TypeCategory.Class: {\n                return ObjectType.create(subtype);\n            }\n\n            case TypeCategory.None: {\n                return NoneType.createInstance();\n            }\n\n            case TypeCategory.Function: {\n                if (TypeBase.isInstantiable(subtype)) {\n                    return FunctionType.cloneAsInstance(subtype);\n                }\n                break;\n            }\n\n            case TypeCategory.TypeVar: {\n                if (TypeBase.isInstantiable(subtype)) {\n                    return TypeVarType.cloneAsInstance(subtype);\n                }\n                break;\n            }\n        }\n\n        return subtype;\n    });\n\n    // Copy over any type alias information.\n    if (type.typeAliasInfo && type !== result) {\n        result = TypeBase.cloneForTypeAlias(\n            result,\n            type.typeAliasInfo.aliasName,\n            type.typeAliasInfo.typeParameters,\n            type.typeAliasInfo.typeArguments\n        );\n    }\n\n    return result;\n}\n\nexport function convertToInstantiable(type: Type): Type {\n    let result = doForSubtypes(type, (subtype) => {\n        switch (subtype.category) {\n            case TypeCategory.Object: {\n                return subtype.classType;\n            }\n\n            case TypeCategory.None: {\n                return NoneType.createType();\n            }\n\n            case TypeCategory.Function: {\n                if (TypeBase.isInstance(subtype)) {\n                    return FunctionType.cloneAsInstantiable(subtype);\n                }\n                break;\n            }\n\n            case TypeCategory.TypeVar: {\n                if (TypeBase.isInstance(subtype)) {\n                    return TypeVarType.cloneAsInstantiable(subtype);\n                }\n                break;\n            }\n        }\n\n        return subtype;\n    });\n\n    // Copy over any type alias information.\n    if (type.typeAliasInfo && type !== result) {\n        result = TypeBase.cloneForTypeAlias(\n            result,\n            type.typeAliasInfo.aliasName,\n            type.typeAliasInfo.typeParameters,\n            type.typeAliasInfo.typeArguments\n        );\n    }\n\n    return result;\n}\n\nexport function getMembersForClass(classType: ClassType, symbolTable: SymbolTable, includeInstanceVars: boolean) {\n    for (let i = classType.details.mro.length - 1; i >= 0; i--) {\n        const mroClass = classType.details.mro[i];\n\n        if (isClass(mroClass)) {\n            // Add any new member variables from this class.\n            const isClassTypedDict = ClassType.isTypedDictClass(mroClass);\n            mroClass.details.fields.forEach((symbol, name) => {\n                if (symbol.isClassMember() || (includeInstanceVars && symbol.isInstanceMember())) {\n                    if (!isClassTypedDict || !isTypedDictMemberAccessedThroughIndex(symbol)) {\n                        if (!symbolTable.get(name)) {\n                            symbolTable.set(name, symbol);\n                        }\n                    }\n                }\n            });\n        }\n    }\n\n    // Add members of the metaclass as well.\n    if (!includeInstanceVars) {\n        const metaclass = classType.details.effectiveMetaclass;\n        if (metaclass && isClass(metaclass)) {\n            for (const mroClass of metaclass.details.mro) {\n                if (isClass(mroClass)) {\n                    mroClass.details.fields.forEach((symbol, name) => {\n                        if (!symbolTable.get(name)) {\n                            symbolTable.set(name, symbol);\n                        }\n                    });\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n}\n\nexport function getMembersForModule(moduleType: ModuleType, symbolTable: SymbolTable) {\n    // Start with the loader fields. If there are any symbols of the\n    // same name defined within the module, they will overwrite the\n    // loader fields.\n    if (moduleType.loaderFields) {\n        moduleType.loaderFields.forEach((symbol, name) => {\n            symbolTable.set(name, symbol);\n        });\n    }\n\n    moduleType.fields.forEach((symbol, name) => {\n        symbolTable.set(name, symbol);\n    });\n}\n\nexport function isPartlyUnknown(type: Type, allowUnknownTypeArgsForClasses = false, recursionCount = 0): boolean {\n    if (recursionCount > maxTypeRecursionCount) {\n        return false;\n    }\n\n    if (isUnknown(type)) {\n        return true;\n    }\n\n    // See if a union contains an unknown type.\n    if (type.category === TypeCategory.Union) {\n        for (const subtype of type.subtypes) {\n            if (isPartlyUnknown(subtype, allowUnknownTypeArgsForClasses, recursionCount + 1)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    // See if an object or class has an unknown type argument.\n    if (isObject(type)) {\n        return isPartlyUnknown(type.classType, false, recursionCount + 1);\n    }\n\n    if (isClass(type)) {\n        if (type.typeArguments && !allowUnknownTypeArgsForClasses && !ClassType.isPseudoGenericClass(type)) {\n            for (const argType of type.typeArguments) {\n                if (isPartlyUnknown(argType, allowUnknownTypeArgsForClasses, recursionCount + 1)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // See if a function has an unknown type.\n    if (type.category === TypeCategory.OverloadedFunction) {\n        return type.overloads.some((overload) => {\n            return isPartlyUnknown(overload, false, recursionCount + 1);\n        });\n    }\n\n    if (type.category === TypeCategory.Function) {\n        for (let i = 0; i < type.details.parameters.length; i++) {\n            // Ignore parameters such as \"*\" that have no name.\n            if (type.details.parameters[i].name) {\n                const paramType = FunctionType.getEffectiveParameterType(type, i);\n                if (isPartlyUnknown(paramType, false, recursionCount + 1)) {\n                    return true;\n                }\n            }\n        }\n\n        if (\n            type.details.declaredReturnType &&\n            isPartlyUnknown(type.details.declaredReturnType, false, recursionCount + 1)\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return false;\n}\n\nfunction _specializeClassType(\n    classType: ClassType,\n    typeVarMap: TypeVarMap | undefined,\n    makeConcrete: boolean,\n    recursionLevel: number\n): ClassType {\n    // Handle the common case where the class has no type parameters.\n    if (ClassType.getTypeParameters(classType).length === 0 && !ClassType.isSpecialBuiltIn(classType)) {\n        return classType;\n    }\n\n    let newTypeArgs: Type[] = [];\n    let newEffectiveTypeArgs: Type[] | undefined;\n    let specializationNeeded = false;\n\n    // If type args were previously provided, specialize them.\n    if (classType.typeArguments) {\n        newTypeArgs = classType.typeArguments.map((oldTypeArgType) => {\n            const newTypeArgType = specializeType(oldTypeArgType, typeVarMap, makeConcrete, recursionLevel + 1);\n            if (newTypeArgType !== oldTypeArgType) {\n                specializationNeeded = true;\n            }\n            return newTypeArgType;\n        });\n\n        if (classType.effectiveTypeArguments) {\n            newEffectiveTypeArgs = classType.effectiveTypeArguments.map((oldTypeArgType) => {\n                const newTypeArgType = specializeType(oldTypeArgType, typeVarMap, makeConcrete, recursionLevel + 1);\n                if (newTypeArgType !== oldTypeArgType) {\n                    specializationNeeded = true;\n                }\n                return newTypeArgType;\n            });\n        }\n    } else {\n        ClassType.getTypeParameters(classType).forEach((typeParam) => {\n            let typeArgType: Type;\n\n            if (typeVarMap && typeVarMap.hasTypeVar(typeParam)) {\n                // If the type var map already contains this type var, use\n                // the existing type.\n                typeArgType = typeVarMap.getTypeVar(typeParam)!;\n                specializationNeeded = true;\n            } else {\n                // If the type var map wasn't provided or doesn't contain this\n                // type var, specialize the type var.\n                typeArgType = makeConcrete\n                    ? getConcreteTypeFromTypeVar(\n                          typeParam,\n                          /* convertConstraintsToUnion */ undefined,\n                          recursionLevel + 1\n                      )\n                    : typeParam;\n                if (typeArgType !== typeParam) {\n                    specializationNeeded = true;\n                }\n            }\n\n            newTypeArgs.push(typeArgType);\n        });\n    }\n\n    // If specialization wasn't needed, don't allocate a new class.\n    if (!specializationNeeded) {\n        return classType;\n    }\n\n    return ClassType.cloneForSpecialization(\n        classType,\n        newTypeArgs,\n        /* isTypeArgumentExplicit */ true,\n        /* skipAbstractClassTest */ undefined,\n        newEffectiveTypeArgs\n    );\n}\n\n// Converts a type var type into the most specific type\n// that fits the specified constraints.\nexport function getConcreteTypeFromTypeVar(\n    type: TypeVarType,\n    convertConstraintsToUnion = false,\n    recursionLevel = 0\n): Type {\n    if (type.details.boundType) {\n        // If this is a recursive type alias placeholder, don't continue\n        // to specialize it because it will expand it out until we hit the\n        // recursion limit.\n        if (type.details.recursiveTypeAliasName) {\n            return type.details.boundType;\n        }\n\n        return specializeType(type.details.boundType, undefined, /* makeConcrete */ false, recursionLevel + 1);\n    }\n\n    // Note that we can't use constraints for specialization because\n    // the union of constraints is not the same as individual constraints.\n    if (convertConstraintsToUnion && type.details.constraints.length > 0) {\n        return combineTypes(type.details.constraints);\n    }\n\n    // In all other cases, treat as unknown.\n    return UnknownType.create();\n}\n\nfunction _specializeOverloadedFunctionType(\n    type: OverloadedFunctionType,\n    typeVarMap: TypeVarMap | undefined,\n    makeConcrete: boolean,\n    recursionLevel: number\n): OverloadedFunctionType {\n    // Specialize each of the functions in the overload.\n    const overloads = type.overloads.map((entry) =>\n        _specializeFunctionType(entry, typeVarMap, makeConcrete, recursionLevel)\n    );\n\n    // Construct a new overload with the specialized function types.\n    const newOverloadType = OverloadedFunctionType.create();\n    overloads.forEach((overload) => {\n        OverloadedFunctionType.addOverload(newOverloadType, overload);\n    });\n\n    return newOverloadType;\n}\n\nfunction _specializeFunctionType(\n    sourceType: FunctionType,\n    typeVarMap: TypeVarMap | undefined,\n    makeConcrete: boolean,\n    recursionLevel: number\n): FunctionType {\n    let functionType = sourceType;\n\n    // Handle functions with a parameter specification in a special manner.\n    if (functionType.details.paramSpec) {\n        let paramSpec = typeVarMap?.getParamSpec(functionType.details.paramSpec);\n        if (!paramSpec && makeConcrete) {\n            paramSpec = [\n                { name: 'args', type: AnyType.create() },\n                { name: 'kwargs', type: AnyType.create() },\n            ];\n        }\n        if (paramSpec) {\n            functionType = FunctionType.cloneForParamSpec(functionType, paramSpec);\n        }\n    }\n\n    const declaredReturnType =\n        functionType.specializedTypes && functionType.specializedTypes.returnType\n            ? functionType.specializedTypes.returnType\n            : functionType.details.declaredReturnType;\n    const specializedReturnType = declaredReturnType\n        ? specializeType(declaredReturnType, typeVarMap, makeConcrete, recursionLevel + 1)\n        : undefined;\n    let typesRequiredSpecialization = declaredReturnType !== specializedReturnType;\n\n    const specializedParameters: SpecializedFunctionTypes = {\n        parameterTypes: [],\n        returnType: specializedReturnType,\n    };\n\n    for (let i = 0; i < functionType.details.parameters.length; i++) {\n        const paramType = FunctionType.getEffectiveParameterType(functionType, i);\n        const specializedType = specializeType(paramType, typeVarMap, makeConcrete, recursionLevel + 1);\n        specializedParameters.parameterTypes.push(specializedType);\n\n        if (paramType !== specializedType) {\n            typesRequiredSpecialization = true;\n        }\n    }\n\n    if (!typesRequiredSpecialization) {\n        return functionType;\n    }\n\n    let specializedInferredReturnType: Type | undefined;\n    if (functionType.inferredReturnType) {\n        specializedInferredReturnType = specializeType(\n            functionType.inferredReturnType,\n            typeVarMap,\n            makeConcrete,\n            recursionLevel + 1\n        );\n    }\n\n    return FunctionType.cloneForSpecialization(functionType, specializedParameters, specializedInferredReturnType);\n}\n\n// If the declared return type for the function is a Generator, AsyncGenerator,\n// Iterator, or AsyncIterator, returns the type arguments for the type.\nfunction _getGeneratorReturnTypeArgs(returnType: Type): Type[] | undefined {\n    if (isObject(returnType)) {\n        const classType = returnType.classType;\n        if (ClassType.isBuiltIn(classType)) {\n            const className = classType.details.name;\n            if (className === 'Generator' || className === 'AsyncGenerator') {\n                return classType.typeArguments;\n            }\n\n            if (className === 'Iterator' || className === 'AsyncIterator' || className === 'AsyncIterable') {\n                return classType.typeArguments;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function requiresTypeArguments(classType: ClassType) {\n    if (classType.details.typeParameters.length > 0) {\n        // If there are type parameters, type arguments are needed.\n        // The exception is if type parameters have been synthesized\n        // for classes that have untyped constructors.\n        return !classType.details.typeParameters[0].details.isSynthesized;\n    }\n\n    // There are a few built-in special classes that require\n    // type arguments even though typeParameters is empty.\n    if (ClassType.isBuiltIn(classType)) {\n        const specialClasses = [\n            'Tuple',\n            'Callable',\n            'Generic',\n            'Type',\n            'Optional',\n            'Union',\n            'Final',\n            'Literal',\n            'Annotated',\n            'TypeGuard',\n        ];\n        if (specialClasses.some((t) => t === classType.details.name)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function requiresSpecialization(type: Type, recursionCount = 0): boolean {\n    switch (type.category) {\n        case TypeCategory.Class: {\n            if (type.typeArguments) {\n                if (recursionCount > maxTypeRecursionCount) {\n                    return false;\n                }\n\n                return (\n                    type.typeArguments.find((typeArg) => requiresSpecialization(typeArg, recursionCount + 1)) !==\n                    undefined\n                );\n            }\n\n            // If there are any type parameters, we need to specialize\n            // since there are no corresponding type arguments.\n            return ClassType.getTypeParameters(type).length > 0;\n        }\n\n        case TypeCategory.Object: {\n            if (recursionCount > maxTypeRecursionCount) {\n                return false;\n            }\n\n            return requiresSpecialization(type.classType, recursionCount + 1);\n        }\n\n        case TypeCategory.Function: {\n            if (recursionCount > maxTypeRecursionCount) {\n                return false;\n            }\n\n            for (let i = 0; i < type.details.parameters.length; i++) {\n                if (requiresSpecialization(FunctionType.getEffectiveParameterType(type, i), recursionCount + 1)) {\n                    return true;\n                }\n            }\n\n            const declaredReturnType =\n                type.specializedTypes && type.specializedTypes.returnType\n                    ? type.specializedTypes.returnType\n                    : type.details.declaredReturnType;\n            if (declaredReturnType) {\n                if (requiresSpecialization(declaredReturnType, recursionCount + 1)) {\n                    return true;\n                }\n            } else if (type.inferredReturnType) {\n                if (requiresSpecialization(type.inferredReturnType, recursionCount + 1)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        case TypeCategory.OverloadedFunction: {\n            return (\n                type.overloads.find((overload) => requiresSpecialization(overload, recursionCount + 1)) !== undefined\n            );\n        }\n\n        case TypeCategory.Union: {\n            return type.subtypes.find((type) => requiresSpecialization(type, recursionCount + 1)) !== undefined;\n        }\n\n        case TypeCategory.TypeVar: {\n            // Most TypeVar types need to be specialized.\n            if (!type.details.recursiveTypeAliasName) {\n                return true;\n            }\n\n            // If this is a recursive type alias, it may need to be specialized\n            // if it has generic type arguments.\n            if (type.typeAliasInfo?.typeArguments) {\n                return type.typeAliasInfo.typeArguments.some((typeArg) =>\n                    requiresSpecialization(typeArg, recursionCount + 1)\n                );\n            }\n        }\n    }\n\n    return false;\n}\n\n// Computes the method resolution ordering for a class whose base classes\n// have already been filled in. The algorithm for computing MRO is described\n// here: https://www.python.org/download/releases/2.3/mro/. It returns true\n// if an MRO was possible, false otherwise.\nexport function computeMroLinearization(classType: ClassType): boolean {\n    let isMroFound = true;\n\n    // Construct the list of class lists that need to be merged.\n    const classListsToMerge: Type[][] = [];\n\n    // Remove any Generic class. It appears not to participate in MRO calculations.\n    const baseClassesToInclude = classType.details.baseClasses.filter(\n        (baseClass) => !isClass(baseClass) || !ClassType.isBuiltIn(baseClass, 'Generic')\n    );\n\n    baseClassesToInclude.forEach((baseClass) => {\n        if (isClass(baseClass)) {\n            const typeVarMap = buildTypeVarMapFromSpecializedClass(baseClass, /* makeConcrete */ false);\n            classListsToMerge.push(\n                baseClass.details.mro.map((mroClass) => {\n                    return specializeType(mroClass, typeVarMap);\n                })\n            );\n        } else {\n            classListsToMerge.push([baseClass]);\n        }\n    });\n\n    classListsToMerge.push(\n        baseClassesToInclude.map((baseClass) => {\n            const typeVarMap = buildTypeVarMapFromSpecializedClass(classType, /* makeConcrete */ false);\n            return specializeType(baseClass, typeVarMap);\n        })\n    );\n\n    // The first class in the MRO is the class itself.\n    const typeVarMap = buildTypeVarMapFromSpecializedClass(classType, /* makeConcrete */ false);\n    classType.details.mro.push(specializeType(classType, typeVarMap));\n\n    // Helper function that returns true if the specified searchClass\n    // is found in the \"tail\" (i.e. in elements 1 through n) of any\n    // of the class lists.\n    const isInTail = (searchClass: ClassType, classLists: Type[][]) => {\n        return classLists.some((classList) => {\n            return (\n                classList.findIndex(\n                    (value) => isClass(value) && ClassType.isSameGenericClass(value, searchClass, false)\n                ) > 0\n            );\n        });\n    };\n\n    const filterClass = (classToFilter: ClassType, classLists: Type[][]) => {\n        for (let i = 0; i < classLists.length; i++) {\n            classLists[i] = classLists[i].filter(\n                (value) => !isClass(value) || !ClassType.isSameGenericClass(value, classToFilter, false)\n            );\n        }\n    };\n\n    while (true) {\n        let foundValidHead = false;\n        let nonEmptyList: Type[] | undefined = undefined;\n\n        for (let i = 0; i < classListsToMerge.length; i++) {\n            const classList = classListsToMerge[i];\n\n            if (classList.length > 0) {\n                if (nonEmptyList === undefined) {\n                    nonEmptyList = classList;\n                }\n\n                if (!isClass(classList[0])) {\n                    foundValidHead = true;\n                    classType.details.mro.push(classList[0]);\n                    classList.shift();\n                    break;\n                } else if (!isInTail(classList[0], classListsToMerge)) {\n                    foundValidHead = true;\n                    classType.details.mro.push(classList[0]);\n                    filterClass(classList[0], classListsToMerge);\n                    break;\n                }\n            }\n        }\n\n        // If all lists are empty, we are done.\n        if (!nonEmptyList) {\n            break;\n        }\n\n        // We made it all the way through the list of class lists without\n        // finding a valid head, but there is at least one list that's not\n        // yet empty. This means there's no valid MRO order.\n        if (!foundValidHead) {\n            isMroFound = false;\n\n            // Handle the situation by pull the head off the first empty list.\n            // This allows us to make forward progress.\n            if (!isClass(nonEmptyList[0])) {\n                classType.details.mro.push(nonEmptyList[0]);\n                nonEmptyList.shift();\n            } else {\n                classType.details.mro.push(nonEmptyList[0]);\n                filterClass(nonEmptyList[0], classListsToMerge);\n            }\n        }\n    }\n\n    return isMroFound;\n}\n\nexport function printLiteralValue(type: ClassType): string {\n    const literalValue = type.literalValue;\n    if (literalValue === undefined) {\n        return '';\n    }\n\n    let literalStr: string;\n    if (typeof literalValue === 'string') {\n        const prefix = type.details.name === 'bytes' ? 'b' : '';\n        literalStr = literalValue.toString();\n        if (literalStr.indexOf('\\n') >= 0) {\n            literalStr = `${prefix}'''${literalStr.replace(tripleTickRegEx, \"\\\\'\\\\'\\\\'\")}'''`;\n        } else {\n            literalStr = `${prefix}'${literalStr.replace(singleTickRegEx, \"\\\\'\")}'`;\n        }\n    } else if (typeof literalValue === 'boolean') {\n        literalStr = literalValue ? 'True' : 'False';\n    } else if (literalValue instanceof EnumLiteral) {\n        literalStr = `${literalValue.className}.${literalValue.itemName}`;\n    } else {\n        literalStr = literalValue.toString();\n    }\n\n    return literalStr;\n}\n\n// Returns zero or more unique module names that point to the place(s)\n// where the type is declared. Unions, for example, can result in more\n// than one result. Type arguments are not included.\nexport function getDeclaringModulesForType(type: Type): string[] {\n    const moduleList: string[] = [];\n    addDeclaringModuleNamesForType(type, moduleList);\n    return moduleList;\n}\n\nfunction addDeclaringModuleNamesForType(type: Type, moduleList: string[], recursionCount = 0) {\n    if (recursionCount > maxTypeRecursionCount) {\n        return;\n    }\n\n    const addIfUnique = (moduleName: string) => {\n        if (moduleName && !moduleList.some((n) => n === moduleName)) {\n            moduleList.push(moduleName);\n        }\n    };\n\n    switch (type.category) {\n        case TypeCategory.Class: {\n            addIfUnique(type.details.moduleName);\n            break;\n        }\n\n        case TypeCategory.Object: {\n            addIfUnique(type.classType.details.moduleName);\n            break;\n        }\n\n        case TypeCategory.Function: {\n            addIfUnique(type.details.moduleName);\n            break;\n        }\n\n        case TypeCategory.OverloadedFunction: {\n            type.overloads.forEach((overload) => {\n                addDeclaringModuleNamesForType(overload, moduleList, recursionCount + 1);\n            });\n            break;\n        }\n\n        case TypeCategory.Union: {\n            type.subtypes.forEach((subtype) => {\n                addDeclaringModuleNamesForType(subtype, moduleList, recursionCount + 1);\n            });\n            break;\n        }\n\n        case TypeCategory.Module: {\n            addIfUnique(type.moduleName);\n            break;\n        }\n    }\n}\n","/*\n * typeVarMap.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Module that records the relationship between named TypeVars\n * (type variables) and their types. It is used by the type\n * evaluator to \"solve\" for the type of each type variable.\n */\n\nimport { assert } from '../common/debug';\nimport { ClassType, maxTypeRecursionCount, ParamSpecEntry, Type, TypeCategory, TypeVarType } from './types';\n\nexport interface TypeVarMapEntry {\n    typeVar: TypeVarType;\n    type: Type;\n}\n\nexport interface ParamSpecMapEntry {\n    paramSpec: TypeVarType;\n    type: ParamSpecEntry[];\n}\n\nexport class TypeVarMap {\n    private _typeVarMap: Map<string, TypeVarMapEntry>;\n    private _paramSpecMap: Map<string, ParamSpecMapEntry>;\n    private _isNarrowableMap: Map<string, boolean>;\n    private _isLocked = false;\n\n    constructor() {\n        this._typeVarMap = new Map<string, TypeVarMapEntry>();\n        this._paramSpecMap = new Map<string, ParamSpecMapEntry>();\n        this._isNarrowableMap = new Map<string, boolean>();\n    }\n\n    clone() {\n        const newTypeVarMap = new TypeVarMap();\n\n        this._typeVarMap.forEach((value) => {\n            newTypeVarMap.setTypeVar(value.typeVar, value.type, this.isNarrowable(value.typeVar));\n        });\n\n        this._paramSpecMap.forEach((value) => {\n            newTypeVarMap.setParamSpec(value.paramSpec, value.type);\n        });\n\n        newTypeVarMap._isLocked = this._isLocked;\n\n        return newTypeVarMap;\n    }\n\n    // Copies a cloned type var map back into this object.\n    copyFromClone(clone: TypeVarMap) {\n        this._typeVarMap = clone._typeVarMap;\n        this._paramSpecMap = clone._paramSpecMap;\n        this._isNarrowableMap = clone._isNarrowableMap;\n        this._isLocked = clone._isLocked;\n    }\n\n    // Provides a \"score\" - a value that values completeness (number\n    // of type variables that are assigned) and completeness.\n    getScore() {\n        let score = 0;\n\n        // Sum the scores for the defined type vars.\n        this._typeVarMap.forEach((value) => {\n            // Add 1 to the score for each type variable defined.\n            score += 1;\n\n            // Add a fractional amount based on the complexity of the definition.\n            // The more complex, the lower the score. In the spirit of Occam's\n            // Razor, we always want to favor simple answers.\n            score += this._getComplexityScoreForType(value.type);\n        });\n\n        score += this._paramSpecMap.size;\n\n        return score;\n    }\n\n    hasTypeVar(reference: TypeVarType): boolean {\n        return this._typeVarMap.has(this._getKey(reference));\n    }\n\n    getTypeVar(reference: TypeVarType): Type | undefined {\n        return this._typeVarMap.get(this._getKey(reference))?.type;\n    }\n\n    setTypeVar(reference: TypeVarType, type: Type, isNarrowable: boolean) {\n        assert(!this._isLocked);\n        const key = this._getKey(reference);\n        this._typeVarMap.set(key, { typeVar: reference, type });\n        this._isNarrowableMap.set(key, isNarrowable);\n    }\n\n    getTypeVars(): TypeVarMapEntry[] {\n        const entries: TypeVarMapEntry[] = [];\n\n        this._typeVarMap.forEach((entry) => {\n            entries.push(entry);\n        });\n\n        return entries;\n    }\n\n    hasParamSpec(reference: TypeVarType): boolean {\n        return this._paramSpecMap.has(this._getKey(reference));\n    }\n\n    getParamSpec(reference: TypeVarType): ParamSpecEntry[] | undefined {\n        return this._paramSpecMap.get(this._getKey(reference))?.type;\n    }\n\n    setParamSpec(reference: TypeVarType, type: ParamSpecEntry[]) {\n        assert(!this._isLocked);\n        this._paramSpecMap.set(this._getKey(reference), { paramSpec: reference, type });\n    }\n\n    typeVarCount() {\n        return this._typeVarMap.size;\n    }\n\n    isNarrowable(reference: TypeVarType): boolean {\n        const key = this._getKey(reference);\n\n        return this._isNarrowableByKey(key);\n    }\n\n    lock() {\n        // Locks the type var map, preventing any further changes.\n        assert(!this._isLocked);\n        this._isLocked = true;\n    }\n\n    isLocked(): boolean {\n        return this._isLocked;\n    }\n\n    private _getKey(reference: TypeVarType) {\n        return reference.scopeName || reference.details.name;\n    }\n\n    private _isNarrowableByKey(key: string) {\n        const isNarrowable = this._isNarrowableMap.get(key);\n\n        // Unless told otherwise, assume type is narrowable.\n        return isNarrowable !== undefined ? isNarrowable : true;\n    }\n\n    // Returns a \"score\" for a type that captures the relative complexity\n    // of the type. Scores should all be between 0 and 1 where 0 means\n    // very complex and 1 means simple. This is a heuristic, so there's\n    // often no objectively correct answer.\n    private _getComplexityScoreForType(type: Type, recursionCount = 0): number {\n        if (recursionCount > maxTypeRecursionCount) {\n            return 0;\n        }\n\n        switch (type.category) {\n            case TypeCategory.Function:\n            case TypeCategory.OverloadedFunction: {\n                // For now, return a constant for functions. We may want\n                // to make this heuristic in the future.\n                return 0.5;\n            }\n\n            case TypeCategory.Union: {\n                let minScore = 1;\n                type.subtypes.forEach((subtype) => {\n                    const subtypeScore = this._getComplexityScoreForType(subtype, recursionCount + 1);\n                    if (subtypeScore < minScore) {\n                        minScore = subtypeScore;\n                    }\n                });\n\n                // Assume that a union is more complex than a non-union,\n                // and return half of the minimum score of the subtypes.\n                return minScore / 2;\n            }\n\n            case TypeCategory.Class: {\n                // Score a class as 0.5 plus half of the average complexity\n                // score of its type arguments.\n                return this._getComplexityScoreForClass(type, recursionCount + 1);\n            }\n\n            case TypeCategory.Object: {\n                return this._getComplexityScoreForClass(type.classType, recursionCount + 1);\n            }\n        }\n\n        // For all other types, return a score of 0.\n        return 0;\n    }\n\n    private _getComplexityScoreForClass(classType: ClassType, recursionCount: number): number {\n        let typeArgScoreSum = 0;\n        let typeArgCount = 0;\n\n        if (classType.typeArguments) {\n            classType.typeArguments.forEach((type) => {\n                typeArgScoreSum += this._getComplexityScoreForType(type, recursionCount + 1);\n                typeArgCount++;\n            });\n        }\n\n        let score = 0.5;\n        if (typeArgCount > 0) {\n            score += (typeArgScoreSum / typeArgCount) * 0.5;\n        }\n\n        return score;\n    }\n}\n","/*\n * types.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Representation of types used during type analysis within Python.\n */\n\nimport { assert } from '../common/debug';\nimport { ParameterCategory } from '../parser/parseNodes';\nimport { FunctionDeclaration } from './declaration';\nimport { Symbol, SymbolTable } from './symbol';\n\nexport const enum TypeCategory {\n    // Name is not bound to a value of any type.\n    Unbound,\n\n    // Type exists but is not currently known by the\n    // type analyzer (e.g. there is no available typings file).\n    // Unknown types are treated the same as \"Any\" at analysis time.\n    Unknown,\n\n    // Type can be anything.\n    Any,\n\n    // Special \"None\" type defined in Python.\n    None,\n\n    // Used in type constraints to indicate that all possible\n    // union types have been filtered, and execution should never\n    // get to this point.\n    Never,\n\n    // Callable type with typed input parameters and return parameter.\n    Function,\n\n    // Functions defined with @overload decorator in stub files that\n    // have multiple function declarations for a common implementation.\n    OverloadedFunction,\n\n    // Class definition, including associated instance methods,\n    // class methods, static methods, properties, and variables.\n    Class,\n\n    // Class instance.\n    Object,\n\n    // Module instance.\n    Module,\n\n    // Composite type (e.g. Number OR String OR None).\n    Union,\n\n    // Type variable (defined with TypeVar)\n    TypeVar,\n}\n\nexport const enum TypeFlags {\n    None = 0,\n\n    // This type refers to something that can be instantiated.\n    Instantiable = 1 << 0,\n\n    // This type refers to something that has been instantiated.\n    Instance = 1 << 1,\n}\n\nexport type Type =\n    | UnboundType\n    | UnknownType\n    | AnyType\n    | NoneType\n    | NeverType\n    | FunctionType\n    | OverloadedFunctionType\n    | ClassType\n    | ObjectType\n    | ModuleType\n    | UnionType\n    | TypeVarType;\n\nexport class EnumLiteral {\n    constructor(public className: string, public itemName: string) {}\n}\n\nexport type LiteralValue = number | boolean | string | EnumLiteral;\n\nexport type TypeSourceId = string | undefined;\nexport const maxTypeRecursionCount = 16;\n\nexport type InheritanceChain = (ClassType | UnknownType)[];\n\ninterface TypeAliasInfo {\n    aliasName: string;\n    typeParameters?: TypeVarType[];\n    typeArguments?: Type[];\n}\n\ninterface TypeBase {\n    category: TypeCategory;\n    flags: TypeFlags;\n    typeAliasInfo?: TypeAliasInfo;\n}\n\nexport namespace TypeBase {\n    export function isInstantiable(type: TypeBase) {\n        return (type.flags & TypeFlags.Instantiable) !== 0;\n    }\n\n    export function isInstance(type: TypeBase) {\n        return (type.flags & TypeFlags.Instance) !== 0;\n    }\n\n    export function cloneForTypeAlias(type: Type, name: string, typeParams?: TypeVarType[], typeArgs?: Type[]): Type {\n        const typeClone = { ...type };\n\n        typeClone.typeAliasInfo = {\n            aliasName: name,\n            typeParameters: typeParams,\n            typeArguments: typeArgs,\n        };\n\n        return typeClone;\n    }\n}\n\nexport interface UnboundType extends TypeBase {\n    category: TypeCategory.Unbound;\n}\n\nexport namespace UnboundType {\n    const _instance: UnboundType = {\n        category: TypeCategory.Unbound,\n        flags: TypeFlags.Instantiable | TypeFlags.Instance,\n    };\n\n    export function create() {\n        // All Unbound objects are the same, so use a shared instance.\n        return _instance;\n    }\n}\n\nexport interface UnknownType extends TypeBase {\n    category: TypeCategory.Unknown;\n}\n\nexport namespace UnknownType {\n    const _instance: UnknownType = {\n        category: TypeCategory.Unknown,\n        flags: TypeFlags.Instantiable | TypeFlags.Instance,\n    };\n\n    export function create() {\n        // All Unknown objects are the same, so use a shared instance.\n        return _instance;\n    }\n}\n\nexport interface ModuleType extends TypeBase {\n    category: TypeCategory.Module;\n    fields: SymbolTable;\n    docString?: string;\n\n    // A \"loader\" module includes symbols that were injected by\n    // the module loader. We keep these separate so we don't\n    // pollute the symbols exported by the module itself.\n    loaderFields: SymbolTable;\n\n    // The period-delimited import name of this module.\n    moduleName: string;\n}\n\nexport namespace ModuleType {\n    export function create(moduleName: string, symbolTable?: SymbolTable) {\n        const newModuleType: ModuleType = {\n            category: TypeCategory.Module,\n            fields: symbolTable || new Map<string, Symbol>(),\n            loaderFields: new Map<string, Symbol>(),\n            flags: TypeFlags.Instantiable | TypeFlags.Instantiable,\n            moduleName,\n        };\n        return newModuleType;\n    }\n\n    export function getField(moduleType: ModuleType, name: string): Symbol | undefined {\n        // Always look for the symbol in the module's fields before consulting\n        // the loader fields. The loader runs before the module, so its values\n        // will be overwritten by the module.\n        let symbol = moduleType.fields.get(name);\n\n        if (!symbol && moduleType.loaderFields) {\n            symbol = moduleType.loaderFields.get(name);\n        }\n        return symbol;\n    }\n}\n\nexport interface DataClassEntry {\n    name: string;\n    hasDefault: boolean;\n    includeInInit: boolean;\n    type: Type;\n}\n\nexport interface TypedDictEntry {\n    valueType: Type;\n    isRequired: boolean;\n    isProvided: boolean;\n}\n\nexport const enum ClassTypeFlags {\n    None = 0,\n\n    // Class is defined in the \"builtins\" or \"typing\" file.\n    BuiltInClass = 1 << 0,\n\n    // Class requires special-case handling because it\n    // exhibits non-standard behavior or is not defined\n    // formally as a class. Examples include 'Optional'\n    // and 'Union'.\n    SpecialBuiltIn = 1 << 1,\n\n    // Introduced in Python 3.7 - class either derives directly\n    // from NamedTuple or has a @dataclass class decorator.\n    DataClass = 1 << 2,\n\n    // Flags that control whether methods should be\n    // synthesized for a dataclass class.\n    SkipSynthesizedInit = 1 << 3,\n\n    // Introduced in PEP 589, TypedDict classes provide a way\n    // to specify type hints for dictionaries with different\n    // value types and a limited set of static keys.\n    TypedDictClass = 1 << 4,\n\n    // Used in conjunction with TypedDictClass, indicates that\n    // the dictionary values can be omitted.\n    CanOmitDictValues = 1 << 5,\n\n    // The class has a metaclass of EnumMet or derives from\n    // a class that has this metaclass.\n    EnumClass = 1 << 6,\n\n    // The class derives from a class that has the ABCMeta\n    // metaclass. Such classes are allowed to contain\n    // @abstractmethod decorators.\n    SupportsAbstractMethods = 1 << 7,\n\n    // The class has at least one abstract method or derives\n    // from a base class that is abstract without providing\n    // non-abstract overrides for all abstract methods.\n    HasAbstractMethods = 1 << 8,\n\n    // Derives from property class and has the semantics of\n    // a property (with optional setter, deleter).\n    PropertyClass = 1 << 9,\n\n    // The class is decorated with a \"@final\" decorator\n    // indicating that it cannot be subclassed.\n    Final = 1 << 10,\n\n    // The class derives directly from \"Protocol\".\n    ProtocolClass = 1 << 11,\n\n    // A class whose constructor (__init__ method) does not have\n    // annotated types and is treated as though each parameter\n    // is a generic type for purposes of type inference.\n    PseudoGenericClass = 1 << 12,\n\n    // A protocol class that is \"runtime checkable\" can be used\n    // in an isinstance call.\n    RuntimeCheckable = 1 << 13,\n\n    // The type is defined in the typing_extensions.pyi file.\n    TypingExtensionClass = 1 << 14,\n\n    // The class type is in the process of being constructed and\n    // is not yet complete. This allows us to detect cases where\n    // the class refers to itself (e.g. uses itself as a type\n    // argument to one of its generic base classes).\n    PartiallyConstructed = 1 << 15,\n}\n\ninterface ClassDetails {\n    name: string;\n    fullName: string;\n    moduleName: string;\n    flags: ClassTypeFlags;\n    typeSourceId: TypeSourceId;\n    baseClasses: Type[];\n    mro: Type[];\n    declaredMetaclass?: ClassType | UnknownType;\n    effectiveMetaclass?: ClassType | UnknownType;\n    aliasClass?: ClassType;\n    fields: SymbolTable;\n    typeParameters: TypeVarType[];\n    docString?: string;\n    dataClassEntries?: DataClassEntry[];\n    typedDictEntries?: Map<string, TypedDictEntry>;\n}\n\nexport interface ClassType extends TypeBase {\n    category: TypeCategory.Class;\n\n    details: ClassDetails;\n\n    // A generic class that has been completely or partially\n    // specialized will have type arguments that correspond to\n    // some or all of the type parameters.\n    typeArguments?: Type[];\n\n    // For a few classes (e.g., Tuple and tuple), the class definition\n    // calls for a single type parameter but the spec allows the programmer\n    // to provide variadic type arguments. To make these compatible, we need\n    // to derive a single effective type argument from the provided type\n    // arguments.\n    effectiveTypeArguments?: Type[];\n\n    // If type arguments are present, were they explicit (i.e.\n    // provided explicitly in the code)?\n    isTypeArgumentExplicit?: boolean;\n\n    skipAbstractClassTest: boolean;\n\n    // Some types can be further constrained to have\n    // literal types (e.g. true or 'string' or 3).\n    literalValue?: LiteralValue;\n}\n\nexport namespace ClassType {\n    export function create(\n        name: string,\n        fullName: string,\n        moduleName: string,\n        flags: ClassTypeFlags,\n        typeSourceId: TypeSourceId,\n        declaredMetaclass: ClassType | UnknownType | undefined,\n        effectiveMetaclass: ClassType | UnknownType | undefined,\n        docString?: string\n    ) {\n        const newClass: ClassType = {\n            category: TypeCategory.Class,\n            details: {\n                name,\n                fullName,\n                moduleName,\n                flags,\n                typeSourceId,\n                baseClasses: [],\n                declaredMetaclass,\n                effectiveMetaclass,\n                mro: [],\n                fields: new Map<string, Symbol>(),\n                typeParameters: [],\n                docString,\n            },\n            skipAbstractClassTest: false,\n            flags: TypeFlags.Instantiable,\n        };\n\n        return newClass;\n    }\n\n    export function cloneForSpecialization(\n        classType: ClassType,\n        typeArguments: Type[] | undefined,\n        isTypeArgumentExplicit: boolean,\n        skipAbstractClassTest = false,\n        effectiveTypeArguments?: Type[]\n    ): ClassType {\n        const newClassType = create(\n            classType.details.name,\n            classType.details.fullName,\n            classType.details.moduleName,\n            classType.details.flags,\n            classType.details.typeSourceId,\n            classType.details.declaredMetaclass,\n            classType.details.effectiveMetaclass\n        );\n\n        newClassType.details = classType.details;\n        if (typeArguments) {\n            newClassType.typeArguments = typeArguments;\n        }\n        newClassType.isTypeArgumentExplicit = isTypeArgumentExplicit;\n        if (effectiveTypeArguments) {\n            newClassType.effectiveTypeArguments = effectiveTypeArguments;\n        }\n\n        if (classType.literalValue !== undefined) {\n            newClassType.literalValue = classType.literalValue;\n        }\n\n        if (classType.typeAliasInfo !== undefined) {\n            newClassType.typeAliasInfo = classType.typeAliasInfo;\n        }\n\n        if (skipAbstractClassTest) {\n            newClassType.skipAbstractClassTest = true;\n        }\n\n        return newClassType;\n    }\n\n    export function cloneWithLiteral(classType: ClassType, value: LiteralValue | undefined): ClassType {\n        const newClassType = create(\n            classType.details.name,\n            classType.details.fullName,\n            classType.details.moduleName,\n            classType.details.flags,\n            classType.details.typeSourceId,\n            classType.details.declaredMetaclass,\n            classType.details.effectiveMetaclass\n        );\n        newClassType.details = classType.details;\n        if (classType.typeArguments) {\n            newClassType.typeArguments = classType.typeArguments;\n        }\n        if (value !== undefined) {\n            newClassType.literalValue = value;\n        }\n        if (classType.typeAliasInfo !== undefined) {\n            newClassType.typeAliasInfo = classType.typeAliasInfo;\n        }\n        if (classType.skipAbstractClassTest) {\n            newClassType.skipAbstractClassTest = true;\n        }\n        return newClassType;\n    }\n\n    export function isLiteralValueSame(type1: ClassType, type2: ClassType) {\n        if (type1.literalValue === undefined) {\n            return type2.literalValue === undefined;\n        } else if (type2.literalValue === undefined) {\n            return false;\n        }\n\n        if (type1.literalValue instanceof EnumLiteral) {\n            if (type2.literalValue instanceof EnumLiteral) {\n                return type1.literalValue.itemName === type2.literalValue.itemName;\n            }\n            return false;\n        }\n\n        return type1.literalValue === type2.literalValue;\n    }\n\n    // Specifies whether the class type is generic (unspecialized)\n    // or specialized.\n    export function isGeneric(classType: ClassType) {\n        return classType.details.typeParameters.length > 0 && classType.typeArguments === undefined;\n    }\n\n    export function isSpecialBuiltIn(classType: ClassType, className?: string) {\n        if (!(classType.details.flags & ClassTypeFlags.SpecialBuiltIn)) {\n            return false;\n        }\n\n        if (className !== undefined) {\n            return classType.details.name === className;\n        }\n\n        return true;\n    }\n\n    export function isBuiltIn(classType: ClassType, className?: string) {\n        if (!(classType.details.flags & ClassTypeFlags.BuiltInClass)) {\n            return false;\n        }\n\n        if (className !== undefined) {\n            return classType.details.name === className;\n        }\n\n        return true;\n    }\n\n    export function hasAbstractMethods(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.HasAbstractMethods) && !classType.skipAbstractClassTest;\n    }\n\n    export function supportsAbstractMethods(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.SupportsAbstractMethods);\n    }\n\n    export function isDataClass(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.DataClass);\n    }\n\n    export function isSkipSynthesizedInit(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.SkipSynthesizedInit);\n    }\n\n    export function isTypedDictClass(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.TypedDictClass);\n    }\n\n    export function isCanOmitDictValues(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.CanOmitDictValues);\n    }\n\n    export function isEnumClass(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.EnumClass);\n    }\n\n    export function isPropertyClass(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.PropertyClass);\n    }\n\n    export function isFinal(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.Final);\n    }\n\n    export function isProtocolClass(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.ProtocolClass);\n    }\n\n    export function isPseudoGenericClass(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.PseudoGenericClass);\n    }\n\n    export function getDataClassEntries(classType: ClassType): DataClassEntry[] {\n        return classType.details.dataClassEntries || [];\n    }\n\n    export function isRuntimeCheckable(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.RuntimeCheckable);\n    }\n\n    export function isTypingExtensionClass(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.TypingExtensionClass);\n    }\n\n    export function isPartiallyConstructed(classType: ClassType) {\n        return !!(classType.details.flags & ClassTypeFlags.PartiallyConstructed);\n    }\n\n    export function getAliasClass(classType: ClassType): ClassType {\n        return classType.details.aliasClass || classType;\n    }\n\n    export function getTypeParameters(classType: ClassType) {\n        return getAliasClass(classType).details.typeParameters;\n    }\n\n    export function hasUnknownBaseClass(classType: ClassType) {\n        return classType.details.mro.some((baseClass) => isAnyOrUnknown(baseClass));\n    }\n\n    // Same as isSame except that it doesn't compare type arguments.\n    export function isSameGenericClass(\n        classType: ClassType,\n        type2: ClassType,\n        treatAliasAsSame = true,\n        recursionCount = 0\n    ) {\n        if (recursionCount > maxTypeRecursionCount) {\n            return true;\n        }\n\n        // If the class details match, it's definitely the same class.\n        if (classType.details === type2.details) {\n            return true;\n        }\n\n        // If either or both have aliases (e.g. List -> list), use the\n        // aliases for comparison purposes.\n        const class1Details =\n            treatAliasAsSame && classType.details.aliasClass ? classType.details.aliasClass.details : classType.details;\n        const class2Details =\n            treatAliasAsSame && type2.details.aliasClass ? type2.details.aliasClass.details : type2.details;\n\n        if (class1Details === class2Details) {\n            return true;\n        }\n\n        // Compare most of the details fields. We intentionally skip the isAbstractClass\n        // flag because it gets set dynamically.\n        if (\n            class1Details.name !== class2Details.name ||\n            class1Details.flags !== class2Details.flags ||\n            class1Details.typeSourceId !== class2Details.typeSourceId ||\n            class1Details.baseClasses.length !== class2Details.baseClasses.length ||\n            class1Details.typeParameters.length !== class2Details.typeParameters.length\n        ) {\n            return false;\n        }\n\n        for (let i = 0; i < class1Details.baseClasses.length; i++) {\n            if (!isTypeSame(class1Details.baseClasses[i], class2Details.baseClasses[i], recursionCount + 1)) {\n                return false;\n            }\n        }\n\n        if (class1Details.declaredMetaclass || class2Details.declaredMetaclass) {\n            if (\n                !class1Details.declaredMetaclass ||\n                !class2Details.declaredMetaclass ||\n                !isTypeSame(class1Details.declaredMetaclass, class2Details.declaredMetaclass)\n            ) {\n                return false;\n            }\n        }\n\n        for (let i = 0; i < class1Details.typeParameters.length; i++) {\n            if (!isTypeSame(class1Details.typeParameters[i], class2Details.typeParameters[i], recursionCount + 1)) {\n                return false;\n            }\n        }\n\n        const dataClassEntries1 = class1Details.dataClassEntries || [];\n        const dataClassEntries2 = class2Details.dataClassEntries || [];\n        if (dataClassEntries1.length !== dataClassEntries2.length) {\n            return false;\n        }\n\n        for (let i = 0; i < dataClassEntries1.length; i++) {\n            if (\n                dataClassEntries1[i].name !== dataClassEntries2[i].name ||\n                dataClassEntries1[i].hasDefault !== dataClassEntries2[i].hasDefault ||\n                !isTypeSame(dataClassEntries1[i].type, dataClassEntries2[i].type, recursionCount + 1)\n            ) {\n                return false;\n            }\n        }\n\n        // If the two types don't have the same symbol table, they are probably\n        // using synthesized (undeclared) symbols. Make sure that they contain the\n        // same number of symbols and types.\n        if (class1Details.fields !== class2Details.fields) {\n            if (class1Details.fields.size !== class2Details.fields.size) {\n                return false;\n            }\n\n            let symbolsMatch = true;\n            class1Details.fields.forEach((symbol1, name) => {\n                const symbol2 = class2Details.fields.get(name);\n                if (!symbol2) {\n                    symbolsMatch = false;\n                } else {\n                    const symbol1Type = symbol1.getSynthesizedType() || UnknownType.create();\n                    const symbol2Type = symbol2.getSynthesizedType() || UnknownType.create();\n                    if (!isTypeSame(symbol1Type, symbol2Type, recursionCount + 1)) {\n                        symbolsMatch = false;\n                    }\n                }\n            });\n\n            if (!symbolsMatch) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    // Determines whether this is a subclass (derived class)\n    // of the specified class. If the caller passes an empty\n    // array to inheritanceChain, it will be filled in by\n    // the call to include the chain of inherited classes starting\n    // with type2 and ending with this type.\n    export function isDerivedFrom(\n        subclassType: ClassType,\n        parentClassType: ClassType,\n        inheritanceChain?: InheritanceChain\n    ): boolean {\n        // Is it the exact same class?\n        if (isSameGenericClass(subclassType, parentClassType)) {\n            if (inheritanceChain) {\n                inheritanceChain.push(subclassType);\n            }\n            return true;\n        }\n\n        // Handle built-in types like 'dict' and 'list', which are all\n        // subclasses of object even though they are not explicitly declared\n        // that way.\n        if (isBuiltIn(subclassType) && isBuiltIn(parentClassType, 'object')) {\n            if (inheritanceChain) {\n                inheritanceChain.push(parentClassType);\n            }\n            return true;\n        }\n\n        const aliasedSubclass = subclassType.details.aliasClass || subclassType;\n        for (const baseClass of aliasedSubclass.details.baseClasses) {\n            if (isClass(baseClass)) {\n                if (isDerivedFrom(baseClass, parentClassType, inheritanceChain)) {\n                    if (inheritanceChain) {\n                        inheritanceChain.push(subclassType);\n                    }\n                    return true;\n                }\n            } else if (isAnyOrUnknown(baseClass)) {\n                if (inheritanceChain) {\n                    inheritanceChain.push(UnknownType.create());\n                }\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n\nexport interface ObjectType extends TypeBase {\n    category: TypeCategory.Object;\n\n    classType: ClassType;\n}\n\nexport namespace ObjectType {\n    export function create(classType: ClassType) {\n        const newObjectType: ObjectType = {\n            category: TypeCategory.Object,\n            classType,\n            flags: TypeFlags.Instance,\n        };\n        return newObjectType;\n    }\n}\n\nexport interface FunctionParameter {\n    category: ParameterCategory;\n    name?: string;\n    isNameSynthesized?: boolean;\n    isTypeInferred?: boolean;\n    hasDefault?: boolean;\n    defaultType?: Type;\n    hasDeclaredType?: boolean;\n    type: Type;\n}\n\nexport const enum FunctionTypeFlags {\n    None = 0,\n\n    // Function is a __new__ method; first parameter is \"cls\"\n    ConstructorMethod = 1 << 0,\n\n    // Function is decorated with @classmethod; first parameter is \"cls\";\n    // can be bound to associated class\n    ClassMethod = 1 << 1,\n\n    // Function is decorated with @staticmethod; cannot be bound to class\n    StaticMethod = 1 << 2,\n\n    // Function is decorated with @abstractmethod\n    AbstractMethod = 1 << 3,\n\n    // Function contains \"yield\" or \"yield from\" statements\n    Generator = 1 << 4,\n\n    // Skip check that validates that all parameters without default\n    // value expressions have corresponding arguments; used for\n    // named tuples in some cases\n    DisableDefaultChecks = 1 << 5,\n\n    // Method has no declaration in user code, it's synthesized; used\n    // for implied methods such as those used in namedtuple, dataclass, etc.\n    SynthesizedMethod = 1 << 6,\n\n    // For some synthesized classes (in particular, NamedTuple), the\n    // __init__ method is created with default parameters, so we will\n    // skip the constructor check for these methods.\n    SkipConstructorCheck = 1 << 7,\n\n    // Function is decorated with @overload\n    Overloaded = 1 << 8,\n\n    // Function is declared with async keyword\n    Async = 1 << 9,\n\n    // Indicates that return type should be wrapped in an awaitable type\n    WrapReturnTypeInAwait = 1 << 10,\n\n    // Function is declared within a type stub fille\n    StubDefinition = 1 << 11,\n\n    // Function is declared within a module that claims to be fully typed\n    // (i.e. a \"py.typed\" file is present).\n    PyTypedDefinition = 1 << 12,\n\n    // Function is decorated with @final\n    Final = 1 << 13,\n\n    // Function has one or more parameters that are missing type annotations\n    UnannotatedParams = 1 << 14,\n\n    // Any collection of parameters will match this function. This is used\n    // for Callable[..., x].\n    SkipParamCompatibilityCheck = 1 << 15,\n}\n\ninterface FunctionDetails {\n    name: string;\n    moduleName: string;\n    flags: FunctionTypeFlags;\n    parameters: FunctionParameter[];\n    declaredReturnType?: Type;\n    declaration?: FunctionDeclaration;\n    builtInName?: string;\n    docString?: string;\n\n    // Parameter specification used only for Callable types created\n    // with a ParamSpec representing the parameters.\n    paramSpec?: TypeVarType;\n}\n\nexport interface SpecializedFunctionTypes {\n    parameterTypes: Type[];\n    returnType?: Type;\n}\n\nexport interface FunctionType extends TypeBase {\n    category: TypeCategory.Function;\n\n    details: FunctionDetails;\n\n    // This flag is set when the first parameter is stripped\n    // (see \"clone\" method below).\n    ignoreFirstParamOfDeclaration?: boolean;\n\n    // A function type can be specialized (i.e. generic type\n    // variables replaced by a concrete type).\n    specializedTypes?: SpecializedFunctionTypes;\n\n    // Filled in lazily\n    inferredReturnType?: Type;\n}\n\nexport interface ParamSpecEntry {\n    name: string;\n    type: Type;\n}\n\nexport namespace FunctionType {\n    export function createInstance(\n        name: string,\n        moduleName: string,\n        functionFlags: FunctionTypeFlags,\n        docString?: string\n    ) {\n        return create(name, moduleName, functionFlags, TypeFlags.Instance, docString);\n    }\n\n    export function createInstantiable(\n        name: string,\n        moduleName: string,\n        functionFlags: FunctionTypeFlags,\n        docString?: string\n    ) {\n        return create(name, moduleName, functionFlags, TypeFlags.Instantiable, docString);\n    }\n\n    function create(\n        name: string,\n        moduleName: string,\n        functionFlags: FunctionTypeFlags,\n        typeFlags: TypeFlags,\n        docString?: string\n    ) {\n        const newFunctionType: FunctionType = {\n            category: TypeCategory.Function,\n            details: {\n                name,\n                moduleName,\n                flags: functionFlags,\n                parameters: [],\n                docString,\n            },\n            flags: typeFlags,\n        };\n        return newFunctionType;\n    }\n\n    // Creates a deep copy of the function type, including a fresh\n    // version of _functionDetails.\n    export function clone(type: FunctionType, deleteFirstParam = false): FunctionType {\n        const newFunction = create(\n            type.details.name,\n            type.details.moduleName,\n            type.details.flags,\n            type.flags,\n            type.details.docString\n        );\n\n        newFunction.details = { ...type.details };\n\n        // If we strip off the first parameter, this is no longer an\n        // instance method or class method.\n        if (deleteFirstParam) {\n            newFunction.details.parameters = type.details.parameters.slice(1);\n            newFunction.details.flags &= ~(FunctionTypeFlags.ConstructorMethod | FunctionTypeFlags.ClassMethod);\n            newFunction.details.flags |= FunctionTypeFlags.StaticMethod;\n            newFunction.ignoreFirstParamOfDeclaration = true;\n        }\n\n        if (type.typeAliasInfo !== undefined) {\n            newFunction.typeAliasInfo = type.typeAliasInfo;\n        }\n\n        if (type.specializedTypes) {\n            newFunction.specializedTypes = {\n                parameterTypes: deleteFirstParam\n                    ? type.specializedTypes.parameterTypes.slice(1)\n                    : type.specializedTypes.parameterTypes,\n                returnType: type.specializedTypes.returnType,\n            };\n        }\n\n        newFunction.inferredReturnType = type.inferredReturnType;\n\n        return newFunction;\n    }\n\n    export function cloneAsInstance(type: FunctionType) {\n        assert(TypeBase.isInstantiable(type));\n        const newInstance: FunctionType = { ...type };\n        newInstance.flags &= ~TypeFlags.Instantiable;\n        newInstance.flags |= TypeFlags.Instance;\n        return newInstance;\n    }\n\n    export function cloneAsInstantiable(type: FunctionType) {\n        assert(TypeBase.isInstance(type));\n        const newInstance: FunctionType = { ...type };\n        newInstance.flags &= ~TypeFlags.Instance;\n        newInstance.flags |= TypeFlags.Instantiable;\n        return newInstance;\n    }\n\n    // Creates a shallow copy of the function type with new\n    // specialized types. The clone shares the _functionDetails\n    // with the object being cloned.\n    export function cloneForSpecialization(\n        type: FunctionType,\n        specializedTypes: SpecializedFunctionTypes,\n        specializedInferredReturnType: Type | undefined\n    ): FunctionType {\n        const newFunction = create(\n            type.details.name,\n            type.details.moduleName,\n            type.details.flags,\n            type.flags,\n            type.details.docString\n        );\n        newFunction.details = type.details;\n\n        assert(specializedTypes.parameterTypes.length === type.details.parameters.length);\n        newFunction.specializedTypes = specializedTypes;\n\n        if (specializedInferredReturnType) {\n            newFunction.inferredReturnType = specializedInferredReturnType;\n        }\n\n        return newFunction;\n    }\n\n    // Creates a new function based on the parameters of another function.\n    export function cloneForParamSpec(type: FunctionType, paramTypes: ParamSpecEntry[] | undefined) {\n        const newFunction = create(\n            type.details.name,\n            type.details.moduleName,\n            type.details.flags,\n            type.flags,\n            type.details.docString\n        );\n\n        // Make a shallow clone of the details.\n        newFunction.details = { ...type.details };\n\n        // The clone should no longer have a parameter specification\n        // since we're replacing it.\n        delete newFunction.details.paramSpec;\n\n        if (paramTypes) {\n            newFunction.details.parameters = paramTypes.map((specEntry, index) => {\n                return {\n                    category: ParameterCategory.Simple,\n                    name: specEntry.name,\n                    isNameSynthesized: true,\n                    hasDeclaredType: true,\n                    type: specEntry.type,\n                };\n            });\n        }\n\n        return newFunction;\n    }\n\n    export function addDefaultParameters(functionType: FunctionType, useUnknown = false) {\n        FunctionType.addParameter(functionType, {\n            category: ParameterCategory.VarArgList,\n            name: 'args',\n            type: useUnknown ? UnknownType.create() : AnyType.create(),\n            hasDeclaredType: !useUnknown,\n        });\n        FunctionType.addParameter(functionType, {\n            category: ParameterCategory.VarArgDictionary,\n            name: 'kwargs',\n            type: useUnknown ? UnknownType.create() : AnyType.create(),\n            hasDeclaredType: !useUnknown,\n        });\n    }\n\n    export function isInstanceMethod(type: FunctionType): boolean {\n        return (\n            (type.details.flags &\n                (FunctionTypeFlags.ConstructorMethod |\n                    FunctionTypeFlags.StaticMethod |\n                    FunctionTypeFlags.ClassMethod)) ===\n            0\n        );\n    }\n\n    export function isConstructorMethod(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.ConstructorMethod) !== 0;\n    }\n\n    export function isStaticMethod(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.StaticMethod) !== 0;\n    }\n\n    export function isClassMethod(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.ClassMethod) !== 0;\n    }\n\n    export function isAbstractMethod(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.AbstractMethod) !== 0;\n    }\n\n    export function isGenerator(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.Generator) !== 0;\n    }\n\n    export function isSynthesizedMethod(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.SynthesizedMethod) !== 0;\n    }\n\n    export function isSkipConstructorCheck(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.SkipConstructorCheck) !== 0;\n    }\n\n    export function isOverloaded(type: FunctionType): boolean {\n        return (type.details.flags & FunctionTypeFlags.Overloaded) !== 0;\n    }\n\n    export function isDefaultParameterCheckDisabled(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.DisableDefaultChecks) !== 0;\n    }\n\n    export function isAsync(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.Async) !== 0;\n    }\n\n    export function isWrapReturnTypeInAwait(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.WrapReturnTypeInAwait) !== 0;\n    }\n\n    export function isStubDefinition(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.StubDefinition) !== 0;\n    }\n\n    export function isPyTypedDefinition(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.PyTypedDefinition) !== 0;\n    }\n\n    export function isFinal(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.Final) !== 0;\n    }\n\n    export function hasUnannotatedParams(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.UnannotatedParams) !== 0;\n    }\n\n    export function shouldSkipParamCompatibilityCheck(type: FunctionType) {\n        return (type.details.flags & FunctionTypeFlags.SkipParamCompatibilityCheck) !== 0;\n    }\n\n    export function getEffectiveParameterType(type: FunctionType, index: number): Type {\n        assert(index < type.details.parameters.length);\n        if (type.specializedTypes) {\n            return type.specializedTypes.parameterTypes[index];\n        }\n\n        return type.details.parameters[index].type;\n    }\n\n    export function addParameter(type: FunctionType, param: FunctionParameter) {\n        type.details.parameters.push(param);\n    }\n\n    export function getSpecializedReturnType(type: FunctionType) {\n        return type.specializedTypes && type.specializedTypes.returnType\n            ? type.specializedTypes.returnType\n            : type.details.declaredReturnType;\n    }\n}\n\nexport interface OverloadedFunctionType extends TypeBase {\n    category: TypeCategory.OverloadedFunction;\n    overloads: FunctionType[];\n}\n\nexport namespace OverloadedFunctionType {\n    export function create(overloads: FunctionType[] = []) {\n        const newType: OverloadedFunctionType = {\n            category: TypeCategory.OverloadedFunction,\n            overloads,\n            flags: TypeFlags.Instance,\n        };\n        return newType;\n    }\n\n    export function addOverload(type: OverloadedFunctionType, functionType: FunctionType) {\n        type.overloads.push(functionType);\n    }\n}\n\nexport interface NoneType extends TypeBase {\n    category: TypeCategory.None;\n}\n\nexport namespace NoneType {\n    const _noneInstance: NoneType = {\n        category: TypeCategory.None,\n        flags: TypeFlags.Instance,\n    };\n\n    const _noneType: NoneType = {\n        category: TypeCategory.None,\n        flags: TypeFlags.Instantiable,\n    };\n\n    export function createInstance() {\n        return _noneInstance;\n    }\n\n    export function createType() {\n        return _noneType;\n    }\n}\n\nexport interface NeverType extends TypeBase {\n    category: TypeCategory.Never;\n}\n\nexport namespace NeverType {\n    const _neverInstance: NeverType = {\n        category: TypeCategory.Never,\n        flags: TypeFlags.Instance | TypeFlags.Instantiable,\n    };\n\n    export function create() {\n        return _neverInstance;\n    }\n}\n\nexport interface AnyType extends TypeBase {\n    category: TypeCategory.Any;\n    isEllipsis: boolean;\n}\n\nexport namespace AnyType {\n    const _anyInstance: AnyType = {\n        category: TypeCategory.Any,\n        isEllipsis: false,\n        flags: TypeFlags.Instance | TypeFlags.Instantiable,\n    };\n    const _ellipsisInstance: AnyType = {\n        category: TypeCategory.Any,\n        isEllipsis: true,\n        flags: TypeFlags.Instance | TypeFlags.Instantiable,\n    };\n\n    export function create(isEllipsis = false) {\n        return isEllipsis ? _ellipsisInstance : _anyInstance;\n    }\n}\n\nexport interface UnionType extends TypeBase {\n    category: TypeCategory.Union;\n    subtypes: Type[];\n    literalStrMap?: Map<string, Type>;\n    literalIntMap?: Map<number, Type>;\n}\n\nexport namespace UnionType {\n    export function create() {\n        const newUnionType: UnionType = {\n            category: TypeCategory.Union,\n            subtypes: [],\n            flags: TypeFlags.Instance | TypeFlags.Instantiable,\n        };\n\n        return newUnionType;\n    }\n\n    export function addType(unionType: UnionType, newType: Type) {\n        assert(newType.category !== TypeCategory.Union);\n        assert(newType.category !== TypeCategory.Never);\n\n        // If we're adding a string literal type, add it to the\n        // literal string map to speed up some operations. It's not\n        // uncommon for unions to contain hundreds of string literals.\n        if (\n            isObject(newType) &&\n            ClassType.isBuiltIn(newType.classType, 'str') &&\n            newType.classType.literalValue !== undefined\n        ) {\n            if (unionType.literalStrMap === undefined) {\n                unionType.literalStrMap = new Map<string, Type>();\n            }\n            unionType.literalStrMap.set(newType.classType.literalValue as string, newType);\n        } else if (\n            isObject(newType) &&\n            ClassType.isBuiltIn(newType.classType, 'int') &&\n            newType.classType.literalValue !== undefined\n        ) {\n            if (unionType.literalIntMap === undefined) {\n                unionType.literalIntMap = new Map<number, Type>();\n            }\n            unionType.literalIntMap.set(newType.classType.literalValue as number, newType);\n        }\n\n        unionType.flags &= newType.flags;\n        unionType.subtypes.push(newType);\n    }\n\n    export function containsType(unionType: UnionType, subtype: Type, recursionCount = 0): boolean {\n        // Handle string literals as a special case because unions can sometimes\n        // contain hundreds of string literal types.\n        if (isObject(subtype)) {\n            if (\n                ClassType.isBuiltIn(subtype.classType, 'str') &&\n                subtype.classType.literalValue !== undefined &&\n                unionType.literalStrMap !== undefined\n            ) {\n                return unionType.literalStrMap.has(subtype.classType.literalValue as string);\n            } else if (\n                ClassType.isBuiltIn(subtype.classType, 'int') &&\n                subtype.classType.literalValue !== undefined &&\n                unionType.literalIntMap !== undefined\n            ) {\n                return unionType.literalIntMap.has(subtype.classType.literalValue as number);\n            }\n        }\n\n        return unionType.subtypes.find((t) => isTypeSame(t, subtype, recursionCount + 1)) !== undefined;\n    }\n}\n\nexport interface TypeVarDetails {\n    name: string;\n    constraints: Type[];\n    boundType?: Type;\n    isCovariant: boolean;\n    isContravariant: boolean;\n    isParamSpec: boolean;\n\n    // Internally created (e.g. for pseudo-generic classes)\n    isSynthesized: boolean;\n    synthesizedIndex?: number;\n\n    // Used for recursive type aliases.\n    recursiveTypeAliasName?: string;\n\n    // Type parameters for a recursive type alias.\n    recursiveTypeParameters?: TypeVarType[];\n}\n\nexport interface TypeVarType extends TypeBase {\n    category: TypeCategory.TypeVar;\n    details: TypeVarDetails;\n\n    // An ID that uniquely identifies the scope in which this TypeVar is\n    // defined. It corresponds to the parse node ID of the class or\n    // function.\n    scopeId?: number;\n\n    // String formatted as <name>.<scopeId>.\n    scopeName?: string;\n}\n\nexport namespace TypeVarType {\n    export function createInstance(name: string, isParamSpec: boolean, isSynthesized = false) {\n        return create(name, isParamSpec, isSynthesized, TypeFlags.Instance);\n    }\n\n    export function createInstantiable(name: string, isParamSpec: boolean, isSynthesized = false) {\n        return create(name, isParamSpec, isSynthesized, TypeFlags.Instantiable);\n    }\n\n    export function cloneAsInstance(type: TypeVarType) {\n        assert(TypeBase.isInstantiable(type));\n        const newInstance: TypeVarType = { ...type };\n        newInstance.flags &= ~TypeFlags.Instantiable;\n        newInstance.flags |= TypeFlags.Instance;\n        return newInstance;\n    }\n\n    export function cloneAsInstantiable(type: TypeVarType) {\n        assert(TypeBase.isInstance(type));\n        const newInstance: TypeVarType = { ...type };\n        newInstance.flags &= ~TypeFlags.Instance;\n        newInstance.flags |= TypeFlags.Instantiable;\n        return newInstance;\n    }\n\n    export function cloneForScopeId(type: TypeVarType, scopeId: number) {\n        const newInstance: TypeVarType = { ...type };\n        newInstance.scopeName = makeScopeName(type.details.name, scopeId);\n        newInstance.scopeId = scopeId;\n        return newInstance;\n    }\n\n    export function makeScopeName(name: string, scopeId: number) {\n        return `${name}.${scopeId.toString()}`;\n    }\n\n    function create(name: string, isParamSpec: boolean, isSynthesized: boolean, typeFlags: TypeFlags) {\n        const newTypeVarType: TypeVarType = {\n            category: TypeCategory.TypeVar,\n            details: {\n                name,\n                constraints: [],\n                isCovariant: false,\n                isContravariant: false,\n                isParamSpec,\n                isSynthesized,\n            },\n            flags: typeFlags,\n        };\n        return newTypeVarType;\n    }\n\n    export function addConstraint(typeVarType: TypeVarType, constraintType: Type) {\n        typeVarType.details.constraints.push(constraintType);\n    }\n}\n\nexport function isNever(type: Type): type is NeverType {\n    return type.category === TypeCategory.Never;\n}\n\nexport function isNone(type: Type): type is NoneType {\n    return type.category === TypeCategory.None;\n}\n\nexport function isUnknown(type: Type): type is UnknownType {\n    return type.category === TypeCategory.Unknown;\n}\n\nexport function isAnyOrUnknown(type: Type): type is AnyType | UnknownType {\n    if (type.category === TypeCategory.Any || type.category === TypeCategory.Unknown) {\n        return true;\n    }\n\n    if (type.category === TypeCategory.Union) {\n        return type.subtypes.find((t) => !isAnyOrUnknown(t)) === undefined;\n    }\n\n    return false;\n}\n\nexport function isUnbound(type: Type): type is UnboundType {\n    return type.category === TypeCategory.Unbound;\n}\n\nexport function isPossiblyUnbound(type: Type): boolean {\n    if (type.category === TypeCategory.Unbound) {\n        return true;\n    }\n\n    if (type.category === TypeCategory.Union) {\n        return type.subtypes.find((t) => isPossiblyUnbound(t)) !== undefined;\n    }\n\n    return false;\n}\n\nexport function isClass(type: Type): type is ClassType {\n    return type.category === TypeCategory.Class;\n}\n\nexport function isObject(type: Type): type is ObjectType {\n    return type.category === TypeCategory.Object;\n}\n\nexport function isModule(type: Type): type is ModuleType {\n    return type.category === TypeCategory.Module;\n}\n\nexport function isTypeVar(type: Type): type is TypeVarType {\n    return type.category === TypeCategory.TypeVar;\n}\n\nexport function isFunction(type: Type): type is FunctionType {\n    return type.category === TypeCategory.Function;\n}\n\nexport function isOverloadedFunction(type: Type): type is OverloadedFunctionType {\n    return type.category === TypeCategory.OverloadedFunction;\n}\n\nexport function getTypeAliasInfo(type: Type) {\n    if (type.typeAliasInfo) {\n        return type.typeAliasInfo;\n    }\n\n    if (\n        isTypeVar(type) &&\n        type.details.recursiveTypeAliasName &&\n        type.details.boundType &&\n        type.details.boundType.typeAliasInfo\n    ) {\n        return type.details.boundType.typeAliasInfo;\n    }\n\n    return undefined;\n}\n\nexport function isTypeSame(type1: Type, type2: Type, recursionCount = 0): boolean {\n    if (type1.category !== type2.category) {\n        return false;\n    }\n\n    if (recursionCount > maxTypeRecursionCount) {\n        return true;\n    }\n\n    switch (type1.category) {\n        case TypeCategory.Class: {\n            const classType2 = type2 as ClassType;\n\n            // If the details are not the same it's not the same class.\n            if (!ClassType.isSameGenericClass(type1, classType2, true, recursionCount + 1)) {\n                return false;\n            }\n\n            // Make sure the type args match.\n            const type1TypeArgs = type1.typeArguments || [];\n            const type2TypeArgs = classType2.typeArguments || [];\n            const typeArgCount = Math.max(type1TypeArgs.length, type2TypeArgs.length);\n\n            for (let i = 0; i < typeArgCount; i++) {\n                // Assume that missing type args are \"Any\".\n                const typeArg1 = i < type1TypeArgs.length ? type1TypeArgs[i] : AnyType.create();\n                const typeArg2 = i < type2TypeArgs.length ? type2TypeArgs[i] : AnyType.create();\n\n                if (!isTypeSame(typeArg1, typeArg2, recursionCount + 1)) {\n                    return false;\n                }\n            }\n\n            if (!ClassType.isLiteralValueSame(type1, classType2)) {\n                return false;\n            }\n\n            return true;\n        }\n\n        case TypeCategory.Object: {\n            const objType2 = type2 as ObjectType;\n\n            return isTypeSame(type1.classType, objType2.classType, recursionCount + 1);\n        }\n\n        case TypeCategory.Function: {\n            // Make sure the parameter counts match.\n            const functionType2 = type2 as FunctionType;\n            const params1 = type1.details.parameters;\n            const params2 = functionType2.details.parameters;\n\n            if (params1.length !== params2.length) {\n                return false;\n            }\n\n            // Make sure the parameter details match.\n            for (let i = 0; i < params1.length; i++) {\n                const param1 = params1[i];\n                const param2 = params2[i];\n\n                if (param1.category !== param2.category) {\n                    return false;\n                }\n\n                if (param1.name !== param2.name) {\n                    return false;\n                }\n\n                const param1Type = FunctionType.getEffectiveParameterType(type1, i);\n                const param2Type = FunctionType.getEffectiveParameterType(functionType2, i);\n                if (!isTypeSame(param1Type, param2Type, recursionCount + 1)) {\n                    return false;\n                }\n            }\n\n            // Make sure the return types match.\n            let return1Type = type1.details.declaredReturnType;\n            if (type1.specializedTypes && type1.specializedTypes.returnType) {\n                return1Type = type1.specializedTypes.returnType;\n            }\n            let return2Type = functionType2.details.declaredReturnType;\n            if (functionType2.specializedTypes && functionType2.specializedTypes.returnType) {\n                return2Type = functionType2.specializedTypes.returnType;\n            }\n            if (return1Type || return2Type) {\n                if (!return1Type || !return2Type || !isTypeSame(return1Type, return2Type, recursionCount + 1)) {\n                    return false;\n                }\n            }\n\n            if (type1.details.declaration !== functionType2.details.declaration) {\n                return false;\n            }\n\n            return true;\n        }\n\n        case TypeCategory.OverloadedFunction: {\n            // Make sure the overload counts match.\n            const functionType2 = type2 as OverloadedFunctionType;\n            if (type1.overloads.length !== functionType2.overloads.length) {\n                return false;\n            }\n\n            // We assume here that overloaded functions always appear\n            // in the same order from one analysis pass to another.\n            for (let i = 0; i < type1.overloads.length; i++) {\n                if (!isTypeSame(type1.overloads[i], functionType2.overloads[i])) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        case TypeCategory.Union: {\n            const unionType2 = type2 as UnionType;\n            const subtypes1 = type1.subtypes;\n            const subtypes2 = unionType2.subtypes;\n\n            if (subtypes1.length !== subtypes2.length) {\n                return false;\n            }\n\n            // The types do not have a particular order, so we need to\n            // do the comparison in an order-independent manner.\n            return subtypes1.find((t) => !UnionType.containsType(unionType2, t, recursionCount + 1)) === undefined;\n        }\n\n        case TypeCategory.TypeVar: {\n            const type2TypeVar = type2 as TypeVarType;\n\n            if (type1.scopeId !== type2TypeVar.scopeId) {\n                return false;\n            }\n\n            if (type1.details === type2TypeVar.details) {\n                return true;\n            }\n\n            if (type1.details.name !== type2TypeVar.details.name) {\n                return false;\n            }\n\n            const boundType1 = type1.details.boundType;\n            const boundType2 = type2TypeVar.details.boundType;\n            if (boundType1) {\n                if (!boundType2 || !isTypeSame(boundType1, boundType2, recursionCount + 1)) {\n                    return false;\n                }\n            } else {\n                if (boundType2) {\n                    return false;\n                }\n            }\n\n            if (type1.details.isContravariant !== type2TypeVar.details.isContravariant) {\n                return false;\n            }\n\n            if (type1.details.isCovariant !== type2TypeVar.details.isCovariant) {\n                return false;\n            }\n\n            const constraints1 = type1.details.constraints;\n            const constraints2 = type2TypeVar.details.constraints;\n            if (constraints1.length !== constraints2.length) {\n                return false;\n            }\n\n            for (let i = 0; i < constraints1.length; i++) {\n                if (!isTypeSame(constraints1[i], constraints2[i], recursionCount + 1)) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        case TypeCategory.Module: {\n            const type2Module = type2 as ModuleType;\n\n            // Module types are the same if they share the same\n            // module symbol table.\n            if (type1.fields === type2Module.fields) {\n                return true;\n            }\n\n            // If both symbol tables are empty, we can also assume\n            // they're equal.\n            if (type1.fields.size === 0 && type2Module.fields.size === 0) {\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// If the type is a union, remove any \"unknown\" or \"any\" type\n// from the union, returning only the known types.\nexport function removeAnyFromUnion(type: Type): Type {\n    return removeFromUnion(type, (t: Type) => isAnyOrUnknown(t));\n}\n\n// If the type is a union, remove an \"unknown\" type from the union,\n// returning only the known types.\nexport function removeUnknownFromUnion(type: Type): Type {\n    return removeFromUnion(type, (t: Type) => t.category === TypeCategory.Unknown);\n}\n\n// If the type is a union, remove an \"unbound\" type from the union,\n// returning only the known types.\nexport function removeUnbound(type: Type): Type {\n    if (type.category === TypeCategory.Union) {\n        return removeFromUnion(type, (t: Type) => isUnbound(t));\n    }\n\n    if (isUnbound(type)) {\n        return UnknownType.create();\n    }\n\n    return type;\n}\n\n// If the type is a union, remove an \"None\" type from the union,\n// returning only the known types.\nexport function removeNoneFromUnion(type: Type): Type {\n    return removeFromUnion(type, (t: Type) => t.category === TypeCategory.None);\n}\n\nexport function removeFromUnion(type: Type, removeFilter: (type: Type) => boolean) {\n    if (type.category === TypeCategory.Union) {\n        const remainingTypes = type.subtypes.filter((t) => !removeFilter(t));\n        if (remainingTypes.length < type.subtypes.length) {\n            return combineTypes(remainingTypes);\n        }\n    }\n\n    return type;\n}\n\n// Determines whether the specified type is a type that can be\n// combined with other types for a union.\nexport function isUnionableType(subtypes: Type[]): boolean {\n    let typeFlags = TypeFlags.Instance | TypeFlags.Instantiable;\n\n    for (const subtype of subtypes) {\n        typeFlags &= subtype.flags;\n    }\n\n    // All subtypes need to be instantiable. Some types (like Any\n    // and None) are both instances and instantiable. It's OK to\n    // include some of these, but at least one subtype needs to\n    // be definitively instantiable (not an instance).\n    return (typeFlags & TypeFlags.Instantiable) !== 0 && (typeFlags & TypeFlags.Instance) === 0;\n}\n\n// Combines multiple types into a single type. If the types are\n// the same, only one is returned. If they differ, they\n// are combined into a UnionType. NeverTypes are filtered out.\n// If no types remain in the end, a NeverType is returned.\nexport function combineTypes(types: Type[], maxSubtypeCount?: number): Type {\n    // Filter out any \"Never\" types.\n    types = types.filter((type) => type.category !== TypeCategory.Never);\n    if (types.length === 0) {\n        return NeverType.create();\n    }\n\n    // Handle the common case where there is only one type.\n    if (types.length === 1) {\n        return types[0];\n    }\n\n    // Expand all union types.\n    let expandedTypes: Type[] = [];\n    for (const type of types) {\n        if (type.category === TypeCategory.Union) {\n            expandedTypes = expandedTypes.concat(type.subtypes);\n        } else {\n            expandedTypes.push(type);\n        }\n    }\n\n    // Sort all of the literal types to the end.\n    expandedTypes = expandedTypes.sort((type1, type2) => {\n        if (\n            (isObject(type1) && type1.classType.literalValue !== undefined) ||\n            (isClass(type1) && type1.literalValue !== undefined)\n        ) {\n            return 1;\n        } else if (\n            (isObject(type2) && type2.classType.literalValue !== undefined) ||\n            (isClass(type2) && type2.literalValue !== undefined)\n        ) {\n            return -1;\n        }\n        return 0;\n    });\n\n    // If the union contains a NoReturn, remove it. NoReturn should\n    // be used only when it's by itself.\n    const isNoReturn = (t: Type) => isObject(t) && ClassType.isBuiltIn(t.classType, 'NoReturn');\n    if (expandedTypes.find((t) => isNoReturn(t))) {\n        expandedTypes = expandedTypes.filter((t) => !isNoReturn(t));\n    }\n\n    // If removing all NoReturn types results in no remaining types,\n    // convert it to an unknown.\n    if (expandedTypes.length === 0) {\n        return UnknownType.create();\n    }\n\n    const newUnionType = UnionType.create();\n    let hitMaxSubtypeCount = false;\n\n    expandedTypes.forEach((t, index) => {\n        if (index === 0) {\n            UnionType.addType(newUnionType, t);\n        } else {\n            if (maxSubtypeCount === undefined || newUnionType.subtypes.length < maxSubtypeCount) {\n                _addTypeIfUnique(newUnionType, t);\n            } else {\n                hitMaxSubtypeCount = true;\n            }\n        }\n    });\n\n    if (hitMaxSubtypeCount) {\n        return AnyType.create();\n    }\n\n    // If only one type remains, convert it from a union to a simple type.\n    if (newUnionType.subtypes.length === 1) {\n        return newUnionType.subtypes[0];\n    }\n\n    return newUnionType;\n}\n\n// Determines whether the dest type is the same as the source type with\n// the possible exception that the source type has a literal value when\n// the dest does not.\nexport function isSameWithoutLiteralValue(destType: Type, srcType: Type): boolean {\n    // If it's the same with literals, great.\n    if (isTypeSame(destType, srcType)) {\n        return true;\n    }\n\n    if (isClass(srcType) && srcType.literalValue !== undefined) {\n        // Strip the literal.\n        srcType = ClassType.cloneWithLiteral(srcType, undefined);\n        return isTypeSame(destType, srcType);\n    }\n\n    if (isObject(srcType) && srcType.classType.literalValue !== undefined) {\n        // Strip the literal.\n        srcType = ObjectType.create(ClassType.cloneWithLiteral(srcType.classType, undefined));\n        return isTypeSame(destType, srcType);\n    }\n\n    return false;\n}\n\nfunction _addTypeIfUnique(unionType: UnionType, typeToAdd: Type) {\n    // Handle the addition of a string literal in a special manner to\n    // avoid n^2 behavior in unions that contain hundreds of string\n    // literal types.\n    if (isObject(typeToAdd)) {\n        if (\n            ClassType.isBuiltIn(typeToAdd.classType, 'str') &&\n            typeToAdd.classType.literalValue !== undefined &&\n            unionType.literalStrMap !== undefined\n        ) {\n            if (!unionType.literalStrMap.has(typeToAdd.classType.literalValue as string)) {\n                UnionType.addType(unionType, typeToAdd);\n            }\n            return;\n        } else if (\n            ClassType.isBuiltIn(typeToAdd.classType, 'int') &&\n            typeToAdd.classType.literalValue !== undefined &&\n            unionType.literalIntMap !== undefined\n        ) {\n            if (!unionType.literalIntMap.has(typeToAdd.classType.literalValue as number)) {\n                UnionType.addType(unionType, typeToAdd);\n            }\n            return;\n        }\n    }\n\n    for (let i = 0; i < unionType.subtypes.length; i++) {\n        const type = unionType.subtypes[i];\n\n        // Does this type already exist in the types array?\n        if (isTypeSame(type, typeToAdd)) {\n            return;\n        }\n\n        // If the typeToAdd is a literal value and there's already\n        // a non-literal type that matches, don't add the literal value.\n        if (isObject(type) && isObject(typeToAdd)) {\n            if (isSameWithoutLiteralValue(type, typeToAdd)) {\n                if (type.classType.literalValue === undefined) {\n                    return;\n                }\n            }\n\n            // If we're adding Literal[False] or Literal[True] to its\n            // opposite, combine them into a non-literal 'bool' type.\n            if (ClassType.isBuiltIn(type.classType, 'bool')) {\n                if (\n                    typeToAdd.classType.literalValue !== undefined &&\n                    !typeToAdd.classType.literalValue === type.classType.literalValue\n                ) {\n                    unionType.subtypes[i] = ObjectType.create(ClassType.cloneWithLiteral(type.classType, undefined));\n                    return;\n                }\n            }\n        }\n    }\n\n    UnionType.addType(unionType, typeToAdd);\n}\n","/*\n * backgroundAnalysis.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * run analyzer from background thread\n */\n\nimport { Worker } from 'worker_threads';\n\nimport { BackgroundAnalysisBase, BackgroundAnalysisRunnerBase, InitializationData } from './backgroundAnalysisBase';\nimport { getCancellationFolderName } from './common/cancellationUtils';\nimport { ConsoleInterface } from './common/console';\n\nexport class BackgroundAnalysis extends BackgroundAnalysisBase {\n    constructor(console: ConsoleInterface) {\n        super(console);\n\n        const initialData: InitializationData = {\n            rootDirectory: (global as any).__rootDirectory as string,\n            cancellationFolderName: getCancellationFolderName(),\n        };\n\n        // this will load this same file in BG thread and start listener\n        const worker = new Worker(__filename, { workerData: initialData });\n        this.setup(worker);\n    }\n}\n\nexport class BackgroundAnalysisRunner extends BackgroundAnalysisRunnerBase {\n    constructor() {\n        super();\n    }\n}\n","/*\n * backgroundAnalysisBase.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * run analyzer from background thread\n */\n\nimport { TextDocumentContentChangeEvent } from 'vscode-languageserver-textdocument';\nimport { CancellationToken } from 'vscode-languageserver/node';\nimport { MessageChannel, MessagePort, parentPort, threadId, Worker, workerData } from 'worker_threads';\n\nimport { AnalysisCompleteCallback, AnalysisResults, analyzeProgram, nullCallback } from './analyzer/analysis';\nimport { ImportResolver } from './analyzer/importResolver';\nimport { Indices, Program } from './analyzer/program';\nimport {\n    BackgroundThreadBase,\n    createConfigOptionsFrom,\n    getBackgroundWaiter,\n    LogData,\n    run,\n} from './backgroundThreadBase';\nimport {\n    disposeCancellationToken,\n    getCancellationTokenFromId,\n    getCancellationTokenId,\n    throwIfCancellationRequested,\n} from './common/cancellationUtils';\nimport { ConfigOptions } from './common/configOptions';\nimport { ConsoleInterface, log, LogLevel } from './common/console';\nimport * as debug from './common/debug';\nimport { Diagnostic } from './common/diagnostic';\nimport { FileDiagnostics } from './common/diagnosticSink';\nimport { LanguageServiceExtension } from './common/extensibility';\nimport { FileSystem } from './common/fileSystem';\nimport { LogTracker } from './common/logTracker';\nimport { Range } from './common/textRange';\nimport { IndexResults } from './languageService/documentSymbolProvider';\n\nexport class BackgroundAnalysisBase {\n    private _worker: Worker | undefined;\n    private _onAnalysisCompletion: AnalysisCompleteCallback = nullCallback;\n\n    protected constructor(protected console: ConsoleInterface) {\n        // Don't allow instantiation of this type directly.\n    }\n\n    protected setup(worker: Worker) {\n        this._worker = worker;\n\n        // global channel to communicate from BG channel to main thread.\n        worker.on('message', (msg: AnalysisResponse) => {\n            switch (msg.requestType) {\n                case 'log': {\n                    const logData = msg.data as LogData;\n                    this.log(logData.level, logData.message);\n                    break;\n                }\n\n                case 'analysisResult': {\n                    // Change in diagnostics due to host such as file closed rather than\n                    // analyzing files.\n                    this._onAnalysisCompletion(convertAnalysisResults(msg.data));\n                    break;\n                }\n\n                default:\n                    debug.fail(`${msg.requestType} is not expected`);\n            }\n        });\n\n        // this will catch any exception thrown from background thread,\n        // print log and ignore exception\n        worker.on('error', (msg) => {\n            this.log(LogLevel.Error, `Error occurred on background thread: ${JSON.stringify(msg)}`);\n        });\n    }\n\n    setCompletionCallback(callback?: AnalysisCompleteCallback) {\n        this._onAnalysisCompletion = callback ?? nullCallback;\n    }\n\n    setConfigOptions(configOptions: ConfigOptions) {\n        this.enqueueRequest({ requestType: 'setConfigOptions', data: configOptions });\n    }\n\n    setTrackedFiles(filePaths: string[]) {\n        this.enqueueRequest({ requestType: 'setTrackedFiles', data: filePaths });\n    }\n\n    setAllowedThirdPartyImports(importNames: string[]) {\n        this.enqueueRequest({ requestType: 'setAllowedThirdPartyImports', data: importNames });\n    }\n\n    setFileOpened(filePath: string, version: number | null, contents: TextDocumentContentChangeEvent[]) {\n        this.enqueueRequest({ requestType: 'setFileOpened', data: { filePath, version, contents } });\n    }\n\n    setFileClosed(filePath: string) {\n        this.enqueueRequest({ requestType: 'setFileClosed', data: filePath });\n    }\n\n    markAllFilesDirty(evenIfContentsAreSame: boolean) {\n        this.enqueueRequest({ requestType: 'markAllFilesDirty', data: evenIfContentsAreSame });\n    }\n\n    markFilesDirty(filePaths: string[], evenIfContentsAreSame: boolean) {\n        this.enqueueRequest({ requestType: 'markFilesDirty', data: { filePaths, evenIfContentsAreSame } });\n    }\n\n    startAnalysis(indices: Indices | undefined, token: CancellationToken) {\n        this._startOrResumeAnalysis('analyze', indices, token);\n    }\n\n    private _startOrResumeAnalysis(\n        requestType: 'analyze' | 'resumeAnalysis',\n        indices: Indices | undefined,\n        token: CancellationToken\n    ) {\n        const { port1, port2 } = new MessageChannel();\n\n        // Handle response from background thread to main thread.\n        port1.on('message', (msg: AnalysisResponse) => {\n            switch (msg.requestType) {\n                case 'analysisResult': {\n                    this._onAnalysisCompletion(convertAnalysisResults(msg.data));\n                    break;\n                }\n\n                case 'analysisPaused': {\n                    disposeCancellationToken(token);\n                    port2.close();\n                    port1.close();\n\n                    // Analysis request has completed, but there is more to\n                    // analyze, so queue another message to resume later.\n                    this._startOrResumeAnalysis('resumeAnalysis', indices, token);\n                    break;\n                }\n\n                case 'indexResult': {\n                    const { path, indexResults } = msg.data;\n                    indices?.setWorkspaceIndex(path, indexResults);\n                    break;\n                }\n\n                case 'analysisDone': {\n                    disposeCancellationToken(token);\n                    port2.close();\n                    port1.close();\n                    break;\n                }\n\n                default:\n                    debug.fail(`${msg.requestType} is not expected`);\n            }\n        });\n\n        const cancellationId = getCancellationTokenId(token);\n        this.enqueueRequest({ requestType, data: cancellationId, port: port2 });\n    }\n\n    startIndexing(configOptions: ConfigOptions, indices: Indices) {\n        /* noop */\n    }\n\n    refreshIndexing(configOptions: ConfigOptions, indices?: Indices) {\n        /* noop */\n    }\n\n    cancelIndexing(configOptions: ConfigOptions) {\n        /* noop */\n    }\n\n    async getDiagnosticsForRange(filePath: string, range: Range, token: CancellationToken): Promise<Diagnostic[]> {\n        throwIfCancellationRequested(token);\n\n        const { port1, port2 } = new MessageChannel();\n        const waiter = getBackgroundWaiter<Diagnostic[]>(port1);\n\n        const cancellationId = getCancellationTokenId(token);\n        this.enqueueRequest({\n            requestType: 'getDiagnosticsForRange',\n            data: { filePath, range, cancellationId },\n            port: port2,\n        });\n\n        const result = await waiter;\n\n        port2.close();\n        port1.close();\n\n        return convertDiagnostics(result);\n    }\n\n    async writeTypeStub(\n        targetImportPath: string,\n        targetIsSingleFile: boolean,\n        stubPath: string,\n        token: CancellationToken\n    ): Promise<any> {\n        throwIfCancellationRequested(token);\n\n        const { port1, port2 } = new MessageChannel();\n        const waiter = getBackgroundWaiter(port1);\n\n        const cancellationId = getCancellationTokenId(token);\n        this.enqueueRequest({\n            requestType: 'writeTypeStub',\n            data: { targetImportPath, targetIsSingleFile, stubPath, cancellationId },\n            port: port2,\n        });\n\n        await waiter;\n\n        port2.close();\n        port1.close();\n    }\n\n    invalidateAndForceReanalysis() {\n        this.enqueueRequest({ requestType: 'invalidateAndForceReanalysis', data: null });\n    }\n\n    restart() {\n        this.enqueueRequest({ requestType: 'restart', data: null });\n    }\n\n    protected enqueueRequest(request: AnalysisRequest) {\n        if (this._worker) {\n            this._worker.postMessage(request, request.port ? [request.port] : undefined);\n        }\n    }\n\n    protected log(level: LogLevel, msg: string) {\n        log(this.console, level, msg);\n    }\n}\n\nexport class BackgroundAnalysisRunnerBase extends BackgroundThreadBase {\n    private _configOptions: ConfigOptions;\n    private _importResolver: ImportResolver;\n    private _program: Program;\n\n    get program(): Program {\n        return this._program;\n    }\n\n    protected constructor(private _extension?: LanguageServiceExtension) {\n        super(workerData as InitializationData);\n\n        // Stash the base directory into a global variable.\n        const data = workerData as InitializationData;\n        this.log(LogLevel.Info, `Background analysis(${threadId}) root directory: ${data.rootDirectory}`);\n\n        this._configOptions = new ConfigOptions(data.rootDirectory);\n        this._importResolver = this.createImportResolver(this.fs, this._configOptions);\n        const console = this.getConsole();\n        this._program = new Program(\n            this._importResolver,\n            this._configOptions,\n            console,\n            this._extension,\n            new LogTracker(console, `BG(${threadId})`)\n        );\n    }\n\n    start() {\n        this.log(LogLevel.Info, `Background analysis(${threadId}) started`);\n\n        // Get requests from main thread.\n        parentPort?.on('message', (msg: AnalysisRequest) => this.onMessage(msg));\n\n        parentPort?.on('error', (msg) => debug.fail(`failed ${msg}`));\n        parentPort?.on('exit', (c) => {\n            if (c !== 0) {\n                debug.fail(`worker stopped with exit code ${c}`);\n            }\n        });\n    }\n\n    protected onMessage(msg: AnalysisRequest) {\n        this.log(LogLevel.Log, `Background analysis message: ${msg.requestType}`);\n\n        switch (msg.requestType) {\n            case 'analyze': {\n                const port = msg.port!;\n                const token = getCancellationTokenFromId(msg.data);\n\n                // Report files to analyze first.\n                const filesLeftToAnalyze = this.program.getFilesToAnalyzeCount();\n\n                this._onAnalysisCompletion(port, {\n                    diagnostics: [],\n                    filesInProgram: this.program.getFileCount(),\n                    filesRequiringAnalysis: filesLeftToAnalyze,\n                    checkingOnlyOpenFiles: this.program.isCheckingOnlyOpenFiles(),\n                    fatalErrorOccurred: false,\n                    configParseErrorOccurred: false,\n                    elapsedTime: 0,\n                });\n\n                this._analyzeOneChunk(port, token, msg);\n                break;\n            }\n\n            case 'resumeAnalysis': {\n                const port = msg.port!;\n                const token = getCancellationTokenFromId(msg.data);\n\n                this._analyzeOneChunk(port, token, msg);\n                break;\n            }\n\n            case 'getDiagnosticsForRange': {\n                run(() => {\n                    const { filePath, range, cancellationId } = msg.data;\n                    const token = getCancellationTokenFromId(cancellationId);\n                    throwIfCancellationRequested(token);\n\n                    return this.program.getDiagnosticsForRange(filePath, range);\n                }, msg.port!);\n                break;\n            }\n\n            case 'writeTypeStub': {\n                run(() => {\n                    const { targetImportPath, targetIsSingleFile, stubPath, cancellationId } = msg.data;\n                    const token = getCancellationTokenFromId(cancellationId);\n\n                    analyzeProgram(\n                        this.program,\n                        undefined,\n                        this._configOptions,\n                        nullCallback,\n                        this.getConsole(),\n                        token\n                    );\n                    this.program.writeTypeStub(targetImportPath, targetIsSingleFile, stubPath, token);\n                }, msg.port!);\n                break;\n            }\n\n            case 'setConfigOptions': {\n                this._configOptions = createConfigOptionsFrom(msg.data);\n                this._importResolver = this.createImportResolver(this.fs, this._configOptions);\n                this.program.setConfigOptions(this._configOptions);\n                this.program.setImportResolver(this._importResolver);\n                break;\n            }\n\n            case 'setTrackedFiles': {\n                const diagnostics = this.program.setTrackedFiles(msg.data);\n                this._reportDiagnostics(diagnostics, this.program.getFilesToAnalyzeCount(), 0);\n                break;\n            }\n\n            case 'setAllowedThirdPartyImports': {\n                this.program.setAllowedThirdPartyImports(msg.data);\n                break;\n            }\n\n            case 'setFileOpened': {\n                const { filePath, version, contents } = msg.data;\n                this.program.setFileOpened(filePath, version, contents);\n                break;\n            }\n\n            case 'setFileClosed': {\n                const diagnostics = this.program.setFileClosed(msg.data);\n                this._reportDiagnostics(diagnostics, this.program.getFilesToAnalyzeCount(), 0);\n                break;\n            }\n\n            case 'markAllFilesDirty': {\n                this.program.markAllFilesDirty(msg.data);\n                break;\n            }\n\n            case 'markFilesDirty': {\n                const { filePaths, evenIfContentsAreSame } = msg.data;\n                this.program.markFilesDirty(filePaths, evenIfContentsAreSame);\n                break;\n            }\n\n            case 'invalidateAndForceReanalysis': {\n                // Make sure the import resolver doesn't have invalid\n                // cached entries.\n                this._importResolver.invalidateCache();\n\n                // Mark all files with one or more errors dirty.\n                this.program.markAllFilesDirty(true);\n                break;\n            }\n\n            case 'restart': {\n                // recycle import resolver\n                this._importResolver = this.createImportResolver(this.fs, this._configOptions);\n                this.program.setImportResolver(this._importResolver);\n                break;\n            }\n\n            default: {\n                debug.fail(`${msg.requestType} is not expected`);\n            }\n        }\n    }\n\n    private _analyzeOneChunk(port: MessagePort, token: CancellationToken, msg: AnalysisRequest) {\n        // Report results at the interval of the max analysis time.\n        const maxTime = { openFilesTimeInMs: 50, noOpenFilesTimeInMs: 200 };\n        const moreToAnalyze = analyzeProgram(\n            this.program,\n            maxTime,\n            this._configOptions,\n            (result) => this._onAnalysisCompletion(port, result),\n            this.getConsole(),\n            token\n        );\n\n        if (moreToAnalyze) {\n            // There's more to analyze after we exceeded max time,\n            // so report that we are paused. The foreground thread will\n            // then queue up a message to resume the analysis.\n            this._analysisPaused(port, msg.data);\n        } else {\n            this.processIndexing(port, token);\n            this._analysisDone(port, msg.data);\n        }\n    }\n\n    protected createImportResolver(fs: FileSystem, options: ConfigOptions): ImportResolver {\n        return new ImportResolver(fs, options);\n    }\n\n    protected processIndexing(port: MessagePort, token: CancellationToken) {\n        /* noop */\n    }\n\n    protected reportIndex(port: MessagePort, result: { path: string; indexResults: IndexResults }) {\n        port.postMessage({ requestType: 'indexResult', data: result });\n    }\n\n    private _reportDiagnostics(diagnostics: FileDiagnostics[], filesLeftToAnalyze: number, elapsedTime: number) {\n        if (parentPort) {\n            this._onAnalysisCompletion(parentPort, {\n                diagnostics,\n                filesInProgram: this.program.getFileCount(),\n                filesRequiringAnalysis: filesLeftToAnalyze,\n                checkingOnlyOpenFiles: this.program.isCheckingOnlyOpenFiles(),\n                fatalErrorOccurred: false,\n                configParseErrorOccurred: false,\n                elapsedTime,\n            });\n        }\n    }\n\n    private _onAnalysisCompletion(port: MessagePort, result: AnalysisResults) {\n        port.postMessage({ requestType: 'analysisResult', data: result });\n    }\n\n    private _analysisPaused(port: MessagePort, cancellationId: string) {\n        port.postMessage({ requestType: 'analysisPaused', data: cancellationId });\n    }\n\n    private _analysisDone(port: MessagePort, cancellationId: string) {\n        port.postMessage({ requestType: 'analysisDone', data: cancellationId });\n    }\n}\n\nfunction convertAnalysisResults(result: AnalysisResults): AnalysisResults {\n    result.diagnostics = result.diagnostics.map((f: FileDiagnostics) => {\n        return {\n            filePath: f.filePath,\n            diagnostics: convertDiagnostics(f.diagnostics),\n        };\n    });\n\n    return result;\n}\n\nfunction convertDiagnostics(diagnostics: Diagnostic[]) {\n    // Elements are typed as \"any\" since data crossing the process\n    // boundary loses type info.\n    return diagnostics.map<Diagnostic>((d: any) => {\n        const diag = new Diagnostic(d.category, d.message, d.range);\n        if (d._actions) {\n            for (const action of d._actions) {\n                diag.addAction(action);\n            }\n        }\n\n        if (d._rule) {\n            diag.setRule(d._rule);\n        }\n\n        if (d._relatedInfo) {\n            for (const info of d._relatedInfo) {\n                diag.addRelatedInfo(info.message, info.filePath, info.range);\n            }\n        }\n\n        return diag;\n    });\n}\n\nexport interface InitializationData {\n    rootDirectory: string;\n    cancellationFolderName?: string;\n    runner?: string;\n}\n\nexport interface AnalysisRequest {\n    requestType:\n        | 'analyze'\n        | 'resumeAnalysis'\n        | 'setConfigOptions'\n        | 'setTrackedFiles'\n        | 'setAllowedThirdPartyImports'\n        | 'setFileOpened'\n        | 'setFileClosed'\n        | 'markAllFilesDirty'\n        | 'markFilesDirty'\n        | 'invalidateAndForceReanalysis'\n        | 'restart'\n        | 'getDiagnosticsForRange'\n        | 'writeTypeStub'\n        | 'getSemanticTokens';\n\n    data: any;\n    port?: MessagePort;\n}\n\ninterface AnalysisResponse {\n    requestType: 'log' | 'analysisResult' | 'analysisPaused' | 'indexResult' | 'analysisDone';\n    data: any;\n}\n","/*\n * backgroundThreadBase.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * base class for background worker thread.\n */\n\nimport { MessagePort, parentPort } from 'worker_threads';\n\nimport { OperationCanceledException, setCancellationFolderName } from './common/cancellationUtils';\nimport { ConfigOptions } from './common/configOptions';\nimport { LogLevel } from './common/console';\nimport * as debug from './common/debug';\nimport { createFromRealFileSystem, FileSystem } from './common/fileSystem';\nimport { FileSpec } from './common/pathUtils';\n\nexport class BackgroundThreadBase {\n    protected fs: FileSystem;\n\n    protected constructor(data: InitializationData) {\n        setCancellationFolderName(data.cancellationFolderName);\n\n        // Stash the base directory into a global variable.\n        (global as any).__rootDirectory = data.rootDirectory;\n\n        this.fs = createFromRealFileSystem(this.getConsole());\n    }\n\n    protected log(level: LogLevel, msg: string) {\n        parentPort?.postMessage({ requestType: 'log', data: { level: level, message: msg } });\n    }\n\n    protected getConsole() {\n        return {\n            log: (msg: string) => {\n                this.log(LogLevel.Log, msg);\n            },\n            info: (msg: string) => {\n                this.log(LogLevel.Info, msg);\n            },\n            warn: (msg: string) => {\n                this.log(LogLevel.Warn, msg);\n            },\n            error: (msg: string) => {\n                this.log(LogLevel.Error, msg);\n            },\n            // We always generate logs in the background. For the foreground,\n            // we'll decide decide based on user setting whether.\n            level: LogLevel.Log,\n        };\n    }\n}\n\nexport function createConfigOptionsFrom(jsonObject: any): ConfigOptions {\n    const configOptions = new ConfigOptions(jsonObject.projectRoot);\n    const getFileSpec = (fileSpec: any): FileSpec => {\n        return { wildcardRoot: fileSpec.wildcardRoot, regExp: new RegExp(fileSpec.regExp.source) };\n    };\n\n    configOptions.pythonPath = jsonObject.pythonPath;\n    configOptions.typeshedPath = jsonObject.typeshedPath;\n    configOptions.stubPath = jsonObject.stubPath;\n    configOptions.autoExcludeVenv = jsonObject.autoExcludeVenv;\n    configOptions.verboseOutput = jsonObject.verboseOutput;\n    configOptions.checkOnlyOpenFiles = jsonObject.checkOnlyOpenFiles;\n    configOptions.useLibraryCodeForTypes = jsonObject.useLibraryCodeForTypes;\n    configOptions.internalTestMode = jsonObject.internalTestMode;\n    configOptions.venvPath = jsonObject.venvPath;\n    configOptions.defaultVenv = jsonObject.defaultVenv;\n    configOptions.defaultPythonVersion = jsonObject.defaultPythonVersion;\n    configOptions.defaultPythonPlatform = jsonObject.defaultPythonPlatform;\n    configOptions.diagnosticRuleSet = jsonObject.diagnosticRuleSet;\n    configOptions.executionEnvironments = jsonObject.executionEnvironments;\n    configOptions.autoImportCompletions = jsonObject.autoImportCompletions;\n    configOptions.indexing = jsonObject.indexing;\n    configOptions.include = jsonObject.include.map((f: any) => getFileSpec(f));\n    configOptions.exclude = jsonObject.exclude.map((f: any) => getFileSpec(f));\n    configOptions.ignore = jsonObject.ignore.map((f: any) => getFileSpec(f));\n    configOptions.strict = jsonObject.strict.map((f: any) => getFileSpec(f));\n\n    return configOptions;\n}\n\nexport function run(code: () => any, port: MessagePort) {\n    try {\n        const result = code();\n        port.postMessage({ kind: 'ok', data: result });\n    } catch (e) {\n        if (OperationCanceledException.is(e)) {\n            port.postMessage({ kind: 'cancelled', data: e.message });\n            return;\n        }\n\n        port.postMessage({ kind: 'failed', data: `Exception: ${e.message} in ${e.stack}` });\n    }\n}\n\nexport function getBackgroundWaiter<T>(port: MessagePort): Promise<T> {\n    return new Promise((resolve, reject) => {\n        port.on('message', (m: RequestResponse) => {\n            switch (m.kind) {\n                case 'ok':\n                    resolve(m.data);\n                    break;\n\n                case 'cancelled':\n                    reject(new OperationCanceledException());\n                    break;\n\n                case 'failed':\n                    reject(m.data);\n                    break;\n\n                default:\n                    debug.fail(`unknown kind ${m.kind}`);\n            }\n        });\n    });\n}\n\nexport interface InitializationData {\n    rootDirectory: string;\n    cancellationFolderName?: string;\n    runner?: string;\n}\n\nexport interface RequestResponse {\n    kind: 'ok' | 'failed' | 'cancelled';\n    data: any;\n}\n\nexport interface LogData {\n    level: LogLevel;\n    message: string;\n}\n","/*\n * commandController.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Implements language server commands execution functionality.\n */\n\nimport { CancellationToken, ExecuteCommandParams, ResponseError } from 'vscode-languageserver';\n\nimport { LanguageServerInterface } from '../languageServerBase';\nimport { Commands } from './commands';\nimport { CreateTypeStubCommand } from './createTypeStub';\nimport { QuickActionCommand } from './quickActionCommand';\nimport { RestartServerCommand } from './restartServer';\n\nexport interface ServerCommand {\n    execute(cmdParams: ExecuteCommandParams, token: CancellationToken): Promise<any>;\n}\n\nexport class CommandController implements ServerCommand {\n    private _createStub: CreateTypeStubCommand;\n    private _restartServer: RestartServerCommand;\n    private _quickAction: QuickActionCommand;\n\n    constructor(ls: LanguageServerInterface) {\n        this._createStub = new CreateTypeStubCommand(ls);\n        this._restartServer = new RestartServerCommand(ls);\n        this._quickAction = new QuickActionCommand(ls);\n    }\n\n    async execute(cmdParams: ExecuteCommandParams, token: CancellationToken): Promise<any> {\n        switch (cmdParams.command) {\n            case Commands.orderImports:\n            case Commands.addMissingOptionalToParam: {\n                return this._quickAction.execute(cmdParams, token);\n            }\n\n            case Commands.createTypeStub: {\n                return this._createStub.execute(cmdParams, token);\n            }\n\n            case Commands.restartServer: {\n                return this._restartServer.execute(cmdParams);\n            }\n\n            default: {\n                return new ResponseError<string>(1, 'Unsupported command');\n            }\n        }\n    }\n\n    isLongRunningCommand(command: string): boolean {\n        switch (command) {\n            case Commands.createTypeStub:\n                return true;\n\n            default:\n                return false;\n        }\n    }\n}\n","/*\n * createTypeStub.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Implements 'create stub' command functionality.\n */\n\nimport { CancellationToken, ExecuteCommandParams } from 'vscode-languageserver';\n\nimport { AnalyzerService } from '../analyzer/service';\nimport { OperationCanceledException } from '../common/cancellationUtils';\nimport { createDeferred } from '../common/deferred';\nimport { convertPathToUri } from '../common/pathUtils';\nimport { LanguageServerInterface, WorkspaceServiceInstance } from '../languageServerBase';\nimport { AnalyzerServiceExecutor } from '../languageService/analyzerServiceExecutor';\nimport { ServerCommand } from './commandController';\n\nexport class CreateTypeStubCommand implements ServerCommand {\n    constructor(private _ls: LanguageServerInterface) {}\n\n    async execute(cmdParams: ExecuteCommandParams, token: CancellationToken): Promise<any> {\n        if (cmdParams.arguments && cmdParams.arguments.length >= 2) {\n            const workspaceRoot = cmdParams.arguments[0];\n            const importName = cmdParams.arguments[1];\n            const callingFile = cmdParams.arguments[2];\n\n            const service = await this._createTypeStubService(callingFile);\n\n            // Allocate a temporary pseudo-workspace to perform this job.\n            const workspace: WorkspaceServiceInstance = {\n                workspaceName: `Create Type Stub ${importName}`,\n                rootPath: workspaceRoot,\n                rootUri: convertPathToUri(workspaceRoot),\n                serviceInstance: service,\n                disableLanguageServices: true,\n                disableOrganizeImports: true,\n                isInitialized: createDeferred<boolean>(),\n            };\n\n            const serverSettings = await this._ls.getSettings(workspace);\n            AnalyzerServiceExecutor.runWithOptions(this._ls.rootPath, workspace, serverSettings, importName, false);\n\n            try {\n                await service.writeTypeStubInBackground(token);\n                service.dispose();\n                const infoMessage = `Type stub was successfully created for '${importName}'.`;\n                this._ls.window.showInformationMessage(infoMessage);\n                this._handlePostCreateTypeStub();\n            } catch (err) {\n                const isCancellation = OperationCanceledException.is(err);\n                if (isCancellation) {\n                    const errMessage = `Type stub creation for '${importName}' was canceled`;\n                    this._ls.console.error(errMessage);\n                } else {\n                    let errMessage = '';\n                    if (err instanceof Error) {\n                        errMessage = ': ' + err.message;\n                    }\n                    errMessage = `An error occurred when creating type stub for '${importName}'` + errMessage;\n                    this._ls.console.error(errMessage);\n                    this._ls.window.showErrorMessage(errMessage);\n                }\n            }\n        }\n    }\n\n    // Creates a service instance that's used for creating type\n    // stubs for a specified target library.\n    private async _createTypeStubService(callingFile?: string): Promise<AnalyzerService> {\n        if (callingFile) {\n            // this should let us to inherit all execution env of the calling file\n            // if it is invoked from IDE through code action\n            const workspace = await this._ls.getWorkspaceForFile(callingFile);\n\n            // new service has its own background analysis running on its own thread\n            // to not block main bg running background analysis\n            return workspace.serviceInstance.clone('Type stub', this._ls.createBackgroundAnalysis());\n        }\n\n        return new AnalyzerService('Type stub', this._ls.fs, this._ls.console);\n    }\n\n    private _handlePostCreateTypeStub() {\n        this._ls.reanalyze();\n    }\n}\n","/*\n * quickActionCommand.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Implements command that maps to a quick action.\n */\n\nimport { CancellationToken, ExecuteCommandParams } from 'vscode-languageserver';\n\nimport { convertUriToPath } from '../common/pathUtils';\nimport { convertTextEdits } from '../common/textEditUtils';\nimport { LanguageServerInterface } from '../languageServerBase';\nimport { ServerCommand } from './commandController';\nimport { Commands } from './commands';\n\nexport class QuickActionCommand implements ServerCommand {\n    constructor(private _ls: LanguageServerInterface) {}\n\n    async execute(params: ExecuteCommandParams, token: CancellationToken): Promise<any> {\n        if (params.arguments && params.arguments.length >= 1) {\n            const docUri = params.arguments[0];\n            const otherArgs = params.arguments.slice(1);\n            const filePath = convertUriToPath(docUri);\n            const workspace = await this._ls.getWorkspaceForFile(filePath);\n\n            if (params.command === Commands.orderImports && workspace.disableOrganizeImports) {\n                return [];\n            }\n\n            const editActions = workspace.serviceInstance.performQuickAction(\n                filePath,\n                params.command,\n                otherArgs,\n                token\n            );\n\n            return convertTextEdits(docUri, editActions);\n        }\n    }\n}\n","/*\n * restartServer.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Implements 'restart server' command functionality.\n */\n\nimport { ExecuteCommandParams } from 'vscode-languageserver';\n\nimport { LanguageServerInterface } from '../languageServerBase';\nimport { ServerCommand } from './commandController';\n\nexport class RestartServerCommand implements ServerCommand {\n    constructor(private _ls: LanguageServerInterface) {}\n\n    async execute(cmdParams: ExecuteCommandParams): Promise<any> {\n        this._ls.restart();\n    }\n}\n","/*\n * cancellationUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Helper methods relating to cancellation.\n */\n\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { CancellationId, CancellationTokenSource } from 'vscode-jsonrpc';\nimport {\n    AbstractCancellationTokenSource,\n    CancellationReceiverStrategy,\n    CancellationSenderStrategy,\n    CancellationStrategy,\n    CancellationToken,\n    Disposable,\n    Emitter,\n    ErrorCodes,\n    Event,\n    ResponseError,\n} from 'vscode-languageserver';\n\nclass CancellationThrottle {\n    private static _lastCheckTimestamp = 0;\n\n    static shouldCheck() {\n        // Throttle cancellation checks to one every 5ms. This value\n        // was selected through empirical testing. If we call the\n        // file system more often than this, type analysis performance\n        // is affected. If we call it less often, performance doesn't\n        // improve much, but responsiveness suffers.\n        const minTimeBetweenChecksInMs = 5;\n        const curTimestamp = Date.now().valueOf();\n        const timeSinceLastCheck = curTimestamp - this._lastCheckTimestamp;\n\n        if (timeSinceLastCheck >= minTimeBetweenChecksInMs) {\n            this._lastCheckTimestamp = curTimestamp;\n            return true;\n        }\n\n        return false;\n    }\n}\n\nclass FileBasedToken implements CancellationToken {\n    protected isCancelled = false;\n    private _emitter: Emitter<any> | undefined;\n\n    constructor(readonly cancellationFilePath: string) {}\n\n    public cancel() {\n        if (!this.isCancelled) {\n            this.isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this._disposeEmitter();\n            }\n        }\n    }\n\n    get isCancellationRequested(): boolean {\n        if (this.isCancelled) {\n            return true;\n        }\n\n        if (CancellationThrottle.shouldCheck() && this._pipeExists()) {\n            // The first time it encounters the cancellation file, it will\n            // cancel itself and raise a cancellation event.\n            // In this mode, cancel() might not be called explicitly by\n            // jsonrpc layer.\n            this.cancel();\n        }\n\n        return this.isCancelled;\n    }\n\n    get onCancellationRequested(): Event<any> {\n        if (!this._emitter) {\n            this._emitter = new Emitter<any>();\n        }\n        return this._emitter.event;\n    }\n\n    public dispose(): void {\n        this._disposeEmitter();\n    }\n\n    private _disposeEmitter() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n\n    private _pipeExists(): boolean {\n        try {\n            fs.statSync(this.cancellationFilePath);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\nclass OwningFileToken extends FileBasedToken {\n    private _disposed = false;\n\n    constructor(cancellationFilePath: string) {\n        super(cancellationFilePath);\n    }\n\n    public cancel() {\n        if (!this._disposed && !this.isCancelled) {\n            this._createPipe();\n            super.cancel();\n        }\n    }\n\n    get isCancellationRequested(): boolean {\n        // Since this object owns the file and it gets created when the\n        // token is cancelled, there's no point in checking the pipe.\n        return this.isCancelled;\n    }\n\n    public dispose(): void {\n        this._disposed = true;\n\n        super.dispose();\n        this._removePipe();\n    }\n\n    private _createPipe() {\n        try {\n            fs.writeFileSync(this.cancellationFilePath, '', { flag: 'w' });\n        } catch {\n            // Ignore the exception.\n        }\n    }\n\n    private _removePipe() {\n        try {\n            fs.unlinkSync(this.cancellationFilePath);\n        } catch {\n            // Ignore the exception.\n        }\n    }\n}\n\nclass FileBasedCancellationTokenSource implements AbstractCancellationTokenSource {\n    private _token: CancellationToken | undefined;\n    constructor(private _cancellationFilePath: string, private _ownFile: boolean = false) {}\n\n    get token(): CancellationToken {\n        if (!this._token) {\n            // Be lazy and create the token only when actually needed.\n            this._token = this._ownFile\n                ? new OwningFileToken(this._cancellationFilePath)\n                : new FileBasedToken(this._cancellationFilePath);\n        }\n        return this._token;\n    }\n\n    cancel(): void {\n        if (!this._token) {\n            // Save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token.\n            this._token = CancellationToken.Cancelled;\n        } else {\n            (this._token as FileBasedToken).cancel();\n        }\n    }\n\n    dispose(): void {\n        if (!this._token) {\n            // Make sure to initialize with an empty token if we had none.\n            this._token = CancellationToken.None;\n        } else if (this._token instanceof FileBasedToken) {\n            // Actually dispose.\n            this._token.dispose();\n        }\n    }\n}\n\nfunction getCancellationFolderPath(folderName: string) {\n    return path.join(os.tmpdir(), 'python-languageserver-cancellation', folderName);\n}\n\nfunction getCancellationFilePath(folderName: string, id: CancellationId) {\n    return path.join(getCancellationFolderPath(folderName), `cancellation-${String(id)}.tmp`);\n}\n\nclass FileCancellationReceiverStrategy implements CancellationReceiverStrategy {\n    constructor(readonly folderName: string) {}\n\n    createCancellationTokenSource(id: CancellationId): AbstractCancellationTokenSource {\n        return new FileBasedCancellationTokenSource(getCancellationFilePath(this.folderName, id));\n    }\n}\n\nexport class OperationCanceledException extends ResponseError<void> {\n    constructor() {\n        super(ErrorCodes.RequestCancelled, 'request cancelled');\n    }\n\n    static is(e: any) {\n        return e.code === ErrorCodes.RequestCancelled;\n    }\n}\n\nexport function throwIfCancellationRequested(token: CancellationToken) {\n    if (token.isCancellationRequested) {\n        throw new OperationCanceledException();\n    }\n}\n\nlet cancellationFolderName: string | undefined;\n\nexport function getCancellationFolderName() {\n    return cancellationFolderName;\n}\n\nexport function setCancellationFolderName(folderName?: string) {\n    cancellationFolderName = folderName;\n}\n\nexport function getCancellationStrategyFromArgv(argv: string[]): CancellationStrategy {\n    let receiver: CancellationReceiverStrategy | undefined;\n\n    for (let i = 0; i < argv.length; i++) {\n        const arg = argv[i];\n        if (arg === '--cancellationReceive') {\n            receiver = createReceiverStrategyFromArgv(argv[i + 1]);\n        } else {\n            const args = arg.split('=');\n            if (args[0] === '--cancellationReceive') {\n                receiver = createReceiverStrategyFromArgv(args[1]);\n            }\n        }\n    }\n\n    if (receiver && !cancellationFolderName) {\n        setCancellationFolderName((receiver as FileCancellationReceiverStrategy).folderName);\n    }\n\n    receiver = receiver ? receiver : CancellationReceiverStrategy.Message;\n    return { receiver, sender: CancellationSenderStrategy.Message };\n\n    function createReceiverStrategyFromArgv(arg: string): CancellationReceiverStrategy | undefined {\n        const folderName = extractCancellationFolderName(arg);\n        return folderName ? new FileCancellationReceiverStrategy(folderName) : undefined;\n    }\n\n    function extractCancellationFolderName(arg: string): string | undefined {\n        const fileRegex = /^file:(.+)$/;\n        const folderName = arg.match(fileRegex);\n        return folderName ? folderName[1] : undefined;\n    }\n}\n\nlet cancellationSourceId = 0;\nexport function createBackgroundThreadCancellationTokenSource(): AbstractCancellationTokenSource {\n    if (!cancellationFolderName) {\n        // File-based cancellation is not used.\n        // Return regular cancellation token source.\n        return new CancellationTokenSource();\n    }\n\n    return new FileBasedCancellationTokenSource(\n        getCancellationFilePath(cancellationFolderName, `source-${String(cancellationSourceId++)}`),\n        true\n    );\n}\n\nexport function disposeCancellationToken(token: CancellationToken) {\n    if (token instanceof FileBasedToken) {\n        token.dispose();\n    }\n}\n\nexport function getCancellationTokenFromId(cancellationId: string) {\n    if (!cancellationId) {\n        return CancellationToken.None;\n    }\n\n    return new FileBasedToken(cancellationId);\n}\n\nexport function getCancellationTokenId(token: CancellationToken) {\n    return token instanceof FileBasedToken ? token.cancellationFilePath : undefined;\n}\n\nexport function CancelAfter(...tokens: CancellationToken[]) {\n    const source = new CancellationTokenSource();\n    const disposables: Disposable[] = [];\n\n    for (const token of tokens) {\n        disposables.push(\n            token.onCancellationRequested((_) => {\n                source.cancel();\n            })\n        );\n    }\n\n    disposables.push(\n        source.token.onCancellationRequested((_) => {\n            disposables.forEach((d) => d.dispose());\n        })\n    );\n\n    return source;\n}\n","/*\n * collectionUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Helper functions relating to collections and arrays.\n */\n\nimport { compareValues, Comparison, equateValues, isArray } from './core';\n\nexport const emptyArray: never[] = [] as never[];\nexport type EqualityComparer<T> = (a: T, b: T) => boolean;\n\nexport function contains<T>(\n    array: readonly T[] | undefined,\n    value: T,\n    equalityComparer: EqualityComparer<T> = equateValues\n): boolean {\n    if (array) {\n        for (const v of array) {\n            if (equalityComparer(v, value)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n/** Array that is only intended to be pushed to, never read. */\nexport interface Push<T> {\n    push(...values: T[]): void;\n}\n\n/**\n * Appends a value to an array, returning the array.\n *\n * @param to The array to which `value` is to be appended. If `to` is `undefined`, a new array\n * is created if `value` was appended.\n * @param value The value to append to the array. If `value` is `undefined`, nothing is\n * appended.\n */\nexport function append<TArray extends any[] | undefined, TValue extends NonNullable<TArray>[number] | undefined>(\n    to: TArray,\n    value: TValue\n): [undefined, undefined] extends [TArray, TValue] ? TArray : NonNullable<TArray>[number][];\nexport function append<T>(to: T[], value: T | undefined): T[];\nexport function append<T>(to: T[] | undefined, value: T): T[];\nexport function append<T>(to: T[] | undefined, value: T | undefined): T[] | undefined;\nexport function append<T>(to: T[] | undefined, value: T | undefined): T[] | undefined {\n    if (value === undefined) {\n        return to;\n    }\n    if (to === undefined) {\n        return [value];\n    }\n    to.push(value);\n    return to;\n}\n\n/** Works like Array.prototype.find, returning `undefined` if no element satisfying the predicate is found. */\nexport function find<T, U extends T>(\n    array: readonly T[],\n    predicate: (element: T, index: number) => element is U\n): U | undefined;\nexport function find<T>(array: readonly T[], predicate: (element: T, index: number) => boolean): T | undefined;\nexport function find<T>(array: readonly T[], predicate: (element: T, index: number) => boolean): T | undefined {\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        if (predicate(value, i)) {\n            return value;\n        }\n    }\n    return undefined;\n}\n\n/**\n * Gets the actual offset into an array for a relative offset. Negative offsets indicate a\n * position offset from the end of the array.\n */\nfunction toOffset(array: readonly any[], offset: number) {\n    return offset < 0 ? array.length + offset : offset;\n}\n\n/**\n * Appends a range of value to an array, returning the array.\n *\n * @param to The array to which `value` is to be appended. If `to` is `undefined`, a new array\n * is created if `value` was appended.\n * @param from The values to append to the array. If `from` is `undefined`, nothing is\n * appended. If an element of `from` is `undefined`, that element is not appended.\n * @param start The offset in `from` at which to start copying values.\n * @param end The offset in `from` at which to stop copying values (non-inclusive).\n */\nexport function addRange<T>(to: T[], from: readonly T[] | undefined, start?: number, end?: number): T[];\nexport function addRange<T>(\n    to: T[] | undefined,\n    from: readonly T[] | undefined,\n    start?: number,\n    end?: number\n): T[] | undefined;\nexport function addRange<T>(\n    to: T[] | undefined,\n    from: readonly T[] | undefined,\n    start?: number,\n    end?: number\n): T[] | undefined {\n    if (from === undefined || from.length === 0) {\n        return to;\n    }\n    if (to === undefined) {\n        return from.slice(start, end);\n    }\n    start = start === undefined ? 0 : toOffset(from, start);\n    end = end === undefined ? from.length : toOffset(from, end);\n    for (let i = start; i < end && i < from.length; i++) {\n        if (from[i] !== undefined) {\n            to.push(from[i]);\n        }\n    }\n    return to;\n}\n\nexport function insertAt<T>(array: T[], index: number, value: T) {\n    if (index === 0) {\n        array.unshift(value);\n    } else if (index === array.length) {\n        array.push(value);\n    } else {\n        for (let i = array.length; i > index; i--) {\n            array[i] = array[i - 1];\n        }\n        array[index] = value;\n    }\n    return array;\n}\n\nexport type Comparer<T> = (a: T, b: T) => Comparison;\n\nexport interface SortedReadonlyArray<T> extends ReadonlyArray<T> {\n    ' __sortedArrayBrand': any;\n}\n\nexport interface SortedArray<T> extends Array<T> {\n    ' __sortedArrayBrand': any;\n}\n\n/**\n * Returns a new sorted array.\n */\nexport function cloneAndSort<T>(array: readonly T[], comparer?: Comparer<T>): SortedReadonlyArray<T> {\n    return (array.length === 0 ? array : array.slice().sort(comparer)) as SortedReadonlyArray<T>;\n}\n\nfunction selectIndex(_: unknown, i: number) {\n    return i;\n}\n\nfunction indicesOf(array: readonly unknown[]): number[] {\n    return array.map(selectIndex);\n}\n\n/**\n * Stable sort of an array. Elements equal to each other maintain their relative position in the array.\n */\nexport function stableSort<T>(array: readonly T[], comparer: Comparer<T>): SortedReadonlyArray<T> {\n    const indices = indicesOf(array);\n    stableSortIndices(array, indices, comparer);\n    return (indices.map((i) => array[i]) as SortedArray<T>) as SortedReadonlyArray<T>;\n}\n\nfunction stableSortIndices<T>(array: readonly T[], indices: number[], comparer: Comparer<T>) {\n    // sort indices by value then position\n    indices.sort((x, y) => comparer(array[x], array[y]) || compareValues(x, y));\n}\n\nexport function map<T, U>(array: readonly T[], f: (x: T, i: number) => U): U[];\nexport function map<T, U>(array: readonly T[] | undefined, f: (x: T, i: number) => U): U[] | undefined;\nexport function map<T, U>(array: readonly T[] | undefined, f: (x: T, i: number) => U): U[] | undefined {\n    if (array) {\n        return array.map(f);\n    }\n    return undefined;\n}\n\nexport function some<T>(array: readonly T[] | undefined): array is readonly T[];\nexport function some<T>(array: readonly T[] | undefined, predicate: (value: T) => boolean): boolean;\nexport function some<T>(array: readonly T[] | undefined, predicate?: (value: T) => boolean): boolean {\n    if (array) {\n        if (predicate) {\n            return array.some(predicate);\n        } else {\n            return array.length > 0;\n        }\n    }\n    return false;\n}\n\n/**\n * Iterates through `array` by index and performs the callback on each element of array until the callback\n * returns a falsey value, then returns false.\n * If no such value is found, the callback is applied to each element of array and `true` is returned.\n */\nexport function every<T>(array: readonly T[], callback: (element: T, index: number) => boolean): boolean {\n    if (array) {\n        return array.every(callback);\n    }\n\n    return true;\n}\n\n/**\n * Performs a binary search, finding the index at which `value` occurs in `array`.\n * If no such index is found, returns the 2's-complement of first index at which\n * `array[index]` exceeds `value`.\n * @param array A sorted array whose first element must be no larger than number\n * @param value The value to be searched for in the array.\n * @param keySelector A callback used to select the search key from `value` and each element of\n * `array`.\n * @param keyComparer A callback used to compare two keys in a sorted array.\n * @param offset An offset into `array` at which to start the search.\n */\nexport function binarySearch<T, U>(\n    array: readonly T[],\n    value: T,\n    keySelector: (v: T) => U,\n    keyComparer: Comparer<U>,\n    offset?: number\n): number {\n    return binarySearchKey(array, keySelector(value), keySelector, keyComparer, offset);\n}\n\n/**\n * Performs a binary search, finding the index at which an object with `key` occurs in `array`.\n * If no such index is found, returns the 2's-complement of first index at which\n * `array[index]` exceeds `key`.\n * @param array A sorted array whose first element must be no larger than number\n * @param key The key to be searched for in the array.\n * @param keySelector A callback used to select the search key from each element of `array`.\n * @param keyComparer A callback used to compare two keys in a sorted array.\n * @param offset An offset into `array` at which to start the search.\n */\nexport function binarySearchKey<T, U>(\n    array: readonly T[],\n    key: U,\n    keySelector: (v: T) => U,\n    keyComparer: Comparer<U>,\n    offset?: number\n): number {\n    if (!some(array)) {\n        return -1;\n    }\n\n    let low = offset || 0;\n    let high = array.length - 1;\n    while (low <= high) {\n        const middle = low + ((high - low) >> 1);\n        const midKey = keySelector(array[middle]);\n        switch (keyComparer(midKey, key)) {\n            case Comparison.LessThan:\n                low = middle + 1;\n                break;\n            case Comparison.EqualTo:\n                return middle;\n            case Comparison.GreaterThan:\n                high = middle - 1;\n                break;\n        }\n    }\n\n    return ~low;\n}\n\n/**\n * Flattens an array containing a mix of array or non-array elements.\n *\n * @param array The array to flatten.\n */\nexport function flatten<T>(array: T[][] | readonly (T | readonly T[] | undefined)[]): T[] {\n    const result = [];\n    for (const v of array) {\n        if (v) {\n            if (isArray(v)) {\n                addRange(result, v);\n            } else {\n                result.push(v);\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Retrieves nested objects by parsing chained properties. ie. \"a.b.c\"\n * Returns undefined if not found\n * @param object The object to query\n * @param property The property to be searched for in the object ie. \"a.b.c\"\n */\nexport function getNestedProperty(object: any, property: string) {\n    const value = property.split('.').reduce((obj, prop) => {\n        return obj && obj[prop];\n    }, object);\n    return value;\n}\n","/*\n * commandLineOptions.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Class that holds the command-line options (those that can be\n * passed into the main entry point of the command-line version\n * of the analyzer).\n */\n\nexport const enum DiagnosticSeverityOverrides {\n    Error = 'error',\n    Warning = 'warning',\n    Information = 'information',\n    None = 'none',\n}\n\nexport function getDiagnosticSeverityOverrides() {\n    return [\n        DiagnosticSeverityOverrides.Error,\n        DiagnosticSeverityOverrides.Warning,\n        DiagnosticSeverityOverrides.Information,\n        DiagnosticSeverityOverrides.None,\n    ];\n}\n\nexport type DiagnosticSeverityOverridesMap = { [ruleName: string]: DiagnosticSeverityOverrides };\n\n// Some options can be specified from a source other than the pyright config file.\n// This can be from command-line parameters or some other settings mechanism, like\n// that provided through a language client like the VS Code editor. These options\n// are later combined with those from the config file to produce the final configuration.\nexport class CommandLineOptions {\n    constructor(executionRoot: string, fromVsCodeExtension: boolean) {\n        this.executionRoot = executionRoot;\n        this.fromVsCodeExtension = fromVsCodeExtension;\n    }\n\n    // A list of file specs to include in the analysis. Can contain\n    // directories, in which case all \"*.py\" files within those directories\n    // are included.\n    fileSpecs: string[] = [];\n\n    // Watch for changes in workspace source files.\n    watchForSourceChanges?: boolean;\n\n    // Watch for changes in environment library/search paths.\n    watchForLibraryChanges?: boolean;\n\n    // Path of config file. This option cannot be combined with\n    // file specs.\n    configFilePath?: string;\n\n    // Virtual environments directory.\n    venvPath?: string;\n\n    // Path to python interpreter.\n    pythonPath?: string;\n\n    // Path of typeshed stubs.\n    typeshedPath?: string;\n\n    // Path of typing folder\n    stubPath?: string;\n\n    // Absolute execution root (current working directory).\n    executionRoot: string;\n\n    // Type stub import target (for creation of type stubs).\n    typeStubTargetImportName?: string;\n\n    // Emit verbose information to console?\n    verboseOutput?: boolean;\n\n    // Indicates that only open files should be checked.\n    checkOnlyOpenFiles?: boolean;\n\n    // In the absence of type stubs, use library implementations\n    // to extract type information?\n    useLibraryCodeForTypes?: boolean;\n\n    // Look for a common root folders such as 'src' and automatically\n    // add them as extra paths if the user has not explicitly defined\n    // execution environments.\n    autoSearchPaths?: boolean;\n\n    // Extra paths to add to the default execution environment\n    // when user has not explicitly defined execution environments.\n    extraPaths?: string[];\n\n    // Default type-checking rule set. Should be one of 'off',\n    // 'basic', or 'strict'.\n    typeCheckingMode?: string;\n\n    // Indicates that the settings came from VS Code rather than\n    // from the command-line. Useful for providing clearer error\n    // messages.\n    fromVsCodeExtension: boolean;\n\n    // Indicates diagnostic severity overrides\n    diagnosticSeverityOverrides?: DiagnosticSeverityOverridesMap;\n\n    // Offer auto-import completions.\n    autoImportCompletions?: boolean;\n\n    // Use indexing.\n    indexing?: boolean;\n}\n","/*\n * configOptions.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Class that holds the configuration options for the analyzer.\n */\n\nimport * as child_process from 'child_process';\nimport { isAbsolute } from 'path';\n\nimport * as pathConsts from '../common/pathConsts';\nimport { DiagnosticSeverityOverridesMap } from './commandLineOptions';\nimport { ConsoleInterface } from './console';\nimport { DiagnosticRule } from './diagnosticRules';\nimport { FileSystem } from './fileSystem';\nimport {\n    combinePaths,\n    ensureTrailingDirectorySeparator,\n    FileSpec,\n    getFileSpec,\n    normalizePath,\n    resolvePaths,\n} from './pathUtils';\nimport {\n    latestStablePythonVersion,\n    PythonVersion,\n    versionFromMajorMinor,\n    versionFromString,\n    versionToString,\n} from './pythonVersion';\n\nexport enum PythonPlatform {\n    Darwin = 'Darwin',\n    Windows = 'Windows',\n    Linux = 'Linux',\n}\n\nexport class ExecutionEnvironment {\n    // Default to \".\" which indicates every file in the project.\n    constructor(root: string, defaultPythonVersion?: PythonVersion, defaultPythonPlatform?: string) {\n        this.root = root;\n        this.pythonVersion = defaultPythonVersion || latestStablePythonVersion;\n        this.pythonPlatform = defaultPythonPlatform;\n    }\n\n    // Root directory for execution - absolute or relative to the\n    // project root.\n    root: string;\n\n    // Always default to the latest stable version of the language.\n    pythonVersion: PythonVersion;\n\n    // Default to no platform.\n    pythonPlatform?: string;\n\n    // Default to no extra paths.\n    extraPaths: string[] = [];\n\n    // Name of virtual environment to use.\n    venv?: string;\n}\n\nexport type DiagnosticLevel = 'none' | 'information' | 'warning' | 'error';\n\nexport interface DiagnosticRuleSet {\n    // Should \"Unknown\" types be reported as \"Any\"?\n    printUnknownAsAny: boolean;\n\n    // Should type arguments to a generic class be omitted\n    // when printed if all arguments are Unknown or Any?\n    omitTypeArgsIfAny: boolean;\n\n    // Should parameter type be omitted if it is not annotated?\n    omitUnannotatedParamType: boolean;\n\n    // Should Union and Optional types be printed in PEP 604 format?\n    pep604Printing: boolean;\n\n    // Use strict inference rules for list expressions?\n    strictListInference: boolean;\n\n    // Use strict inference rules for dictionary expressions?\n    strictDictionaryInference: boolean;\n\n    // Use strict type rules for parameters assigned default of None?\n    strictParameterNoneValue: boolean;\n\n    // Enable support for type: ignore comments?\n    enableTypeIgnoreComments: boolean;\n\n    // Report general type issues?\n    reportGeneralTypeIssues: DiagnosticLevel;\n\n    // Report mismatch in types between property getter and setter?\n    reportPropertyTypeMismatch: DiagnosticLevel;\n\n    // Report missing imports?\n    reportMissingImports: DiagnosticLevel;\n\n    // Report missing imported module source files?\n    reportMissingModuleSource: DiagnosticLevel;\n\n    // Report missing type stub files?\n    reportMissingTypeStubs: DiagnosticLevel;\n\n    // Report cycles in import graph?\n    reportImportCycles: DiagnosticLevel;\n\n    // Report imported symbol that is not accessed?\n    reportUnusedImport: DiagnosticLevel;\n\n    // Report private class that is not accessed?\n    reportUnusedClass: DiagnosticLevel;\n\n    // Report private function or method that is not accessed?\n    reportUnusedFunction: DiagnosticLevel;\n\n    // Report variable that is not accessed?\n    reportUnusedVariable: DiagnosticLevel;\n\n    // Report symbol or module that is imported more than once?\n    reportDuplicateImport: DiagnosticLevel;\n\n    // Report use of wildcard import for non-local imports?\n    reportWildcardImportFromLibrary: DiagnosticLevel;\n\n    // Report attempts to subscript (index) an Optional type?\n    reportOptionalSubscript: DiagnosticLevel;\n\n    // Report attempts to access members on a Optional type?\n    reportOptionalMemberAccess: DiagnosticLevel;\n\n    // Report attempts to call a Optional type?\n    reportOptionalCall: DiagnosticLevel;\n\n    // Report attempts to use an Optional type as an iterable?\n    reportOptionalIterable: DiagnosticLevel;\n\n    // Report attempts to use an Optional type in a \"with\" statement?\n    reportOptionalContextManager: DiagnosticLevel;\n\n    // Report attempts to use an Optional type in a binary or unary operation.\n    reportOptionalOperand: DiagnosticLevel;\n\n    // Report untyped function decorators that obscure the function type?\n    reportUntypedFunctionDecorator: DiagnosticLevel;\n\n    // Report untyped class decorators that obscure the class type?\n    reportUntypedClassDecorator: DiagnosticLevel;\n\n    // Report untyped base class that obscure the class type?\n    reportUntypedBaseClass: DiagnosticLevel;\n\n    // Report use of untyped namedtuple factory method?\n    reportUntypedNamedTuple: DiagnosticLevel;\n\n    // Report usage of private variables and functions outside of\n    // the owning class or module?\n    reportPrivateUsage: DiagnosticLevel;\n\n    // Report attempts to redefine variables that are in all-caps.\n    reportConstantRedefinition: DiagnosticLevel;\n\n    // Report usage of method override that is incompatible with\n    // the base class method of the same name?\n    reportIncompatibleMethodOverride: DiagnosticLevel;\n\n    // Report usage of variable override that is incompatible with\n    // the base class symbol of the same name?\n    reportIncompatibleVariableOverride: DiagnosticLevel;\n\n    // Report usage of invalid escape sequences in string literals?\n    reportInvalidStringEscapeSequence: DiagnosticLevel;\n\n    // Report usage of unknown input or return parameters for functions?\n    reportUnknownParameterType: DiagnosticLevel;\n\n    // Report usage of unknown arguments for function calls?\n    reportUnknownArgumentType: DiagnosticLevel;\n\n    // Report usage of unknown input or return parameters for lambdas?\n    reportUnknownLambdaType: DiagnosticLevel;\n\n    // Report usage of unknown input or return parameters?\n    reportUnknownVariableType: DiagnosticLevel;\n\n    // Report usage of unknown input or return parameters?\n    reportUnknownMemberType: DiagnosticLevel;\n\n    // Report usage of generic class without explicit type arguments?\n    reportMissingTypeArgument: DiagnosticLevel;\n\n    // Report usage of function call within default value\n    // initialization expression?\n    reportCallInDefaultInitializer: DiagnosticLevel;\n\n    // Report calls to isinstance or issubclass that are statically determined\n    // to always be true or false.\n    reportUnnecessaryIsInstance: DiagnosticLevel;\n\n    // Report calls to cast that are statically determined\n    // to always unnecessary.\n    reportUnnecessaryCast: DiagnosticLevel;\n\n    // Report assert expressions that will always evaluate to true.\n    reportAssertAlwaysTrue: DiagnosticLevel;\n\n    // Report when \"self\" or \"cls\" parameter is missing or is misnamed.\n    reportSelfClsParameterName: DiagnosticLevel;\n\n    // Report implicit concatenation of string literals.\n    reportImplicitStringConcatenation: DiagnosticLevel;\n\n    // Report usage of undefined variables.\n    reportUndefinedVariable: DiagnosticLevel;\n\n    // Report usage of unbound or possibly unbound variables.\n    reportUnboundVariable: DiagnosticLevel;\n\n    // Report statements that are syntactically correct but\n    // have no semantic meaning within a type stub file.\n    reportInvalidStubStatement: DiagnosticLevel;\n}\n\nexport function cloneDiagnosticRuleSet(diagSettings: DiagnosticRuleSet): DiagnosticRuleSet {\n    // Create a shallow copy of the existing object.\n    return Object.assign({}, diagSettings);\n}\n\nexport function getBooleanDiagnosticRules() {\n    return [\n        DiagnosticRule.strictListInference,\n        DiagnosticRule.strictDictionaryInference,\n        DiagnosticRule.strictParameterNoneValue,\n\n        // Do not include this this one because we don't\n        // want to override it in strict mode or support\n        // it within pyright comments.\n        // DiagnosticRule.enableTypeIgnoreComments\n    ];\n}\n\nexport function getDiagLevelDiagnosticRules() {\n    return [\n        DiagnosticRule.reportGeneralTypeIssues,\n        DiagnosticRule.reportPropertyTypeMismatch,\n        DiagnosticRule.reportMissingImports,\n        DiagnosticRule.reportMissingModuleSource,\n        DiagnosticRule.reportMissingTypeStubs,\n        DiagnosticRule.reportImportCycles,\n        DiagnosticRule.reportUnusedImport,\n        DiagnosticRule.reportUnusedClass,\n        DiagnosticRule.reportUnusedFunction,\n        DiagnosticRule.reportUnusedVariable,\n        DiagnosticRule.reportDuplicateImport,\n        DiagnosticRule.reportWildcardImportFromLibrary,\n        DiagnosticRule.reportOptionalSubscript,\n        DiagnosticRule.reportOptionalMemberAccess,\n        DiagnosticRule.reportOptionalCall,\n        DiagnosticRule.reportOptionalIterable,\n        DiagnosticRule.reportOptionalContextManager,\n        DiagnosticRule.reportOptionalOperand,\n        DiagnosticRule.reportUntypedFunctionDecorator,\n        DiagnosticRule.reportUntypedClassDecorator,\n        DiagnosticRule.reportUntypedBaseClass,\n        DiagnosticRule.reportUntypedNamedTuple,\n        DiagnosticRule.reportPrivateUsage,\n        DiagnosticRule.reportConstantRedefinition,\n        DiagnosticRule.reportIncompatibleMethodOverride,\n        DiagnosticRule.reportIncompatibleVariableOverride,\n        DiagnosticRule.reportInvalidStringEscapeSequence,\n        DiagnosticRule.reportUnknownParameterType,\n        DiagnosticRule.reportUnknownArgumentType,\n        DiagnosticRule.reportUnknownLambdaType,\n        DiagnosticRule.reportUnknownVariableType,\n        DiagnosticRule.reportUnknownMemberType,\n        DiagnosticRule.reportMissingTypeArgument,\n        DiagnosticRule.reportCallInDefaultInitializer,\n        DiagnosticRule.reportUnnecessaryIsInstance,\n        DiagnosticRule.reportUnnecessaryCast,\n        DiagnosticRule.reportAssertAlwaysTrue,\n        DiagnosticRule.reportSelfClsParameterName,\n        DiagnosticRule.reportImplicitStringConcatenation,\n        DiagnosticRule.reportUndefinedVariable,\n        DiagnosticRule.reportUnboundVariable,\n        DiagnosticRule.reportInvalidStubStatement,\n    ];\n}\n\nexport function getStrictModeNotOverriddenRules() {\n    // In strict mode, the value in the user config file should be honored and\n    // not overwritten by the value from the strict rule set.\n    return [DiagnosticRule.reportMissingModuleSource];\n}\n\nexport function getOffDiagnosticRuleSet(): DiagnosticRuleSet {\n    const diagSettings: DiagnosticRuleSet = {\n        printUnknownAsAny: true,\n        omitTypeArgsIfAny: true,\n        omitUnannotatedParamType: true,\n        pep604Printing: true,\n        strictListInference: false,\n        strictDictionaryInference: false,\n        strictParameterNoneValue: false,\n        enableTypeIgnoreComments: true,\n        reportGeneralTypeIssues: 'none',\n        reportPropertyTypeMismatch: 'none',\n        reportMissingImports: 'warning',\n        reportMissingModuleSource: 'warning',\n        reportMissingTypeStubs: 'none',\n        reportImportCycles: 'none',\n        reportUnusedImport: 'none',\n        reportUnusedClass: 'none',\n        reportUnusedFunction: 'none',\n        reportUnusedVariable: 'none',\n        reportDuplicateImport: 'none',\n        reportWildcardImportFromLibrary: 'none',\n        reportOptionalSubscript: 'none',\n        reportOptionalMemberAccess: 'none',\n        reportOptionalCall: 'none',\n        reportOptionalIterable: 'none',\n        reportOptionalContextManager: 'none',\n        reportOptionalOperand: 'none',\n        reportUntypedFunctionDecorator: 'none',\n        reportUntypedClassDecorator: 'none',\n        reportUntypedBaseClass: 'none',\n        reportUntypedNamedTuple: 'none',\n        reportPrivateUsage: 'none',\n        reportConstantRedefinition: 'none',\n        reportIncompatibleMethodOverride: 'none',\n        reportIncompatibleVariableOverride: 'none',\n        reportInvalidStringEscapeSequence: 'none',\n        reportUnknownParameterType: 'none',\n        reportUnknownArgumentType: 'none',\n        reportUnknownLambdaType: 'none',\n        reportUnknownVariableType: 'none',\n        reportUnknownMemberType: 'none',\n        reportMissingTypeArgument: 'none',\n        reportCallInDefaultInitializer: 'none',\n        reportUnnecessaryIsInstance: 'none',\n        reportUnnecessaryCast: 'none',\n        reportAssertAlwaysTrue: 'none',\n        reportSelfClsParameterName: 'none',\n        reportImplicitStringConcatenation: 'none',\n        reportUnboundVariable: 'warning',\n        reportUndefinedVariable: 'warning',\n        reportInvalidStubStatement: 'none',\n    };\n\n    return diagSettings;\n}\n\nexport function getBasicDiagnosticRuleSet(): DiagnosticRuleSet {\n    const diagSettings: DiagnosticRuleSet = {\n        printUnknownAsAny: false,\n        omitTypeArgsIfAny: false,\n        omitUnannotatedParamType: true,\n        pep604Printing: true,\n        strictListInference: false,\n        strictDictionaryInference: false,\n        strictParameterNoneValue: false,\n        enableTypeIgnoreComments: true,\n        reportGeneralTypeIssues: 'error',\n        reportPropertyTypeMismatch: 'error',\n        reportMissingImports: 'error',\n        reportMissingModuleSource: 'warning',\n        reportMissingTypeStubs: 'none',\n        reportImportCycles: 'none',\n        reportUnusedImport: 'none',\n        reportUnusedClass: 'none',\n        reportUnusedFunction: 'none',\n        reportUnusedVariable: 'none',\n        reportDuplicateImport: 'none',\n        reportWildcardImportFromLibrary: 'warning',\n        reportOptionalSubscript: 'none',\n        reportOptionalMemberAccess: 'none',\n        reportOptionalCall: 'none',\n        reportOptionalIterable: 'none',\n        reportOptionalContextManager: 'none',\n        reportOptionalOperand: 'none',\n        reportUntypedFunctionDecorator: 'none',\n        reportUntypedClassDecorator: 'none',\n        reportUntypedBaseClass: 'none',\n        reportUntypedNamedTuple: 'none',\n        reportPrivateUsage: 'none',\n        reportConstantRedefinition: 'none',\n        reportIncompatibleMethodOverride: 'none',\n        reportIncompatibleVariableOverride: 'none',\n        reportInvalidStringEscapeSequence: 'warning',\n        reportUnknownParameterType: 'none',\n        reportUnknownArgumentType: 'none',\n        reportUnknownLambdaType: 'none',\n        reportUnknownVariableType: 'none',\n        reportUnknownMemberType: 'none',\n        reportMissingTypeArgument: 'none',\n        reportCallInDefaultInitializer: 'none',\n        reportUnnecessaryIsInstance: 'none',\n        reportUnnecessaryCast: 'none',\n        reportAssertAlwaysTrue: 'warning',\n        reportSelfClsParameterName: 'warning',\n        reportImplicitStringConcatenation: 'none',\n        reportUnboundVariable: 'error',\n        reportUndefinedVariable: 'error',\n        reportInvalidStubStatement: 'none',\n    };\n\n    return diagSettings;\n}\n\nexport function getStrictDiagnosticRuleSet(): DiagnosticRuleSet {\n    const diagSettings: DiagnosticRuleSet = {\n        printUnknownAsAny: false,\n        omitTypeArgsIfAny: false,\n        omitUnannotatedParamType: false,\n        pep604Printing: true,\n        strictListInference: true,\n        strictDictionaryInference: true,\n        strictParameterNoneValue: true,\n        enableTypeIgnoreComments: true, // Not overridden by strict mode\n        reportGeneralTypeIssues: 'error',\n        reportPropertyTypeMismatch: 'error',\n        reportMissingImports: 'error',\n        reportMissingModuleSource: 'warning',\n        reportMissingTypeStubs: 'error',\n        reportImportCycles: 'error',\n        reportUnusedImport: 'error',\n        reportUnusedClass: 'error',\n        reportUnusedFunction: 'error',\n        reportUnusedVariable: 'error',\n        reportDuplicateImport: 'error',\n        reportWildcardImportFromLibrary: 'error',\n        reportOptionalSubscript: 'error',\n        reportOptionalMemberAccess: 'error',\n        reportOptionalCall: 'error',\n        reportOptionalIterable: 'error',\n        reportOptionalContextManager: 'error',\n        reportOptionalOperand: 'error',\n        reportUntypedFunctionDecorator: 'error',\n        reportUntypedClassDecorator: 'error',\n        reportUntypedBaseClass: 'error',\n        reportUntypedNamedTuple: 'error',\n        reportPrivateUsage: 'error',\n        reportConstantRedefinition: 'error',\n        reportIncompatibleMethodOverride: 'error',\n        reportIncompatibleVariableOverride: 'error',\n        reportInvalidStringEscapeSequence: 'error',\n        reportUnknownParameterType: 'error',\n        reportUnknownArgumentType: 'error',\n        reportUnknownLambdaType: 'error',\n        reportUnknownVariableType: 'error',\n        reportUnknownMemberType: 'error',\n        reportMissingTypeArgument: 'error',\n        reportCallInDefaultInitializer: 'none',\n        reportUnnecessaryIsInstance: 'error',\n        reportUnnecessaryCast: 'error',\n        reportAssertAlwaysTrue: 'error',\n        reportSelfClsParameterName: 'error',\n        reportImplicitStringConcatenation: 'none',\n        reportUnboundVariable: 'error',\n        reportUndefinedVariable: 'error',\n        reportInvalidStubStatement: 'error',\n    };\n\n    return diagSettings;\n}\n\n// Internal configuration options. These are derived from a combination\n// of the command line and from a JSON-based config file.\nexport class ConfigOptions {\n    constructor(projectRoot: string, typeCheckingMode?: string) {\n        this.projectRoot = projectRoot;\n        this.diagnosticRuleSet = ConfigOptions.getDiagnosticRuleSet(typeCheckingMode);\n\n        // If type checking mode is off, allow inference for py.typed sources\n        // since there is little or no downside and possible upside of discovering\n        // more type information in this case. If type checking is enabled, using\n        // type inference in this case can result in false positive errors.\n        if (typeCheckingMode === 'off') {\n            this.disableInferenceForPyTypedSources = false;\n        }\n    }\n\n    // Absolute directory of project. All relative paths in the config\n    // are based on this path.\n    projectRoot: string;\n\n    // Path to python interpreter.\n    pythonPath?: string;\n\n    // Path to use for typeshed definitions.\n    typeshedPath?: string;\n\n    // Path to custom typings (stub) modules.\n    stubPath?: string;\n\n    // A list of file specs to include in the analysis. Can contain\n    // directories, in which case all \"*.py\" files within those directories\n    // are included.\n    include: FileSpec[] = [];\n\n    // A list of file specs to exclude from the analysis (overriding include\n    // if necessary). Can contain directories, in which case all \"*.py\" files\n    // within those directories are included.\n    exclude: FileSpec[] = [];\n\n    // Automatically detect virtual environment folders and exclude them.\n    // This property is for internal use and not exposed externally\n    // as a config setting.\n    // It is used to store whether the user has specified directories in\n    // the exclude setting, which is later modified to include a default set.\n    // This setting is true when user has not specified any exclude.\n    autoExcludeVenv?: boolean;\n\n    // A list of file specs whose errors and warnings should be ignored even\n    // if they are included in the transitive closure of included files.\n    ignore: FileSpec[] = [];\n\n    // A list of file specs that should be analyzed using \"strict\" mode.\n    strict: FileSpec[] = [];\n\n    // Emit verbose information to console?\n    verboseOutput?: boolean;\n\n    // Perform type checking and report diagnostics only for open files?\n    checkOnlyOpenFiles?: boolean;\n\n    // In the absence of type stubs, use library implementations to extract\n    // type information?\n    useLibraryCodeForTypes?: boolean;\n\n    // Offer auto-import completions.\n    autoImportCompletions = true;\n\n    // Use indexing.\n    indexing = false;\n\n    // Avoid using type inferencing for files within packages that claim\n    // to contain type annotations?\n    disableInferenceForPyTypedSources = true;\n\n    //---------------------------------------------------------------\n    // Diagnostics Rule Set\n\n    diagnosticRuleSet: DiagnosticRuleSet;\n\n    //---------------------------------------------------------------\n    // Parsing and Import Resolution Settings\n\n    // Parameters that specify the execution environment for\n    // the files being analyzed.\n    executionEnvironments: ExecutionEnvironment[] = [];\n\n    // Path to a directory containing one or more virtual environment\n    // directories. This is used in conjunction with the \"venv\" name in\n    // the config file to identify the python environment used for resolving\n    // third-party modules.\n    venvPath?: string;\n\n    // Default venv environment. Can be overridden by executionEnvironment.\n    defaultVenv?: string;\n\n    // Default pythonVersion. Can be overridden by executionEnvironment.\n    defaultPythonVersion?: PythonVersion;\n\n    // Default pythonPlatform. Can be overridden by executionEnvironment.\n    defaultPythonPlatform?: string;\n\n    //---------------------------------------------------------------\n    // Internal-only switches\n\n    // Run additional analysis as part of test cases?\n    internalTestMode?: boolean;\n\n    static getDiagnosticRuleSet(typeCheckingMode?: string): DiagnosticRuleSet {\n        if (typeCheckingMode === 'strict') {\n            return getStrictDiagnosticRuleSet();\n        }\n\n        if (typeCheckingMode === 'off') {\n            return getOffDiagnosticRuleSet();\n        }\n\n        return getBasicDiagnosticRuleSet();\n    }\n\n    // Finds the best execution environment for a given file path. The\n    // specified file path should be absolute.\n    // If no matching execution environment can be found, a default\n    // execution environment is used.\n    findExecEnvironment(filePath: string): ExecutionEnvironment {\n        let execEnv = this.executionEnvironments.find((env) => {\n            const envRoot = ensureTrailingDirectorySeparator(normalizePath(combinePaths(this.projectRoot, env.root)));\n            return filePath.startsWith(envRoot);\n        });\n\n        if (!execEnv) {\n            execEnv = new ExecutionEnvironment(this.projectRoot, this.defaultPythonVersion, this.defaultPythonPlatform);\n        }\n\n        return execEnv;\n    }\n\n    getDefaultExecEnvironment(): ExecutionEnvironment {\n        return new ExecutionEnvironment(this.projectRoot, this.defaultPythonVersion, this.defaultPythonPlatform);\n    }\n\n    addExecEnvironmentForExtraPaths(fs: FileSystem, autoSearchPaths: boolean, extraPaths: string[]) {\n        const paths: string[] = [];\n\n        if (autoSearchPaths) {\n            // Auto-detect the common scenario where the sources are under the src folder\n            const srcPath = resolvePaths(this.projectRoot, pathConsts.src);\n            if (fs.existsSync(srcPath) && !fs.existsSync(resolvePaths(srcPath, '__init__.py'))) {\n                paths.push(srcPath);\n            }\n        }\n\n        if (extraPaths.length > 0) {\n            for (const p of extraPaths) {\n                paths.push(resolvePaths(this.projectRoot, p));\n            }\n        }\n\n        if (paths.length > 0) {\n            const execEnv = new ExecutionEnvironment(\n                this.projectRoot,\n                this.defaultPythonVersion,\n                this.defaultPythonPlatform\n            );\n\n            execEnv.extraPaths.push(...paths);\n\n            this.executionEnvironments.push(execEnv);\n        }\n    }\n\n    // Initialize the structure from a JSON object.\n    initializeFromJson(\n        configObj: any,\n        typeCheckingMode: string | undefined,\n        console: ConsoleInterface,\n        diagnosticOverrides?: DiagnosticSeverityOverridesMap,\n        pythonPath?: string,\n        skipIncludeSection = false\n    ) {\n        // Read the \"include\" entry.\n        if (!skipIncludeSection) {\n            this.include = [];\n            if (configObj.include !== undefined) {\n                if (!Array.isArray(configObj.include)) {\n                    console.error(`Config \"include\" entry must must contain an array.`);\n                } else {\n                    const filesList = configObj.include as string[];\n                    filesList.forEach((fileSpec, index) => {\n                        if (typeof fileSpec !== 'string') {\n                            console.error(`Index ${index} of \"include\" array should be a string.`);\n                        } else if (isAbsolute(fileSpec)) {\n                            console.error(`Ignoring path \"${fileSpec}\" in \"include\" array because it is not relative.`);\n                        } else {\n                            this.include.push(getFileSpec(this.projectRoot, fileSpec));\n                        }\n                    });\n                }\n            }\n        }\n\n        // Read the \"exclude\" entry.\n        this.exclude = [];\n        if (configObj.exclude !== undefined) {\n            if (!Array.isArray(configObj.exclude)) {\n                console.error(`Config \"exclude\" entry must contain an array.`);\n            } else {\n                const filesList = configObj.exclude as string[];\n                filesList.forEach((fileSpec, index) => {\n                    if (typeof fileSpec !== 'string') {\n                        console.error(`Index ${index} of \"exclude\" array should be a string.`);\n                    } else if (isAbsolute(fileSpec)) {\n                        console.error(`Ignoring path \"${fileSpec}\" in \"exclude\" array because it is not relative.`);\n                    } else {\n                        this.exclude.push(getFileSpec(this.projectRoot, fileSpec));\n                    }\n                });\n            }\n        }\n\n        // Read the \"ignore\" entry.\n        this.ignore = [];\n        if (configObj.ignore !== undefined) {\n            if (!Array.isArray(configObj.ignore)) {\n                console.error(`Config \"ignore\" entry must contain an array.`);\n            } else {\n                const filesList = configObj.ignore as string[];\n                filesList.forEach((fileSpec, index) => {\n                    if (typeof fileSpec !== 'string') {\n                        console.error(`Index ${index} of \"ignore\" array should be a string.`);\n                    } else if (isAbsolute(fileSpec)) {\n                        console.error(`Ignoring path \"${fileSpec}\" in \"ignore\" array because it is not relative.`);\n                    } else {\n                        this.ignore.push(getFileSpec(this.projectRoot, fileSpec));\n                    }\n                });\n            }\n        }\n\n        // Read the \"strict\" entry.\n        this.strict = [];\n        if (configObj.strict !== undefined) {\n            if (!Array.isArray(configObj.strict)) {\n                console.error(`Config \"strict\" entry must contain an array.`);\n            } else {\n                const filesList = configObj.strict as string[];\n                filesList.forEach((fileSpec, index) => {\n                    if (typeof fileSpec !== 'string') {\n                        console.error(`Index ${index} of \"strict\" array should be a string.`);\n                    } else if (isAbsolute(fileSpec)) {\n                        console.error(`Ignoring path \"${fileSpec}\" in \"strict\" array because it is not relative.`);\n                    } else {\n                        this.strict.push(getFileSpec(this.projectRoot, fileSpec));\n                    }\n                });\n            }\n        }\n\n        // If there is a \"typeCheckingMode\", it can override the provided setting.\n        let configTypeCheckingMode: string | undefined;\n        if (configObj.typeCheckingMode !== undefined) {\n            if (\n                configObj.typeCheckingMode === 'off' ||\n                configObj.typeCheckingMode === 'basic' ||\n                configObj.typeCheckingMode === 'strict'\n            ) {\n                configTypeCheckingMode = configObj.typeCheckingMode;\n            } else {\n                console.error(`Config \"typeCheckingMode\" entry must contain \"off\", \"basic\", or \"strict\".`);\n            }\n        }\n\n        if (configObj.useLibraryCodeForTypes !== undefined) {\n            if (typeof configObj.useLibraryCodeForTypes === 'boolean') {\n                this.useLibraryCodeForTypes = configObj.useLibraryCodeForTypes;\n            } else {\n                console.error(`Config \"useLibraryCodeForTypes\" entry must be true or false.`);\n            }\n        }\n\n        const effectiveTypeCheckingMode = configTypeCheckingMode || typeCheckingMode;\n        const defaultSettings = ConfigOptions.getDiagnosticRuleSet(effectiveTypeCheckingMode);\n        if (effectiveTypeCheckingMode === 'off') {\n            this.disableInferenceForPyTypedSources = false;\n        }\n\n        // Apply host provided overrides first and then overrides from the config file\n        this.applyDiagnosticOverrides(diagnosticOverrides);\n\n        this.diagnosticRuleSet = {\n            printUnknownAsAny: defaultSettings.printUnknownAsAny,\n            omitTypeArgsIfAny: defaultSettings.omitTypeArgsIfAny,\n            omitUnannotatedParamType: defaultSettings.omitUnannotatedParamType,\n            pep604Printing: defaultSettings.pep604Printing,\n\n            // Use strict inference rules for list expressions?\n            strictListInference: this._convertBoolean(\n                configObj.strictListInference,\n                DiagnosticRule.strictListInference,\n                defaultSettings.strictListInference\n            ),\n\n            // Use strict inference rules for dictionary expressions?\n            strictDictionaryInference: this._convertBoolean(\n                configObj.strictDictionaryInference,\n                DiagnosticRule.strictDictionaryInference,\n                defaultSettings.strictDictionaryInference\n            ),\n\n            // Should a None default value imply that the parameter type\n            // is Optional?\n            strictParameterNoneValue: this._convertBoolean(\n                configObj.strictParameterNoneValue,\n                DiagnosticRule.strictParameterNoneValue,\n                defaultSettings.strictParameterNoneValue\n            ),\n\n            // Should \"# type: ignore\" be honored?\n            enableTypeIgnoreComments: this._convertBoolean(\n                configObj.enableTypeIgnoreComments,\n                DiagnosticRule.enableTypeIgnoreComments,\n                defaultSettings.enableTypeIgnoreComments\n            ),\n\n            // Read the \"reportGeneralTypeIssues\" entry.\n            reportGeneralTypeIssues: this._convertDiagnosticLevel(\n                configObj.reportGeneralTypeIssues,\n                DiagnosticRule.reportGeneralTypeIssues,\n                defaultSettings.reportGeneralTypeIssues\n            ),\n\n            // Read the \"reportPropertyTypeMismatch\" entry.\n            reportPropertyTypeMismatch: this._convertDiagnosticLevel(\n                configObj.reportPropertyTypeMismatch,\n                DiagnosticRule.reportPropertyTypeMismatch,\n                defaultSettings.reportPropertyTypeMismatch\n            ),\n\n            // Read the \"reportMissingImports\" entry.\n            reportMissingImports: this._convertDiagnosticLevel(\n                configObj.reportMissingImports,\n                DiagnosticRule.reportMissingImports,\n                defaultSettings.reportMissingImports\n            ),\n\n            // Read the \"reportUnusedImport\" entry.\n            reportUnusedImport: this._convertDiagnosticLevel(\n                configObj.reportUnusedImport,\n                DiagnosticRule.reportUnusedImport,\n                defaultSettings.reportUnusedImport\n            ),\n\n            // Read the \"reportUnusedClass\" entry.\n            reportUnusedClass: this._convertDiagnosticLevel(\n                configObj.reportUnusedClass,\n                DiagnosticRule.reportUnusedClass,\n                defaultSettings.reportUnusedClass\n            ),\n\n            // Read the \"reportUnusedFunction\" entry.\n            reportUnusedFunction: this._convertDiagnosticLevel(\n                configObj.reportUnusedFunction,\n                DiagnosticRule.reportUnusedFunction,\n                defaultSettings.reportUnusedFunction\n            ),\n\n            // Read the \"reportUnusedVariable\" entry.\n            reportUnusedVariable: this._convertDiagnosticLevel(\n                configObj.reportUnusedVariable,\n                DiagnosticRule.reportUnusedVariable,\n                defaultSettings.reportUnusedVariable\n            ),\n\n            // Read the \"reportDuplicateImport\" entry.\n            reportDuplicateImport: this._convertDiagnosticLevel(\n                configObj.reportDuplicateImport,\n                DiagnosticRule.reportDuplicateImport,\n                defaultSettings.reportDuplicateImport\n            ),\n\n            // Read the \"reportWildcardImportFromLibrary\" entry.\n            reportWildcardImportFromLibrary: this._convertDiagnosticLevel(\n                configObj.reportWildcardImportFromLibrary,\n                DiagnosticRule.reportWildcardImportFromLibrary,\n                defaultSettings.reportWildcardImportFromLibrary\n            ),\n\n            // Read the \"reportMissingModuleSource\" entry.\n            reportMissingModuleSource: this._convertDiagnosticLevel(\n                configObj.reportMissingModuleSource,\n                DiagnosticRule.reportMissingModuleSource,\n                defaultSettings.reportMissingModuleSource\n            ),\n\n            // Read the \"reportMissingTypeStubs\" entry.\n            reportMissingTypeStubs: this._convertDiagnosticLevel(\n                configObj.reportMissingTypeStubs,\n                DiagnosticRule.reportMissingTypeStubs,\n                defaultSettings.reportMissingTypeStubs\n            ),\n\n            // Read the \"reportImportCycles\" entry.\n            reportImportCycles: this._convertDiagnosticLevel(\n                configObj.reportImportCycles,\n                DiagnosticRule.reportImportCycles,\n                defaultSettings.reportImportCycles\n            ),\n\n            // Read the \"reportOptionalSubscript\" entry.\n            reportOptionalSubscript: this._convertDiagnosticLevel(\n                configObj.reportOptionalSubscript,\n                DiagnosticRule.reportOptionalSubscript,\n                defaultSettings.reportOptionalSubscript\n            ),\n\n            // Read the \"reportOptionalMemberAccess\" entry.\n            reportOptionalMemberAccess: this._convertDiagnosticLevel(\n                configObj.reportOptionalMemberAccess,\n                DiagnosticRule.reportOptionalMemberAccess,\n                defaultSettings.reportOptionalMemberAccess\n            ),\n\n            // Read the \"reportOptionalCall\" entry.\n            reportOptionalCall: this._convertDiagnosticLevel(\n                configObj.reportOptionalCall,\n                DiagnosticRule.reportOptionalCall,\n                defaultSettings.reportOptionalCall\n            ),\n\n            // Read the \"reportOptionalIterable\" entry.\n            reportOptionalIterable: this._convertDiagnosticLevel(\n                configObj.reportOptionalIterable,\n                DiagnosticRule.reportOptionalIterable,\n                defaultSettings.reportOptionalIterable\n            ),\n\n            // Read the \"reportOptionalContextManager\" entry.\n            reportOptionalContextManager: this._convertDiagnosticLevel(\n                configObj.reportOptionalContextManager,\n                DiagnosticRule.reportOptionalContextManager,\n                defaultSettings.reportOptionalContextManager\n            ),\n\n            // Read the \"reportOptionalOperand\" entry.\n            reportOptionalOperand: this._convertDiagnosticLevel(\n                configObj.reportOptionalOperand,\n                DiagnosticRule.reportOptionalOperand,\n                defaultSettings.reportOptionalOperand\n            ),\n\n            // Read the \"reportUntypedFunctionDecorator\" entry.\n            reportUntypedFunctionDecorator: this._convertDiagnosticLevel(\n                configObj.reportUntypedFunctionDecorator,\n                DiagnosticRule.reportUntypedFunctionDecorator,\n                defaultSettings.reportUntypedFunctionDecorator\n            ),\n\n            // Read the \"reportUntypedClassDecorator\" entry.\n            reportUntypedClassDecorator: this._convertDiagnosticLevel(\n                configObj.reportUntypedClassDecorator,\n                DiagnosticRule.reportUntypedClassDecorator,\n                defaultSettings.reportUntypedClassDecorator\n            ),\n\n            // Read the \"reportUntypedBaseClass\" entry.\n            reportUntypedBaseClass: this._convertDiagnosticLevel(\n                configObj.reportUntypedBaseClass,\n                DiagnosticRule.reportUntypedBaseClass,\n                defaultSettings.reportUntypedBaseClass\n            ),\n\n            // Read the \"reportUntypedNamedTuple\" entry.\n            reportUntypedNamedTuple: this._convertDiagnosticLevel(\n                configObj.reportUntypedNamedTuple,\n                DiagnosticRule.reportUntypedNamedTuple,\n                defaultSettings.reportUntypedNamedTuple\n            ),\n\n            // Read the \"reportPrivateUsage\" entry.\n            reportPrivateUsage: this._convertDiagnosticLevel(\n                configObj.reportPrivateUsage,\n                DiagnosticRule.reportPrivateUsage,\n                defaultSettings.reportPrivateUsage\n            ),\n\n            // Read the \"reportConstantRedefinition\" entry.\n            reportConstantRedefinition: this._convertDiagnosticLevel(\n                configObj.reportConstantRedefinition,\n                DiagnosticRule.reportConstantRedefinition,\n                defaultSettings.reportConstantRedefinition\n            ),\n\n            // Read the \"reportIncompatibleMethodOverride\" entry.\n            reportIncompatibleMethodOverride: this._convertDiagnosticLevel(\n                configObj.reportIncompatibleMethodOverride,\n                DiagnosticRule.reportIncompatibleMethodOverride,\n                defaultSettings.reportIncompatibleMethodOverride\n            ),\n\n            // Read the \"reportIncompatibleVariableOverride\" entry.\n            reportIncompatibleVariableOverride: this._convertDiagnosticLevel(\n                configObj.reportIncompatibleVariableOverride,\n                DiagnosticRule.reportIncompatibleVariableOverride,\n                defaultSettings.reportIncompatibleVariableOverride\n            ),\n\n            // Read the \"reportInvalidStringEscapeSequence\" entry.\n            reportInvalidStringEscapeSequence: this._convertDiagnosticLevel(\n                configObj.reportInvalidStringEscapeSequence,\n                DiagnosticRule.reportInvalidStringEscapeSequence,\n                defaultSettings.reportInvalidStringEscapeSequence\n            ),\n\n            // Read the \"reportUnknownParameterType\" entry.\n            reportUnknownParameterType: this._convertDiagnosticLevel(\n                configObj.reportUnknownParameterType,\n                DiagnosticRule.reportUnknownParameterType,\n                defaultSettings.reportUnknownParameterType\n            ),\n\n            // Read the \"reportUnknownArgumentType\" entry.\n            reportUnknownArgumentType: this._convertDiagnosticLevel(\n                configObj.reportUnknownArgumentType,\n                DiagnosticRule.reportUnknownArgumentType,\n                defaultSettings.reportUnknownArgumentType\n            ),\n\n            // Read the \"reportUnknownLambdaType\" entry.\n            reportUnknownLambdaType: this._convertDiagnosticLevel(\n                configObj.reportUnknownLambdaType,\n                DiagnosticRule.reportUnknownLambdaType,\n                defaultSettings.reportUnknownLambdaType\n            ),\n\n            // Read the \"reportUnknownVariableType\" entry.\n            reportUnknownVariableType: this._convertDiagnosticLevel(\n                configObj.reportUnknownVariableType,\n                DiagnosticRule.reportUnknownVariableType,\n                defaultSettings.reportUnknownVariableType\n            ),\n\n            // Read the \"reportUnknownMemberType\" entry.\n            reportUnknownMemberType: this._convertDiagnosticLevel(\n                configObj.reportUnknownMemberType,\n                DiagnosticRule.reportUnknownMemberType,\n                defaultSettings.reportUnknownMemberType\n            ),\n\n            // Read the \"reportMissingTypeArgument\" entry.\n            reportMissingTypeArgument: this._convertDiagnosticLevel(\n                configObj.reportMissingTypeArgument,\n                DiagnosticRule.reportMissingTypeArgument,\n                defaultSettings.reportMissingTypeArgument\n            ),\n\n            // Read the \"reportCallInDefaultInitializer\" entry.\n            reportCallInDefaultInitializer: this._convertDiagnosticLevel(\n                configObj.reportCallInDefaultInitializer,\n                DiagnosticRule.reportCallInDefaultInitializer,\n                defaultSettings.reportCallInDefaultInitializer\n            ),\n\n            // Read the \"reportUnnecessaryIsInstance\" entry.\n            reportUnnecessaryIsInstance: this._convertDiagnosticLevel(\n                configObj.reportUnnecessaryIsInstance,\n                DiagnosticRule.reportUnnecessaryIsInstance,\n                defaultSettings.reportUnnecessaryIsInstance\n            ),\n\n            // Read the \"reportUnnecessaryCast\" entry.\n            reportUnnecessaryCast: this._convertDiagnosticLevel(\n                configObj.reportUnnecessaryCast,\n                DiagnosticRule.reportUnnecessaryCast,\n                defaultSettings.reportUnnecessaryCast\n            ),\n\n            // Read the \"reportAssertAlwaysTrue\" entry.\n            reportAssertAlwaysTrue: this._convertDiagnosticLevel(\n                configObj.reportAssertAlwaysTrue,\n                DiagnosticRule.reportAssertAlwaysTrue,\n                defaultSettings.reportAssertAlwaysTrue\n            ),\n\n            // Read the \"reportSelfClsParameterName\" entry.\n            reportSelfClsParameterName: this._convertDiagnosticLevel(\n                configObj.reportSelfClsParameterName,\n                DiagnosticRule.reportSelfClsParameterName,\n                defaultSettings.reportSelfClsParameterName\n            ),\n\n            // Read the \"reportImplicitStringConcatenation\" entry.\n            reportImplicitStringConcatenation: this._convertDiagnosticLevel(\n                configObj.reportImplicitStringConcatenation,\n                DiagnosticRule.reportImplicitStringConcatenation,\n                defaultSettings.reportImplicitStringConcatenation\n            ),\n\n            // Read the \"reportUndefinedVariable\" entry.\n            reportUndefinedVariable: this._convertDiagnosticLevel(\n                configObj.reportUndefinedVariable,\n                DiagnosticRule.reportUndefinedVariable,\n                defaultSettings.reportUndefinedVariable\n            ),\n\n            // Read the \"reportUnboundVariable\" entry.\n            reportUnboundVariable: this._convertDiagnosticLevel(\n                configObj.reportUnboundVariable,\n                DiagnosticRule.reportUnboundVariable,\n                defaultSettings.reportUnboundVariable\n            ),\n\n            // Read the \"reportInvalidStubStatement\" entry.\n            reportInvalidStubStatement: this._convertDiagnosticLevel(\n                configObj.reportInvalidStubStatement,\n                DiagnosticRule.reportInvalidStubStatement,\n                defaultSettings.reportInvalidStubStatement\n            ),\n        };\n\n        // Read the \"venvPath\".\n        this.venvPath = undefined;\n        if (configObj.venvPath !== undefined) {\n            if (typeof configObj.venvPath !== 'string') {\n                console.error(`Config \"venvPath\" field must contain a string.`);\n            } else {\n                this.venvPath = normalizePath(combinePaths(this.projectRoot, configObj.venvPath));\n            }\n        }\n\n        // Read the default \"venv\".\n        this.defaultVenv = undefined;\n        if (configObj.venv !== undefined) {\n            if (typeof configObj.venv !== 'string') {\n                console.error(`Config \"venv\" field must contain a string.`);\n            } else {\n                this.defaultVenv = configObj.venv;\n            }\n        }\n\n        // Read the default \"pythonVersion\".\n        this.defaultPythonVersion = undefined;\n        if (configObj.pythonVersion !== undefined) {\n            if (typeof configObj.pythonVersion === 'string') {\n                const version = versionFromString(configObj.pythonVersion);\n                if (version) {\n                    this.defaultPythonVersion = version;\n                } else {\n                    console.error(`Config \"pythonVersion\" field contains unsupported version.`);\n                }\n            } else {\n                console.error(`Config \"pythonVersion\" field must contain a string.`);\n            }\n        }\n\n        this.ensureDefaultPythonVersion(pythonPath, console);\n\n        // Read the default \"pythonPlatform\".\n        this.defaultPythonPlatform = undefined;\n        if (configObj.pythonPlatform !== undefined) {\n            if (typeof configObj.pythonPlatform !== 'string') {\n                console.error(`Config \"pythonPlatform\" field must contain a string.`);\n            } else {\n                this.defaultPythonPlatform = configObj.pythonPlatform;\n            }\n        }\n\n        this.ensureDefaultPythonPlatform(console);\n\n        // Read the \"typeshedPath\" setting.\n        this.typeshedPath = undefined;\n        if (configObj.typeshedPath !== undefined) {\n            if (typeof configObj.typeshedPath !== 'string') {\n                console.error(`Config \"typeshedPath\" field must contain a string.`);\n            } else {\n                this.typeshedPath = configObj.typeshedPath\n                    ? normalizePath(combinePaths(this.projectRoot, configObj.typeshedPath))\n                    : '';\n            }\n        }\n\n        // Read the \"stubPath\" setting.\n        this.stubPath = undefined;\n\n        // Keep this for backward compatibility\n        if (configObj.typingsPath !== undefined) {\n            if (typeof configObj.typingsPath !== 'string') {\n                console.error(`Config \"typingsPath\" field must contain a string.`);\n            } else {\n                console.error(`Config \"typingsPath\" is now deprecated. Please, use stubPath instead.`);\n                this.stubPath = normalizePath(combinePaths(this.projectRoot, configObj.typingsPath));\n            }\n        }\n\n        if (configObj.stubPath !== undefined) {\n            if (typeof configObj.stubPath !== 'string') {\n                console.error(`Config \"stubPath\" field must contain a string.`);\n            } else {\n                this.stubPath = normalizePath(combinePaths(this.projectRoot, configObj.stubPath));\n            }\n        }\n\n        // Read the \"verboseOutput\" setting.\n        // Don't initialize to a default value because we want the command-line \"verbose\"\n        // switch to apply if this setting isn't specified in the config file.\n        if (configObj.verboseOutput !== undefined) {\n            if (typeof configObj.verboseOutput !== 'boolean') {\n                console.error(`Config \"verboseOutput\" field must be true or false.`);\n            } else {\n                this.verboseOutput = configObj.verboseOutput;\n            }\n        }\n\n        // Read the \"useLibraryCodeForTypes\" setting.\n        if (configObj.useLibraryCodeForTypes !== undefined) {\n            if (typeof configObj.useLibraryCodeForTypes !== 'boolean') {\n                console.error(`Config \"useLibraryCodeForTypes\" field must be true or false.`);\n            } else {\n                this.useLibraryCodeForTypes = configObj.useLibraryCodeForTypes;\n            }\n        }\n\n        // Read the \"executionEnvironments\" array. This should be done at the end\n        // after we've established default values.\n        this.executionEnvironments = [];\n        if (configObj.executionEnvironments !== undefined) {\n            if (!Array.isArray(configObj.executionEnvironments)) {\n                console.error(`Config \"executionEnvironments\" field must contain an array.`);\n            } else {\n                const execEnvironments = configObj.executionEnvironments as ExecutionEnvironment[];\n                execEnvironments.forEach((env, index) => {\n                    const execEnv = this._initExecutionEnvironmentFromJson(env, index, console);\n                    if (execEnv) {\n                        this.executionEnvironments.push(execEnv);\n                    }\n                });\n            }\n        }\n\n        // Read the \"autoImportCompletions\" setting.\n        if (configObj.autoImportCompletions !== undefined) {\n            if (typeof configObj.autoImportCompletions !== 'boolean') {\n                console.error(`Config \"autoImportCompletions\" field must be true or false.`);\n            } else {\n                this.autoImportCompletions = configObj.autoImportCompletions;\n            }\n        }\n\n        // Read the \"indexing\" setting.\n        if (configObj.indexing !== undefined) {\n            if (typeof configObj.indexing !== 'boolean') {\n                console.error(`Config \"indexing\" field must be true or false.`);\n            } else {\n                this.indexing = configObj.indexing;\n            }\n        }\n    }\n\n    ensureDefaultPythonPlatform(console: ConsoleInterface) {\n        // If no default python platform was specified, assume that the\n        // user wants to use the current platform.\n        if (this.defaultPythonPlatform !== undefined) {\n            return;\n        }\n\n        if (process.platform === 'darwin') {\n            this.defaultPythonPlatform = PythonPlatform.Darwin;\n        } else if (process.platform === 'linux') {\n            this.defaultPythonPlatform = PythonPlatform.Linux;\n        } else if (process.platform === 'win32') {\n            this.defaultPythonPlatform = PythonPlatform.Windows;\n        }\n\n        if (this.defaultPythonPlatform !== undefined) {\n            console.info(`Assuming Python platform ${this.defaultPythonPlatform}`);\n        }\n    }\n\n    ensureDefaultPythonVersion(pythonPath: string | undefined, console: ConsoleInterface) {\n        // If no default python version was specified, retrieve the version\n        // from the currently-selected python interpreter.\n        if (this.defaultPythonVersion !== undefined) {\n            return;\n        }\n\n        this.defaultPythonVersion = this._getPythonVersionFromPythonInterpreter(pythonPath, console);\n        if (this.defaultPythonVersion !== undefined) {\n            console.info(`Assuming Python version ${versionToString(this.defaultPythonVersion)}`);\n        }\n    }\n\n    applyDiagnosticOverrides(diagnosticSeverityOverrides: DiagnosticSeverityOverridesMap | undefined) {\n        if (!diagnosticSeverityOverrides) {\n            return;\n        }\n\n        for (const [ruleName, severity] of Object.entries(diagnosticSeverityOverrides)) {\n            (this.diagnosticRuleSet as any)[ruleName] = severity;\n        }\n    }\n\n    private _convertBoolean(value: any, fieldName: string, defaultValue: boolean): boolean {\n        if (value === undefined) {\n            return defaultValue;\n        } else if (typeof value === 'boolean') {\n            return value ? true : false;\n        }\n\n        console.log(`Config \"${fieldName}\" entry must be true or false.`);\n        return defaultValue;\n    }\n\n    private _convertDiagnosticLevel(value: any, fieldName: string, defaultValue: DiagnosticLevel): DiagnosticLevel {\n        if (value === undefined) {\n            return defaultValue;\n        } else if (typeof value === 'boolean') {\n            return value ? 'error' : 'none';\n        } else if (typeof value === 'string') {\n            if (value === 'error' || value === 'warning' || value === 'information' || value === 'none') {\n                return value;\n            }\n        }\n\n        console.log(`Config \"${fieldName}\" entry must be true, false, \"error\", \"warning\", \"information\" or \"none\".`);\n        return defaultValue;\n    }\n\n    private _initExecutionEnvironmentFromJson(\n        envObj: any,\n        index: number,\n        console: ConsoleInterface\n    ): ExecutionEnvironment | undefined {\n        try {\n            const newExecEnv = new ExecutionEnvironment(\n                this.projectRoot,\n                this.defaultPythonVersion,\n                this.defaultPythonPlatform\n            );\n\n            // Validate the root.\n            if (envObj.root && typeof envObj.root === 'string') {\n                newExecEnv.root = normalizePath(combinePaths(this.projectRoot, envObj.root));\n            } else {\n                console.error(`Config executionEnvironments index ${index}: missing root value.`);\n            }\n\n            // Validate the extraPaths.\n            if (envObj.extraPaths) {\n                if (!Array.isArray(envObj.extraPaths)) {\n                    console.error(\n                        `Config executionEnvironments index ${index}: extraPaths field must contain an array.`\n                    );\n                } else {\n                    const pathList = envObj.extraPaths as string[];\n                    pathList.forEach((path, pathIndex) => {\n                        if (typeof path !== 'string') {\n                            console.error(\n                                `Config executionEnvironments index ${index}:` +\n                                    ` extraPaths field ${pathIndex} must be a string.`\n                            );\n                        } else {\n                            newExecEnv.extraPaths.push(normalizePath(combinePaths(this.projectRoot, path)));\n                        }\n                    });\n                }\n            }\n\n            // Validate the pythonVersion.\n            if (envObj.pythonVersion) {\n                if (typeof envObj.pythonVersion === 'string') {\n                    const version = versionFromString(envObj.pythonVersion);\n                    if (version) {\n                        newExecEnv.pythonVersion = version;\n                    } else {\n                        console.warn(`Config executionEnvironments index ${index} contains unsupported pythonVersion.`);\n                    }\n                } else {\n                    console.error(`Config executionEnvironments index ${index} pythonVersion must be a string.`);\n                }\n            }\n\n            // Validate the pythonPlatform.\n            if (envObj.pythonPlatform) {\n                if (typeof envObj.pythonPlatform === 'string') {\n                    newExecEnv.pythonPlatform = envObj.pythonPlatform;\n                } else {\n                    console.error(`Config executionEnvironments index ${index} pythonPlatform must be a string.`);\n                }\n            }\n\n            // Validate the venv.\n            if (envObj.venv) {\n                if (typeof envObj.venv === 'string') {\n                    newExecEnv.venv = envObj.venv;\n                } else {\n                    console.error(`Config executionEnvironments index ${index} venv must be a string.`);\n                }\n            }\n\n            return newExecEnv;\n        } catch {\n            console.error(`Config executionEnvironments index ${index} is not accessible.`);\n        }\n\n        return undefined;\n    }\n\n    private _getPythonVersionFromPythonInterpreter(\n        interpreterPath: string | undefined,\n        console: ConsoleInterface\n    ): PythonVersion | undefined {\n        try {\n            const commandLineArgs: string[] = [\n                '-c',\n                'import sys, json; json.dump(dict(major=sys.version_info[0], minor=sys.version_info[1]), sys.stdout)',\n            ];\n            let execOutput: string;\n\n            if (interpreterPath) {\n                execOutput = child_process.execFileSync(interpreterPath, commandLineArgs, { encoding: 'utf8' });\n            } else {\n                execOutput = child_process.execFileSync('python', commandLineArgs, { encoding: 'utf8' });\n            }\n\n            const versionJson: { major: number; minor: number } = JSON.parse(execOutput);\n\n            const version = versionFromMajorMinor(versionJson.major, versionJson.minor);\n            if (version === undefined) {\n                console.warn(\n                    `Python version ${versionJson.major}.${versionJson.minor} from interpreter is unsupported`\n                );\n                return undefined;\n            }\n\n            return version;\n        } catch {\n            console.info('Unable to get Python version from interpreter');\n            return undefined;\n        }\n    }\n}\n","/*\n * console.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Provides an abstraction for console logging and error-reporting\n * methods.\n */\n\nimport * as debug from './debug';\n\nexport enum LogLevel {\n    Error = 'error',\n    Warn = 'warn',\n    Info = 'info',\n    Log = 'log',\n}\n\nexport interface ConsoleInterface {\n    error: (message: string) => void;\n    warn: (message: string) => void;\n    info: (message: string) => void;\n    log: (message: string) => void;\n}\n\n// Avoids outputting errors to the console but counts\n// the number of logs and errors, which can be useful\n// for unit tests.\nexport class NullConsole implements ConsoleInterface {\n    logCount = 0;\n    infoCount = 0;\n    warnCount = 0;\n    errorCount = 0;\n\n    log(message: string) {\n        this.logCount++;\n    }\n\n    info(message: string) {\n        this.infoCount++;\n    }\n\n    warn(message: string) {\n        this.warnCount++;\n    }\n\n    error(message: string) {\n        this.errorCount++;\n    }\n}\n\nexport class StandardConsole implements ConsoleInterface {\n    log(message: string) {\n        console.info(message);\n    }\n\n    info(message: string) {\n        console.info(message);\n    }\n\n    warn(message: string) {\n        console.warn(message);\n    }\n\n    error(message: string) {\n        console.error(message);\n    }\n}\n\nexport class ConsoleWithLogLevel implements ConsoleInterface {\n    private _levelMap: Map<string, number> = new Map([\n        [LogLevel.Error, 0],\n        [LogLevel.Warn, 1],\n        [LogLevel.Info, 2],\n        [LogLevel.Log, 3],\n    ]);\n\n    private _maxLevel = 2;\n\n    constructor(private _console: ConsoleInterface) {}\n\n    get level(): LogLevel {\n        switch (this._maxLevel) {\n            case 0:\n                return LogLevel.Error;\n\n            case 1:\n                return LogLevel.Warn;\n\n            case 2:\n                return LogLevel.Info;\n        }\n\n        return LogLevel.Log;\n    }\n\n    set level(value: LogLevel) {\n        let maxLevel = this._levelMap.get(value);\n        if (maxLevel === undefined) {\n            maxLevel = this._levelMap.get(LogLevel.Info)!;\n        }\n\n        this._maxLevel = maxLevel;\n    }\n\n    error(message: string) {\n        this._log(LogLevel.Error, message);\n    }\n\n    warn(message: string) {\n        this._log(LogLevel.Warn, message);\n    }\n\n    info(message: string) {\n        this._log(LogLevel.Info, message);\n    }\n\n    log(message: string) {\n        this._log(LogLevel.Log, message);\n    }\n\n    private _log(level: LogLevel, message: string): void {\n        if (this._getNumericalLevel(level) > this._maxLevel) {\n            return;\n        }\n\n        log(this._console, level, message);\n    }\n\n    private _getNumericalLevel(level: LogLevel): number {\n        const numericLevel = this._levelMap.get(level);\n        debug.assert(numericLevel !== undefined, 'Logger: unknown log level.');\n        return numericLevel !== undefined ? numericLevel : 2;\n    }\n}\n\nexport function log(console: ConsoleInterface, logType: LogLevel, msg: string) {\n    switch (logType) {\n        case LogLevel.Log:\n            console.log(msg);\n            break;\n\n        case LogLevel.Info:\n            console.info(msg);\n            break;\n\n        case LogLevel.Warn:\n            console.warn(msg);\n            break;\n\n        case LogLevel.Error:\n            console.error(msg);\n            break;\n\n        default:\n            debug.fail(`${logType} is not expected`);\n    }\n}\n","/*\n * core.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Various helpers that don't have a dependency on other code files.\n */\n\nexport const enum Comparison {\n    LessThan = -1,\n    EqualTo = 0,\n    GreaterThan = 1,\n}\n\n/**\n * Safer version of `Function` which should not be called.\n * Every function should be assignable to this, but this should not be assignable to every function.\n */\nexport type AnyFunction = (...args: never[]) => void;\n\n/** Do nothing and return false */\nexport function returnFalse(): false {\n    return false;\n}\n\n/** Do nothing and return true */\nexport function returnTrue(): true {\n    return true;\n}\n\n/** Do nothing and return undefined */\nexport function returnUndefined(): undefined {\n    return undefined;\n}\n\n/** Returns its argument. */\nexport function identity<T>(x: T) {\n    return x;\n}\n\n/** Returns lower case string */\nexport function toLowerCase(x: string) {\n    return x.toLowerCase();\n}\n\nexport function equateValues<T>(a: T, b: T) {\n    return a === b;\n}\n\nexport type GetCanonicalFileName = (fileName: string) => string;\n\nexport function compareComparableValues(a: string | undefined, b: string | undefined): Comparison;\nexport function compareComparableValues(a: number | undefined, b: number | undefined): Comparison;\nexport function compareComparableValues(a: string | number | undefined, b: string | number | undefined) {\n    return a === b\n        ? Comparison.EqualTo\n        : a === undefined\n        ? Comparison.LessThan\n        : b === undefined\n        ? Comparison.GreaterThan\n        : a < b\n        ? Comparison.LessThan\n        : Comparison.GreaterThan;\n}\n\n/**\n * Compare two numeric values for their order relative to each other.\n * To compare strings, use any of the `compareStrings` functions.\n */\nexport function compareValues(a: number | undefined, b: number | undefined): Comparison {\n    return compareComparableValues(a, b);\n}\n\n/**\n * Tests whether a value is an array.\n */\nexport function isArray(value: any): value is readonly {}[] {\n    return Array.isArray ? Array.isArray(value) : value instanceof Array;\n}\n\n/**\n * Tests whether a value is string\n */\nexport function isString(text: unknown): text is string {\n    return typeof text === 'string';\n}\n\nexport function isNumber(x: unknown): x is number {\n    return typeof x === 'number';\n}\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Type of objects whose values are all of the same type.\n * The `in` and `for-in` operators can *not* be safely used,\n * since `Object.prototype` may be modified by outside code.\n */\nexport interface MapLike<T> {\n    [index: string]: T;\n}\n\n/**\n * Indicates whether a map-like contains an own property with the specified key.\n *\n * @param map A map-like.\n * @param key A property key.\n */\nexport function hasProperty(map: MapLike<any>, key: string): boolean {\n    return hasOwnProperty.call(map, key);\n}\n\n/**\n * Convert the given value to boolean\n * @param trueOrFalse string value 'true' or 'false'\n */\nexport function toBoolean(trueOrFalse: string): boolean {\n    const normalized = trueOrFalse?.trim().toUpperCase();\n    if (normalized === 'TRUE') {\n        return true;\n    }\n\n    return false;\n}\n\nexport function isDebugMode() {\n    const argv = process.execArgv.join();\n    return argv.includes('inspect') || argv.includes('debug');\n}\n","/*\n * debug.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Helper functions that display user friendly debugging info.\n */\n\nimport { stableSort } from './collectionUtils';\nimport { AnyFunction, compareValues, hasProperty, isString } from './core';\n\nexport function assert(\n    expression: boolean,\n    message?: string,\n    verboseDebugInfo?: string | (() => string),\n    stackCrawlMark?: AnyFunction\n): void {\n    if (!expression) {\n        if (verboseDebugInfo) {\n            message +=\n                '\\r\\nVerbose Debug Information: ' +\n                (typeof verboseDebugInfo === 'string' ? verboseDebugInfo : verboseDebugInfo());\n        }\n        fail(message ? 'False expression: ' + message : 'False expression.', stackCrawlMark || assert);\n    }\n}\n\nexport function fail(message?: string, stackCrawlMark?: AnyFunction): never {\n    // debugger;\n    const e = new Error(message ? `Debug Failure. ${message}` : 'Debug Failure.');\n    if ((Error as any).captureStackTrace) {\n        (Error as any).captureStackTrace(e, stackCrawlMark || fail);\n    }\n    throw e;\n}\n\nexport function assertDefined<T>(value: T | null | undefined, message?: string): T {\n    if (value === undefined || value === null) {\n        return fail(message);\n    }\n    return value;\n}\n\nexport function assertEachDefined<T, A extends readonly T[]>(value: A, message?: string): A {\n    for (const v of value) {\n        assertDefined(v, message);\n    }\n    return value;\n}\n\nexport function assertNever(member: never, message = 'Illegal value:', stackCrawlMark?: AnyFunction): never {\n    const detail = JSON.stringify(member);\n    return fail(`${message} ${detail}`, stackCrawlMark || assertNever);\n}\n\nexport function getFunctionName(func: AnyFunction) {\n    if (typeof func !== 'function') {\n        return '';\n    } else if (hasProperty(func, 'name')) {\n        return (func as any).name;\n    } else {\n        const text = Function.prototype.toString.call(func);\n        const match = /^function\\s+([\\w$]+)\\s*\\(/.exec(text);\n        return match ? match[1] : '';\n    }\n}\n\n/**\n * Formats an enum value as a string for debugging and debug assertions.\n */\nexport function formatEnum(value = 0, enumObject: any, isFlags?: boolean) {\n    const members = getEnumMembers(enumObject);\n    if (value === 0) {\n        return members.length > 0 && members[0][0] === 0 ? members[0][1] : '0';\n    }\n    if (isFlags) {\n        let result = '';\n        let remainingFlags = value;\n        for (const [enumValue, enumName] of members) {\n            if (enumValue > value) {\n                break;\n            }\n            if (enumValue !== 0 && enumValue & value) {\n                result = `${result}${result ? '|' : ''}${enumName}`;\n                remainingFlags &= ~enumValue;\n            }\n        }\n        if (remainingFlags === 0) {\n            return result;\n        }\n    } else {\n        for (const [enumValue, enumName] of members) {\n            if (enumValue === value) {\n                return enumName;\n            }\n        }\n    }\n    return value.toString();\n}\n\nexport function getErrorString(error: any): string {\n    return (\n        (error.stack ? error.stack.toString() : undefined) ||\n        (typeof error.message === 'string' ? error.message : undefined) ||\n        JSON.stringify(error)\n    );\n}\n\nexport function getSerializableError(error: any): Error | undefined {\n    if (!error) {\n        return undefined;\n    }\n\n    const exception = JSON.stringify(error);\n    if (exception.length > 2) {\n        // Given error object is JSON.stringify serializable. Use it as it is\n        // to preserve properties.\n        return error;\n    }\n\n    // Convert error to JSON.stringify serializable Error shape.\n    const name = error.name ? (isString(error.name) ? error.name : 'noname') : 'noname';\n    const message = error.message ? (isString(error.message) ? error.message : 'nomessage') : 'nomessage';\n    const stack = error.stack ? (isString(error.stack) ? error.stack : undefined) : undefined;\n    return { name, message, stack };\n}\n\nfunction getEnumMembers(enumObject: any) {\n    const result: [number, string][] = [];\n    for (const name of Object.keys(enumObject)) {\n        const value = enumObject[name];\n        if (typeof value === 'number') {\n            result.push([value, name]);\n        }\n    }\n\n    return stableSort<[number, string]>(result, (x, y) => compareValues(x[0], y[0]));\n}\n","/*\n * deferred.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Promise utilities for async operations.\n */\n\nexport interface Deferred<T> {\n    readonly promise: Promise<T>;\n    readonly resolved: boolean;\n    readonly rejected: boolean;\n    readonly completed: boolean;\n    resolve(value?: T | PromiseLike<T>): void;\n    reject(reason?: any): void;\n}\n\nclass DeferredImpl<T> implements Deferred<T> {\n    private _resolve!: (value: T | PromiseLike<T>) => void;\n    private _reject!: (reason?: any) => void;\n    private _resolved = false;\n    private _rejected = false;\n    private _promise: Promise<T>;\n\n    constructor(private scope: any = null) {\n        this._promise = new Promise<T>((res, rej) => {\n            this._resolve = res;\n            this._reject = rej;\n        });\n    }\n\n    public resolve(_value?: T | PromiseLike<T>) {\n        // eslint-disable-next-line prefer-rest-params\n        this._resolve.apply(this.scope ? this.scope : this, arguments as any);\n        this._resolved = true;\n    }\n\n    public reject(_reason?: any) {\n        // eslint-disable-next-line prefer-rest-params\n        this._reject.apply(this.scope ? this.scope : this, arguments as any);\n        this._rejected = true;\n    }\n\n    get promise(): Promise<T> {\n        return this._promise;\n    }\n\n    get resolved(): boolean {\n        return this._resolved;\n    }\n\n    get rejected(): boolean {\n        return this._rejected;\n    }\n\n    get completed(): boolean {\n        return this._rejected || this._resolved;\n    }\n}\n\nexport function createDeferred<T>(scope: any = null): Deferred<T> {\n    return new DeferredImpl<T>(scope);\n}\n\nexport function createDeferredFrom<T>(...promises: Promise<T>[]): Deferred<T> {\n    const deferred = createDeferred<T>();\n    Promise.all<T>(promises)\n        .then(deferred.resolve.bind(deferred) as any)\n        .catch(deferred.reject.bind(deferred) as any);\n\n    return deferred;\n}\n\nexport function createDeferredFromPromise<T>(promise: Promise<T>): Deferred<T> {\n    const deferred = createDeferred<T>();\n    promise.then(deferred.resolve.bind(deferred)).catch(deferred.reject.bind(deferred));\n    return deferred;\n}\n","/*\n * diagnostics.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Class that represents errors and warnings.\n */\n\nimport { Commands } from '../commands/commands';\nimport { DiagnosticLevel } from './configOptions';\nimport { Range } from './textRange';\n\nconst defaultMaxDepth = 5;\nconst defaultMaxLineCount = 8;\nconst maxRecursionCount = 64;\n\nexport const enum DiagnosticCategory {\n    Error,\n    Warning,\n    Information,\n    UnusedCode,\n}\n\nexport function convertLevelToCategory(level: DiagnosticLevel) {\n    switch (level) {\n        case 'error':\n            return DiagnosticCategory.Error;\n\n        case 'warning':\n            return DiagnosticCategory.Warning;\n\n        case 'information':\n            return DiagnosticCategory.Information;\n\n        default:\n            throw new Error(`${level} is not expected`);\n    }\n}\n\nexport interface DiagnosticAction {\n    action: string;\n}\n\nexport interface CreateTypeStubFileAction extends DiagnosticAction {\n    action: Commands.createTypeStub;\n    moduleName: string;\n}\n\nexport interface AddMissingOptionalToParamAction extends DiagnosticAction {\n    action: Commands.addMissingOptionalToParam;\n    offsetOfTypeNode: number;\n}\n\nexport interface DiagnosticRelatedInfo {\n    message: string;\n    filePath: string;\n    range: Range;\n}\n\n// Represents a single error or warning.\nexport class Diagnostic {\n    private _actions: DiagnosticAction[] | undefined;\n    private _rule: string | undefined;\n    private _relatedInfo: DiagnosticRelatedInfo[] = [];\n\n    constructor(readonly category: DiagnosticCategory, readonly message: string, readonly range: Range) {}\n\n    addAction(action: DiagnosticAction) {\n        if (this._actions === undefined) {\n            this._actions = [action];\n        } else {\n            this._actions.push(action);\n        }\n    }\n\n    getActions() {\n        return this._actions;\n    }\n\n    setRule(rule: string) {\n        this._rule = rule;\n    }\n\n    getRule() {\n        return this._rule;\n    }\n\n    addRelatedInfo(message: string, filePath: string, range: Range) {\n        this._relatedInfo.push({ filePath, message, range });\n    }\n\n    getRelatedInfo() {\n        return this._relatedInfo;\n    }\n}\n\n// Helps to build additional information that can be appended to a diagnostic\n// message. It supports hierarchical information and flexible formatting.\nexport class DiagnosticAddendum {\n    private _messages: string[] = [];\n    private _childAddenda: DiagnosticAddendum[] = [];\n\n    addMessage(message: string) {\n        this._messages.push(message);\n    }\n\n    // Create a new (nested) addendum to which messages can be added.\n    createAddendum() {\n        const newAddendum = new DiagnosticAddendum();\n        this.addAddendum(newAddendum);\n        return newAddendum;\n    }\n\n    getString(maxDepth = defaultMaxDepth, maxLineCount = defaultMaxLineCount): string {\n        let lines = this._getLinesRecursive(maxDepth);\n\n        if (lines.length > maxLineCount) {\n            lines = lines.slice(0, maxLineCount);\n            lines.push('  ...');\n        }\n\n        const text = lines.join('\\n');\n        if (text.length > 0) {\n            return '\\n' + text;\n        }\n\n        return '';\n    }\n\n    isEmpty() {\n        return this._getMessageCount() === 0;\n    }\n\n    addAddendum(addendum: DiagnosticAddendum) {\n        this._childAddenda.push(addendum);\n    }\n\n    getChildren() {\n        return this._childAddenda;\n    }\n\n    private _getMessageCount(recursionCount = 0) {\n        if (recursionCount > maxRecursionCount) {\n            return 0;\n        }\n\n        // Get the nested message count.\n        let messageCount = this._messages.length;\n\n        for (const diag of this._childAddenda) {\n            messageCount += diag._getMessageCount(recursionCount + 1);\n        }\n\n        return messageCount;\n    }\n\n    private _getLinesRecursive(maxDepth: number, recursionCount = 0): string[] {\n        if (maxDepth <= 0 || recursionCount > maxRecursionCount) {\n            return [];\n        }\n\n        const childLines: string[] = [];\n        for (const addendum of this._childAddenda) {\n            const maxDepthRemaining = this._messages.length > 0 ? maxDepth - 1 : maxDepth;\n            childLines.push(...addendum._getLinesRecursive(maxDepthRemaining, recursionCount + 1));\n        }\n\n        // Prepend indentation for readability. Skip if there are no\n        // messages at this level.\n        const extraSpace = this._messages.length > 0 ? '  ' : '';\n        return this._messages.concat(childLines).map((line) => extraSpace + line);\n    }\n}\n","/*\n * diagnosticRules.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Strings that represent each of the diagnostic rules\n * that can be enabled or disabled in the configuration.\n */\n\n// Not const enum since keys need to be inspected in tests\n// to match declaration of user-visible settings in package.json\nexport enum DiagnosticRule {\n    strictListInference = 'strictListInference',\n    strictDictionaryInference = 'strictDictionaryInference',\n    strictParameterNoneValue = 'strictParameterNoneValue',\n    enableTypeIgnoreComments = 'enableTypeIgnoreComments',\n\n    reportGeneralTypeIssues = 'reportGeneralTypeIssues',\n    reportPropertyTypeMismatch = 'reportPropertyTypeMismatch',\n    reportMissingImports = 'reportMissingImports',\n    reportMissingModuleSource = 'reportMissingModuleSource',\n    reportMissingTypeStubs = 'reportMissingTypeStubs',\n    reportImportCycles = 'reportImportCycles',\n    reportUnusedImport = 'reportUnusedImport',\n    reportUnusedClass = 'reportUnusedClass',\n    reportUnusedFunction = 'reportUnusedFunction',\n    reportUnusedVariable = 'reportUnusedVariable',\n    reportDuplicateImport = 'reportDuplicateImport',\n    reportWildcardImportFromLibrary = 'reportWildcardImportFromLibrary',\n    reportOptionalSubscript = 'reportOptionalSubscript',\n    reportOptionalMemberAccess = 'reportOptionalMemberAccess',\n    reportOptionalCall = 'reportOptionalCall',\n    reportOptionalIterable = 'reportOptionalIterable',\n    reportOptionalContextManager = 'reportOptionalContextManager',\n    reportOptionalOperand = 'reportOptionalOperand',\n    reportUntypedFunctionDecorator = 'reportUntypedFunctionDecorator',\n    reportUntypedClassDecorator = 'reportUntypedClassDecorator',\n    reportUntypedBaseClass = 'reportUntypedBaseClass',\n    reportUntypedNamedTuple = 'reportUntypedNamedTuple',\n    reportPrivateUsage = 'reportPrivateUsage',\n    reportConstantRedefinition = 'reportConstantRedefinition',\n    reportIncompatibleMethodOverride = 'reportIncompatibleMethodOverride',\n    reportIncompatibleVariableOverride = 'reportIncompatibleVariableOverride',\n    reportInvalidStringEscapeSequence = 'reportInvalidStringEscapeSequence',\n    reportUnknownParameterType = 'reportUnknownParameterType',\n    reportUnknownArgumentType = 'reportUnknownArgumentType',\n    reportUnknownLambdaType = 'reportUnknownLambdaType',\n    reportUnknownVariableType = 'reportUnknownVariableType',\n    reportUnknownMemberType = 'reportUnknownMemberType',\n    reportMissingTypeArgument = 'reportMissingTypeArgument',\n    reportCallInDefaultInitializer = 'reportCallInDefaultInitializer',\n    reportUnnecessaryIsInstance = 'reportUnnecessaryIsInstance',\n    reportUnnecessaryCast = 'reportUnnecessaryCast',\n    reportAssertAlwaysTrue = 'reportAssertAlwaysTrue',\n    reportSelfClsParameterName = 'reportSelfClsParameterName',\n    reportImplicitStringConcatenation = 'reportImplicitStringConcatenation',\n    reportUndefinedVariable = 'reportUndefinedVariable',\n    reportUnboundVariable = 'reportUnboundVariable',\n    reportInvalidStubStatement = 'reportInvalidStubStatement',\n}\n","/*\n * diagnostics.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Class that represents errors and warnings.\n */\n\nimport { DiagnosticLevel } from './configOptions';\nimport { Diagnostic, DiagnosticAction, DiagnosticCategory } from './diagnostic';\nimport { convertOffsetsToRange } from './positionUtils';\nimport { Range, TextRange } from './textRange';\nimport { TextRangeCollection } from './textRangeCollection';\n\n// Represents a collection of diagnostics within a file.\nexport interface FileDiagnostics {\n    filePath: string;\n    diagnostics: Diagnostic[];\n}\n\n// Creates and tracks a list of diagnostics.\nexport class DiagnosticSink {\n    private _diagnosticList: Diagnostic[];\n    private _diagnosticMap: Map<string, Diagnostic>;\n\n    constructor(diagnostics?: Diagnostic[]) {\n        this._diagnosticList = diagnostics || [];\n        this._diagnosticMap = new Map<string, Diagnostic>();\n    }\n\n    fetchAndClear() {\n        const prevDiagnostics = this._diagnosticList;\n        this._diagnosticList = [];\n        this._diagnosticMap.clear();\n        return prevDiagnostics;\n    }\n\n    addError(message: string, range: Range) {\n        return this.addDiagnostic(new Diagnostic(DiagnosticCategory.Error, message, range));\n    }\n\n    addWarning(message: string, range: Range) {\n        return this.addDiagnostic(new Diagnostic(DiagnosticCategory.Warning, message, range));\n    }\n\n    addInformation(message: string, range: Range) {\n        return this.addDiagnostic(new Diagnostic(DiagnosticCategory.Information, message, range));\n    }\n\n    addUnusedCode(message: string, range: Range, action?: DiagnosticAction) {\n        const diag = new Diagnostic(DiagnosticCategory.UnusedCode, message, range);\n        if (action) {\n            diag.addAction(action);\n        }\n        return this.addDiagnostic(diag);\n    }\n\n    addDiagnostic(diag: Diagnostic) {\n        // Create a unique key for the diagnostic to prevent\n        // adding duplicates.\n        const key =\n            `${diag.range.start.line},${diag.range.start.character}-` +\n            `${diag.range.end.line}-${diag.range.end.character}:${diag.message.substr(0, 25)}}`;\n        if (!this._diagnosticMap.has(key)) {\n            this._diagnosticList.push(diag);\n            this._diagnosticMap.set(key, diag);\n        }\n        return diag;\n    }\n\n    addDiagnostics(diagsToAdd: Diagnostic[]) {\n        this._diagnosticList.push(...diagsToAdd);\n    }\n\n    getErrors() {\n        return this._diagnosticList.filter((diag) => diag.category === DiagnosticCategory.Error);\n    }\n\n    getWarnings() {\n        return this._diagnosticList.filter((diag) => diag.category === DiagnosticCategory.Warning);\n    }\n\n    getInformation() {\n        return this._diagnosticList.filter((diag) => diag.category === DiagnosticCategory.Information);\n    }\n\n    getUnusedCode() {\n        return this._diagnosticList.filter((diag) => diag.category === DiagnosticCategory.UnusedCode);\n    }\n}\n\n// Specialized version of DiagnosticSink that works with TextRange objects\n// and converts text ranges to line and column numbers.\nexport class TextRangeDiagnosticSink extends DiagnosticSink {\n    private _lines: TextRangeCollection<TextRange>;\n\n    constructor(lines: TextRangeCollection<TextRange>, diagnostics?: Diagnostic[]) {\n        super(diagnostics);\n        this._lines = lines;\n    }\n\n    addDiagnosticWithTextRange(level: DiagnosticLevel, message: string, range: TextRange) {\n        const positionRange = convertOffsetsToRange(range.start, range.start + range.length, this._lines);\n        switch (level) {\n            case 'error':\n                return this.addError(message, positionRange);\n            case 'warning':\n                return this.addWarning(message, positionRange);\n            case 'information':\n                return this.addInformation(message, positionRange);\n            default:\n                throw new Error(`${level} is not expected value`);\n        }\n    }\n\n    addUnusedCodeWithTextRange(message: string, range: TextRange, action?: DiagnosticAction) {\n        return this.addUnusedCode(\n            message,\n            convertOffsetsToRange(range.start, range.start + range.length, this._lines),\n            action\n        );\n    }\n}\n","/*\n * extensions.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Extension methods to various types.\n */\n\n// Jest won't load index.d.ts so put it in the same file.\ndeclare interface Promise<T> {\n    // Catches task error and ignores them.\n    ignoreErrors(): void;\n}\n\n/* eslint-disable @typescript-eslint/no-empty-function */\n// Explicitly tells that promise should be run asynchronously.\nPromise.prototype.ignoreErrors = function <T>(this: Promise<T>) {\n    this.catch(() => {});\n};\n","/*\n * fileSystem.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * A \"file system provider\" abstraction that allows us to swap out a\n * real file system implementation for a virtual (mocked) implementation\n * for testing.\n */\n\n/* eslint-disable no-dupe-class-members */\n\n// * NOTE * except tests, this should be only file that import \"fs\"\nimport * as chokidar from 'chokidar';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as tmp from 'tmp';\n\n// Automatically remove files created by tmp at process exit.\ntmp.setGracefulCleanup();\n\nimport { ConsoleInterface, NullConsole } from './console';\nimport { createDeferred } from './deferred';\nimport { resolvePaths } from './pathUtils';\n\nexport type FileWatcherEventType = 'add' | 'addDir' | 'change' | 'unlink' | 'unlinkDir';\nexport type FileWatcherEventHandler = (eventName: FileWatcherEventType, path: string, stats?: Stats) => void;\n\nexport interface FileWatcher {\n    close(): void;\n}\n\nexport interface Stats {\n    size: number;\n\n    isFile(): boolean;\n    isDirectory(): boolean;\n    isBlockDevice(): boolean;\n    isCharacterDevice(): boolean;\n    isSymbolicLink(): boolean;\n    isFIFO(): boolean;\n    isSocket(): boolean;\n}\n\nexport interface MkDirOptions {\n    recursive: boolean;\n    // Not supported on Windows so commented out.\n    // mode: string | number;\n}\n\nexport interface TmpfileOptions {\n    postfix?: string;\n    prefix?: string;\n}\n\nexport interface FileSystem {\n    existsSync(path: string): boolean;\n    mkdirSync(path: string, options?: MkDirOptions | number): void;\n    chdir(path: string): void;\n    readdirEntriesSync(path: string): fs.Dirent[];\n    readdirSync(path: string): string[];\n    readFileSync(path: string, encoding?: null): Buffer;\n    readFileSync(path: string, encoding: BufferEncoding): string;\n    readFileSync(path: string, encoding?: BufferEncoding | null): string | Buffer;\n    writeFileSync(path: string, data: string | Buffer, encoding: BufferEncoding | null): void;\n    statSync(path: string): Stats;\n    unlinkSync(path: string): void;\n    realpathSync(path: string): string;\n    getModulePath(): string;\n    createFileSystemWatcher(paths: string[], listener: FileWatcherEventHandler): FileWatcher;\n    createReadStream(path: string): fs.ReadStream;\n    createWriteStream(path: string): fs.WriteStream;\n    copyFileSync(src: string, dst: string): void;\n    // Async I/O\n    readFile(path: string): Promise<Buffer>;\n    readFileText(path: string, encoding?: BufferEncoding): Promise<string>;\n    // The directory returned by tmpdir must exist and be the same each time tmpdir is called.\n    tmpdir(): string;\n    tmpfile(options?: TmpfileOptions): string;\n}\n\nexport interface FileWatcherProvider {\n    createFileWatcher(paths: string[], listener: FileWatcherEventHandler): FileWatcher;\n}\n\n// Callers can specify a different file watcher provider if desired.\n// By default, we'll use the file watcher based on chokidar.\nexport function createFromRealFileSystem(\n    console?: ConsoleInterface,\n    fileWatcherProvider?: FileWatcherProvider\n): FileSystem {\n    return new RealFileSystem(fileWatcherProvider ?? new ChokidarFileWatcherProvider(console ?? new NullConsole()));\n}\n\n// File watchers can give \"changed\" event even for a file open. but for those cases,\n// it will give relative path rather than absolute path. To get rid of such cases,\n// we will drop any event with relative paths. this trick is copied from VS Code\n// (https://github.com/microsoft/vscode/blob/master/src/vs/platform/files/node/watcher/unix/chokidarWatcherService.ts)\nexport function ignoredWatchEventFunction(paths: string[]) {\n    const normalizedPaths = paths.map((p) => p.toLowerCase());\n    return (path: string): boolean => {\n        if (!path || path.indexOf('__pycache__') >= 0) {\n            return true;\n        }\n        const normalizedPath = path.toLowerCase();\n        return normalizedPaths.every((p) => normalizedPath.indexOf(p) < 0);\n    };\n}\n\nconst _isMacintosh = process.platform === 'darwin';\nconst _isLinux = process.platform === 'linux';\n\nclass RealFileSystem implements FileSystem {\n    private _fileWatcherProvider: FileWatcherProvider;\n    private _tmpdir?: string;\n\n    constructor(fileWatcherProvider: FileWatcherProvider) {\n        this._fileWatcherProvider = fileWatcherProvider;\n    }\n\n    existsSync(path: string) {\n        return fs.existsSync(path);\n    }\n\n    mkdirSync(path: string, options?: MkDirOptions | number) {\n        fs.mkdirSync(path, options);\n    }\n\n    chdir(path: string) {\n        process.chdir(path);\n    }\n\n    readdirSync(path: string): string[] {\n        return fs.readdirSync(path);\n    }\n    readdirEntriesSync(path: string): fs.Dirent[] {\n        return fs.readdirSync(path, { withFileTypes: true });\n    }\n\n    readFileSync(path: string, encoding?: null): Buffer;\n    readFileSync(path: string, encoding: BufferEncoding): string;\n    readFileSync(path: string, encoding?: BufferEncoding | null): Buffer | string;\n    readFileSync(path: string, encoding: BufferEncoding | null = null) {\n        return fs.readFileSync(path, { encoding });\n    }\n\n    writeFileSync(path: string, data: string | Buffer, encoding: BufferEncoding | null) {\n        fs.writeFileSync(path, data, { encoding });\n    }\n\n    statSync(path: string) {\n        return fs.statSync(path);\n    }\n\n    unlinkSync(path: string) {\n        fs.unlinkSync(path);\n    }\n\n    realpathSync(path: string) {\n        return fs.realpathSync(path);\n    }\n\n    getModulePath(): string {\n        // The entry point to the tool should have set the __rootDirectory\n        // global variable to point to the directory that contains the\n        // typeshed-fallback directory.\n        return (global as any).__rootDirectory;\n    }\n\n    createFileSystemWatcher(paths: string[], listener: FileWatcherEventHandler): FileWatcher {\n        return this._fileWatcherProvider.createFileWatcher(paths, listener);\n    }\n\n    createReadStream(path: string): fs.ReadStream {\n        return fs.createReadStream(path);\n    }\n\n    createWriteStream(path: string): fs.WriteStream {\n        return fs.createWriteStream(path);\n    }\n\n    copyFileSync(src: string, dst: string): void {\n        fs.copyFileSync(src, dst);\n    }\n\n    readFile(path: string): Promise<Buffer> {\n        const d = createDeferred<Buffer>();\n        fs.readFile(path, (e, b) => {\n            if (e) {\n                d.reject(e);\n            } else {\n                d.resolve(b);\n            }\n        });\n        return d.promise;\n    }\n\n    readFileText(path: string, encoding: BufferEncoding): Promise<string> {\n        const d = createDeferred<string>();\n        fs.readFile(path, { encoding }, (e, s) => {\n            if (e) {\n                d.reject(e);\n            } else {\n                d.resolve(s);\n            }\n        });\n        return d.promise;\n    }\n\n    tmpdir() {\n        if (!this._tmpdir) {\n            const dir = tmp.dirSync({ prefix: 'pyright' });\n            this._tmpdir = dir.name;\n        }\n        return this._tmpdir;\n    }\n\n    tmpfile(options?: TmpfileOptions): string {\n        const f = tmp.fileSync({ dir: this.tmpdir(), discardDescriptor: true, ...options });\n        return f.name;\n    }\n}\n\nclass ChokidarFileWatcherProvider implements FileWatcherProvider {\n    constructor(private _console: ConsoleInterface) {}\n\n    createFileWatcher(paths: string[], listener: FileWatcherEventHandler): FileWatcher {\n        return this._createFileSystemWatcher(paths).on('all', listener);\n    }\n\n    createReadStream(path: string): fs.ReadStream {\n        return fs.createReadStream(path);\n    }\n    createWriteStream(path: string): fs.WriteStream {\n        return fs.createWriteStream(path);\n    }\n\n    private _createFileSystemWatcher(paths: string[]): chokidar.FSWatcher {\n        // The following options are copied from VS Code source base. It also\n        // uses chokidar for its file watching.\n        const watcherOptions: chokidar.WatchOptions = {\n            ignoreInitial: true,\n            ignorePermissionErrors: true,\n            followSymlinks: true, // this is the default of chokidar and supports file events through symlinks\n            interval: 1000, // while not used in normal cases, if any error causes chokidar to fallback to polling, increase its intervals\n            binaryInterval: 1000,\n            disableGlobbing: true, // fix https://github.com/Microsoft/vscode/issues/4586\n            awaitWriteFinish: {\n                // this will make sure we re-scan files once file changes are written to disk\n                stabilityThreshold: 1000,\n                pollInterval: 1000,\n            },\n        };\n\n        if (_isMacintosh) {\n            // Explicitly disable on MacOS because it uses up large amounts of memory\n            // and CPU for large file hierarchies, resulting in instability and crashes.\n            watcherOptions.usePolling = false;\n        }\n\n        const excludes: string[] = ['**/__pycache__/**'];\n        if (_isMacintosh || _isLinux) {\n            if (paths.some((path) => path === '' || path === '/')) {\n                excludes.push('/dev/**');\n                if (_isLinux) {\n                    excludes.push('/proc/**', '/sys/**');\n                }\n            }\n        }\n        watcherOptions.ignored = excludes;\n\n        const watcher = chokidar.watch(paths, watcherOptions);\n        watcher.on('error', (_) => {\n            this._console.error('Error returned from file system watcher.');\n        });\n\n        // Detect if for some reason the native watcher library fails to load\n        if (_isMacintosh && !watcher.options.useFsEvents) {\n            this._console.info('Watcher could not use native fsevents library. File system watcher disabled.');\n        }\n\n        return watcher;\n    }\n\n    readFile(path: string): Promise<Buffer> {\n        const d = createDeferred<Buffer>();\n        fs.readFile(path, (e, b) => {\n            if (e) {\n                d.reject(e);\n            } else {\n                d.resolve(b);\n            }\n        });\n        return d.promise;\n    }\n\n    readFileText(path: string, encoding: BufferEncoding): Promise<string> {\n        const d = createDeferred<string>();\n        fs.readFile(path, { encoding }, (e, s) => {\n            if (e) {\n                d.reject(e);\n            } else {\n                d.resolve(s);\n            }\n        });\n        return d.promise;\n    }\n}\n","/*\n * logTracker.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * A simple logging class that can be used to track nested loggings.\n */\n\nimport { ConsoleInterface, LogLevel } from './console';\nimport { Duration } from './timing';\n\n// Consider an operation \"long running\" if it goes longer than this.\nconst durationThresholdForInfoInMs = 2000;\n\nexport class LogTracker {\n    private _dummyState = new State();\n    private _indentation = '';\n    private _previousTitles: string[] = [];\n\n    constructor(private _console: ConsoleInterface | undefined, private _prefix: string) {}\n\n    log<T>(title: string, callback: (state: LogState) => T) {\n        // If no console is given, don't do anything.\n        if (this._console === undefined) {\n            return callback(this._dummyState);\n        }\n\n        // This is enabled only when level is LogLevel.Log or does not exist.\n        const level = (this._console as any).level;\n        if (level === undefined || (level !== LogLevel.Log && level !== LogLevel.Info)) {\n            return callback(this._dummyState);\n        }\n\n        // Since this is only used when LogLevel.Log or LogLevel.Info is set or BG,\n        // we don't care much about extra logging cost.\n        const duration = new Duration();\n\n        const current = this._indentation;\n        this._previousTitles.push(`${current}${title} ...`);\n\n        this._indentation += '  ';\n        const state = new State();\n\n        try {\n            return callback(state);\n        } finally {\n            this._printPreviousTitles();\n\n            this._indentation = current;\n            const msDuration = duration.getDurationInMilliseconds();\n\n            if (!state.isSuppressed()) {\n                this._console.log(`[${this._prefix}] ${this._indentation}${title}${state.get()} (${msDuration}ms)`);\n\n                // If the operation took really long, log it as \"info\" so it is more visible.\n                if (msDuration >= durationThresholdForInfoInMs) {\n                    this._console.info(`[${this._prefix}] Long operation: ${title} (${msDuration}ms)`);\n                }\n            }\n        }\n    }\n\n    private _printPreviousTitles() {\n        // Get rid of myself\n        this._previousTitles.pop();\n\n        if (this._previousTitles.length <= 0) {\n            return;\n        }\n\n        for (const previousTitle of this._previousTitles) {\n            this._console!.log(`[${this._prefix}] ${previousTitle}`);\n        }\n\n        this._previousTitles.length = 0;\n    }\n}\n\nexport interface LogState {\n    add(_addendum: string): void;\n    suppress(): void;\n}\n\nclass State {\n    private _addendum: string | undefined;\n    private _suppress: boolean | undefined;\n\n    add(_addendum: string) {\n        this._addendum = _addendum;\n    }\n\n    get() {\n        if (this._addendum) {\n            return ` [${this._addendum}]`;\n        }\n\n        return '';\n    }\n\n    suppress() {\n        this._suppress = true;\n    }\n\n    isSuppressed() {\n        return !!this._suppress;\n    }\n}\n","/*\n * pathConsts.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Path-related constants.\n */\n\nexport const typeshedFallback = 'typeshed-fallback';\nexport const lib = 'lib';\nexport const sitePackages = 'site-packages';\nexport const src = 'src';\n","/*\n * pathUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Pathname utility functions.\n */\n\nimport { randomBytes } from 'crypto';\nimport * as path from 'path';\nimport Char from 'typescript-char';\nimport { URI } from 'vscode-uri';\n\nimport { some } from './collectionUtils';\nimport { compareValues, Comparison, GetCanonicalFileName, identity } from './core';\nimport * as debug from './debug';\nimport { FileSystem } from './fileSystem';\nimport {\n    compareStringsCaseInsensitive,\n    compareStringsCaseSensitive,\n    equateStringsCaseInsensitive,\n    equateStringsCaseSensitive,\n    getStringComparer,\n} from './stringUtils';\n\nlet _fsCaseSensitivity: boolean | undefined = undefined;\n\nexport interface FileSpec {\n    // File specs can contain wildcard characters (**, *, ?). This\n    // specifies the first portion of the file spec that contains\n    // no wildcards.\n    wildcardRoot: string;\n\n    // Regular expression that can be used to match against this\n    // file spec.\n    regExp: RegExp;\n}\n\nexport namespace FileSpec {\n    export function is(value: any): value is FileSpec {\n        const candidate: FileSpec = value as FileSpec;\n        return candidate && !!candidate.wildcardRoot && !!candidate.regExp;\n    }\n}\n\nexport interface FileSystemEntries {\n    files: string[];\n    directories: string[];\n}\n\nexport function forEachAncestorDirectory(\n    directory: string,\n    callback: (directory: string) => string | undefined\n): string | undefined {\n    while (true) {\n        const result = callback(directory);\n        if (result !== undefined) {\n            return result;\n        }\n\n        const parentPath = getDirectoryPath(directory);\n        if (parentPath === directory) {\n            return undefined;\n        }\n\n        directory = parentPath;\n    }\n}\n\nexport function getDirectoryPath(pathString: string): string {\n    return pathString.substr(0, Math.max(getRootLength(pathString), pathString.lastIndexOf(path.sep)));\n}\n\nexport function getRootLength(pathString: string): number {\n    if (pathString.charAt(0) === path.sep) {\n        if (pathString.charAt(1) !== path.sep) {\n            return 1;\n        }\n        const p1 = pathString.indexOf(path.sep, 2);\n        if (p1 < 0) {\n            return 2;\n        }\n        const p2 = pathString.indexOf(path.sep, p1 + 1);\n        if (p2 < 0) {\n            return p1 + 1;\n        }\n        return p2 + 1;\n    }\n    if (pathString.charAt(1) === ':') {\n        if (pathString.charAt(2) === path.sep) {\n            return 3;\n        }\n    }\n    return 0;\n}\n\nexport function getPathComponents(pathString: string) {\n    const normalizedPath = normalizeSlashes(pathString);\n    const rootLength = getRootLength(normalizedPath);\n    const root = normalizedPath.substring(0, rootLength);\n    const rest = normalizedPath.substring(rootLength).split(path.sep);\n    if (rest.length > 0 && !rest[rest.length - 1]) {\n        rest.pop();\n    }\n\n    return reducePathComponents([root, ...rest]);\n}\n\nexport function reducePathComponents(components: readonly string[]) {\n    if (!some(components)) {\n        return [];\n    }\n\n    // Reduce the path components by eliminating\n    // any '.' or '..'.\n    const reduced = [components[0]];\n    for (let i = 1; i < components.length; i++) {\n        const component = components[i];\n        if (!component || component === '.') {\n            continue;\n        }\n\n        if (component === '..') {\n            if (reduced.length > 1) {\n                if (reduced[reduced.length - 1] !== '..') {\n                    reduced.pop();\n                    continue;\n                }\n            } else if (reduced[0]) {\n                continue;\n            }\n        }\n        reduced.push(component);\n    }\n\n    return reduced;\n}\n\nexport function combinePathComponents(components: string[]): string {\n    if (components.length === 0) {\n        return '';\n    }\n\n    const root = components[0] && ensureTrailingDirectorySeparator(components[0]);\n    return normalizeSlashes(root + components.slice(1).join(path.sep));\n}\n\nexport function getRelativePath(dirPath: string, relativeTo: string) {\n    if (!dirPath.startsWith(ensureTrailingDirectorySeparator(relativeTo))) {\n        return undefined;\n    }\n\n    const pathComponents = getPathComponents(dirPath);\n    const relativeToComponents = getPathComponents(relativeTo);\n\n    let relativePath = '.';\n    for (let i = relativeToComponents.length; i < pathComponents.length; i++) {\n        relativePath += path.sep + pathComponents[i];\n    }\n\n    return relativePath;\n}\n\n// Creates a directory hierarchy for a path, starting from some ancestor path.\nexport function makeDirectories(fs: FileSystem, dirPath: string, startingFromDirPath: string) {\n    if (!dirPath.startsWith(startingFromDirPath)) {\n        return;\n    }\n\n    const pathComponents = getPathComponents(dirPath);\n    const relativeToComponents = getPathComponents(startingFromDirPath);\n    let curPath = startingFromDirPath;\n\n    for (let i = relativeToComponents.length; i < pathComponents.length; i++) {\n        curPath = combinePaths(curPath, pathComponents[i]);\n        if (!fs.existsSync(curPath)) {\n            fs.mkdirSync(curPath);\n        }\n    }\n}\n\nexport function getFileSize(fs: FileSystem, path: string) {\n    try {\n        const stat = fs.statSync(path);\n        if (stat.isFile()) {\n            return stat.size;\n        }\n    } catch {\n        // Ignore the exception.\n    }\n    return 0;\n}\n\nexport function fileExists(fs: FileSystem, path: string): boolean {\n    return fileSystemEntryExists(fs, path, FileSystemEntryKind.File);\n}\n\nexport function directoryExists(fs: FileSystem, path: string): boolean {\n    return fileSystemEntryExists(fs, path, FileSystemEntryKind.Directory);\n}\n\nexport function normalizeSlashes(pathString: string): string {\n    const separatorRegExp = /[\\\\/]/g;\n    return pathString.replace(separatorRegExp, path.sep);\n}\n\n/**\n * Combines and resolves paths. If a path is absolute, it replaces any previous path. Any\n * `.` and `..` path components are resolved. Trailing directory separators are preserved.\n *\n * ```ts\n * resolvePath(\"/path\", \"to\", \"file.ext\") === \"path/to/file.ext\"\n * resolvePath(\"/path\", \"to\", \"file.ext/\") === \"path/to/file.ext/\"\n * resolvePath(\"/path\", \"dir\", \"..\", \"to\", \"file.ext\") === \"path/to/file.ext\"\n * ```\n */\nexport function resolvePaths(path: string, ...paths: (string | undefined)[]): string {\n    return normalizePath(some(paths) ? combinePaths(path, ...paths) : normalizeSlashes(path));\n}\n\nexport function combinePaths(pathString: string, ...paths: (string | undefined)[]): string {\n    if (pathString) {\n        pathString = normalizeSlashes(pathString);\n    }\n\n    for (let relativePath of paths) {\n        if (!relativePath) {\n            continue;\n        }\n\n        relativePath = normalizeSlashes(relativePath);\n\n        if (!pathString || getRootLength(relativePath) !== 0) {\n            pathString = relativePath;\n        } else {\n            pathString = ensureTrailingDirectorySeparator(pathString) + relativePath;\n        }\n    }\n\n    return pathString;\n}\n\n/**\n * Compare two paths using the provided case sensitivity.\n */\nexport function comparePaths(a: string, b: string, ignoreCase?: boolean): Comparison;\nexport function comparePaths(a: string, b: string, currentDirectory: string, ignoreCase?: boolean): Comparison;\nexport function comparePaths(a: string, b: string, currentDirectory?: string | boolean, ignoreCase?: boolean) {\n    a = normalizePath(a);\n    b = normalizePath(b);\n\n    if (typeof currentDirectory === 'string') {\n        a = combinePaths(currentDirectory, a);\n        b = combinePaths(currentDirectory, b);\n    } else if (typeof currentDirectory === 'boolean') {\n        ignoreCase = currentDirectory;\n    }\n    return comparePathsWorker(a, b, getStringComparer(ignoreCase));\n}\n\n/**\n * Determines whether a `parent` path contains a `child` path using the provide case sensitivity.\n */\nexport function containsPath(parent: string, child: string, ignoreCase?: boolean): boolean;\nexport function containsPath(parent: string, child: string, currentDirectory: string, ignoreCase?: boolean): boolean;\nexport function containsPath(parent: string, child: string, currentDirectory?: string | boolean, ignoreCase?: boolean) {\n    if (typeof currentDirectory === 'string') {\n        parent = combinePaths(currentDirectory, parent);\n        child = combinePaths(currentDirectory, child);\n    } else if (typeof currentDirectory === 'boolean') {\n        ignoreCase = currentDirectory;\n    }\n\n    if (parent === undefined || child === undefined) {\n        return false;\n    }\n    if (parent === child) {\n        return true;\n    }\n\n    const parentComponents = getPathComponents(parent);\n    const childComponents = getPathComponents(child);\n\n    if (childComponents.length < parentComponents.length) {\n        return false;\n    }\n\n    const componentEqualityComparer = ignoreCase ? equateStringsCaseInsensitive : equateStringsCaseSensitive;\n    for (let i = 0; i < parentComponents.length; i++) {\n        const equalityComparer = i === 0 ? equateStringsCaseInsensitive : componentEqualityComparer;\n        if (!equalityComparer(parentComponents[i], childComponents[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Changes the extension of a path to the provided extension.\n *\n * ```ts\n * changeAnyExtension(\"/path/to/file.ext\", \".js\") === \"/path/to/file.js\"\n * ```\n */\nexport function changeAnyExtension(path: string, ext: string): string;\n\n/**\n * Changes the extension of a path to the provided extension if it has one of the provided extensions.\n *\n * ```ts\n * changeAnyExtension(\"/path/to/file.ext\", \".js\", \".ext\") === \"/path/to/file.js\"\n * changeAnyExtension(\"/path/to/file.ext\", \".js\", \".ts\") === \"/path/to/file.ext\"\n * changeAnyExtension(\"/path/to/file.ext\", \".js\", [\".ext\", \".ts\"]) === \"/path/to/file.js\"\n * ```\n */\nexport function changeAnyExtension(\n    path: string,\n    ext: string,\n    extensions: string | readonly string[],\n    ignoreCase: boolean\n): string;\nexport function changeAnyExtension(\n    path: string,\n    ext: string,\n    extensions?: string | readonly string[],\n    ignoreCase?: boolean\n): string {\n    const pathExt =\n        extensions !== undefined && ignoreCase !== undefined\n            ? getAnyExtensionFromPath(path, extensions, ignoreCase)\n            : getAnyExtensionFromPath(path);\n\n    return pathExt ? path.slice(0, path.length - pathExt.length) + (ext.startsWith('.') ? ext : '.' + ext) : path;\n}\n\n/**\n * Gets the file extension for a path.\n *\n * ```ts\n * getAnyExtensionFromPath(\"/path/to/file.ext\") === \".ext\"\n * getAnyExtensionFromPath(\"/path/to/file.ext/\") === \".ext\"\n * getAnyExtensionFromPath(\"/path/to/file\") === \"\"\n * getAnyExtensionFromPath(\"/path/to.ext/file\") === \"\"\n * ```\n */\nexport function getAnyExtensionFromPath(path: string): string;\n/**\n * Gets the file extension for a path, provided it is one of the provided extensions.\n *\n * ```ts\n * getAnyExtensionFromPath(\"/path/to/file.ext\", \".ext\", true) === \".ext\"\n * getAnyExtensionFromPath(\"/path/to/file.js\", \".ext\", true) === \"\"\n * getAnyExtensionFromPath(\"/path/to/file.js\", [\".ext\", \".js\"], true) === \".js\"\n * getAnyExtensionFromPath(\"/path/to/file.ext\", \".EXT\", false) === \"\"\n */\nexport function getAnyExtensionFromPath(\n    path: string,\n    extensions: string | readonly string[],\n    ignoreCase: boolean\n): string;\nexport function getAnyExtensionFromPath(\n    path: string,\n    extensions?: string | readonly string[],\n    ignoreCase?: boolean\n): string {\n    // Retrieves any string from the final \".\" onwards from a base file name.\n    // Unlike extensionFromPath, which throws an exception on unrecognized extensions.\n    if (extensions) {\n        return getAnyExtensionFromPathWorker(\n            stripTrailingDirectorySeparator(path),\n            extensions,\n            ignoreCase ? equateStringsCaseInsensitive : equateStringsCaseSensitive\n        );\n    }\n    const baseFileName = getBaseFileName(path);\n    const extensionIndex = baseFileName.lastIndexOf('.');\n    if (extensionIndex >= 0) {\n        return baseFileName.substring(extensionIndex);\n    }\n    return '';\n}\n\n/**\n * Returns the path except for its containing directory name.\n * Semantics align with NodeJS's `path.basename` except that we support URLs as well.\n *\n * ```ts\n * // POSIX\n * getBaseFileName(\"/path/to/file.ext\") === \"file.ext\"\n * getBaseFileName(\"/path/to/\") === \"to\"\n * getBaseFileName(\"/\") === \"\"\n * // DOS\n * getBaseFileName(\"c:/path/to/file.ext\") === \"file.ext\"\n * getBaseFileName(\"c:/path/to/\") === \"to\"\n * getBaseFileName(\"c:/\") === \"\"\n * getBaseFileName(\"c:\") === \"\"\n * ```\n */\nexport function getBaseFileName(pathString: string): string;\n/**\n * Gets the portion of a path following the last (non-terminal) separator (`/`).\n * Semantics align with NodeJS's `path.basename` except that we support URLs as well.\n * If the base name has any one of the provided extensions, it is removed.\n *\n * ```ts\n * getBaseFileName(\"/path/to/file.ext\", \".ext\", true) === \"file\"\n * getBaseFileName(\"/path/to/file.js\", \".ext\", true) === \"file.js\"\n * getBaseFileName(\"/path/to/file.js\", [\".ext\", \".js\"], true) === \"file\"\n * getBaseFileName(\"/path/to/file.ext\", \".EXT\", false) === \"file.ext\"\n * ```\n */\nexport function getBaseFileName(\n    pathString: string,\n    extensions: string | readonly string[],\n    ignoreCase: boolean\n): string;\nexport function getBaseFileName(pathString: string, extensions?: string | readonly string[], ignoreCase?: boolean) {\n    pathString = normalizeSlashes(pathString);\n\n    // if the path provided is itself the root, then it has not file name.\n    const rootLength = getRootLength(pathString);\n    if (rootLength === pathString.length) {\n        return '';\n    }\n\n    // return the trailing portion of the path starting after the last (non-terminal) directory\n    // separator but not including any trailing directory separator.\n    pathString = stripTrailingDirectorySeparator(pathString);\n    const name = pathString.slice(Math.max(getRootLength(pathString), pathString.lastIndexOf(path.sep) + 1));\n    const extension =\n        extensions !== undefined && ignoreCase !== undefined\n            ? getAnyExtensionFromPath(name, extensions, ignoreCase)\n            : undefined;\n\n    return extension ? name.slice(0, name.length - extension.length) : name;\n}\n\n/**\n * Gets a relative path that can be used to traverse between `from` and `to`.\n */\nexport function getRelativePathFromDirectory(from: string, to: string, ignoreCase: boolean): string;\n/**\n * Gets a relative path that can be used to traverse between `from` and `to`.\n */\nexport function getRelativePathFromDirectory(\n    fromDirectory: string,\n    to: string,\n    getCanonicalFileName: GetCanonicalFileName\n): string;\nexport function getRelativePathFromDirectory(\n    fromDirectory: string,\n    to: string,\n    getCanonicalFileNameOrIgnoreCase: GetCanonicalFileName | boolean\n) {\n    const pathComponents = getRelativePathComponentsFromDirectory(fromDirectory, to, getCanonicalFileNameOrIgnoreCase);\n    return combinePathComponents(pathComponents);\n}\n\nexport function getRelativePathComponentsFromDirectory(\n    fromDirectory: string,\n    to: string,\n    getCanonicalFileNameOrIgnoreCase: GetCanonicalFileName | boolean\n) {\n    debug.assert(\n        getRootLength(fromDirectory) > 0 === getRootLength(to) > 0,\n        'Paths must either both be absolute or both be relative'\n    );\n    const getCanonicalFileName =\n        typeof getCanonicalFileNameOrIgnoreCase === 'function' ? getCanonicalFileNameOrIgnoreCase : identity;\n    const ignoreCase = typeof getCanonicalFileNameOrIgnoreCase === 'boolean' ? getCanonicalFileNameOrIgnoreCase : false;\n    const pathComponents = getPathComponentsRelativeTo(\n        fromDirectory,\n        to,\n        ignoreCase ? equateStringsCaseInsensitive : equateStringsCaseSensitive,\n        getCanonicalFileName\n    );\n\n    return pathComponents;\n}\n\n/**\n * Performs a case-sensitive comparison of two paths. Path roots are always compared case-insensitively.\n */\nexport function comparePathsCaseSensitive(a: string, b: string) {\n    return comparePathsWorker(a, b, compareStringsCaseSensitive);\n}\n\n/**\n * Performs a case-insensitive comparison of two paths.\n */\nexport function comparePathsCaseInsensitive(a: string, b: string) {\n    return comparePathsWorker(a, b, compareStringsCaseInsensitive);\n}\n\nexport function ensureTrailingDirectorySeparator(pathString: string): string {\n    if (!hasTrailingDirectorySeparator(pathString)) {\n        return pathString + path.sep;\n    }\n\n    return pathString;\n}\n\nexport function hasTrailingDirectorySeparator(pathString: string) {\n    if (pathString.length === 0) {\n        return false;\n    }\n\n    const ch = pathString.charCodeAt(pathString.length - 1);\n    return ch === Char.Slash || ch === Char.Backslash;\n}\n\nexport function stripTrailingDirectorySeparator(pathString: string) {\n    if (!hasTrailingDirectorySeparator(pathString)) {\n        return pathString;\n    }\n    return pathString.substr(0, pathString.length - 1);\n}\n\nexport function getFileExtension(fileName: string, multiDotExtension = false) {\n    if (!multiDotExtension) {\n        return path.extname(fileName);\n    }\n\n    fileName = getFileName(fileName);\n    const firstDotIndex = fileName.indexOf('.');\n    return fileName.substr(firstDotIndex);\n}\n\nexport function getFileName(pathString: string) {\n    return path.basename(pathString);\n}\n\nexport function stripFileExtension(fileName: string, multiDotExtension = false) {\n    const ext = getFileExtension(fileName, multiDotExtension);\n    return fileName.substr(0, fileName.length - ext.length);\n}\n\nexport function normalizePath(pathString: string): string {\n    return normalizeSlashes(path.normalize(pathString));\n}\n\nexport function isDirectory(fs: FileSystem, path: string): boolean {\n    let stat: any;\n    try {\n        stat = fs.statSync(path);\n    } catch (e) {\n        return false;\n    }\n\n    return stat.isDirectory();\n}\n\nexport function isFile(fs: FileSystem, path: string): boolean {\n    let stat: any;\n    try {\n        stat = fs.statSync(path);\n    } catch (e) {\n        return false;\n    }\n\n    return stat.isFile();\n}\n\nexport function getFileSystemEntries(fs: FileSystem, path: string): FileSystemEntries {\n    try {\n        const entries = fs.readdirEntriesSync(path || '.').sort((a, b) => {\n            if (a.name < b.name) {\n                return -1;\n            } else if (a.name > b.name) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        const files: string[] = [];\n        const directories: string[] = [];\n        for (const entry of entries) {\n            // This is necessary because on some file system node fails to exclude\n            // \".\" and \"..\". See https://github.com/nodejs/node/issues/4002\n            if (entry.name === '.' || entry.name === '..') {\n                continue;\n            }\n\n            if (entry.isFile()) {\n                files.push(entry.name);\n            } else if (entry.isDirectory()) {\n                // Don't traverse symbolic links. They can lead to cycles.\n                if (!entry.isSymbolicLink()) {\n                    directories.push(entry.name);\n                }\n            }\n        }\n        return { files, directories };\n    } catch (e) {\n        return { files: [], directories: [] };\n    }\n}\n\n// Transforms a relative file spec (one that potentially contains\n// escape characters **, * or ?) and returns a regular expression\n// that can be used for matching against.\nexport function getWildcardRegexPattern(rootPath: string, fileSpec: string): string {\n    let absolutePath = normalizePath(combinePaths(rootPath, fileSpec));\n    if (!absolutePath.endsWith('.py') && !absolutePath.endsWith('.pyi')) {\n        absolutePath = ensureTrailingDirectorySeparator(absolutePath);\n    }\n\n    const pathComponents = getPathComponents(absolutePath);\n\n    const escapedSeparator = getRegexEscapedSeparator();\n    const doubleAsteriskRegexFragment = `(${escapedSeparator}[^${escapedSeparator}.][^${escapedSeparator}]*)*?`;\n    const reservedCharacterPattern = new RegExp(`[^\\\\w\\\\s${escapedSeparator}]`, 'g');\n\n    // Strip the directory separator from the root component.\n    if (pathComponents.length > 0) {\n        pathComponents[0] = stripTrailingDirectorySeparator(pathComponents[0]);\n    }\n\n    let regExPattern = '';\n    let firstComponent = true;\n\n    for (let component of pathComponents) {\n        if (component === '**') {\n            regExPattern += doubleAsteriskRegexFragment;\n        } else {\n            if (!firstComponent) {\n                component = escapedSeparator + component;\n            }\n\n            regExPattern += component.replace(reservedCharacterPattern, (match) => {\n                if (match === '*') {\n                    return `[^${escapedSeparator}]*`;\n                } else if (match === '?') {\n                    return `[^${escapedSeparator}]`;\n                } else {\n                    // escaping anything that is not reserved characters - word/space/separator\n                    return '\\\\' + match;\n                }\n            });\n\n            firstComponent = false;\n        }\n    }\n\n    return regExPattern;\n}\n\n// Returns the topmost path that contains no wildcard characters.\nexport function getWildcardRoot(rootPath: string, fileSpec: string): string {\n    let absolutePath = normalizePath(combinePaths(rootPath, fileSpec));\n    if (!absolutePath.endsWith('.py') && !absolutePath.endsWith('.pyi')) {\n        absolutePath = ensureTrailingDirectorySeparator(absolutePath);\n    }\n\n    const pathComponents = getPathComponents(absolutePath);\n\n    // Strip the directory separator from the root component.\n    if (pathComponents.length > 0) {\n        pathComponents[0] = stripTrailingDirectorySeparator(pathComponents[0]);\n    }\n\n    let wildcardRoot = '';\n    let firstComponent = true;\n\n    for (let component of pathComponents) {\n        if (component === '**') {\n            break;\n        } else {\n            if (component.match(/[*?]/)) {\n                break;\n            }\n\n            if (!firstComponent) {\n                component = path.sep + component;\n            }\n\n            wildcardRoot += component;\n            firstComponent = false;\n        }\n    }\n\n    return wildcardRoot;\n}\n\nexport function getFileSpec(rootPath: string, fileSpec: string): FileSpec {\n    let regExPattern = getWildcardRegexPattern(rootPath, fileSpec);\n    const escapedSeparator = getRegexEscapedSeparator();\n    regExPattern = `^(${regExPattern})($|${escapedSeparator})`;\n\n    const regExp = new RegExp(regExPattern);\n    const wildcardRoot = getWildcardRoot(rootPath, fileSpec);\n\n    return {\n        wildcardRoot,\n        regExp,\n    };\n}\n\nexport function getRegexEscapedSeparator() {\n    // we don't need to escape \"/\" in typescript regular expression\n    return path.sep === '/' ? '/' : '\\\\\\\\';\n}\n\n/**\n * Determines whether a path is an absolute disk path (e.g. starts with `/`, or a dos path\n * like `c:`, `c:\\` or `c:/`).\n */\nexport function isRootedDiskPath(path: string) {\n    return getRootLength(path) > 0;\n}\n\n/**\n * Determines whether a path consists only of a path root.\n */\nexport function isDiskPathRoot(path: string) {\n    const rootLength = getRootLength(path);\n    return rootLength > 0 && rootLength === path.length;\n}\n\n//// Path Comparisons\nfunction comparePathsWorker(a: string, b: string, componentComparer: (a: string, b: string) => Comparison) {\n    if (a === b) {\n        return Comparison.EqualTo;\n    }\n    if (a === undefined) {\n        return Comparison.LessThan;\n    }\n    if (b === undefined) {\n        return Comparison.GreaterThan;\n    }\n\n    // NOTE: Performance optimization - shortcut if the root segments differ as there would be no\n    //       need to perform path reduction.\n    const aRoot = a.substring(0, getRootLength(a));\n    const bRoot = b.substring(0, getRootLength(b));\n    const result = compareStringsCaseInsensitive(aRoot, bRoot);\n    if (result !== Comparison.EqualTo) {\n        return result;\n    }\n\n    // check path for these segments: '', '.'. '..'\n    const escapedSeparator = getRegexEscapedSeparator();\n    const relativePathSegmentRegExp = new RegExp(`(^|${escapedSeparator}).{0,2}($|${escapedSeparator})`);\n\n    // NOTE: Performance optimization - shortcut if there are no relative path segments in\n    //       the non-root portion of the path\n    const aRest = a.substring(aRoot.length);\n    const bRest = b.substring(bRoot.length);\n    if (!relativePathSegmentRegExp.test(aRest) && !relativePathSegmentRegExp.test(bRest)) {\n        return componentComparer(aRest, bRest);\n    }\n\n    // The path contains a relative path segment. Normalize the paths and perform a slower component\n    // by component comparison.\n    const aComponents = getPathComponents(a);\n    const bComponents = getPathComponents(b);\n    const sharedLength = Math.min(aComponents.length, bComponents.length);\n    for (let i = 1; i < sharedLength; i++) {\n        const result = componentComparer(aComponents[i], bComponents[i]);\n        if (result !== Comparison.EqualTo) {\n            return result;\n        }\n    }\n\n    return compareValues(aComponents.length, bComponents.length);\n}\n\nfunction getAnyExtensionFromPathWorker(\n    path: string,\n    extensions: string | readonly string[],\n    stringEqualityComparer: (a: string, b: string) => boolean\n) {\n    if (typeof extensions === 'string') {\n        return tryGetExtensionFromPath(path, extensions, stringEqualityComparer) || '';\n    }\n    for (const extension of extensions) {\n        const result = tryGetExtensionFromPath(path, extension, stringEqualityComparer);\n        if (result) {\n            return result;\n        }\n    }\n    return '';\n}\n\nfunction tryGetExtensionFromPath(\n    path: string,\n    extension: string,\n    stringEqualityComparer: (a: string, b: string) => boolean\n) {\n    if (!extension.startsWith('.')) {\n        extension = '.' + extension;\n    }\n    if (path.length >= extension.length && path.charCodeAt(path.length - extension.length) === Char.Period) {\n        const pathExtension = path.slice(path.length - extension.length);\n        if (stringEqualityComparer(pathExtension, extension)) {\n            return pathExtension;\n        }\n    }\n\n    return undefined;\n}\n\nfunction getPathComponentsRelativeTo(\n    from: string,\n    to: string,\n    stringEqualityComparer: (a: string, b: string) => boolean,\n    getCanonicalFileName: GetCanonicalFileName\n) {\n    const fromComponents = getPathComponents(from);\n    const toComponents = getPathComponents(to);\n\n    let start: number;\n    for (start = 0; start < fromComponents.length && start < toComponents.length; start++) {\n        const fromComponent = getCanonicalFileName(fromComponents[start]);\n        const toComponent = getCanonicalFileName(toComponents[start]);\n        const comparer = start === 0 ? equateStringsCaseInsensitive : stringEqualityComparer;\n        if (!comparer(fromComponent, toComponent)) {\n            break;\n        }\n    }\n\n    if (start === 0) {\n        return toComponents;\n    }\n\n    const components = toComponents.slice(start);\n    const relative: string[] = [];\n    for (; start < fromComponents.length; start++) {\n        relative.push('..');\n    }\n    return ['', ...relative, ...components];\n}\n\nconst enum FileSystemEntryKind {\n    File,\n    Directory,\n}\n\nfunction fileSystemEntryExists(fs: FileSystem, path: string, entryKind: FileSystemEntryKind): boolean {\n    try {\n        const stat = fs.statSync(path);\n        switch (entryKind) {\n            case FileSystemEntryKind.File:\n                return stat.isFile();\n            case FileSystemEntryKind.Directory:\n                return stat.isDirectory();\n            default:\n                return false;\n        }\n    } catch (e) {\n        return false;\n    }\n}\n\nexport function convertUriToPath(uriString: string): string {\n    const uri = URI.parse(uriString);\n    let convertedPath = normalizePath(uri.path);\n    // If this is a DOS-style path with a drive letter, remove\n    // the leading slash.\n    if (convertedPath.match(/^\\\\[a-zA-Z]:\\\\/)) {\n        convertedPath = convertedPath.substr(1);\n    }\n    return convertedPath;\n}\n\nexport function convertPathToUri(path: string): string {\n    return URI.file(path).toString();\n}\n\n// For file systems that are case-insensitive, returns a lowercase\n// version of the path. For case-sensitive file systems, leaves the\n// path as is.\nexport function normalizePathCase(fs: FileSystem, path: string) {\n    if (isFileSystemCaseSensitive(fs)) {\n        return path;\n    }\n\n    return path.toLowerCase();\n}\n\nexport function isFileSystemCaseSensitive(fs: FileSystem) {\n    if (_fsCaseSensitivity !== undefined) {\n        return _fsCaseSensitivity;\n    }\n\n    _fsCaseSensitivity = isFileSystemCaseSensitiveInternal(fs);\n    return _fsCaseSensitivity;\n}\n\nexport function isFileSystemCaseSensitiveInternal(fs: FileSystem) {\n    let filePath: string | undefined = undefined;\n    try {\n        // Make unique file name.\n        let name: string;\n        let mangledFilePath: string;\n        do {\n            name = `${randomBytes(21).toString('hex')}-a`;\n            filePath = path.join(fs.tmpdir(), name);\n            mangledFilePath = path.join(fs.tmpdir(), name.toUpperCase());\n        } while (fs.existsSync(filePath) || fs.existsSync(mangledFilePath));\n\n        fs.writeFileSync(filePath, '', 'utf8');\n\n        // If file exists, then it is insensitive.\n        return !fs.existsSync(mangledFilePath);\n    } catch (e) {\n        return false;\n    } finally {\n        if (filePath) {\n            // remove temp file created\n            fs.unlinkSync(filePath);\n        }\n    }\n}\n\nexport function getLibraryPathWithoutExtension(libraryFilePath: string) {\n    let filePathWithoutExtension = stripFileExtension(libraryFilePath);\n\n    // Strip off the '/__init__' if it's present.\n    if (filePathWithoutExtension.endsWith('__init__')) {\n        filePathWithoutExtension = filePathWithoutExtension.substr(0, filePathWithoutExtension.length - 9);\n    }\n\n    return filePathWithoutExtension;\n}\n","/*\n * positionUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Utility routines for converting between file offsets and\n * line/column positions.\n */\n\nimport { assert } from './debug';\nimport { Position, Range, TextRange } from './textRange';\nimport { TextRangeCollection } from './textRangeCollection';\n\n// Translates a file offset into a line/column pair.\nexport function convertOffsetToPosition(offset: number, lines: TextRangeCollection<TextRange>): Position {\n    // Handle the case where the file is empty.\n    if (lines.end === 0) {\n        return {\n            line: 0,\n            character: 0,\n        };\n    }\n\n    // Handle the case where we're pointing to the last line of the file.\n    let offsetAdjustment = 0;\n    if (offset >= lines.end) {\n        offset = lines.end - 1;\n        offsetAdjustment = 1;\n    }\n\n    const itemIndex = lines.getItemContaining(offset);\n    assert(itemIndex >= 0 && itemIndex <= lines.length);\n    const lineRange = lines.getItemAt(itemIndex);\n    assert(lineRange !== undefined);\n    return {\n        line: itemIndex,\n        character: offset - lineRange.start + offsetAdjustment,\n    };\n}\n\n// Translates a start/end file offset into a pair of line/column positions.\nexport function convertOffsetsToRange(\n    startOffset: number,\n    endOffset: number,\n    lines: TextRangeCollection<TextRange>\n): Range {\n    const start = convertOffsetToPosition(startOffset, lines);\n    const end = convertOffsetToPosition(endOffset, lines);\n    return { start, end };\n}\n\n// Translates a position (line and col) into a file offset.\nexport function convertPositionToOffset(position: Position, lines: TextRangeCollection<TextRange>): number | undefined {\n    if (position.line >= lines.count) {\n        return undefined;\n    }\n\n    return lines.getItemAt(position.line).start + position.character;\n}\n\nexport function convertRangeToTextRange(range: Range, lines: TextRangeCollection<TextRange>): TextRange | undefined {\n    const start = convertPositionToOffset(range.start, lines);\n    if (start === undefined) {\n        return undefined;\n    }\n\n    const end = convertPositionToOffset(range.end, lines);\n    if (end === undefined) {\n        return undefined;\n    }\n\n    return TextRange.fromBounds(start, end);\n}\n","/*\n * progressReporter.ts\n *\n * Implements progress reporter.\n */\n\nexport interface ProgressReporter {\n    isEnabled(data: any): boolean;\n    begin(): void;\n    report(message: string): void;\n    end(): void;\n}\n\nexport class ProgressReportTracker implements ProgressReporter {\n    // Tracks whether we're currently displaying progress.\n    private _isDisplayingProgress = false;\n\n    constructor(private _reporter?: ProgressReporter) {}\n\n    isEnabled(data: any): boolean {\n        if (this._isDisplayingProgress) {\n            return true;\n        }\n\n        return this._reporter?.isEnabled(data) ?? false;\n    }\n\n    begin(): void {\n        if (this._isDisplayingProgress) {\n            return;\n        }\n\n        this._isDisplayingProgress = true;\n        this._reporter?.begin();\n    }\n\n    report(message: string): void {\n        if (!this._isDisplayingProgress) {\n            return;\n        }\n\n        this._reporter?.report(message);\n    }\n\n    end(): void {\n        if (!this._isDisplayingProgress) {\n            return;\n        }\n\n        this._isDisplayingProgress = false;\n        this._reporter?.end();\n    }\n}\n","/*\n * pythonLanguageVersion.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Types and functions that relate to the Python language version\n * and features within them.\n */\n\nexport enum PythonVersion {\n    // The order of this enumeration is significant. We assume\n    // that we can use comparison operators to check for older\n    // or newer versions.\n    V3_0 = 0x0300,\n    V3_1 = 0x0301,\n    V3_2 = 0x0302,\n    V3_3 = 0x0303,\n    V3_4 = 0x0304,\n    V3_5 = 0x0305,\n    V3_6 = 0x0306,\n    V3_7 = 0x0307,\n    V3_8 = 0x0308,\n    V3_9 = 0x0309,\n    V3_10 = 0x030a,\n}\n\nexport const latestStablePythonVersion = PythonVersion.V3_9;\nexport const latestPythonVersion = PythonVersion.V3_9;\n\nexport function versionToString(version: PythonVersion): string {\n    const majorVersion = (version >> 8) & 0xff;\n    const minorVersion = version & 0xff;\n    return `${majorVersion}.${minorVersion}`;\n}\n\nexport function versionFromString(verString: string): PythonVersion | undefined {\n    const split = verString.split('.');\n    if (split.length < 2) {\n        return undefined;\n    }\n\n    const majorVersion = parseInt(split[0], 10);\n    const minorVersion = parseInt(split[1], 10);\n\n    return versionFromMajorMinor(majorVersion, minorVersion);\n}\n\nexport function versionFromMajorMinor(major: number, minor: number): PythonVersion | undefined {\n    if (isNaN(major) || isNaN(minor)) {\n        return undefined;\n    }\n\n    if (major > 255 || minor > 255) {\n        return undefined;\n    }\n\n    const value = major * 256 + minor;\n    if (PythonVersion[value] === undefined) {\n        return undefined;\n    }\n\n    // Pyright currently supports only 3.x.\n    if (!is3x(value)) {\n        return undefined;\n    }\n\n    return value;\n}\n\nexport function is3x(version: PythonVersion): boolean {\n    return version >> 8 === 3;\n}\n\nexport function getPythonVersionStrings(pythonVersion: PythonVersion) {\n    const versionStrings: string[] = [];\n\n    let minorVersion = pythonVersion & 0xff;\n    while (true) {\n        const pythonVersionString =\n            minorVersion > 0 ? versionToString(0x300 + minorVersion) : minorVersion === 0 ? '3' : '2and3';\n        versionStrings.push(pythonVersionString);\n\n        // We use -1 to indicate \"2and3\", which is searched after \"3.0\".\n        if (minorVersion === -1) {\n            break;\n        }\n\n        minorVersion--;\n    }\n\n    return versionStrings;\n}\n","/*\n * stringUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Utility methods for manipulating and comparing strings.\n */\n\nimport leven from 'leven';\n\nimport { compareComparableValues, Comparison } from './core';\n\n// Determines how closely a typed string matches a symbol\n// name. An exact match returns 1. A match that differs\n// only in case returns a slightly lower number. A match\n// that involves a few missing or added characters returns\n// an even lower number.\nexport function computeCompletionSimilarity(typedValue: string, symbolName: string): number {\n    if (symbolName.startsWith(typedValue)) {\n        return 1;\n    }\n\n    const symbolLower = symbolName.toLocaleLowerCase();\n    const typedLower = typedValue.toLocaleLowerCase();\n\n    if (symbolLower.startsWith(typedLower)) {\n        return 0.75;\n    }\n\n    // How far apart are the two strings? Find the smallest edit\n    // distance for each of the substrings taken from the start of\n    // symbolName.\n    let symbolSubstrLength = symbolLower.length;\n    let smallestEditDistance = Number.MAX_VALUE;\n    while (symbolSubstrLength > 0) {\n        const editDistance = leven(symbolLower.substr(0, symbolSubstrLength), typedLower);\n        if (editDistance < smallestEditDistance) {\n            smallestEditDistance = editDistance;\n        }\n        symbolSubstrLength--;\n    }\n\n    // We'll take into account the length of the typed value. If the user\n    // has typed more characters, and they largely match the symbol name,\n    // it is considered more similar. If the the edit distance is similar\n    // to the number of characters the user has typed, then there's almost\n    // no similarity.\n    if (smallestEditDistance >= typedValue.length) {\n        return 0;\n    }\n\n    const similarity = (typedValue.length - smallestEditDistance) / typedValue.length;\n    return 0.5 * similarity;\n}\n\n// This is a simple, non-cryptographic hash function for text.\nexport function hashString(contents: string) {\n    let hash = 0;\n\n    for (let i = 0; i < contents.length; i++) {\n        hash = ((hash << 5) - hash + contents.charCodeAt(i)) | 0;\n    }\n    return hash;\n}\n\n/**\n * Compare two strings using a case-insensitive ordinal comparison.\n *\n * Ordinal comparisons are based on the difference between the unicode code points of both\n * strings. Characters with multiple unicode representations are considered unequal. Ordinal\n * comparisons provide predictable ordering, but place \"a\" after \"B\".\n *\n * Case-insensitive comparisons compare both strings one code-point at a time using the integer\n * value of each code-point after applying `toUpperCase` to each string. We always map both\n * strings to their upper-case form as some unicode characters do not properly round-trip to\n * lowercase (such as `áºž` (German sharp capital s)).\n */\nexport function compareStringsCaseInsensitive(a: string | undefined, b: string | undefined): Comparison {\n    return a === b\n        ? Comparison.EqualTo\n        : a === undefined\n        ? Comparison.LessThan\n        : b === undefined\n        ? Comparison.GreaterThan\n        : compareComparableValues(a.toUpperCase(), b.toUpperCase());\n}\n\n/**\n * Compare two strings using a case-sensitive ordinal comparison.\n *\n * Ordinal comparisons are based on the difference between the unicode code points of both\n * strings. Characters with multiple unicode representations are considered unequal. Ordinal\n * comparisons provide predictable ordering, but place \"a\" after \"B\".\n *\n * Case-sensitive comparisons compare both strings one code-point at a time using the integer\n * value of each code-point.\n */\nexport function compareStringsCaseSensitive(a: string | undefined, b: string | undefined): Comparison {\n    return compareComparableValues(a, b);\n}\n\nexport function getStringComparer(ignoreCase?: boolean) {\n    return ignoreCase ? compareStringsCaseInsensitive : compareStringsCaseSensitive;\n}\n\n/**\n * Compare the equality of two strings using a case-insensitive ordinal comparison.\n *\n * Case-insensitive comparisons compare both strings one code-point at a time using the integer\n * value of each code-point after applying `toUpperCase` to each string. We always map both\n * strings to their upper-case form as some unicode characters do not properly round-trip to\n * lowercase (such as `ẞ` (German sharp capital s)).\n */\nexport function equateStringsCaseInsensitive(a: string, b: string) {\n    return compareStringsCaseInsensitive(a, b) === Comparison.EqualTo;\n}\n\n/**\n * Compare the equality of two strings using a case-sensitive ordinal comparison.\n *\n * Case-sensitive comparisons compare both strings one code-point at a time using the\n * integer value of each code-point.\n */\nexport function equateStringsCaseSensitive(a: string, b: string) {\n    return compareStringsCaseSensitive(a, b) === Comparison.EqualTo;\n}\n\nexport function getCharacterCount(value: string, ch: string) {\n    let result = 0;\n    for (let i = 0; i < value.length; i++) {\n        if (value[i] === ch) {\n            result++;\n        }\n    }\n    return result;\n}\n","/*\n * textEditUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Language server command execution functionality.\n */\n\nimport { TextEdit, WorkspaceEdit } from 'vscode-languageserver';\n\nimport { FileEditAction, TextEditAction } from '../common/editAction';\nimport { convertPathToUri } from '../common/pathUtils';\n\nexport function convertTextEdits(uri: string, editActions: TextEditAction[] | undefined): WorkspaceEdit {\n    if (!editActions) {\n        return {};\n    }\n\n    const edits: TextEdit[] = [];\n    editActions.forEach((editAction) => {\n        edits.push({\n            range: editAction.range,\n            newText: editAction.replacementText,\n        });\n    });\n\n    return {\n        changes: {\n            [uri]: edits,\n        },\n    };\n}\n\nexport function convertWorkspaceEdits(edits: FileEditAction[]) {\n    const workspaceEdits: WorkspaceEdit = {\n        changes: {},\n    };\n\n    edits.forEach((edit) => {\n        const uri = convertPathToUri(edit.filePath);\n        workspaceEdits.changes![uri] = workspaceEdits.changes![uri] || [];\n        workspaceEdits.changes![uri].push({ range: edit.range, newText: edit.replacementText });\n    });\n\n    return workspaceEdits;\n}\n","/*\n * textRange.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Specifies the range of text within a larger string.\n */\n\nexport interface TextRange {\n    start: number;\n    length: number;\n}\n\nexport namespace TextRange {\n    export function create(start: number, length: number): TextRange {\n        if (start < 0) {\n            throw new Error('start must be non-negative');\n        }\n        if (length < 0) {\n            throw new Error('length must be non-negative');\n        }\n        return { start, length };\n    }\n\n    export function fromBounds(start: number, end: number): TextRange {\n        if (start < 0) {\n            throw new Error('start must be non-negative');\n        }\n        if (start > end) {\n            throw new Error('end must be greater than or equal to start');\n        }\n        return create(start, end - start);\n    }\n\n    export function getEnd(range: TextRange): number {\n        return range.start + range.length;\n    }\n\n    export function contains(range: TextRange, position: number): boolean {\n        return position >= range.start && position < getEnd(range);\n    }\n\n    export function extend(range: TextRange, extension: TextRange | TextRange[] | undefined) {\n        if (extension) {\n            if (Array.isArray(extension)) {\n                extension.forEach((r) => {\n                    extend(range, r);\n                });\n            } else {\n                if (extension.start < range.start) {\n                    range.length += range.start - extension.start;\n                    range.start = extension.start;\n                }\n\n                if (getEnd(extension) > getEnd(range)) {\n                    range.length += getEnd(extension) - getEnd(range);\n                }\n            }\n        }\n    }\n}\n\nexport interface Position {\n    // Both line and column are zero-based\n    line: number;\n    character: number;\n}\n\nnamespace Position {\n    export function is(value: any): value is Position {\n        const candidate = value as Position;\n        return candidate && candidate.line !== void 0 && candidate.character !== void 0;\n    }\n}\n\nexport interface Range {\n    start: Position;\n    end: Position;\n}\n\nnamespace Range {\n    export function is(value: any): value is Range {\n        const candidate = value as Range;\n        return candidate && candidate.start !== void 0 && candidate.end !== void 0;\n    }\n}\n\n// Represents a range within a particular document.\nexport interface DocumentRange {\n    path: string;\n    range: Range;\n}\n\nexport function comparePositions(a: Position, b: Position) {\n    if (a.line < b.line) {\n        return -1;\n    } else if (a.line > b.line) {\n        return 1;\n    } else if (a.character < b.character) {\n        return -1;\n    } else if (a.character > b.character) {\n        return 1;\n    }\n    return 0;\n}\n\nexport function getEmptyPosition(): Position {\n    return {\n        line: 0,\n        character: 0,\n    };\n}\n\nexport function doRangesOverlap(a: Range, b: Range) {\n    if (comparePositions(b.start, a.end) >= 0) {\n        return false;\n    } else if (comparePositions(a.start, b.end) >= 0) {\n        return false;\n    }\n    return true;\n}\n\nexport function doRangesIntersect(a: Range, b: Range) {\n    if (comparePositions(b.start, a.end) > 0) {\n        return false;\n    } else if (comparePositions(a.start, b.end) > 0) {\n        return false;\n    }\n    return true;\n}\n\nexport function doesRangeContain(range: Range, positionOrRange: Position | Range): boolean {\n    if (Position.is(positionOrRange)) {\n        return comparePositions(range.start, positionOrRange) <= 0 && comparePositions(range.end, positionOrRange) >= 0;\n    }\n\n    return doesRangeContain(range, positionOrRange.start) && doesRangeContain(range, positionOrRange.end);\n}\n\nexport function rangesAreEqual(a: Range, b: Range) {\n    return comparePositions(a.start, b.start) === 0 && comparePositions(a.end, b.end) === 0;\n}\n\nexport function getEmptyRange(): Range {\n    return {\n        start: getEmptyPosition(),\n        end: getEmptyPosition(),\n    };\n}\n\nexport function isEmptyPosition(pos: Position) {\n    return pos.character === 0 && pos.line === 0;\n}\n\nexport function isEmptyRange(range: Range) {\n    return isEmptyPosition(range.start) && isEmptyPosition(range.end);\n}\n","/*\n * textRangeCollection.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Based on code from vscode-python repository:\n *  https://github.com/Microsoft/vscode-python\n *\n * Class that maintains an ordered list of text ranges and allows\n * for indexing and fast lookups within this list.\n */\n\nimport { TextRange } from './textRange';\n\nexport class TextRangeCollection<T extends TextRange> {\n    private _items: T[];\n\n    constructor(items: T[]) {\n        this._items = items;\n    }\n\n    get start(): number {\n        return this._items.length > 0 ? this._items[0].start : 0;\n    }\n\n    get end(): number {\n        const lastItem = this._items[this._items.length - 1];\n        return this._items.length > 0 ? lastItem.start + lastItem.length : 0;\n    }\n\n    get length(): number {\n        return this.end - this.start;\n    }\n\n    get count(): number {\n        return this._items.length;\n    }\n\n    contains(position: number) {\n        return position >= this.start && position < this.end;\n    }\n\n    getItemAt(index: number): T {\n        if (index < 0 || index >= this._items.length) {\n            throw new Error('index is out of range');\n        }\n        return this._items[index];\n    }\n\n    // Returns the nearest item prior to the position.\n    // The position may not be contained within the item.\n    getItemAtPosition(position: number): number {\n        if (this.count === 0) {\n            return -1;\n        }\n        if (position < this.start) {\n            return -1;\n        }\n        if (position > this.end) {\n            return -1;\n        }\n\n        let min = 0;\n        let max = this.count - 1;\n\n        while (min < max) {\n            const mid = Math.floor(min + (max - min) / 2);\n            const item = this._items[mid];\n\n            // Is the position past the start of this item but before\n            // the start of the next item? If so, we found our item.\n            if (position >= item.start) {\n                if (mid >= this.count - 1 || position < this._items[mid + 1].start) {\n                    return mid;\n                }\n            }\n\n            if (position < item.start) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return min;\n    }\n\n    getItemContaining(position: number): number {\n        if (this.count === 0) {\n            return -1;\n        }\n        if (position < this.start) {\n            return -1;\n        }\n        if (position > this.end) {\n            return -1;\n        }\n\n        let min = 0;\n        let max = this.count - 1;\n\n        while (min <= max) {\n            const mid = Math.floor(min + (max - min) / 2);\n            const item = this._items[mid];\n\n            if (TextRange.contains(item, position)) {\n                return mid;\n            }\n\n            if (mid < this.count - 1 && TextRange.getEnd(item) <= position && position < this._items[mid + 1].start) {\n                return -1;\n            }\n\n            if (position < item.start) {\n                max = mid - 1;\n            } else {\n                min = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n","/*\n * timing.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * A simple duration class that can be used to record and report\n * durations at the millisecond level of resolution.\n */\n\nimport { ConsoleInterface } from './console';\n\nexport class Duration {\n    private _startTime: number;\n\n    constructor() {\n        this._startTime = Date.now();\n    }\n\n    getDurationInMilliseconds() {\n        const curTime = Date.now();\n        return curTime - this._startTime;\n    }\n\n    getDurationInSeconds() {\n        return this.getDurationInMilliseconds() / 1000;\n    }\n}\n\nexport class TimingStat {\n    totalTime = 0;\n    isTiming = false;\n\n    timeOperation(callback: () => void) {\n        // Handle reentrancy.\n        if (this.isTiming) {\n            callback();\n        } else {\n            this.isTiming = true;\n            const duration = new Duration();\n            callback();\n            const elapsedTime = duration.getDurationInMilliseconds();\n            this.totalTime += elapsedTime;\n            this.isTiming = false;\n\n            return elapsedTime;\n        }\n    }\n\n    subtractFromTime(callback: () => void) {\n        if (this.isTiming) {\n            this.isTiming = false;\n            const duration = new Duration();\n            callback();\n            this.totalTime -= duration.getDurationInMilliseconds();\n            this.isTiming = true;\n        } else {\n            callback();\n        }\n    }\n\n    printTime(): string {\n        const totalTimeInSec = this.totalTime / 1000;\n        const roundedTime = Math.round(totalTimeInSec * 100) / 100;\n        return roundedTime.toString() + 'sec';\n    }\n}\n\nexport class TimingStats {\n    totalDuration = new Duration();\n    findFilesTime = new TimingStat();\n    readFileTime = new TimingStat();\n    tokenizeFileTime = new TimingStat();\n    parseFileTime = new TimingStat();\n    resolveImportsTime = new TimingStat();\n    cycleDetectionTime = new TimingStat();\n    bindTime = new TimingStat();\n    typeCheckerTime = new TimingStat();\n\n    printSummary(console: ConsoleInterface) {\n        console.info(`Completed in ${this.totalDuration.getDurationInSeconds()}sec`);\n    }\n\n    printDetails(console: ConsoleInterface) {\n        console.info('');\n        console.info('Timing stats');\n        console.info('Find Source Files:    ' + this.findFilesTime.printTime());\n        console.info('Read Source Files:    ' + this.readFileTime.printTime());\n        console.info('Tokenize:             ' + this.tokenizeFileTime.printTime());\n        console.info('Parse:                ' + this.parseFileTime.printTime());\n        console.info('Resolve Imports:      ' + this.resolveImportsTime.printTime());\n        console.info('Bind:                 ' + this.bindTime.printTime());\n        console.info('Check:                ' + this.typeCheckerTime.printTime());\n        console.info('Detect Cycles:        ' + this.cycleDetectionTime.printTime());\n    }\n\n    getTotalDuration() {\n        return this.totalDuration.getDurationInSeconds();\n    }\n}\n\nexport const timingStats = new TimingStats();\n","/*\n * languageServerBase.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Implements common language server functionality.\n * This is split out as a base class to allow for\n * different language server variants to be created\n * from the same core functionality.\n */\n\nimport './common/extensions';\n\nimport * as fs from 'fs';\nimport {\n    CancellationToken,\n    CancellationTokenSource,\n    CodeAction,\n    CodeActionParams,\n    Command,\n    CompletionList,\n    CompletionParams,\n    CompletionTriggerKind,\n    ConfigurationItem,\n    Connection,\n    ConnectionOptions,\n    createConnection,\n    Diagnostic,\n    DiagnosticRelatedInformation,\n    DiagnosticSeverity,\n    DiagnosticTag,\n    DidChangeWatchedFilesNotification,\n    DocumentSymbol,\n    ExecuteCommandParams,\n    InitializeParams,\n    InitializeResult,\n    Location,\n    MarkupKind,\n    ParameterInformation,\n    RemoteWindow,\n    SignatureHelpTriggerKind,\n    SignatureInformation,\n    SymbolInformation,\n    TextDocumentSyncKind,\n    WatchKind,\n    WorkDoneProgressReporter,\n    WorkspaceEdit,\n    WorkspaceFolder,\n} from 'vscode-languageserver/node';\n\nimport { AnalysisResults } from './analyzer/analysis';\nimport { BackgroundAnalysisProgram } from './analyzer/backgroundAnalysisProgram';\nimport { ImportResolver } from './analyzer/importResolver';\nimport { MaxAnalysisTime } from './analyzer/program';\nimport { AnalyzerService, configFileNames } from './analyzer/service';\nimport { BackgroundAnalysisBase } from './backgroundAnalysisBase';\nimport { CancelAfter, getCancellationStrategyFromArgv } from './common/cancellationUtils';\nimport { getNestedProperty } from './common/collectionUtils';\nimport {\n    DiagnosticSeverityOverrides,\n    DiagnosticSeverityOverridesMap,\n    getDiagnosticSeverityOverrides,\n} from './common/commandLineOptions';\nimport { ConfigOptions, getDiagLevelDiagnosticRules } from './common/configOptions';\nimport { ConsoleInterface, ConsoleWithLogLevel, LogLevel } from './common/console';\nimport { createDeferred, Deferred } from './common/deferred';\nimport { Diagnostic as AnalyzerDiagnostic, DiagnosticCategory } from './common/diagnostic';\nimport { DiagnosticRule } from './common/diagnosticRules';\nimport { LanguageServiceExtension } from './common/extensibility';\nimport {\n    createFromRealFileSystem,\n    FileSystem,\n    FileWatcher,\n    FileWatcherEventHandler,\n    FileWatcherEventType,\n} from './common/fileSystem';\nimport { containsPath, convertPathToUri, convertUriToPath } from './common/pathUtils';\nimport { ProgressReporter, ProgressReportTracker } from './common/progressReporter';\nimport { convertWorkspaceEdits } from './common/textEditUtils';\nimport { DocumentRange, Position } from './common/textRange';\nimport { AnalyzerServiceExecutor } from './languageService/analyzerServiceExecutor';\nimport { CompletionItemData, CompletionResults } from './languageService/completionProvider';\nimport { convertToFlatSymbols, WorkspaceSymbolCallback } from './languageService/documentSymbolProvider';\nimport { convertHoverResults } from './languageService/hoverProvider';\nimport { ReferenceCallback } from './languageService/referencesProvider';\nimport { Localizer } from './localization/localize';\nimport { WorkspaceMap } from './workspaceMap';\n\nexport interface ServerSettings {\n    venvPath?: string;\n    pythonPath?: string;\n    typeshedPath?: string;\n    stubPath?: string;\n    openFilesOnly?: boolean;\n    typeCheckingMode?: string;\n    useLibraryCodeForTypes?: boolean;\n    disableLanguageServices?: boolean;\n    disableOrganizeImports?: boolean;\n    autoSearchPaths?: boolean;\n    extraPaths?: string[];\n    watchForSourceChanges?: boolean;\n    watchForLibraryChanges?: boolean;\n    diagnosticSeverityOverrides?: DiagnosticSeverityOverridesMap;\n    logLevel?: LogLevel;\n    autoImportCompletions?: boolean;\n    indexing?: boolean;\n}\n\nexport interface WorkspaceServiceInstance {\n    workspaceName: string;\n    rootPath: string;\n    rootUri: string;\n    serviceInstance: AnalyzerService;\n    disableLanguageServices: boolean;\n    disableOrganizeImports: boolean;\n    isInitialized: Deferred<boolean>;\n}\n\nexport interface WindowInterface {\n    showErrorMessage(message: string): void;\n    showWarningMessage(message: string): void;\n    showInformationMessage(message: string): void;\n}\n\nexport interface LanguageServerInterface {\n    getWorkspaceForFile(filePath: string): Promise<WorkspaceServiceInstance>;\n    getSettings(workspace: WorkspaceServiceInstance): Promise<ServerSettings>;\n    createBackgroundAnalysis(): BackgroundAnalysisBase | undefined;\n    reanalyze(): void;\n    restart(): void;\n\n    readonly rootPath: string;\n    readonly console: ConsoleInterface;\n    readonly window: WindowInterface;\n    readonly fs: FileSystem;\n}\n\n// This is a subset of the LSP Connection, defined to not expose the LSP library\n// in the public interface.\nexport interface ProgressReporterConnection {\n    sendNotification: (method: string, params?: any) => void;\n}\n\nexport interface ServerOptions {\n    productName: string;\n    rootDirectory: string;\n    version: string;\n    extension?: LanguageServiceExtension;\n    maxAnalysisTimeInForeground?: MaxAnalysisTime;\n    supportedCommands?: string[];\n    supportedCodeActions?: string[];\n    progressReporterFactory?: (connection: ProgressReporterConnection) => ProgressReporter;\n}\n\ninterface InternalFileWatcher extends FileWatcher {\n    // Paths that are being watched within the workspace\n    workspacePaths: string[];\n\n    // Event handler to call\n    eventHandler: FileWatcherEventHandler;\n}\n\nexport abstract class LanguageServerBase implements LanguageServerInterface {\n    // Create a connection for the server. The connection type can be changed by the process's arguments\n    protected _connection: Connection = createConnection(this._GetConnectionOptions());\n    protected _workspaceMap: WorkspaceMap;\n    protected _hasConfigurationCapability = false;\n    protected _hasVisualStudioExtensionsCapability = false;\n    protected _hasWorkspaceFoldersCapability = false;\n    protected _hasWatchFileCapability = false;\n    protected _hasActiveParameterCapability = false;\n    protected _hasSignatureLabelOffsetCapability = false;\n    protected _hasHierarchicalDocumentSymbolCapability = false;\n    protected _hoverContentFormat: MarkupKind = MarkupKind.PlainText;\n    protected _completionDocFormat: MarkupKind = MarkupKind.PlainText;\n    protected _supportsUnnecessaryDiagnosticTag = false;\n    protected _defaultClientConfig: any;\n\n    // Tracks active file system watchers.\n    private _fileWatchers: InternalFileWatcher[] = [];\n\n    // We support running only one \"find all reference\" at a time.\n    private _pendingFindAllRefsCancellationSource: CancellationTokenSource | undefined;\n\n    // We support running only one command at a time.\n    private _pendingCommandCancellationSource: CancellationTokenSource | undefined;\n\n    private _progressReporter: ProgressReporter;\n\n    private _lastTriggerKind: CompletionTriggerKind | undefined = CompletionTriggerKind.Invoked;\n\n    // Global root path - the basis for all global settings.\n    rootPath = '';\n\n    // File system abstraction.\n    fs: FileSystem;\n\n    readonly console: ConsoleInterface;\n\n    constructor(private _serverOptions: ServerOptions) {\n        this.console = new ConsoleWithLogLevel(this._connection.console);\n\n        this.console.info(\n            `${_serverOptions.productName} language server ${\n                _serverOptions.version && _serverOptions.version + ' '\n            }starting`\n        );\n\n        this.fs = createFromRealFileSystem(this.console, this);\n\n        // Set the working directory to a known location within\n        // the extension directory. Otherwise the execution of\n        // python can have unintended and surprising results.\n        const moduleDirectory = this.fs.getModulePath();\n        if (moduleDirectory) {\n            this.fs.chdir(moduleDirectory);\n        }\n\n        // Stash the base directory into a global variable.\n        (global as any).__rootDirectory = _serverOptions.rootDirectory;\n        this.console.info(`Server root directory: ${_serverOptions.rootDirectory}`);\n\n        // Create workspace map.\n        this._workspaceMap = new WorkspaceMap(this);\n\n        // Set up callbacks.\n        this.setupConnection(_serverOptions.supportedCommands ?? [], _serverOptions.supportedCodeActions ?? []);\n\n        this._progressReporter = new ProgressReportTracker(\n            this._serverOptions.progressReporterFactory\n                ? this._serverOptions.progressReporterFactory(this._connection)\n                : undefined\n        );\n\n        // Listen on the connection.\n        this._connection.listen();\n    }\n\n    abstract createBackgroundAnalysis(): BackgroundAnalysisBase | undefined;\n\n    protected abstract executeCommand(params: ExecuteCommandParams, token: CancellationToken): Promise<any>;\n    protected isLongRunningCommand(command: string): boolean {\n        // By default, all commands are considered \"long-running\" and should\n        // display a cancelable progress dialog. Servers can override this\n        // to avoid showing the progress dialog for commands that are\n        // guaranteed to be quick.\n        return true;\n    }\n\n    protected abstract executeCodeAction(\n        params: CodeActionParams,\n        token: CancellationToken\n    ): Promise<(Command | CodeAction)[] | undefined | null>;\n\n    abstract getSettings(workspace: WorkspaceServiceInstance): Promise<ServerSettings>;\n\n    protected async getConfiguration(scopeUri: string | undefined, section: string) {\n        if (this._hasConfigurationCapability) {\n            const item: ConfigurationItem = {\n                scopeUri,\n                section,\n            };\n            return this._connection.workspace.getConfiguration(item);\n        }\n\n        if (this._defaultClientConfig) {\n            return getNestedProperty(this._defaultClientConfig, section);\n        }\n\n        return undefined;\n    }\n\n    protected isOpenFilesOnly(diagnosticMode: string): boolean {\n        return diagnosticMode !== 'workspace';\n    }\n\n    protected getSeverityOverrides(value: string): DiagnosticSeverityOverrides | undefined {\n        const enumValue = value as DiagnosticSeverityOverrides;\n        if (getDiagnosticSeverityOverrides().includes(enumValue)) {\n            return enumValue;\n        }\n\n        return undefined;\n    }\n\n    protected getDiagnosticRuleName(value: string): DiagnosticRule | undefined {\n        const enumValue = value as DiagnosticRule;\n        if (getDiagLevelDiagnosticRules().includes(enumValue)) {\n            return enumValue;\n        }\n\n        return undefined;\n    }\n\n    protected createImportResolver(fs: FileSystem, options: ConfigOptions): ImportResolver {\n        return new ImportResolver(fs, options);\n    }\n\n    protected createBackgroundAnalysisProgram(\n        console: ConsoleInterface,\n        configOptions: ConfigOptions,\n        importResolver: ImportResolver,\n        extension?: LanguageServiceExtension,\n        backgroundAnalysis?: BackgroundAnalysisBase,\n        maxAnalysisTime?: MaxAnalysisTime\n    ): BackgroundAnalysisProgram {\n        return new BackgroundAnalysisProgram(\n            console,\n            configOptions,\n            importResolver,\n            extension,\n            backgroundAnalysis,\n            maxAnalysisTime\n        );\n    }\n\n    protected setExtension(extension: any): void {\n        this._serverOptions.extension = extension;\n    }\n\n    // Provides access to the client's window.\n    get window(): RemoteWindow {\n        return this._connection.window;\n    }\n\n    // Creates a service instance that's used for analyzing a\n    // program within a workspace.\n    createAnalyzerService(name: string): AnalyzerService {\n        this.console.log(`Starting service instance \"${name}\"`);\n        const service = new AnalyzerService(\n            name,\n            this.fs,\n            this.console,\n            this.createImportResolver.bind(this),\n            undefined,\n            this._serverOptions.extension,\n            this.createBackgroundAnalysis(),\n            this._serverOptions.maxAnalysisTimeInForeground,\n            this.createBackgroundAnalysisProgram.bind(this)\n        );\n\n        service.setCompletionCallback((results) => this.onAnalysisCompletedHandler(results));\n\n        return service;\n    }\n\n    async getWorkspaceForFile(filePath: string): Promise<WorkspaceServiceInstance> {\n        const workspace = this._workspaceMap.getWorkspaceForFile(filePath);\n        await workspace.isInitialized.promise;\n        return workspace;\n    }\n\n    reanalyze() {\n        this._workspaceMap.forEach((workspace) => {\n            workspace.serviceInstance.invalidateAndForceReanalysis();\n        });\n    }\n\n    restart() {\n        this._workspaceMap.forEach((workspace) => {\n            workspace.serviceInstance.restart();\n        });\n    }\n\n    createFileWatcher(paths: string[], listener: FileWatcherEventHandler): FileWatcher {\n        // Capture \"this\" so we can reference it within the \"close\" method below.\n        const lsBase = this;\n\n        // Determine which paths are located within one or more workspaces.\n        // Those are already covered by existing file watchers handled by\n        // the client.\n        const workspacePaths: string[] = [];\n        const nonWorkspacePaths: string[] = [];\n        const workspaces = this._workspaceMap.getNonDefaultWorkspaces();\n\n        paths.forEach((path) => {\n            if (workspaces.some((workspace) => containsPath(workspace.rootPath, path))) {\n                workspacePaths.push(path);\n            } else {\n                nonWorkspacePaths.push(path);\n            }\n        });\n\n        // For any non-workspace paths, use the node file watcher.\n        const nodeWatchers = nonWorkspacePaths.map((path) => {\n            return fs.watch(path, { recursive: true }, (event, filename) =>\n                listener(event as FileWatcherEventType, filename)\n            );\n        });\n\n        const fileWatcher: InternalFileWatcher = {\n            close() {\n                // Stop listening for workspace paths.\n                lsBase._fileWatchers = lsBase._fileWatchers.filter((watcher) => watcher !== fileWatcher);\n\n                // Close the node watchers.\n                nodeWatchers.forEach((watcher) => {\n                    watcher.close();\n                });\n            },\n            workspacePaths,\n            eventHandler: listener,\n        };\n\n        // Record the file watcher.\n        this._fileWatchers.push(fileWatcher);\n\n        return fileWatcher;\n    }\n\n    protected setupConnection(supportedCommands: string[], supportedCodeActions: string[]): void {\n        // After the server has started the client sends an initialize request. The server receives\n        // in the passed params the rootPath of the workspace plus the client capabilities.\n        this._connection.onInitialize((params) => this.initialize(params, supportedCommands, supportedCodeActions));\n\n        this._connection.onDidChangeConfiguration((params) => {\n            this.console.log(`Received updated settings`);\n            if (params?.settings) {\n                this._defaultClientConfig = params?.settings;\n            }\n            this.updateSettingsForAllWorkspaces();\n        });\n\n        this._connection.onCodeAction((params, token) => this.executeCodeAction(params, token));\n\n        this._connection.onDefinition(async (params, token) => {\n            this.recordUserInteractionTime();\n\n            const filePath = convertUriToPath(params.textDocument.uri);\n\n            const position: Position = {\n                line: params.position.line,\n                character: params.position.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            if (workspace.disableLanguageServices) {\n                return;\n            }\n            const locations = workspace.serviceInstance.getDefinitionForPosition(filePath, position, token);\n            if (!locations) {\n                return undefined;\n            }\n            return locations.map((loc) => Location.create(convertPathToUri(loc.path), loc.range));\n        });\n\n        this._connection.onReferences(async (params, token, workDoneReporter, resultReporter) => {\n            if (this._pendingFindAllRefsCancellationSource) {\n                this._pendingFindAllRefsCancellationSource.cancel();\n                this._pendingFindAllRefsCancellationSource = undefined;\n            }\n\n            // VS Code doesn't support cancellation of \"final all references\".\n            // We provide a progress bar a cancellation button so the user can cancel\n            // any long-running actions.\n            const progress = await this._getProgressReporter(\n                params.workDoneToken,\n                workDoneReporter,\n                Localizer.CodeAction.findingReferences()\n            );\n\n            const source = CancelAfter(token, progress.token);\n            this._pendingFindAllRefsCancellationSource = source;\n\n            try {\n                const filePath = convertUriToPath(params.textDocument.uri);\n                const position: Position = {\n                    line: params.position.line,\n                    character: params.position.character,\n                };\n\n                const workspace = await this.getWorkspaceForFile(filePath);\n                if (workspace.disableLanguageServices) {\n                    return;\n                }\n\n                const convert = (locs: DocumentRange[]): Location[] => {\n                    return locs.map((loc) => Location.create(convertPathToUri(loc.path), loc.range));\n                };\n\n                const locations: Location[] = [];\n                const reporter: ReferenceCallback = resultReporter\n                    ? (locs) => resultReporter.report(convert(locs))\n                    : (locs) => locations.push(...convert(locs));\n\n                workspace.serviceInstance.reportReferencesForPosition(\n                    filePath,\n                    position,\n                    params.context.includeDeclaration,\n                    reporter,\n                    source.token\n                );\n\n                return locations;\n            } finally {\n                progress.reporter.done();\n                source.dispose();\n            }\n        });\n\n        this._connection.onDocumentSymbol(async (params, token) => {\n            this.recordUserInteractionTime();\n\n            const filePath = convertUriToPath(params.textDocument.uri);\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            if (workspace.disableLanguageServices) {\n                return undefined;\n            }\n\n            const symbolList: DocumentSymbol[] = [];\n            workspace.serviceInstance.addSymbolsForDocument(filePath, symbolList, token);\n            if (this._hasHierarchicalDocumentSymbolCapability) {\n                return symbolList;\n            }\n\n            return convertToFlatSymbols(params.textDocument.uri, symbolList);\n        });\n\n        this._connection.onWorkspaceSymbol(async (params, token, _, resultReporter) => {\n            const symbolList: SymbolInformation[] = [];\n\n            const reporter: WorkspaceSymbolCallback = resultReporter\n                ? (symbols) => resultReporter.report(symbols)\n                : (symbols) => symbolList.push(...symbols);\n\n            for (const workspace of this._workspaceMap.values()) {\n                await workspace.isInitialized.promise;\n                if (!workspace.disableLanguageServices) {\n                    workspace.serviceInstance.reportSymbolsForWorkspace(params.query, reporter, token);\n                }\n            }\n\n            return symbolList;\n        });\n\n        this._connection.onHover(async (params, token) => {\n            const filePath = convertUriToPath(params.textDocument.uri);\n\n            const position: Position = {\n                line: params.position.line,\n                character: params.position.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            const hoverResults = workspace.serviceInstance.getHoverForPosition(\n                filePath,\n                position,\n                this._hoverContentFormat,\n                token\n            );\n            return convertHoverResults(this._hoverContentFormat, hoverResults);\n        });\n\n        this._connection.onDocumentHighlight(async (params, token) => {\n            const filePath = convertUriToPath(params.textDocument.uri);\n\n            const position: Position = {\n                line: params.position.line,\n                character: params.position.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            return workspace.serviceInstance.getDocumentHighlight(filePath, position, token);\n        });\n\n        this._connection.onSignatureHelp(async (params, token) => {\n            const filePath = convertUriToPath(params.textDocument.uri);\n\n            const position: Position = {\n                line: params.position.line,\n                character: params.position.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            if (workspace.disableLanguageServices) {\n                return;\n            }\n            const signatureHelpResults = workspace.serviceInstance.getSignatureHelpForPosition(\n                filePath,\n                position,\n                token\n            );\n            if (!signatureHelpResults) {\n                return undefined;\n            }\n\n            const signatures = signatureHelpResults.signatures.map((sig) => {\n                let paramInfo: ParameterInformation[] = [];\n                if (sig.parameters) {\n                    paramInfo = sig.parameters.map((param) =>\n                        ParameterInformation.create(\n                            this._hasSignatureLabelOffsetCapability ? [param.startOffset, param.endOffset] : param.text,\n                            param.documentation\n                        )\n                    );\n                }\n\n                const sigInfo = SignatureInformation.create(sig.label, sig.documentation, ...paramInfo);\n                sigInfo.activeParameter = sig.activeParameter;\n                return sigInfo;\n            });\n\n            // A signature is active if it contains an active parameter,\n            // or if both the signature and its invocation have no parameters.\n            const isActive = (sig: SignatureInformation) =>\n                sig.activeParameter !== undefined ||\n                (!signatureHelpResults.callHasParameters && !sig.parameters?.length);\n\n            let activeSignature: number | null = signatures.findIndex(isActive);\n            if (activeSignature === -1) {\n                activeSignature = null;\n            }\n\n            let activeParameter = activeSignature !== null ? signatures[activeSignature].activeParameter! : null;\n\n            // Check if we should reuse the user's signature selection. If the retrigger was not \"invoked\"\n            // (i.e., the signature help call was automatically generated by the client due to some navigation\n            // or text change), check to see if the previous signature is still \"active\". If so, we mark it as\n            // active in our response.\n            //\n            // This isn't a perfect method. For nested calls, we can't tell when we are moving between them.\n            // Ideally, we would include a token in the signature help responses to compare later, allowing us\n            // to know when the user's navigated to a nested call (and therefore the old signature's info does\n            // not apply), but for now manually retriggering the signature help will work around the issue.\n            if (params.context?.isRetrigger && params.context.triggerKind !== SignatureHelpTriggerKind.Invoked) {\n                const prevActiveSignature = params.context.activeSignatureHelp?.activeSignature ?? null;\n                if (prevActiveSignature !== null && prevActiveSignature < signatures.length) {\n                    const sig = signatures[prevActiveSignature];\n                    if (isActive(sig)) {\n                        activeSignature = prevActiveSignature;\n                        activeParameter = sig.activeParameter ?? null;\n                    }\n                }\n            }\n\n            if (this._hasActiveParameterCapability || activeSignature === null) {\n                // A value of -1 is out of bounds but is legal within the LSP (should be treated\n                // as undefined). It produces a better result in VS Code by preventing it from\n                // highlighting the first parameter when no parameter works, since the LSP client\n                // converts null into zero.\n                activeParameter = -1;\n            }\n\n            return { signatures, activeSignature, activeParameter };\n        });\n\n        this._connection.onCompletion((params, token) => this.onCompletion(params, token));\n\n        this._connection.onCompletionResolve(async (params, token) => {\n            // Cancellation bugs in vscode and LSP:\n            // https://github.com/microsoft/vscode-languageserver-node/issues/615\n            // https://github.com/microsoft/vscode/issues/95485\n            //\n            // If resolver throws cancellation exception, LSP and VSCode\n            // cache that result and never call us back.\n            const completionItemData = params.data as CompletionItemData;\n            if (completionItemData && completionItemData.filePath) {\n                const workspace = await this.getWorkspaceForFile(completionItemData.workspacePath);\n                workspace.serviceInstance.resolveCompletionItem(\n                    completionItemData.filePath,\n                    params,\n                    this._completionDocFormat,\n                    token\n                );\n            }\n            return params;\n        });\n\n        this._connection.onRenameRequest(async (params, token) => {\n            const filePath = convertUriToPath(params.textDocument.uri);\n\n            const position: Position = {\n                line: params.position.line,\n                character: params.position.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            if (workspace.disableLanguageServices) {\n                return;\n            }\n\n            const editActions = workspace.serviceInstance.renameSymbolAtPosition(\n                filePath,\n                position,\n                params.newName,\n                token\n            );\n\n            if (!editActions) {\n                return undefined;\n            }\n\n            return convertWorkspaceEdits(editActions);\n        });\n\n        this._connection.languages.callHierarchy.onPrepare(async (params, token) => {\n            const filePath = convertUriToPath(params.textDocument.uri);\n\n            const position: Position = {\n                line: params.position.line,\n                character: params.position.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            if (workspace.disableLanguageServices) {\n                return null;\n            }\n\n            const callItem = workspace.serviceInstance.getCallForPosition(filePath, position, token) || null;\n            if (!callItem) {\n                return null;\n            }\n\n            // Convert the file path in the item to proper URI.\n            callItem.uri = convertPathToUri(callItem.uri);\n\n            return [callItem];\n        });\n\n        this._connection.languages.callHierarchy.onIncomingCalls(async (params, token) => {\n            const filePath = convertUriToPath(params.item.uri);\n\n            const position: Position = {\n                line: params.item.range.start.line,\n                character: params.item.range.start.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            if (workspace.disableLanguageServices) {\n                return null;\n            }\n\n            const callItems = workspace.serviceInstance.getIncomingCallsForPosition(filePath, position, token) || null;\n            if (!callItems || callItems.length === 0) {\n                return null;\n            }\n\n            // Convert the file paths in the items to proper URIs.\n            callItems.forEach((item) => {\n                item.from.uri = convertPathToUri(item.from.uri);\n            });\n\n            return callItems;\n        });\n\n        this._connection.languages.callHierarchy.onOutgoingCalls(async (params, token) => {\n            const filePath = convertUriToPath(params.item.uri);\n\n            const position: Position = {\n                line: params.item.range.start.line,\n                character: params.item.range.start.character,\n            };\n\n            const workspace = await this.getWorkspaceForFile(filePath);\n            if (workspace.disableLanguageServices) {\n                return null;\n            }\n\n            const callItems = workspace.serviceInstance.getOutgoingCallsForPosition(filePath, position, token) || null;\n            if (!callItems || callItems.length === 0) {\n                return null;\n            }\n\n            // Convert the file paths in the items to proper URIs.\n            callItems.forEach((item) => {\n                item.to.uri = convertPathToUri(item.to.uri);\n            });\n\n            return callItems;\n        });\n\n        this._connection.onDidOpenTextDocument(async (params) => {\n            const filePath = convertUriToPath(params.textDocument.uri);\n            const workspace = await this.getWorkspaceForFile(filePath);\n            workspace.serviceInstance.setFileOpened(filePath, params.textDocument.version, params.textDocument.text);\n        });\n\n        this._connection.onDidChangeTextDocument(async (params) => {\n            this.recordUserInteractionTime();\n\n            const filePath = convertUriToPath(params.textDocument.uri);\n            const workspace = await this.getWorkspaceForFile(filePath);\n            workspace.serviceInstance.updateOpenFileContents(\n                filePath,\n                params.textDocument.version,\n                params.contentChanges\n            );\n        });\n\n        this._connection.onDidCloseTextDocument(async (params) => {\n            const filePath = convertUriToPath(params.textDocument.uri);\n            const workspace = await this.getWorkspaceForFile(filePath);\n            workspace.serviceInstance.setFileClosed(filePath);\n        });\n\n        this._connection.onDidChangeWatchedFiles((params) => {\n            params.changes.forEach((change) => {\n                const filePath = convertUriToPath(change.uri);\n                const eventType: FileWatcherEventType = change.type === 1 ? 'add' : 'change';\n                this._fileWatchers.forEach((watcher) => {\n                    if (watcher.workspacePaths.some((dirPath) => containsPath(dirPath, filePath))) {\n                        watcher.eventHandler(eventType, filePath);\n                    }\n                });\n            });\n        });\n\n        this._connection.onInitialized(() => {\n            if (this._hasWorkspaceFoldersCapability) {\n                this._connection.workspace.onDidChangeWorkspaceFolders((event) => {\n                    event.removed.forEach((workspace) => {\n                        const rootPath = convertUriToPath(workspace.uri);\n                        this._workspaceMap.delete(rootPath);\n                    });\n\n                    event.added.forEach(async (workspace) => {\n                        const rootPath = convertUriToPath(workspace.uri);\n                        const newWorkspace = this.createWorkspaceServiceInstance(workspace, rootPath);\n                        this._workspaceMap.set(rootPath, newWorkspace);\n                        await this.updateSettingsForWorkspace(newWorkspace);\n                    });\n                });\n            }\n\n            // Set up our file watchers.\n            if (this._hasWatchFileCapability) {\n                this._connection.client.register(DidChangeWatchedFilesNotification.type, {\n                    watchers: [\n                        ...configFileNames.map((fileName) => {\n                            return {\n                                globPattern: `**/${fileName}`,\n                                kind: WatchKind.Create | WatchKind.Change | WatchKind.Delete,\n                            };\n                        }),\n                        {\n                            globPattern: '**/*.{py,pyi}',\n                            kind: WatchKind.Create | WatchKind.Change | WatchKind.Delete,\n                        },\n                    ],\n                });\n            }\n        });\n\n        this._connection.onExecuteCommand(async (params, token, reporter) => {\n            // Cancel running command if there is one.\n            if (this._pendingCommandCancellationSource) {\n                this._pendingCommandCancellationSource.cancel();\n                this._pendingCommandCancellationSource = undefined;\n            }\n\n            const executeCommand = async (token: CancellationToken) => {\n                const result = await this.executeCommand(params, token);\n                if (WorkspaceEdit.is(result)) {\n                    // Tell client to apply edits.\n                    this._connection.workspace.applyEdit(result);\n                }\n            };\n\n            if (this.isLongRunningCommand(params.command)) {\n                // Create a progress dialog for long-running commands.\n                const progress = await this._getProgressReporter(\n                    params.workDoneToken,\n                    reporter,\n                    Localizer.CodeAction.executingCommand()\n                );\n                const source = CancelAfter(token, progress.token);\n                this._pendingCommandCancellationSource = source;\n\n                try {\n                    await executeCommand(source.token);\n                } finally {\n                    progress.reporter.done();\n                    source.dispose();\n                }\n            } else {\n                executeCommand(token);\n            }\n        });\n    }\n\n    protected getWorkspaceCompletionsForPosition(\n        workspace: WorkspaceServiceInstance,\n        filePath: string,\n        position: Position,\n        workspacePath: string,\n        token: CancellationToken\n    ): Promise<CompletionResults | undefined> {\n        return workspace.serviceInstance.getCompletionsForPosition(\n            filePath,\n            position,\n            workspacePath,\n            this._completionDocFormat,\n            token\n        );\n    }\n\n    updateSettingsForAllWorkspaces(): void {\n        this._workspaceMap.forEach((workspace) => {\n            this.updateSettingsForWorkspace(workspace).ignoreErrors();\n        });\n    }\n\n    protected initialize(\n        params: InitializeParams,\n        supportedCommands: string[],\n        supportedCodeActions: string[]\n    ): InitializeResult {\n        this.rootPath = params.rootPath || '';\n\n        const capabilities = params.capabilities;\n        this._hasConfigurationCapability = !!capabilities.workspace?.configuration;\n        this._hasWatchFileCapability = !!capabilities.workspace?.didChangeWatchedFiles?.dynamicRegistration;\n        this._hasWorkspaceFoldersCapability = !!capabilities.workspace?.workspaceFolders;\n        this._hasVisualStudioExtensionsCapability = !!(capabilities as any).supportsVisualStudioExtensions;\n        this._hasActiveParameterCapability = !!capabilities.textDocument?.signatureHelp?.signatureInformation\n            ?.activeParameterSupport;\n        this._hasSignatureLabelOffsetCapability = !!capabilities.textDocument?.signatureHelp?.signatureInformation\n            ?.parameterInformation?.labelOffsetSupport;\n        this._hasHierarchicalDocumentSymbolCapability = !!capabilities.textDocument?.documentSymbol\n            ?.hierarchicalDocumentSymbolSupport;\n        this._hoverContentFormat = this._getCompatibleMarkupKind(capabilities.textDocument?.hover?.contentFormat);\n        this._completionDocFormat = this._getCompatibleMarkupKind(\n            capabilities.textDocument?.completion?.completionItem?.documentationFormat\n        );\n        const supportedDiagnosticTags = capabilities.textDocument?.publishDiagnostics?.tagSupport?.valueSet || [];\n        this._supportsUnnecessaryDiagnosticTag = supportedDiagnosticTags.some(\n            (tag) => tag === DiagnosticTag.Unnecessary\n        );\n\n        // Create a service instance for each of the workspace folders.\n        if (params.workspaceFolders) {\n            params.workspaceFolders.forEach((folder) => {\n                const path = convertUriToPath(folder.uri);\n                this._workspaceMap.set(path, this.createWorkspaceServiceInstance(folder, path));\n            });\n        } else if (params.rootPath) {\n            this._workspaceMap.set(params.rootPath, this.createWorkspaceServiceInstance(undefined, params.rootPath));\n        }\n\n        const result: InitializeResult = {\n            capabilities: {\n                textDocumentSync: TextDocumentSyncKind.Incremental,\n                definitionProvider: { workDoneProgress: true },\n                referencesProvider: { workDoneProgress: true },\n                documentSymbolProvider: { workDoneProgress: true },\n                workspaceSymbolProvider: { workDoneProgress: true },\n                hoverProvider: { workDoneProgress: true },\n                documentHighlightProvider: { workDoneProgress: true },\n                renameProvider: { workDoneProgress: true },\n                completionProvider: {\n                    triggerCharacters: ['.', '['],\n                    resolveProvider: true,\n                    workDoneProgress: true,\n                },\n                signatureHelpProvider: {\n                    triggerCharacters: ['(', ',', ')'],\n                    workDoneProgress: true,\n                },\n                codeActionProvider: {\n                    codeActionKinds: supportedCodeActions,\n                    workDoneProgress: true,\n                },\n                executeCommandProvider: {\n                    commands: supportedCommands,\n                    workDoneProgress: true,\n                },\n                callHierarchyProvider: true,\n            },\n        };\n\n        return result;\n    }\n\n    protected createWorkspaceServiceInstance(\n        workspace: WorkspaceFolder | undefined,\n        rootPath: string\n    ): WorkspaceServiceInstance {\n        return {\n            workspaceName: workspace?.name ?? '',\n            rootPath,\n            rootUri: workspace?.uri ?? '',\n            serviceInstance: this.createAnalyzerService(workspace?.name ?? rootPath),\n            disableLanguageServices: false,\n            disableOrganizeImports: false,\n            isInitialized: createDeferred<boolean>(),\n        };\n    }\n\n    protected onAnalysisCompletedHandler(results: AnalysisResults): void {\n        // Send the computed diagnostics to the client.\n        results.diagnostics.forEach((fileDiag) => {\n            this._connection.sendDiagnostics({\n                uri: convertPathToUri(fileDiag.filePath),\n                diagnostics: this._convertDiagnostics(fileDiag.diagnostics),\n            });\n        });\n\n        if (!this._progressReporter.isEnabled(results)) {\n            // Make sure to disable progress bar if it is currently active.\n            // This can happen if a user changes typeCheckingMode in the middle\n            // of analysis.\n            // end() is noop if there is no active progress bar.\n            this._progressReporter.end();\n            return;\n        }\n\n        // Update progress.\n        if (results.filesRequiringAnalysis > 0) {\n            this._progressReporter.begin();\n\n            const progressMessage =\n                results.filesRequiringAnalysis === 1\n                    ? Localizer.CodeAction.filesToAnalyzeOne()\n                    : Localizer.CodeAction.filesToAnalyzeCount().format({\n                          count: results.filesRequiringAnalysis,\n                      });\n            this._progressReporter.report(progressMessage);\n        } else {\n            this._progressReporter.end();\n        }\n    }\n\n    async updateSettingsForWorkspace(\n        workspace: WorkspaceServiceInstance,\n        serverSettings?: ServerSettings\n    ): Promise<void> {\n        serverSettings = serverSettings ?? (await this.getSettings(workspace));\n\n        // Set logging level first.\n        (this.console as ConsoleWithLogLevel).level = serverSettings.logLevel ?? LogLevel.Info;\n\n        this.updateOptionsAndRestartService(workspace, serverSettings);\n        workspace.disableLanguageServices = !!serverSettings.disableLanguageServices;\n        workspace.disableOrganizeImports = !!serverSettings.disableOrganizeImports;\n\n        // The workspace is now open for business.\n        workspace.isInitialized.resolve(true);\n    }\n\n    updateOptionsAndRestartService(\n        workspace: WorkspaceServiceInstance,\n        serverSettings: ServerSettings,\n        typeStubTargetImportName?: string\n    ) {\n        AnalyzerServiceExecutor.runWithOptions(this.rootPath, workspace, serverSettings, typeStubTargetImportName);\n    }\n\n    protected async onCompletion(\n        params: CompletionParams,\n        token: CancellationToken\n    ): Promise<CompletionList | undefined> {\n        // We set completion incomplete for the first invocation and next consecutive call,\n        // but after that we mark it as completed so the client doesn't repeatedly call back.\n        // We mark the first one as incomplete because completion could be invoked without\n        // any meaningful character provided, such as an explicit completion invocation (ctrl+space)\n        // or a period. That might cause us to not include some items (e.g., auto-imports).\n        // The next consecutive call provides some characters to help us to pick\n        // better completion items. After that, we are not going to introduce new items,\n        // so we can let the client to do the filtering and caching.\n        const completionIncomplete =\n            this._lastTriggerKind !== CompletionTriggerKind.TriggerForIncompleteCompletions ||\n            params.context?.triggerKind !== CompletionTriggerKind.TriggerForIncompleteCompletions;\n\n        this._lastTriggerKind = params.context?.triggerKind;\n\n        const filePath = convertUriToPath(params.textDocument.uri);\n        const position: Position = {\n            line: params.position.line,\n            character: params.position.character,\n        };\n\n        const workspace = await this.getWorkspaceForFile(filePath);\n        if (workspace.disableLanguageServices) {\n            return;\n        }\n\n        const completions = await this.getWorkspaceCompletionsForPosition(\n            workspace,\n            filePath,\n            position,\n            workspace.rootPath,\n            token\n        );\n\n        if (completions && completions.completionList) {\n            completions.completionList.isIncomplete = completionIncomplete;\n        }\n\n        return completions?.completionList;\n    }\n\n    protected convertLogLevel(logLevelValue?: string): LogLevel {\n        if (!logLevelValue) {\n            return LogLevel.Info;\n        }\n\n        switch (logLevelValue.toLowerCase()) {\n            case 'error':\n                return LogLevel.Error;\n\n            case 'warning':\n                return LogLevel.Warn;\n\n            case 'information':\n                return LogLevel.Info;\n\n            case 'trace':\n                return LogLevel.Log;\n\n            default:\n                return LogLevel.Info;\n        }\n    }\n\n    private _getCompatibleMarkupKind(clientSupportedFormats: MarkupKind[] | undefined) {\n        const serverSupportedFormats = [MarkupKind.PlainText, MarkupKind.Markdown];\n\n        for (const format of clientSupportedFormats ?? []) {\n            if (serverSupportedFormats.includes(format)) {\n                return format;\n            }\n        }\n\n        return MarkupKind.PlainText;\n    }\n\n    private async _getProgressReporter(\n        workDoneToken: string | number | undefined,\n        clientReporter: WorkDoneProgressReporter,\n        title: string\n    ) {\n        if (workDoneToken) {\n            return { reporter: clientReporter, token: CancellationToken.None };\n        }\n\n        const serverInitiatedReporter = await this._connection.window.createWorkDoneProgress();\n        serverInitiatedReporter.begin(title, undefined, undefined, true);\n\n        return {\n            reporter: serverInitiatedReporter,\n            token: serverInitiatedReporter.token,\n        };\n    }\n\n    private _GetConnectionOptions(): ConnectionOptions {\n        return { cancellationStrategy: getCancellationStrategyFromArgv(process.argv) };\n    }\n\n    private _convertDiagnostics(diags: AnalyzerDiagnostic[]): Diagnostic[] {\n        const convertedDiags: Diagnostic[] = [];\n\n        diags.forEach((diag) => {\n            const severity = convertCategoryToSeverity(diag.category);\n\n            let source = this._serverOptions.productName;\n            const rule = diag.getRule();\n            if (rule) {\n                source = `${source} (${rule})`;\n            }\n\n            const vsDiag = Diagnostic.create(diag.range, diag.message, severity, undefined, source);\n\n            if (diag.category === DiagnosticCategory.UnusedCode) {\n                vsDiag.tags = [DiagnosticTag.Unnecessary];\n                vsDiag.severity = DiagnosticSeverity.Hint;\n\n                // If the client doesn't support \"unnecessary\" tags, don't report unused code.\n                if (!this._supportsUnnecessaryDiagnosticTag) {\n                    return;\n                }\n            }\n\n            const relatedInfo = diag.getRelatedInfo();\n            if (relatedInfo.length > 0) {\n                vsDiag.relatedInformation = relatedInfo.map((info) => {\n                    return DiagnosticRelatedInformation.create(\n                        Location.create(convertPathToUri(info.filePath), info.range),\n                        info.message\n                    );\n                });\n            }\n\n            convertedDiags.push(vsDiag);\n        });\n\n        function convertCategoryToSeverity(category: DiagnosticCategory) {\n            switch (category) {\n                case DiagnosticCategory.Error:\n                    return DiagnosticSeverity.Error;\n                case DiagnosticCategory.Warning:\n                    return DiagnosticSeverity.Warning;\n                case DiagnosticCategory.Information:\n                    return DiagnosticSeverity.Information;\n                case DiagnosticCategory.UnusedCode:\n                    return DiagnosticSeverity.Hint;\n            }\n        }\n\n        return convertedDiags;\n    }\n\n    protected recordUserInteractionTime() {\n        // Tell all of the services that the user is actively\n        // interacting with one or more editors, so they should\n        // back off from performing any work.\n        this._workspaceMap.forEach((workspace: { serviceInstance: { recordUserInteractionTime: () => void } }) => {\n            workspace.serviceInstance.recordUserInteractionTime();\n        });\n    }\n}\n","/*\n * analyzerServiceExecutor.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Runs the analyzer service of a given workspace service instance\n * with a specified set of options.\n */\nimport { isPythonBinary } from '../analyzer/pythonPathUtils';\nimport { CommandLineOptions } from '../common/commandLineOptions';\nimport { combinePaths, normalizePath } from '../common/pathUtils';\nimport { ServerSettings, WorkspaceServiceInstance } from '../languageServerBase';\n\nexport class AnalyzerServiceExecutor {\n    static runWithOptions(\n        languageServiceRootPath: string,\n        workspace: WorkspaceServiceInstance,\n        serverSettings: ServerSettings,\n        typeStubTargetImportName?: string,\n        trackFiles = true\n    ): void {\n        const commandLineOptions = getEffectiveCommandLineOptions(\n            languageServiceRootPath,\n            workspace.rootPath,\n            serverSettings,\n            trackFiles,\n            typeStubTargetImportName\n        );\n\n        // Setting options causes the analyzer service to re-analyze everything.\n        workspace.serviceInstance.setOptions(commandLineOptions, trackFiles);\n    }\n}\n\nfunction getEffectiveCommandLineOptions(\n    languageServiceRootPath: string,\n    workspaceRootPath: string,\n    serverSettings: ServerSettings,\n    trackFiles: boolean,\n    typeStubTargetImportName?: string\n) {\n    const commandLineOptions = new CommandLineOptions(workspaceRootPath, true);\n    commandLineOptions.checkOnlyOpenFiles = serverSettings.openFilesOnly;\n    commandLineOptions.useLibraryCodeForTypes = serverSettings.useLibraryCodeForTypes;\n    commandLineOptions.typeCheckingMode = serverSettings.typeCheckingMode;\n    commandLineOptions.autoImportCompletions = serverSettings.autoImportCompletions;\n    commandLineOptions.indexing = serverSettings.indexing;\n\n    if (!trackFiles) {\n        commandLineOptions.watchForSourceChanges = false;\n        commandLineOptions.watchForLibraryChanges = false;\n    } else {\n        commandLineOptions.watchForSourceChanges = serverSettings.watchForSourceChanges;\n        commandLineOptions.watchForLibraryChanges = serverSettings.watchForLibraryChanges;\n    }\n\n    if (serverSettings.venvPath) {\n        commandLineOptions.venvPath = combinePaths(\n            workspaceRootPath || languageServiceRootPath,\n            normalizePath(_expandPathVariables(languageServiceRootPath, serverSettings.venvPath))\n        );\n    }\n\n    if (serverSettings.pythonPath) {\n        // The Python VS Code extension treats the value \"python\" specially. This means\n        // the local python interpreter should be used rather than interpreting the\n        // setting value as a path to the interpreter. We'll simply ignore it in this case.\n        if (!isPythonBinary(serverSettings.pythonPath)) {\n            commandLineOptions.pythonPath = combinePaths(\n                workspaceRootPath || languageServiceRootPath,\n                normalizePath(_expandPathVariables(languageServiceRootPath, serverSettings.pythonPath))\n            );\n        }\n    }\n\n    if (serverSettings.typeshedPath) {\n        // Pyright supports only one typeshed path currently, whereas the\n        // official VS Code Python extension supports multiple typeshed paths.\n        // We'll use the first one specified and ignore the rest.\n        commandLineOptions.typeshedPath = normalizePath(\n            _expandPathVariables(languageServiceRootPath, serverSettings.typeshedPath)\n        );\n    }\n\n    if (serverSettings.stubPath) {\n        commandLineOptions.stubPath = normalizePath(\n            _expandPathVariables(languageServiceRootPath, serverSettings.stubPath)\n        );\n    }\n\n    if (typeStubTargetImportName) {\n        commandLineOptions.typeStubTargetImportName = typeStubTargetImportName;\n    }\n\n    commandLineOptions.autoSearchPaths = serverSettings.autoSearchPaths;\n    commandLineOptions.extraPaths = serverSettings.extraPaths;\n    commandLineOptions.diagnosticSeverityOverrides = serverSettings.diagnosticSeverityOverrides;\n\n    return commandLineOptions;\n}\n\n// Expands certain predefined variables supported within VS Code settings.\n// Ideally, VS Code would provide an API for doing this expansion, but\n// it doesn't. We'll handle the most common variables here as a convenience.\nfunction _expandPathVariables(rootPath: string, value: string): string {\n    const regexp = /\\$\\{(.*?)\\}/g;\n    return value.replace(regexp, (match: string, name: string) => {\n        const trimmedName = name.trim();\n        if (trimmedName === 'workspaceFolder') {\n            return rootPath;\n        }\n        return match;\n    });\n}\n","/*\n * autoImporter.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n */\n\nimport { CancellationToken, CompletionItemKind, SymbolKind } from 'vscode-languageserver';\n\nimport { DeclarationType } from '../analyzer/declaration';\nimport { ImportResolver, ModuleNameAndType } from '../analyzer/importResolver';\nimport { ImportType } from '../analyzer/importResult';\nimport {\n    getImportGroup,\n    getTextEditsForAutoImportInsertion,\n    getTextEditsForAutoImportSymbolAddition,\n    getTopLevelImports,\n    ImportGroup,\n    ImportStatements,\n} from '../analyzer/importStatementUtils';\nimport { SourceFileInfo } from '../analyzer/program';\nimport { Symbol } from '../analyzer/symbol';\nimport * as SymbolNameUtils from '../analyzer/symbolNameUtils';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { ExecutionEnvironment } from '../common/configOptions';\nimport { TextEditAction } from '../common/editAction';\nimport { combinePaths, getDirectoryPath, getFileName, stripFileExtension } from '../common/pathUtils';\nimport * as StringUtils from '../common/stringUtils';\nimport { Position } from '../common/textRange';\nimport { ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\nimport { IndexAliasData, IndexResults } from './documentSymbolProvider';\n\nexport interface AutoImportSymbol {\n    readonly importAlias?: IndexAliasData;\n    readonly symbol?: Symbol;\n    readonly kind?: CompletionItemKind;\n}\n\nexport interface ModuleSymbolTable {\n    forEach(callbackfn: (symbol: AutoImportSymbol, name: string) => void): void;\n}\n\nexport type ModuleSymbolMap = Map<string, ModuleSymbolTable>;\n\n// Build a map of all modules within this program and the module-\n// level scope that contains the symbol table for the module.\nexport function buildModuleSymbolsMap(files: SourceFileInfo[], token: CancellationToken): ModuleSymbolMap {\n    const moduleSymbolMap = new Map<string, ModuleSymbolTable>();\n\n    files.forEach((file) => {\n        throwIfCancellationRequested(token);\n\n        if (file.shadows.length > 0) {\n            // There is corresponding stub file. Don't add\n            // duplicated files in the map.\n            return;\n        }\n\n        const filePath = file.sourceFile.getFilePath();\n        const symbolTable = file.sourceFile.getModuleSymbolTable();\n        if (symbolTable) {\n            const fileName = stripFileExtension(getFileName(filePath));\n\n            // Don't offer imports from files that are named with private\n            // naming semantics like \"_ast.py\".\n            if (SymbolNameUtils.isPrivateOrProtectedName(fileName)) {\n                return;\n            }\n\n            moduleSymbolMap.set(filePath, {\n                forEach(callbackfn: (value: AutoImportSymbol, key: string) => void): void {\n                    symbolTable.forEach((symbol, name) => {\n                        if (symbol.isExternallyHidden()) {\n                            return;\n                        }\n\n                        const declarations = symbol.getDeclarations();\n                        if (!declarations || declarations.length === 0) {\n                            return;\n                        }\n\n                        const declaration = declarations[0];\n                        if (!declaration) {\n                            return;\n                        }\n\n                        if (declaration.type === DeclarationType.Alias) {\n                            // We don't include import alias in auto import\n                            // for workspace files.\n                            return;\n                        }\n\n                        const variableKind =\n                            declaration.type === DeclarationType.Variable &&\n                            !declaration.isConstant &&\n                            !declaration.isFinal\n                                ? CompletionItemKind.Variable\n                                : undefined;\n                        callbackfn({ symbol, kind: variableKind }, name);\n                    });\n                },\n            });\n            return;\n        }\n\n        const indexResults = file.sourceFile.getCachedIndexResults();\n        if (indexResults && !indexResults.privateOrProtected) {\n            moduleSymbolMap.set(filePath, createModuleSymbolTableFromIndexResult(indexResults));\n            return;\n        }\n    });\n\n    return moduleSymbolMap;\n}\n\nexport interface AutoImportResult {\n    name: string;\n    symbol?: Symbol;\n    source?: string;\n    edits: TextEditAction[];\n    alias?: string;\n    kind?: CompletionItemKind;\n}\n\ninterface ImportParts {\n    importName: string;\n    symbolName?: string;\n    importFrom?: string;\n    filePath: string;\n    dotCount: number;\n    moduleNameAndType: ModuleNameAndType;\n}\n\ninterface ImportAliasData {\n    importParts: ImportParts;\n    importGroup: ImportGroup;\n    symbol?: Symbol;\n    kind?: CompletionItemKind;\n}\n\nexport class AutoImporter {\n    private _importStatements: ImportStatements;\n\n    constructor(\n        private _execEnvironment: ExecutionEnvironment,\n        private _importResolver: ImportResolver,\n        private _parseResults: ParseResults,\n        private _invocationPosition: Position,\n        private _excludes: string[],\n        private _moduleSymbolMap: ModuleSymbolMap,\n        private _libraryMap?: Map<string, IndexResults>\n    ) {\n        this._importStatements = getTopLevelImports(this._parseResults.parseTree);\n    }\n\n    getAutoImportCandidates(\n        word: string,\n        similarityLimit: number,\n        aliasName: string | undefined,\n        token: CancellationToken\n    ) {\n        const results: AutoImportResult[] = [];\n        const importAliasMap = new Map<string, Map<string, ImportAliasData>>();\n\n        this._addImportsFromModuleMap(word, similarityLimit, aliasName, importAliasMap, results, token);\n        this._addImportsFromLibraryMap(word, similarityLimit, aliasName, importAliasMap, results, token);\n        this._addImportsFromImportAliasMap(importAliasMap, aliasName, results, token);\n        return results;\n    }\n\n    private _addImportsFromLibraryMap(\n        word: string,\n        similarityLimit: number,\n        aliasName: string | undefined,\n        aliasMap: Map<string, Map<string, ImportAliasData>>,\n        results: AutoImportResult[],\n        token: CancellationToken\n    ) {\n        this._libraryMap?.forEach((indexResults, filePath) => {\n            if (indexResults.privateOrProtected) {\n                return;\n            }\n\n            if (this._moduleSymbolMap.has(filePath)) {\n                // Module map is already taking care of this file. this can happen if the module is used by\n                // user code.\n                return;\n            }\n\n            // See if this file should be offered as an implicit import.\n            const isStubFileOrHasInit = this._isStubFileOrHasInit(this._libraryMap!, filePath);\n            this._processModuleSymbolTable(\n                createModuleSymbolTableFromIndexResult(indexResults),\n                filePath,\n                word,\n                similarityLimit,\n                isStubFileOrHasInit,\n                aliasName,\n                aliasMap,\n                results,\n                token\n            );\n        });\n    }\n\n    private _addImportsFromModuleMap(\n        word: string,\n        similarityLimit: number,\n        aliasName: string | undefined,\n        aliasMap: Map<string, Map<string, ImportAliasData>>,\n        results: AutoImportResult[],\n        token: CancellationToken\n    ) {\n        this._moduleSymbolMap.forEach((topLevelSymbols, filePath) => {\n            // See if this file should be offered as an implicit import.\n            const isStubFileOrHasInit = this._isStubFileOrHasInit(this._moduleSymbolMap!, filePath);\n            this._processModuleSymbolTable(\n                topLevelSymbols,\n                filePath,\n                word,\n                similarityLimit,\n                isStubFileOrHasInit,\n                aliasName,\n                aliasMap,\n                results,\n                token\n            );\n        });\n    }\n\n    private _isStubFileOrHasInit<T>(map: Map<string, T>, filePath: string) {\n        const fileDir = getDirectoryPath(filePath);\n        const initPathPy = combinePaths(fileDir, '__init__.py');\n        const initPathPyi = initPathPy + 'i';\n        const isStub = filePath.endsWith('.pyi');\n        const hasInit = map.has(initPathPy) || map.has(initPathPyi);\n        return { isStub, hasInit };\n    }\n\n    private _processModuleSymbolTable(\n        topLevelSymbols: ModuleSymbolTable,\n        filePath: string,\n        word: string,\n        similarityLimit: number,\n        isStubOrHasInit: { isStub: boolean; hasInit: boolean },\n        aliasName: string | undefined,\n        importAliasMap: Map<string, Map<string, ImportAliasData>>,\n        results: AutoImportResult[],\n        token: CancellationToken\n    ) {\n        throwIfCancellationRequested(token);\n\n        const [importSource, importGroup, moduleNameAndType] = this._getImportPartsForSymbols(filePath);\n        if (!importSource) {\n            return;\n        }\n\n        const dotCount = StringUtils.getCharacterCount(importSource, '.');\n        topLevelSymbols.forEach((autoImportSymbol, name) => {\n            throwIfCancellationRequested(token);\n\n            if (\n                !isStubOrHasInit.isStub &&\n                autoImportSymbol.kind === CompletionItemKind.Variable &&\n                /[a-z]/.test(name)\n            ) {\n                // If it is not a stub file and symbol is Variable, we only include it if\n                // name is all upper case.\n                return;\n            }\n\n            // For very short matching strings, we will require an exact match. Otherwise\n            // we will tend to return a list that's too long. Once we get beyond two\n            // characters, we can do a fuzzy match.\n            const isSimilar = this._isSimilar(word, name, similarityLimit);\n            if (!isSimilar) {\n                return;\n            }\n\n            const alreadyIncluded = this._containsName(name, undefined, results);\n            if (alreadyIncluded) {\n                return;\n            }\n\n            // We will collect all aliases and then process it later\n            if (autoImportSymbol.importAlias) {\n                this._addToImportAliasMap(\n                    autoImportSymbol.importAlias,\n                    {\n                        importParts: {\n                            symbolName: name,\n                            importName: name,\n                            importFrom: importSource,\n                            filePath,\n                            dotCount,\n                            moduleNameAndType,\n                        },\n                        importGroup,\n                        symbol: autoImportSymbol.symbol,\n                        kind: convertSymbolKindToCompletionItemKind(autoImportSymbol.importAlias.kind),\n                    },\n                    importAliasMap\n                );\n                return;\n            }\n\n            const autoImportTextEdits = this._getTextEditsForAutoImportByFilePath(\n                name,\n                filePath,\n                importSource,\n                importGroup,\n                aliasName\n            );\n\n            results.push({\n                name,\n                symbol: autoImportSymbol.symbol,\n                source: importSource,\n                edits: autoImportTextEdits,\n                alias: aliasName,\n                kind: autoImportSymbol.kind,\n            });\n        });\n\n        // If the current file is in a directory that also contains an \"__init__.py[i]\"\n        // file, we can use that directory name as an implicit import target.\n        // Or if the file is a stub file, we can use it as import target.\n        if (!isStubOrHasInit.isStub && !isStubOrHasInit.hasInit) {\n            return;\n        }\n\n        const importParts = this._getImportParts(filePath);\n        if (!importParts) {\n            return;\n        }\n\n        const isSimilar = this._isSimilar(word, importParts.importName, similarityLimit);\n        if (!isSimilar) {\n            return;\n        }\n\n        const alreadyIncluded = this._containsName(importParts.importName, importParts.importFrom, results);\n        if (alreadyIncluded) {\n            return;\n        }\n\n        this._addToImportAliasMap(\n            { modulePath: filePath, originalName: importParts.importName, kind: SymbolKind.Module },\n            { importParts, importGroup },\n            importAliasMap\n        );\n    }\n\n    private _addImportsFromImportAliasMap(\n        importAliasMap: Map<string, Map<string, ImportAliasData>>,\n        aliasName: string | undefined,\n        results: AutoImportResult[],\n        token: CancellationToken\n    ) {\n        throwIfCancellationRequested(token);\n\n        importAliasMap.forEach((mapPerSymbolName, filePath) => {\n            mapPerSymbolName.forEach((importAliasData, symbolName) => {\n                throwIfCancellationRequested(token);\n\n                const autoImportTextEdits = this._getTextEditsForAutoImportByFilePath(\n                    importAliasData.importParts.symbolName,\n                    importAliasData.importParts.filePath,\n                    importAliasData.importParts.importFrom ?? importAliasData.importParts.importName,\n                    importAliasData.importGroup,\n                    aliasName\n                );\n\n                results.push({\n                    name: importAliasData.importParts.importName,\n                    alias: aliasName,\n                    symbol: importAliasData.symbol,\n                    kind: importAliasData.kind,\n                    source: importAliasData.importParts.importFrom,\n                    edits: autoImportTextEdits,\n                });\n            });\n        });\n    }\n\n    private _addToImportAliasMap(\n        alias: IndexAliasData,\n        data: ImportAliasData,\n        importAliasMap: Map<string, Map<string, ImportAliasData>>\n    ) {\n        // Since we don't resolve alias declaration using type evaluator, there is still a chance\n        // where we show multiple aliases for same symbols. but this should still reduce number of\n        // such cases.\n        if (!importAliasMap.has(alias.modulePath)) {\n            const map = new Map<string, ImportAliasData>();\n            map.set(alias.originalName, data);\n            importAliasMap.set(alias.modulePath, map);\n            return;\n        }\n\n        const map = importAliasMap.get(alias.modulePath)!;\n        if (!map.has(alias.originalName)) {\n            map.set(alias.originalName, data);\n            return;\n        }\n\n        const existingData = map.get(alias.originalName)!;\n        const comparison = this._compareImportAliasData(existingData, data);\n        if (comparison <= 0) {\n            // Existing data is better than new one.\n            return;\n        }\n\n        // Keep the new data.\n        map.set(alias.originalName, data);\n    }\n\n    private _compareImportAliasData(left: ImportAliasData, right: ImportAliasData) {\n        const groupComparison = left.importGroup - right.importGroup;\n        if (groupComparison !== 0) {\n            return groupComparison;\n        }\n\n        const dotComparison = left.importParts.dotCount - right.importParts.dotCount;\n        if (dotComparison !== 0) {\n            return dotComparison;\n        }\n\n        if (left.symbol && !right.symbol) {\n            return -1;\n        }\n\n        if (!left.symbol && right.symbol) {\n            return 1;\n        }\n\n        return StringUtils.getStringComparer()(left.importParts.importName, right.importParts.importName);\n    }\n\n    private _getImportPartsForSymbols(filePath: string): [string | undefined, ImportGroup, ModuleNameAndType] {\n        const localImport = this._importStatements.mapByFilePath.get(filePath);\n        if (localImport) {\n            return [\n                localImport.moduleName,\n                getImportGroup(localImport),\n                {\n                    importType: ImportType.Local,\n                    isLocalTypingsFile: false,\n                    moduleName: localImport.moduleName,\n                },\n            ];\n        } else {\n            const moduleNameAndType = this._getModuleNameAndTypeFromFilePath(filePath);\n            return [\n                moduleNameAndType.moduleName,\n                this._getImportGroupFromModuleNameAndType(moduleNameAndType),\n                moduleNameAndType,\n            ];\n        }\n    }\n\n    private _getImportParts(filePath: string) {\n        const name = stripFileExtension(getFileName(filePath));\n\n        // See if we can import module as \"import xxx\"\n        if (name === '__init__') {\n            return createImportParts(this._getModuleNameAndTypeFromFilePath(getDirectoryPath(filePath)));\n        }\n\n        return createImportParts(this._getModuleNameAndTypeFromFilePath(filePath));\n\n        function createImportParts(module: ModuleNameAndType): ImportParts | undefined {\n            const moduleName = module.moduleName;\n            if (!moduleName) {\n                return undefined;\n            }\n\n            const index = moduleName.lastIndexOf('.');\n            const importNamePart = index > 0 ? moduleName.substring(index + 1) : undefined;\n            const importFrom = index > 0 ? moduleName.substring(0, index) : undefined;\n            return {\n                symbolName: importNamePart,\n                importName: importNamePart ?? moduleName,\n                importFrom,\n                filePath,\n                dotCount: StringUtils.getCharacterCount(moduleName, '.'),\n                moduleNameAndType: module,\n            };\n        }\n    }\n\n    private _isSimilar(word: string, name: string, similarityLimit: number) {\n        if (similarityLimit === 1) {\n            return word === name;\n        }\n\n        return word.length > 2\n            ? StringUtils.computeCompletionSimilarity(word, name) > similarityLimit\n            : word.length > 0 && name.startsWith(word);\n    }\n\n    private _containsName(name: string, source: string | undefined, results: AutoImportResult[]) {\n        if (this._excludes.find((e) => e === name)) {\n            return true;\n        }\n\n        if (results.find((r) => r.name === name && r.source === source)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    // Given the file path of a module that we want to import,\n    // convert to a module name that can be used in an\n    // 'import from' statement.\n    private _getModuleNameAndTypeFromFilePath(filePath: string): ModuleNameAndType {\n        return this._importResolver.getModuleNameForImport(filePath, this._execEnvironment);\n    }\n\n    private _getImportGroupFromModuleNameAndType(moduleNameAndType: ModuleNameAndType): ImportGroup {\n        let importGroup = ImportGroup.Local;\n        if (moduleNameAndType.isLocalTypingsFile || moduleNameAndType.importType === ImportType.ThirdParty) {\n            importGroup = ImportGroup.ThirdParty;\n        } else if (moduleNameAndType.importType === ImportType.BuiltIn) {\n            importGroup = ImportGroup.BuiltIn;\n        }\n\n        return importGroup;\n    }\n\n    private _getTextEditsForAutoImportByFilePath(\n        symbolName: string | undefined,\n        filePath: string,\n        moduleName: string,\n        importGroup: ImportGroup,\n        aliasName: string | undefined\n    ): TextEditAction[] {\n        if (symbolName) {\n            // Does an 'import from' statement already exist? If so, we'll reuse it.\n            const importStatement = this._importStatements.mapByFilePath.get(filePath);\n            if (importStatement && importStatement.node.nodeType === ParseNodeType.ImportFrom) {\n                return getTextEditsForAutoImportSymbolAddition(\n                    symbolName,\n                    importStatement,\n                    this._parseResults,\n                    aliasName\n                );\n            }\n        }\n\n        return getTextEditsForAutoImportInsertion(\n            symbolName,\n            this._importStatements,\n            moduleName,\n            importGroup,\n            this._parseResults,\n            this._invocationPosition,\n            aliasName\n        );\n    }\n}\n\nfunction createModuleSymbolTableFromIndexResult(indexResults: IndexResults): ModuleSymbolTable {\n    return {\n        forEach(callbackfn: (value: AutoImportSymbol, key: string) => void): void {\n            indexResults.symbols.forEach((data) => {\n                if (!data.externallyVisible) {\n                    return;\n                }\n\n                callbackfn(\n                    {\n                        importAlias: data.alias,\n                        kind: convertSymbolKindToCompletionItemKind(data.kind),\n                    },\n                    data.name\n                );\n            });\n        },\n    };\n}\n\nfunction convertSymbolKindToCompletionItemKind(kind: SymbolKind) {\n    switch (kind) {\n        case SymbolKind.File:\n            return CompletionItemKind.File;\n\n        case SymbolKind.Module:\n        case SymbolKind.Namespace:\n            return CompletionItemKind.Module;\n\n        case SymbolKind.Package:\n            return CompletionItemKind.Folder;\n\n        case SymbolKind.Class:\n            return CompletionItemKind.Class;\n\n        case SymbolKind.Method:\n            return CompletionItemKind.Method;\n\n        case SymbolKind.Property:\n            return CompletionItemKind.Property;\n\n        case SymbolKind.Field:\n            return CompletionItemKind.Field;\n\n        case SymbolKind.Constructor:\n            return CompletionItemKind.Constructor;\n\n        case SymbolKind.Enum:\n            return CompletionItemKind.Enum;\n\n        case SymbolKind.Interface:\n            return CompletionItemKind.Interface;\n\n        case SymbolKind.Function:\n            return CompletionItemKind.Function;\n\n        case SymbolKind.Variable:\n        case SymbolKind.Array:\n            return CompletionItemKind.Variable;\n\n        case SymbolKind.String:\n            return CompletionItemKind.Text;\n\n        case SymbolKind.Number:\n        case SymbolKind.Boolean:\n            return CompletionItemKind.Value;\n\n        case SymbolKind.Constant:\n        case SymbolKind.Null:\n            return CompletionItemKind.Constant;\n\n        case SymbolKind.Object:\n        case SymbolKind.Key:\n            return CompletionItemKind.Value;\n\n        case SymbolKind.EnumMember:\n            return CompletionItemKind.EnumMember;\n\n        case SymbolKind.Struct:\n            return CompletionItemKind.Struct;\n\n        case SymbolKind.Event:\n            return CompletionItemKind.Event;\n\n        case SymbolKind.Operator:\n            return CompletionItemKind.Operator;\n\n        case SymbolKind.TypeParameter:\n            return CompletionItemKind.TypeParameter;\n\n        default:\n            return undefined;\n    }\n}\n","/*\n * callHierarchyProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that provides a list of callers or callees associated with\n * a position.\n */\n\nimport { CancellationToken, SymbolKind } from 'vscode-languageserver';\nimport {\n    CallHierarchyIncomingCall,\n    CallHierarchyItem,\n    CallHierarchyOutgoingCall,\n    Range,\n} from 'vscode-languageserver-types';\n\nimport { Declaration, DeclarationType } from '../analyzer/declaration';\nimport * as DeclarationUtils from '../analyzer/declarationUtils';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { ParseTreeWalker } from '../analyzer/parseTreeWalker';\nimport { TypeEvaluator } from '../analyzer/typeEvaluator';\nimport { ClassType, isClass, isObject, isTypeVar, TypeCategory } from '../analyzer/types';\nimport { specializeType } from '../analyzer/typeUtils';\nimport {\n    ClassMemberLookupFlags,\n    doForSubtypes,\n    isProperty,\n    lookUpClassMember,\n    lookUpObjectMember,\n} from '../analyzer/typeUtils';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { getFileName } from '../common/pathUtils';\nimport { convertOffsetsToRange } from '../common/positionUtils';\nimport { rangesAreEqual } from '../common/textRange';\nimport { CallNode, MemberAccessNode, NameNode, ParseNode, ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\n\nexport class CallHierarchyProvider {\n    static getCallForDeclaration(\n        symbolName: string,\n        declaration: Declaration,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): CallHierarchyItem | undefined {\n        throwIfCancellationRequested(token);\n\n        if (declaration.type === DeclarationType.Function || declaration.type === DeclarationType.Class) {\n            const callItem: CallHierarchyItem = {\n                name: symbolName,\n                kind: getSymbolKind(declaration, evaluator),\n                uri: declaration.path,\n                range: declaration.range,\n                selectionRange: declaration.range,\n            };\n            return callItem;\n        }\n\n        return undefined;\n    }\n\n    static getIncomingCallsForDeclaration(\n        filePath: string,\n        symbolName: string,\n        declaration: Declaration,\n        parseResults: ParseResults,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): CallHierarchyIncomingCall[] | undefined {\n        throwIfCancellationRequested(token);\n\n        const callFinder = new FindIncomingCallTreeWalker(\n            filePath,\n            symbolName,\n            declaration,\n            parseResults,\n            evaluator,\n            token\n        );\n\n        const incomingCalls = callFinder.findCalls();\n\n        return incomingCalls.length > 0 ? incomingCalls : undefined;\n    }\n\n    static getOutgoingCallsForDeclaration(\n        declaration: Declaration,\n        parseResults: ParseResults,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): CallHierarchyOutgoingCall[] | undefined {\n        throwIfCancellationRequested(token);\n\n        // Find the parse node root corresponding to the function or class.\n        let parseRoot: ParseNode | undefined;\n        if (declaration.type === DeclarationType.Function) {\n            parseRoot = declaration.node;\n        } else if (declaration.type === DeclarationType.Class) {\n            // Look up the __init__ method for this class.\n            const classType = evaluator.getTypeForDeclaration(declaration);\n            if (classType && isClass(classType)) {\n                // Don't perform a recursive search of parent classes in this\n                // case because we don't want to find an inherited __init__\n                // method defined in a different module.\n                const initMethodMember = lookUpClassMember(\n                    classType,\n                    '__init__',\n                    ClassMemberLookupFlags.SkipInstanceVariables |\n                        ClassMemberLookupFlags.SkipObjectBaseClass |\n                        ClassMemberLookupFlags.SkipBaseClasses\n                );\n                if (initMethodMember) {\n                    const initMethodType = evaluator.getTypeOfMember(initMethodMember);\n                    if (initMethodType && initMethodType.category === TypeCategory.Function) {\n                        const initDecls = initMethodMember.symbol.getDeclarations();\n                        if (initDecls && initDecls.length > 0) {\n                            const primaryInitDecl = initDecls[0];\n                            if (primaryInitDecl.type === DeclarationType.Function) {\n                                parseRoot = primaryInitDecl.node;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (!parseRoot) {\n            return undefined;\n        }\n\n        const callFinder = new FindOutgoingCallTreeWalker(parseRoot, parseResults, evaluator, token);\n\n        const outgoingCalls = callFinder.findCalls();\n\n        return outgoingCalls.length > 0 ? outgoingCalls : undefined;\n    }\n\n    static getTargetDeclaration(declarations: Declaration[], node: ParseNode): Declaration {\n        // If there's more than one declaration, pick the target one.\n        // We'll always prefer one with a declared type, and we'll always\n        // prefer later declarations.\n        let targetDecl = declarations[0];\n        for (const decl of declarations) {\n            if (DeclarationUtils.hasTypeForDeclaration(decl) || !DeclarationUtils.hasTypeForDeclaration(targetDecl)) {\n                if (decl.type === DeclarationType.Function || decl.type === DeclarationType.Class) {\n                    targetDecl = decl;\n\n                    // If the specified node is an exact match, use this declaration\n                    // as the primary even if it's not the last.\n                    if (decl.node === node) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return targetDecl;\n    }\n}\n\nclass FindOutgoingCallTreeWalker extends ParseTreeWalker {\n    private _outgoingCalls: CallHierarchyOutgoingCall[] = [];\n\n    constructor(\n        private _parseRoot: ParseNode,\n        private _parseResults: ParseResults,\n        private _evaluator: TypeEvaluator,\n        private _cancellationToken: CancellationToken\n    ) {\n        super();\n    }\n\n    findCalls(): CallHierarchyOutgoingCall[] {\n        this.walk(this._parseRoot);\n        return this._outgoingCalls;\n    }\n\n    visitCall(node: CallNode): boolean {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        let nameNode: NameNode | undefined;\n\n        if (node.leftExpression.nodeType === ParseNodeType.Name) {\n            nameNode = node.leftExpression;\n        } else if (node.leftExpression.nodeType === ParseNodeType.MemberAccess) {\n            nameNode = node.leftExpression.memberName;\n        }\n\n        if (nameNode) {\n            const declarations = this._evaluator.getDeclarationsForNameNode(nameNode);\n\n            if (declarations) {\n                // TODO - it would be better if we could match the call to the\n                // specific declaration (e.g. a specific overload of a property\n                // setter vs getter). For now, add callees for all declarations.\n                declarations.forEach((decl) => {\n                    this._addOutgoingCallForDeclaration(nameNode!, decl);\n                });\n            }\n        }\n\n        return true;\n    }\n\n    visitMemberAccess(node: MemberAccessNode): boolean {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        // Determine whether the member corresponds to a property.\n        // If so, we'll treat it as a function call for purposes of\n        // finding outgoing calls.\n        const leftHandType = this._evaluator.getType(node.leftExpression);\n        if (leftHandType) {\n            doForSubtypes(leftHandType, (subtype) => {\n                let baseType = subtype;\n\n                // This could be a bound TypeVar (e.g. used for \"self\" and \"cls\").\n                if (isTypeVar(baseType)) {\n                    baseType = specializeType(baseType, /* typeVarMap */ undefined, /* makeConcrete */ true);\n                }\n\n                if (!isObject(baseType)) {\n                    return undefined;\n                }\n\n                const memberInfo = lookUpObjectMember(baseType, node.memberName.value);\n                if (!memberInfo) {\n                    return undefined;\n                }\n\n                const memberType = this._evaluator.getTypeOfMember(memberInfo);\n                const propertyDecls = memberInfo.symbol.getDeclarations();\n\n                if (!memberType) {\n                    return undefined;\n                }\n\n                if (isObject(memberType) && ClassType.isPropertyClass(memberType.classType)) {\n                    propertyDecls.forEach((decl) => {\n                        this._addOutgoingCallForDeclaration(node.memberName, decl);\n                    });\n                }\n\n                return undefined;\n            });\n        }\n\n        return true;\n    }\n\n    private _addOutgoingCallForDeclaration(nameNode: NameNode, declaration: Declaration) {\n        const resolvedDecl = this._evaluator.resolveAliasDeclaration(declaration, /* resolveLocalNames */ true);\n        if (!resolvedDecl) {\n            return;\n        }\n\n        if (resolvedDecl.type !== DeclarationType.Function && resolvedDecl.type !== DeclarationType.Class) {\n            return;\n        }\n\n        const callDest: CallHierarchyItem = {\n            name: nameNode.value,\n            kind: getSymbolKind(resolvedDecl, this._evaluator),\n            uri: resolvedDecl.path,\n            range: resolvedDecl.range,\n            selectionRange: resolvedDecl.range,\n        };\n\n        // Is there already a call recorded for this destination? If so,\n        // we'll simply add a new range. Otherwise, we'll create a new entry.\n        let outgoingCall: CallHierarchyOutgoingCall | undefined = this._outgoingCalls.find(\n            (outgoing) => outgoing.to.uri === callDest.uri && rangesAreEqual(outgoing.to.range, callDest.range)\n        );\n\n        if (!outgoingCall) {\n            outgoingCall = {\n                to: callDest,\n                fromRanges: [],\n            };\n            this._outgoingCalls.push(outgoingCall);\n        }\n\n        const fromRange: Range = convertOffsetsToRange(\n            nameNode.start,\n            nameNode.start + nameNode.length,\n            this._parseResults.tokenizerOutput.lines\n        );\n        outgoingCall.fromRanges.push(fromRange);\n    }\n}\n\nclass FindIncomingCallTreeWalker extends ParseTreeWalker {\n    private _incomingCalls: CallHierarchyIncomingCall[] = [];\n\n    constructor(\n        private _filePath: string,\n        private _symbolName: string,\n        private _declaration: Declaration,\n        private _parseResults: ParseResults,\n        private _evaluator: TypeEvaluator,\n        private _cancellationToken: CancellationToken\n    ) {\n        super();\n    }\n\n    findCalls(): CallHierarchyIncomingCall[] {\n        this.walk(this._parseResults.parseTree);\n        return this._incomingCalls;\n    }\n\n    visitCall(node: CallNode): boolean {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        let nameNode: NameNode | undefined;\n\n        if (node.leftExpression.nodeType === ParseNodeType.Name) {\n            nameNode = node.leftExpression;\n        } else if (node.leftExpression.nodeType === ParseNodeType.MemberAccess) {\n            nameNode = node.leftExpression.memberName;\n        }\n\n        // Don't bother doing any more work if the name doesn't match.\n        if (nameNode && nameNode.value === this._symbolName) {\n            const declarations = this._evaluator.getDeclarationsForNameNode(nameNode);\n\n            if (declarations) {\n                const resolvedDecls = declarations\n                    .map((decl) => {\n                        return this._evaluator.resolveAliasDeclaration(decl, /* resolveLocalNames */ true);\n                    })\n                    .filter((decl) => decl !== undefined);\n                if (resolvedDecls.some((decl) => DeclarationUtils.areDeclarationsSame(decl!, this._declaration))) {\n                    this._addIncomingCallForDeclaration(nameNode!);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    visitMemberAccess(node: MemberAccessNode): boolean {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        if (node.memberName.value === this._symbolName) {\n            // Determine whether the member corresponds to a property.\n            // If so, we'll treat it as a function call for purposes of\n            // finding outgoing calls.\n            const leftHandType = this._evaluator.getType(node.leftExpression);\n            if (leftHandType) {\n                doForSubtypes(leftHandType, (subtype) => {\n                    let baseType = subtype;\n\n                    // This could be a bound TypeVar (e.g. used for \"self\" and \"cls\").\n                    if (isTypeVar(baseType)) {\n                        baseType = specializeType(baseType, /* typeVarMap */ undefined, /* makeConcrete */ true);\n                    }\n\n                    if (!isObject(baseType)) {\n                        return undefined;\n                    }\n\n                    const memberInfo = lookUpObjectMember(baseType, node.memberName.value);\n                    if (!memberInfo) {\n                        return undefined;\n                    }\n\n                    const memberType = this._evaluator.getTypeOfMember(memberInfo);\n                    const propertyDecls = memberInfo.symbol.getDeclarations();\n\n                    if (!memberType) {\n                        return undefined;\n                    }\n\n                    if (propertyDecls.some((decl) => DeclarationUtils.areDeclarationsSame(decl!, this._declaration))) {\n                        this._addIncomingCallForDeclaration(node.memberName);\n                    }\n\n                    return undefined;\n                });\n            }\n        }\n\n        return true;\n    }\n\n    private _addIncomingCallForDeclaration(nameNode: NameNode) {\n        const executionNode = ParseTreeUtils.getExecutionScopeNode(nameNode);\n        if (!executionNode) {\n            return;\n        }\n\n        let callSource: CallHierarchyItem;\n        if (executionNode.nodeType === ParseNodeType.Module) {\n            const moduleRange = convertOffsetsToRange(0, 0, this._parseResults.tokenizerOutput.lines);\n            const fileName = getFileName(this._filePath);\n\n            callSource = {\n                name: `(module) ${fileName}`,\n                kind: SymbolKind.Module,\n                uri: this._filePath,\n                range: moduleRange,\n                selectionRange: moduleRange,\n            };\n        } else if (executionNode.nodeType === ParseNodeType.Lambda) {\n            const lambdaRange = convertOffsetsToRange(\n                executionNode.start,\n                executionNode.start + executionNode.length,\n                this._parseResults.tokenizerOutput.lines\n            );\n\n            callSource = {\n                name: '(lambda)',\n                kind: SymbolKind.Function,\n                uri: this._filePath,\n                range: lambdaRange,\n                selectionRange: lambdaRange,\n            };\n        } else {\n            const functionRange = convertOffsetsToRange(\n                executionNode.name.start,\n                executionNode.name.start + executionNode.name.length,\n                this._parseResults.tokenizerOutput.lines\n            );\n\n            callSource = {\n                name: executionNode.name.value,\n                kind: SymbolKind.Function,\n                uri: this._filePath,\n                range: functionRange,\n                selectionRange: functionRange,\n            };\n        }\n\n        // Is there already a call recorded for this caller? If so,\n        // we'll simply add a new range. Otherwise, we'll create a new entry.\n        let incomingCall: CallHierarchyIncomingCall | undefined = this._incomingCalls.find(\n            (incoming) => incoming.from.uri === callSource.uri && rangesAreEqual(incoming.from.range, callSource.range)\n        );\n\n        if (!incomingCall) {\n            incomingCall = {\n                from: callSource,\n                fromRanges: [],\n            };\n            this._incomingCalls.push(incomingCall);\n        }\n\n        const fromRange: Range = convertOffsetsToRange(\n            nameNode.start,\n            nameNode.start + nameNode.length,\n            this._parseResults.tokenizerOutput.lines\n        );\n        incomingCall.fromRanges.push(fromRange);\n    }\n}\n\nfunction getSymbolKind(declaration: Declaration, evaluator: TypeEvaluator): SymbolKind {\n    let symbolKind: SymbolKind;\n\n    switch (declaration.type) {\n        case DeclarationType.Class:\n        case DeclarationType.SpecialBuiltInClass:\n            symbolKind = SymbolKind.Class;\n            break;\n\n        case DeclarationType.Function:\n            if (declaration.isMethod) {\n                const declType = evaluator.getTypeForDeclaration(declaration);\n                if (declType && isProperty(declType)) {\n                    symbolKind = SymbolKind.Property;\n                } else {\n                    symbolKind = SymbolKind.Method;\n                }\n            } else {\n                symbolKind = SymbolKind.Function;\n            }\n            break;\n\n        default:\n            symbolKind = SymbolKind.Function;\n            break;\n    }\n\n    return symbolKind;\n}\n","/*\n * codeActionProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n *\n * Handles 'code actions' requests from the client.\n */\n\nimport { CancellationToken, CodeAction, CodeActionKind, Command } from 'vscode-languageserver';\n\nimport { Commands } from '../commands/commands';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { AddMissingOptionalToParamAction, CreateTypeStubFileAction } from '../common/diagnostic';\nimport { Range } from '../common/textRange';\nimport { WorkspaceServiceInstance } from '../languageServerBase';\nimport { Localizer } from '../localization/localize';\n\nexport class CodeActionProvider {\n    static async getCodeActionsForPosition(\n        workspace: WorkspaceServiceInstance,\n        filePath: string,\n        range: Range,\n        token: CancellationToken\n    ) {\n        throwIfCancellationRequested(token);\n\n        const codeActions: CodeAction[] = [];\n\n        if (!workspace.disableLanguageServices) {\n            const diags = await workspace.serviceInstance.getDiagnosticsForRange(filePath, range, token);\n            const typeStubDiag = diags.find((d) => {\n                const actions = d.getActions();\n                return actions && actions.find((a) => a.action === Commands.createTypeStub);\n            });\n\n            if (typeStubDiag) {\n                const action = typeStubDiag\n                    .getActions()!\n                    .find((a) => a.action === Commands.createTypeStub) as CreateTypeStubFileAction;\n                if (action) {\n                    const createTypeStubAction = CodeAction.create(\n                        Localizer.CodeAction.createTypeStubFor().format({ moduleName: action.moduleName }),\n                        Command.create(\n                            Localizer.CodeAction.createTypeStub(),\n                            Commands.createTypeStub,\n                            workspace.rootPath,\n                            action.moduleName,\n                            filePath\n                        ),\n                        CodeActionKind.QuickFix\n                    );\n                    codeActions.push(createTypeStubAction);\n                }\n            }\n\n            const addOptionalDiag = diags.find((d) => {\n                const actions = d.getActions();\n                return actions && actions.find((a) => a.action === Commands.addMissingOptionalToParam);\n            });\n\n            if (addOptionalDiag) {\n                const action = addOptionalDiag\n                    .getActions()!\n                    .find((a) => a.action === Commands.addMissingOptionalToParam) as AddMissingOptionalToParamAction;\n                if (action) {\n                    const addMissingOptionalAction = CodeAction.create(\n                        Localizer.CodeAction.addOptionalToAnnotation(),\n                        Command.create(\n                            Localizer.CodeAction.addOptionalToAnnotation(),\n                            Commands.addMissingOptionalToParam,\n                            action.offsetOfTypeNode\n                        ),\n                        CodeActionKind.QuickFix\n                    );\n                    codeActions.push(addMissingOptionalAction);\n                }\n            }\n        }\n\n        return codeActions;\n    }\n}\n","/*\n * completionProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that maps a position within a Python program file into\n * a list of zero or more text completions that apply in the context.\n */\n\nimport {\n    CancellationToken,\n    CompletionItem,\n    CompletionItemKind,\n    CompletionList,\n    MarkupKind,\n    Range,\n    TextEdit,\n} from 'vscode-languageserver';\n\nimport { ImportLookup } from '../analyzer/analyzerFileInfo';\nimport * as AnalyzerNodeInfo from '../analyzer/analyzerNodeInfo';\nimport { Declaration, DeclarationType, FunctionDeclaration } from '../analyzer/declaration';\nimport { convertDocStringToMarkdown, convertDocStringToPlainText } from '../analyzer/docStringConversion';\nimport { ImportedModuleDescriptor, ImportResolver } from '../analyzer/importResolver';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { SourceMapper } from '../analyzer/sourceMapper';\nimport { Symbol, SymbolTable } from '../analyzer/symbol';\nimport * as SymbolNameUtils from '../analyzer/symbolNameUtils';\nimport { getLastTypedDeclaredForSymbol } from '../analyzer/symbolUtils';\nimport {\n    getClassDocString,\n    getFunctionDocStringFromDeclaration,\n    getFunctionDocStringFromType,\n    getModuleDocString,\n    getOverloadedFunctionDocStrings,\n} from '../analyzer/typeDocStringUtils';\nimport { CallSignatureInfo, TypeEvaluator } from '../analyzer/typeEvaluator';\nimport {\n    ClassType,\n    FunctionType,\n    isClass,\n    isModule,\n    isNone,\n    isObject,\n    isTypeVar,\n    isUnbound,\n    isUnknown,\n    ObjectType,\n    Type,\n    TypeBase,\n    TypeCategory,\n    UnknownType,\n} from '../analyzer/types';\nimport {\n    doForSubtypes,\n    getConcreteTypeFromTypeVar,\n    getDeclaringModulesForType,\n    getMembersForClass,\n    getMembersForModule,\n    isProperty,\n    makeTypeVarsConcrete,\n    specializeType,\n} from '../analyzer/typeUtils';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { ConfigOptions } from '../common/configOptions';\nimport { fail } from '../common/debug';\nimport { TextEditAction } from '../common/editAction';\nimport { convertOffsetToPosition, convertPositionToOffset } from '../common/positionUtils';\nimport * as StringUtils from '../common/stringUtils';\nimport { comparePositions, Position } from '../common/textRange';\nimport { TextRange } from '../common/textRange';\nimport {\n    ErrorExpressionCategory,\n    ErrorNode,\n    ExpressionNode,\n    FunctionNode,\n    ImportFromNode,\n    isExpressionNode,\n    ModuleNameNode,\n    NameNode,\n    ParameterCategory,\n    ParseNode,\n    ParseNodeType,\n    StringNode,\n} from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\nimport { AutoImporter, ModuleSymbolMap } from './autoImporter';\nimport { IndexResults } from './documentSymbolProvider';\n\nconst _keywords: string[] = [\n    // Expression keywords\n    'True',\n    'False',\n    'None',\n    'and',\n    'or',\n    'await',\n    'not',\n    'is',\n    'lambda',\n    'yield',\n\n    // Statement keywords\n    'assert',\n    'async',\n    'break',\n    'class',\n    'continue',\n    'def',\n    'del',\n    'elif',\n    'else',\n    'except',\n    'finally',\n    'for',\n    'from',\n    'global',\n    'if',\n    'import',\n    'in',\n    'nonlocal',\n    'pass',\n    'raise',\n    'return',\n    'try',\n    'while',\n    'yield',\n];\n\nenum SortCategory {\n    // The order of the following is important. We use\n    // this to order the completion suggestions.\n\n    // A keyword that must be entered for the syntax to be correct.\n    LikelyKeyword,\n\n    // A module name recently used in an import statement.\n    RecentImportModuleName,\n\n    // A module name used in an import statement.\n    ImportModuleName,\n\n    // A literal string.\n    LiteralValue,\n\n    // A named parameter in a call expression.\n    NamedParameter,\n\n    // A keyword or symbol that was recently used for completion.\n    RecentKeywordOrSymbol,\n\n    // An auto-import symbol that was recently used for completion.\n    RecentAutoImport,\n\n    // A keyword in the python syntax.\n    Keyword,\n\n    // A normal symbol.\n    NormalSymbol,\n\n    // A symbol that starts with _ or __ (used only when there is\n    // no matching filter).\n    PrivateSymbol,\n\n    // A symbol with a dunder name (e.g. __init__).\n    DunderSymbol,\n\n    // An auto-import symbol.\n    AutoImport,\n}\n\n// Completion items can have arbitrary data hanging off them.\n// This data allows the resolve handling to disambiguate\n// which item was selected.\nexport interface CompletionItemData {\n    filePath: string;\n    workspacePath: string;\n    position: Position;\n    autoImportText?: string;\n    symbolLabel?: string;\n}\n\n// ModuleContext attempts to gather info for unknown types\nexport interface ModuleContext {\n    lastKnownModule?: string;\n    lastKnownMemberName?: string;\n    unknownMemberName?: string;\n}\n\nexport interface CompletionResults {\n    completionList: CompletionList | undefined;\n    moduleContext?: ModuleContext;\n}\n\ninterface RecentCompletionInfo {\n    label: string;\n    autoImportText: string;\n}\n\n// We'll use a somewhat-arbitrary cutoff value here to determine\n// whether it's sufficiently similar.\nconst similarityLimit = 0.25;\n\n// We'll remember this many completions in the MRU list.\nconst maxRecentCompletions = 128;\n\nexport class CompletionProvider {\n    private static _mostRecentCompletions: RecentCompletionInfo[] = [];\n\n    // If we're being asked to resolve a completion item, we run the\n    // original completion algorithm and look for this symbol.\n    private _itemToResolve: CompletionItem | undefined;\n\n    constructor(\n        private _workspacePath: string,\n        private _parseResults: ParseResults,\n        private _fileContents: string,\n        private _importResolver: ImportResolver,\n        private _position: Position,\n        private _filePath: string,\n        private _configOptions: ConfigOptions,\n        private _importLookup: ImportLookup,\n        private _evaluator: TypeEvaluator,\n        private _format: MarkupKind,\n        private _sourceMapper: SourceMapper,\n        private _libraryMap: Map<string, IndexResults> | undefined,\n        private _moduleSymbolsCallback: () => ModuleSymbolMap,\n        private _cancellationToken: CancellationToken\n    ) {}\n\n    getCompletionsForPosition(): CompletionResults | undefined {\n        const offset = convertPositionToOffset(this._position, this._parseResults.tokenizerOutput.lines);\n        if (offset === undefined) {\n            return undefined;\n        }\n\n        let node = ParseTreeUtils.findNodeByOffset(this._parseResults.parseTree, offset);\n\n        // See if we can get to a \"better\" node by backing up a few columns.\n        // A \"better\" node is defined as one that's deeper than the current\n        // node.\n        const initialNode = node;\n        const initialDepth = node ? ParseTreeUtils.getNodeDepth(node) : 0;\n\n        if (!initialNode || initialNode.nodeType !== ParseNodeType.Name) {\n            let curOffset = offset;\n            while (curOffset >= 0) {\n                curOffset--;\n\n                // Stop scanning backward if we hit certain stop characters.\n                const curChar = this._fileContents.substr(curOffset, 1);\n                if (curChar === '(' || curChar === '\\n') {\n                    break;\n                }\n\n                const curNode = ParseTreeUtils.findNodeByOffset(this._parseResults.parseTree, curOffset);\n                if (curNode && curNode !== initialNode) {\n                    if (ParseTreeUtils.getNodeDepth(curNode) > initialDepth) {\n                        node = curNode;\n                    }\n                    break;\n                }\n            }\n        }\n\n        if (node === undefined) {\n            return undefined;\n        }\n\n        // Get the text on that line prior to the insertion point.\n        const lineTextRange = this._parseResults.tokenizerOutput.lines.getItemAt(this._position.line);\n        const textOnLine = this._fileContents.substr(lineTextRange.start, lineTextRange.length);\n        const priorText = textOnLine.substr(0, this._position.character);\n        const postText = textOnLine.substr(this._position.character);\n        const priorWordIndex = priorText.search(/\\w+$/);\n        const priorWord = priorWordIndex >= 0 ? priorText.substr(priorWordIndex) : '';\n\n        // Don't offer completions if we're within a comment.\n        if (this._isWithinComment(offset, priorText)) {\n            return undefined;\n        }\n\n        // See if the node is part of an error node. If so, that takes\n        // precedence.\n        let errorNode: ParseNode | undefined = node;\n        while (errorNode) {\n            if (errorNode.nodeType === ParseNodeType.Error) {\n                break;\n            }\n\n            errorNode = errorNode.parent;\n        }\n\n        // Determine the context based on the parse node's type and\n        // that of its ancestors.\n        let curNode = errorNode || node;\n        while (true) {\n            throwIfCancellationRequested(this._cancellationToken);\n\n            if (curNode.nodeType === ParseNodeType.String) {\n                return this._getStringLiteralCompletions(curNode, priorWord, priorText, postText);\n            }\n\n            if (curNode.nodeType === ParseNodeType.StringList) {\n                return undefined;\n            }\n\n            if (curNode.nodeType === ParseNodeType.ModuleName) {\n                return this._getImportModuleCompletions(curNode);\n            }\n\n            if (curNode.nodeType === ParseNodeType.Error) {\n                return this._getExpressionErrorCompletions(curNode, priorWord, priorText, postText);\n            }\n\n            if (curNode.nodeType === ParseNodeType.MemberAccess) {\n                return this._getMemberAccessCompletions(curNode.leftExpression, priorWord);\n            }\n\n            if (curNode.nodeType === ParseNodeType.Name) {\n                // Are we within a \"from X import Y as Z\" statement and\n                // more specifically within the \"Y\"?\n                if (curNode.parent && curNode.parent.nodeType === ParseNodeType.ModuleName) {\n                    return this._getImportModuleCompletions(curNode.parent);\n                } else if (curNode.parent && curNode.parent.nodeType === ParseNodeType.ImportFromAs) {\n                    const parentNode = curNode.parent.parent;\n\n                    if (parentNode && parentNode.nodeType === ParseNodeType.ImportFrom) {\n                        if (curNode.parent.name === curNode) {\n                            return this._getImportFromCompletions(parentNode, priorWord);\n                        } else {\n                            return this._getImportFromCompletions(parentNode, '');\n                        }\n                    }\n                } else if (\n                    curNode.parent &&\n                    curNode.parent.nodeType === ParseNodeType.MemberAccess &&\n                    curNode === curNode.parent.memberName\n                ) {\n                    return this._getMemberAccessCompletions(curNode.parent.leftExpression, priorWord);\n                }\n            }\n\n            if (curNode.nodeType === ParseNodeType.ImportFrom) {\n                return this._getImportFromCompletions(curNode, priorWord);\n            }\n\n            if (isExpressionNode(curNode)) {\n                return this._getExpressionCompletions(curNode, priorWord, priorText, postText);\n            }\n\n            if (curNode.nodeType === ParseNodeType.Suite || curNode.nodeType === ParseNodeType.Module) {\n                return this._getStatementCompletions(curNode, priorWord, priorText, postText);\n            }\n\n            if (!curNode.parent) {\n                break;\n            }\n\n            curNode = curNode.parent;\n        }\n\n        return undefined;\n    }\n\n    // When the user selects a completion, this callback is invoked,\n    // allowing us to record what was selected. This allows us to\n    // build our MRU cache so we can better predict entries.\n    resolveCompletionItem(completionItem: CompletionItem) {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        const completionItemData = completionItem.data as CompletionItemData;\n\n        const label = completionItem.label;\n        let autoImportText = '';\n        if (completionItemData.autoImportText) {\n            autoImportText = completionItemData.autoImportText;\n        }\n\n        const curIndex = CompletionProvider._mostRecentCompletions.findIndex(\n            (item) => item.label === label && item.autoImportText === autoImportText\n        );\n\n        if (curIndex > 0) {\n            // If there's an existing entry with the same name that's not at the\n            // beginning of the array, remove it.\n            CompletionProvider._mostRecentCompletions = CompletionProvider._mostRecentCompletions.splice(curIndex, 1);\n        }\n\n        if (curIndex !== 0) {\n            // Add to the start of the array.\n            CompletionProvider._mostRecentCompletions.unshift({ label, autoImportText });\n        }\n\n        if (CompletionProvider._mostRecentCompletions.length > maxRecentCompletions) {\n            // Prevent the MRU list from growing indefinitely.\n            CompletionProvider._mostRecentCompletions.pop();\n        }\n\n        if (completionItemData.symbolLabel) {\n            this._itemToResolve = completionItem;\n\n            // Rerun the completion lookup. It will fill in additional information\n            // about the item to be resolved. We'll ignore the rest of the returned\n            // list. This is a bit wasteful, but all of that information should be\n            // cached, so it's not as bad as it might seem.\n            this.getCompletionsForPosition();\n        }\n    }\n\n    private _isWithinComment(offset: number, priorText: string): boolean {\n        const tokenIndex = this._parseResults.tokenizerOutput.tokens.getItemAtPosition(offset);\n        if (tokenIndex < 0) {\n            return false;\n        }\n\n        const token = this._parseResults.tokenizerOutput.tokens.getItemAt(tokenIndex);\n\n        // If we're in the middle of a token, we're not in a comment.\n        if (offset > token.start && offset < TextRange.getEnd(token)) {\n            return false;\n        }\n\n        // See if the text that precedes the current position contains\n        // a '#' character.\n        return !!priorText.match(/#/);\n    }\n\n    private _getExpressionErrorCompletions(\n        node: ErrorNode,\n        priorWord: string,\n        priorText: string,\n        postText: string\n    ): CompletionResults | undefined {\n        // Is the error due to a missing member access name? If so,\n        // we can evaluate the left side of the member access expression\n        // to determine its type and offer suggestions based on it.\n        switch (node.category) {\n            case ErrorExpressionCategory.MissingIn: {\n                return this._createSingleKeywordCompletionList('in');\n            }\n\n            case ErrorExpressionCategory.MissingElse: {\n                return this._createSingleKeywordCompletionList('else');\n            }\n\n            case ErrorExpressionCategory.MissingExpression:\n            case ErrorExpressionCategory.MissingIndexOrSlice:\n            case ErrorExpressionCategory.MissingDecoratorCallName: {\n                return this._getExpressionCompletions(node, priorWord, priorText, postText);\n            }\n\n            case ErrorExpressionCategory.MissingMemberAccessName: {\n                if (node.child && isExpressionNode(node.child)) {\n                    return this._getMemberAccessCompletions(node.child, priorWord);\n                }\n                break;\n            }\n\n            case ErrorExpressionCategory.MissingFunctionParameterList: {\n                if (node.child && node.child.nodeType === ParseNodeType.Name) {\n                    // Determine if the partial name is a method that's overriding\n                    // a method in a base class.\n                    return this._getMethodOverrideCompletions(node.child);\n                }\n                break;\n            }\n        }\n\n        return undefined;\n    }\n\n    private _createSingleKeywordCompletionList(keyword: string): CompletionResults {\n        const completionItem = CompletionItem.create(keyword);\n        completionItem.kind = CompletionItemKind.Keyword;\n        completionItem.sortText = this._makeSortText(SortCategory.LikelyKeyword, keyword);\n        const completionList = CompletionList.create([completionItem]);\n        return { completionList };\n    }\n\n    private _getMethodOverrideCompletions(partialName: NameNode): CompletionResults | undefined {\n        const enclosingClass = ParseTreeUtils.getEnclosingClass(partialName, true);\n        if (!enclosingClass) {\n            return undefined;\n        }\n\n        const classResults = this._evaluator.getTypeOfClass(enclosingClass);\n        if (!classResults) {\n            return undefined;\n        }\n\n        // Get symbols in reverse-MRO, but leave omit the class itself.\n        const symbolTable = new Map<string, Symbol>();\n        for (let i = classResults.classType.details.mro.length - 1; i > 0; i--) {\n            const mroClass = classResults.classType.details.mro[i];\n            if (isClass(mroClass)) {\n                getMembersForClass(mroClass, symbolTable, false);\n            }\n        }\n\n        const completionList = CompletionList.create();\n\n        symbolTable.forEach((symbol, name) => {\n            const decl = getLastTypedDeclaredForSymbol(symbol);\n            if (decl && decl.type === DeclarationType.Function) {\n                const isSimilar = StringUtils.computeCompletionSimilarity(partialName.value, name) > similarityLimit;\n                if (isSimilar) {\n                    const range: Range = {\n                        start: { line: this._position.line, character: this._position.character - partialName.length },\n                        end: { line: this._position.line, character: this._position.character },\n                    };\n\n                    const methodSignature = this._printMethodSignature(decl.node) + ':';\n                    const textEdit = TextEdit.replace(range, methodSignature);\n                    this._addSymbol(name, symbol, partialName.value, completionList, undefined, textEdit);\n                }\n            }\n        });\n\n        return { completionList };\n    }\n\n    private _printMethodSignature(node: FunctionNode): string {\n        const paramList = node.parameters\n            .map((param, index) => {\n                let paramString = '';\n                if (param.category === ParameterCategory.VarArgList) {\n                    paramString += '*';\n                } else if (param.category === ParameterCategory.VarArgDictionary) {\n                    paramString += '**';\n                }\n\n                if (param.name) {\n                    paramString += param.name.value;\n                }\n\n                const paramTypeAnnotation = this._evaluator.getTypeAnnotationForParameter(node, index);\n                if (paramTypeAnnotation) {\n                    paramString += ': ' + ParseTreeUtils.printExpression(paramTypeAnnotation);\n                }\n\n                return paramString;\n            })\n            .join(', ');\n\n        let methodSignature = node.name.value + '(' + paramList + ')';\n\n        if (node.returnTypeAnnotation) {\n            methodSignature += ' -> ' + ParseTreeUtils.printExpression(node.returnTypeAnnotation);\n        } else if (node.functionAnnotationComment) {\n            methodSignature +=\n                ' -> ' + ParseTreeUtils.printExpression(node.functionAnnotationComment.returnTypeAnnotation);\n        }\n\n        return methodSignature;\n    }\n\n    private _getMemberAccessCompletions(\n        leftExprNode: ExpressionNode,\n        priorWord: string\n    ): CompletionResults | undefined {\n        let leftType = this._evaluator.getType(leftExprNode);\n        const symbolTable = new Map<string, Symbol>();\n        const completionList = CompletionList.create();\n        let lastKnownModule: ModuleContext | undefined;\n\n        if (leftType) {\n            if (isTypeVar(leftType)) {\n                // If the left is a constrained TypeVar, treat it as a union for the\n                // purposes of providing completion suggestions.\n                leftType = getConcreteTypeFromTypeVar(leftType, /* convertConstraintsToUnion */ true);\n            }\n\n            doForSubtypes(leftType, (subtype) => {\n                const specializedSubtype = makeTypeVarsConcrete(subtype);\n\n                if (isObject(specializedSubtype)) {\n                    getMembersForClass(specializedSubtype.classType, symbolTable, /* includeInstanceVars */ true);\n                } else if (isClass(specializedSubtype)) {\n                    getMembersForClass(specializedSubtype, symbolTable, /* includeInstanceVars */ false);\n                } else if (isModule(specializedSubtype)) {\n                    getMembersForModule(specializedSubtype, symbolTable);\n                } else if (\n                    specializedSubtype.category === TypeCategory.Function ||\n                    specializedSubtype.category === TypeCategory.OverloadedFunction\n                ) {\n                    const functionClass = this._evaluator.getBuiltInType(leftExprNode, 'function');\n                    if (functionClass && isClass(functionClass)) {\n                        getMembersForClass(functionClass, symbolTable, /* includeInstanceVars */ true);\n                    }\n                } else if (isNone(subtype)) {\n                    const objectClass = this._evaluator.getBuiltInType(leftExprNode, 'object');\n                    if (objectClass && isClass(objectClass)) {\n                        getMembersForClass(objectClass, symbolTable, TypeBase.isInstance(subtype));\n                    }\n                }\n\n                return undefined;\n            });\n\n            const specializedLeftType = makeTypeVarsConcrete(leftType);\n            const objectThrough: ObjectType | undefined = isObject(specializedLeftType)\n                ? specializedLeftType\n                : undefined;\n            this._addSymbolsForSymbolTable(symbolTable, (_) => true, priorWord, objectThrough, completionList);\n\n            // If we dont know this type, look for a module we should stub\n            if (!leftType || isUnknown(leftType) || isUnbound(leftType)) {\n                lastKnownModule = this._getLastKnownModule(leftExprNode, leftType);\n            }\n        }\n\n        return { completionList, moduleContext: lastKnownModule };\n    }\n\n    private _getLastKnownModule(leftExprNode: ExpressionNode, leftType: Type | undefined): ModuleContext | undefined {\n        let curNode: ExpressionNode | undefined = leftExprNode;\n        let curType: Type | undefined = leftType;\n        let unknownMemberName: string | undefined =\n            leftExprNode.nodeType === ParseNodeType.MemberAccess ? leftExprNode?.memberName.value : undefined;\n\n        // Walk left of the expression scope till we find a known type. A.B.Unknown.<-- return B.\n        while (curNode) {\n            if (curNode.nodeType === ParseNodeType.Call || curNode.nodeType === ParseNodeType.MemberAccess) {\n                // Move left\n                curNode = curNode.leftExpression;\n\n                // First time in the loop remember the name of the unknown type.\n                if (unknownMemberName === undefined) {\n                    unknownMemberName =\n                        curNode.nodeType === ParseNodeType.MemberAccess ? curNode?.memberName.value ?? '' : '';\n                }\n            } else {\n                curNode = undefined;\n            }\n\n            if (curNode) {\n                curType = this._evaluator.getType(curNode);\n\n                // Breakout if we found a known type.\n                if (curType !== undefined && !isUnknown(curType) && !isUnbound(curType)) {\n                    break;\n                }\n            }\n        }\n\n        const context: ModuleContext = {};\n        if (curType && !isUnknown(curType) && !isUnbound(curType) && curNode) {\n            const moduleNamesForType = getDeclaringModulesForType(curType);\n\n            // For union types we only care about non 'typing' modules.\n            context.lastKnownModule = moduleNamesForType.find((n) => n !== 'typing');\n\n            if (curNode.nodeType === ParseNodeType.MemberAccess) {\n                context.lastKnownMemberName = curNode.memberName.value;\n            } else if (curNode.nodeType === ParseNodeType.Name && isClass(curType)) {\n                context.lastKnownMemberName = curType.details.name;\n            } else if (curNode.nodeType === ParseNodeType.Name && isObject(curType)) {\n                context.lastKnownMemberName = curType.classType.details.name;\n            }\n\n            context.unknownMemberName = unknownMemberName;\n        }\n\n        return context;\n    }\n\n    private _getStatementCompletions(\n        parseNode: ParseNode,\n        priorWord: string,\n        priorText: string,\n        postText: string\n    ): CompletionResults | undefined {\n        // For now, use the same logic for expressions and statements.\n        return this._getExpressionCompletions(parseNode, priorWord, priorText, postText);\n    }\n\n    private _getExpressionCompletions(\n        parseNode: ParseNode,\n        priorWord: string,\n        priorText: string,\n        postText: string\n    ): CompletionResults | undefined {\n        // If the user typed a \".\" as part of a number, don't present\n        // any completion options.\n        if (parseNode.nodeType === ParseNodeType.Number) {\n            return undefined;\n        }\n\n        const completionList = CompletionList.create();\n\n        // Add call argument completions.\n        this._addCallArgumentCompletions(parseNode, priorWord, priorText, postText, completionList);\n\n        // Add symbols that are in scope.\n        this._addSymbols(parseNode, priorWord, completionList);\n\n        // Add keywords.\n        this._findMatchingKeywords(_keywords, priorWord).map((keyword) => {\n            const completionItem = CompletionItem.create(keyword);\n            completionItem.kind = CompletionItemKind.Keyword;\n            completionList.items.push(completionItem);\n            completionItem.sortText = this._makeSortText(SortCategory.Keyword, keyword);\n        });\n\n        // Add auto-import suggestions from other modules.\n        // Ignore this check for privates, since they are not imported.\n        if (this._configOptions.autoImportCompletions && !priorWord.startsWith('_') && !this._itemToResolve) {\n            this._getAutoImportCompletions(priorWord, completionList);\n        }\n\n        // Add literal values if appropriate.\n        if (parseNode.nodeType === ParseNodeType.Error) {\n            if (parseNode.category === ErrorExpressionCategory.MissingIndexOrSlice) {\n                this._getIndexStringLiteral(parseNode, completionList);\n            } else if (parseNode.category === ErrorExpressionCategory.MissingExpression) {\n                if (parseNode.parent && parseNode.parent.nodeType === ParseNodeType.Assignment) {\n                    const declaredTypeOfTarget = this._evaluator.getDeclaredTypeForExpression(\n                        parseNode.parent.leftExpression\n                    );\n\n                    if (declaredTypeOfTarget) {\n                        this._addLiteralValuesForTargetType(declaredTypeOfTarget, priorText, postText, completionList);\n                    }\n                }\n            }\n        }\n\n        return { completionList };\n    }\n\n    private _addCallArgumentCompletions(\n        parseNode: ParseNode,\n        priorWord: string,\n        priorText: string,\n        postText: string,\n        completionList: CompletionList\n    ) {\n        // If we're within the argument list of a call, add parameter names.\n        const offset = convertPositionToOffset(this._position, this._parseResults.tokenizerOutput.lines)!;\n        const signatureInfo = this._evaluator.getCallSignatureInfo(\n            parseNode,\n            offset,\n            this._parseResults.tokenizerOutput.tokens\n        );\n\n        if (signatureInfo) {\n            // Are we past the call expression and within the argument list?\n            const callNameEnd = convertOffsetToPosition(\n                signatureInfo.callNode.leftExpression.start + signatureInfo.callNode.leftExpression.length,\n                this._parseResults.tokenizerOutput.lines\n            );\n\n            if (comparePositions(this._position, callNameEnd) > 0) {\n                this._addNamedParameters(signatureInfo, priorWord, completionList);\n\n                // Add literals that apply to this parameter.\n                this._addLiteralValuesForArgument(signatureInfo, priorText, postText, completionList);\n            }\n        }\n    }\n\n    private _addLiteralValuesForArgument(\n        signatureInfo: CallSignatureInfo,\n        priorText: string,\n        postText: string,\n        completionList: CompletionList\n    ) {\n        signatureInfo.signatures.forEach((signature) => {\n            if (!signature.activeParam) {\n                return undefined;\n            }\n\n            const type = signature.type;\n            const paramIndex = type.details.parameters.indexOf(signature.activeParam);\n\n            if (paramIndex < 0) {\n                return undefined;\n            }\n\n            const paramType = type.details.parameters[paramIndex].type;\n            this._addLiteralValuesForTargetType(paramType, priorText, postText, completionList);\n            return undefined;\n        });\n    }\n\n    private _addLiteralValuesForTargetType(\n        type: Type,\n        priorText: string,\n        postText: string,\n        completionList: CompletionList\n    ) {\n        const quoteValue = this._getQuoteValueFromPriorText(priorText);\n        doForSubtypes(type, (subtype) => {\n            if (isObject(subtype)) {\n                if (ClassType.isBuiltIn(subtype.classType, 'str')) {\n                    if (subtype.classType.literalValue !== undefined) {\n                        this._addStringLiteralToCompletionList(\n                            subtype.classType.literalValue as string,\n                            quoteValue.stringValue,\n                            postText,\n                            quoteValue.quoteCharacter,\n                            completionList\n                        );\n                    }\n                }\n            }\n\n            return undefined;\n        });\n    }\n\n    private _getStringLiteralCompletions(\n        parseNode: StringNode,\n        priorWord: string,\n        priorText: string,\n        postText: string\n    ): CompletionResults | undefined {\n        let parentNode: ParseNode | undefined = parseNode.parent;\n        if (!parentNode || parentNode.nodeType !== ParseNodeType.StringList || parentNode.strings.length > 1) {\n            return undefined;\n        }\n\n        parentNode = parentNode.parent;\n        if (!parentNode) {\n            return undefined;\n        }\n\n        const completionList = CompletionList.create();\n\n        if (parentNode.nodeType === ParseNodeType.IndexItems) {\n            parentNode = parentNode.parent;\n            if (!parentNode || parentNode.nodeType !== ParseNodeType.Index) {\n                return undefined;\n            }\n\n            const baseType = this._evaluator.getType(parentNode.baseExpression);\n            if (!baseType || !isObject(baseType)) {\n                return undefined;\n            }\n\n            // We currently handle only TypedDict objects.\n            const classType = baseType.classType;\n            if (!ClassType.isTypedDictClass(classType)) {\n                return;\n            }\n\n            const entries = this._evaluator.getTypedDictMembersForClass(classType);\n            const quoteValue = this._getQuoteValueFromPriorText(priorText);\n\n            entries.forEach((_, key) => {\n                this._addStringLiteralToCompletionList(\n                    key,\n                    quoteValue.stringValue,\n                    postText,\n                    quoteValue.quoteCharacter,\n                    completionList\n                );\n            });\n        } else if (parentNode.nodeType === ParseNodeType.Assignment) {\n            const declaredTypeOfTarget = this._evaluator.getDeclaredTypeForExpression(parentNode.leftExpression);\n\n            if (declaredTypeOfTarget) {\n                this._addLiteralValuesForTargetType(declaredTypeOfTarget, priorText, postText, completionList);\n            }\n        } else {\n            this._addCallArgumentCompletions(parseNode, priorWord, priorText, postText, completionList);\n        }\n\n        return { completionList };\n    }\n\n    // Given a string of text that precedes the current insertion point,\n    // determines which portion of it is the first part of a string literal\n    // (either starting with a single or double quote). Returns the quote\n    // type and the string literal value after the starting quote.\n    private _getQuoteValueFromPriorText(priorText: string) {\n        const lastSingleQuote = priorText.lastIndexOf(\"'\");\n        const lastDoubleQuote = priorText.lastIndexOf('\"');\n\n        let quoteCharacter = this._parseResults.tokenizerOutput.predominantSingleQuoteCharacter;\n        let stringValue = undefined;\n\n        if (lastSingleQuote > lastDoubleQuote) {\n            quoteCharacter = \"'\";\n            stringValue = priorText.substr(lastSingleQuote + 1);\n        } else if (lastDoubleQuote > lastSingleQuote) {\n            quoteCharacter = '\"';\n            stringValue = priorText.substr(lastDoubleQuote + 1);\n        }\n\n        return { stringValue, quoteCharacter };\n    }\n\n    private _getIndexStringLiteral(parseNode: ErrorNode, completionList: CompletionList) {\n        if (!parseNode.parent || parseNode.parent.nodeType !== ParseNodeType.IndexItems) {\n            return;\n        }\n\n        const parentNode = parseNode.parent;\n        if (!parentNode.parent || parentNode.parent.nodeType !== ParseNodeType.Index) {\n            return;\n        }\n\n        const baseType = this._evaluator.getType(parentNode.parent.baseExpression);\n        if (!baseType || !isObject(baseType)) {\n            return;\n        }\n\n        // We currently handle only TypedDict objects.\n        const classType = baseType.classType;\n        if (!ClassType.isTypedDictClass(classType)) {\n            return;\n        }\n\n        const entries = this._evaluator.getTypedDictMembersForClass(classType);\n        entries.forEach((_, key) => {\n            this._addStringLiteralToCompletionList(\n                key,\n                undefined,\n                undefined,\n                this._parseResults.tokenizerOutput.predominantSingleQuoteCharacter,\n                completionList\n            );\n        });\n    }\n\n    private _addStringLiteralToCompletionList(\n        value: string,\n        priorString: string | undefined,\n        postText: string | undefined,\n        quoteCharacter: string,\n        completionList: CompletionList\n    ) {\n        const isSimilar = StringUtils.computeCompletionSimilarity(priorString || '', value) > similarityLimit;\n        if (isSimilar) {\n            const valueWithQuotes = `${quoteCharacter}${value}${quoteCharacter}`;\n            const completionItem = CompletionItem.create(valueWithQuotes);\n\n            completionItem.kind = CompletionItemKind.Text;\n            completionItem.sortText = this._makeSortText(SortCategory.LiteralValue, valueWithQuotes);\n            let rangeStartCol = this._position.character;\n            if (priorString !== undefined) {\n                rangeStartCol -= priorString.length + 1;\n            }\n\n            // If the text after the insertion point is the closing quote,\n            // replace it.\n            let rangeEndCol = this._position.character;\n            if (postText !== undefined) {\n                if (postText.startsWith(quoteCharacter)) {\n                    rangeEndCol++;\n                }\n            }\n\n            const range: Range = {\n                start: { line: this._position.line, character: rangeStartCol },\n                end: { line: this._position.line, character: rangeEndCol },\n            };\n            completionItem.textEdit = TextEdit.replace(range, valueWithQuotes);\n\n            completionList.items.push(completionItem);\n        }\n    }\n\n    private _getAutoImportCompletions(priorWord: string, completionList: CompletionList) {\n        const moduleSymbolMap = this._moduleSymbolsCallback();\n        const autoImporter = new AutoImporter(\n            this._configOptions.findExecEnvironment(this._filePath),\n            this._importResolver,\n            this._parseResults,\n            this._position,\n            completionList.items.filter((i) => !i.data?.autoImport).map((i) => i.label),\n            moduleSymbolMap,\n            this._libraryMap\n        );\n\n        for (const result of autoImporter.getAutoImportCandidates(\n            priorWord,\n            similarityLimit,\n            undefined,\n            this._cancellationToken\n        )) {\n            if (result.symbol) {\n                this._addSymbol(\n                    result.name,\n                    result.symbol,\n                    priorWord,\n                    completionList,\n                    result.source,\n                    undefined,\n                    result.edits\n                );\n            } else {\n                this._addNameToCompletionList(\n                    result.name,\n                    result.kind ?? CompletionItemKind.Module,\n                    priorWord,\n                    completionList,\n                    undefined,\n                    '',\n                    result.source\n                        ? `\\`\\`\\`\\nfrom ${result.source} import ${result.name}\\n\\`\\`\\``\n                        : `\\`\\`\\`\\nimport ${result.name}\\n\\`\\`\\``,\n                    undefined,\n                    result.edits\n                );\n            }\n        }\n    }\n\n    private _getImportFromCompletions(\n        importFromNode: ImportFromNode,\n        priorWord: string\n    ): CompletionResults | undefined {\n        // Don't attempt to provide completions for \"from X import *\".\n        if (importFromNode.isWildcardImport) {\n            return undefined;\n        }\n\n        // Access the imported module information, which is hanging\n        // off the ImportFromNode.\n        const importInfo = AnalyzerNodeInfo.getImportInfo(importFromNode.module);\n        if (!importInfo) {\n            return undefined;\n        }\n\n        const completionList = CompletionList.create();\n\n        const resolvedPath =\n            importInfo.resolvedPaths.length > 0 ? importInfo.resolvedPaths[importInfo.resolvedPaths.length - 1] : '';\n\n        const lookupResults = this._importLookup(resolvedPath);\n        if (lookupResults) {\n            this._addSymbolsForSymbolTable(\n                lookupResults.symbolTable,\n                (name) => {\n                    // Don't suggest symbols that have already been imported.\n                    return !importFromNode.imports.find((imp) => imp.name.value === name);\n                },\n                priorWord,\n                undefined,\n                completionList\n            );\n        }\n\n        // Add the implicit imports.\n        importInfo.implicitImports.forEach((implImport) => {\n            if (!importFromNode.imports.find((imp) => imp.name.value === implImport.name)) {\n                this._addNameToCompletionList(implImport.name, CompletionItemKind.Module, priorWord, completionList);\n            }\n        });\n\n        return { completionList };\n    }\n\n    private _findMatchingKeywords(keywordList: string[], partialMatch: string): string[] {\n        return keywordList.filter((keyword) => {\n            if (partialMatch) {\n                return StringUtils.computeCompletionSimilarity(partialMatch, keyword) > similarityLimit;\n            } else {\n                return true;\n            }\n        });\n    }\n\n    private _addNamedParameters(signatureInfo: CallSignatureInfo, priorWord: string, completionList: CompletionList) {\n        const argNameMap = new Map<string, string>();\n\n        signatureInfo.signatures.forEach((signature) => {\n            this._addNamedParametersToMap(signature.type, argNameMap);\n        });\n\n        // Remove any named parameters that are already provided.\n        signatureInfo.callNode.arguments!.forEach((arg) => {\n            if (arg.name) {\n                argNameMap.delete(arg.name.value);\n            }\n        });\n\n        // Add the remaining unique parameter names to the completion list.\n        argNameMap.forEach((argName) => {\n            const similarity = StringUtils.computeCompletionSimilarity(priorWord, argName);\n\n            if (similarity > similarityLimit) {\n                const completionItem = CompletionItem.create(argName + '=');\n                completionItem.kind = CompletionItemKind.Variable;\n\n                const completionItemData: CompletionItemData = {\n                    workspacePath: this._workspacePath,\n                    filePath: this._filePath,\n                    position: this._position,\n                };\n                completionItem.data = completionItemData;\n                completionItem.sortText = this._makeSortText(SortCategory.NamedParameter, argName);\n\n                completionList.items.push(completionItem);\n            }\n        });\n    }\n\n    private _addNamedParametersToMap(type: FunctionType, paramMap: Map<string, string>) {\n        type.details.parameters.forEach((param) => {\n            if (param.name && !param.isNameSynthesized) {\n                // Don't add private or protected names. These are assumed\n                // not to be named parameters.\n                if (!SymbolNameUtils.isPrivateOrProtectedName(param.name)) {\n                    paramMap.set(param.name, param.name);\n                }\n            }\n        });\n    }\n\n    private _addSymbols(node: ParseNode, priorWord: string, completionList: CompletionList) {\n        let curNode: ParseNode | undefined = node;\n\n        while (curNode) {\n            // Does this node have a scope associated with it?\n            let scope = AnalyzerNodeInfo.getScope(curNode);\n            if (scope) {\n                while (scope) {\n                    this._addSymbolsForSymbolTable(scope.symbolTable, () => true, priorWord, undefined, completionList);\n                    scope = scope.parent;\n                }\n\n                // If this is a class scope, add symbols from parent classes.\n                if (curNode.nodeType === ParseNodeType.Class) {\n                    const classType = this._evaluator.getTypeOfClass(curNode);\n                    if (classType && isClass(classType.classType)) {\n                        classType.classType.details.mro.forEach((baseClass, index) => {\n                            if (isClass(baseClass)) {\n                                this._addSymbolsForSymbolTable(\n                                    baseClass.details.fields,\n                                    (name) => {\n                                        const symbol = baseClass.details.fields.get(name);\n                                        if (!symbol || !symbol.isClassMember()) {\n                                            return false;\n                                        }\n\n                                        // Return only variables, not methods or classes.\n                                        return symbol\n                                            .getDeclarations()\n                                            .some((decl) => decl.type === DeclarationType.Variable);\n                                    },\n                                    priorWord,\n                                    undefined,\n                                    completionList\n                                );\n                            }\n                        });\n                    }\n                }\n                break;\n            }\n\n            curNode = curNode.parent;\n        }\n    }\n\n    private _addSymbolsForSymbolTable(\n        symbolTable: SymbolTable,\n        includeSymbolCallback: (name: string) => boolean,\n        priorWord: string,\n        objectThrough: ObjectType | undefined,\n        completionList: CompletionList\n    ) {\n        symbolTable.forEach((symbol, name) => {\n            // If there are no declarations or the symbol is not\n            // exported from this scope, don't include it in the\n            // suggestion list.\n            if (!symbol.isExternallyHidden() && includeSymbolCallback(name)) {\n                // Don't add a symbol more than once. It may have already been\n                // added from an inner scope's symbol table.\n                if (!completionList.items.some((item) => item.label === name)) {\n                    this._addSymbol(\n                        name,\n                        symbol,\n                        priorWord,\n                        completionList,\n                        undefined,\n                        undefined,\n                        undefined,\n                        objectThrough\n                    );\n                }\n            }\n        });\n    }\n\n    private _addSymbol(\n        name: string,\n        symbol: Symbol,\n        priorWord: string,\n        completionList: CompletionList,\n        autoImportSource?: string,\n        textEdit?: TextEdit,\n        additionalTextEdits?: TextEditAction[],\n        objectThrough?: ObjectType\n    ) {\n        let primaryDecl = getLastTypedDeclaredForSymbol(symbol);\n        if (!primaryDecl) {\n            const declarations = symbol.getDeclarations();\n            if (declarations.length > 0) {\n                primaryDecl = declarations[declarations.length - 1];\n            }\n        }\n\n        if (primaryDecl) {\n            let itemKind: CompletionItemKind = CompletionItemKind.Variable;\n\n            primaryDecl = this._evaluator.resolveAliasDeclaration(primaryDecl, /* resolveLocalNames */ true);\n            if (primaryDecl) {\n                itemKind = this._convertDeclarationTypeToItemKind(primaryDecl);\n\n                // Are we resolving a completion item? If so, see if this symbol\n                // is the one that we're trying to match.\n                if (this._itemToResolve) {\n                    const completionItemData = this._itemToResolve.data as CompletionItemData;\n\n                    if (completionItemData.symbolLabel === name) {\n                        // This call can be expensive to perform on every completion item\n                        // that we return, so we do it lazily in the \"resolve\" callback.\n                        const type = this._evaluator.getEffectiveTypeOfSymbol(symbol);\n                        if (type) {\n                            let typeDetail: string | undefined;\n                            let documentation: string | undefined;\n\n                            switch (primaryDecl.type) {\n                                case DeclarationType.Intrinsic:\n                                case DeclarationType.Variable:\n                                case DeclarationType.Parameter:\n                                    typeDetail =\n                                        name + ': ' + this._evaluator.printType(type, /* expandTypeAlias */ false);\n                                    break;\n\n                                case DeclarationType.Function: {\n                                    const functionType = objectThrough\n                                        ? this._evaluator.bindFunctionToClassOrObject(objectThrough, type, false)\n                                        : type;\n                                    if (functionType) {\n                                        if (isProperty(functionType) && objectThrough) {\n                                            const propertyType =\n                                                this._evaluator.getGetterTypeFromProperty(\n                                                    functionType.classType,\n                                                    /* inferTypeIfNeeded */ true\n                                                ) || UnknownType.create();\n                                            typeDetail =\n                                                name +\n                                                ': ' +\n                                                this._evaluator.printType(propertyType, /* expandTypeAlias */ false) +\n                                                ' (property)';\n                                        } else if (functionType.category === TypeCategory.OverloadedFunction) {\n                                            typeDetail = functionType.overloads\n                                                .map(\n                                                    (overload) =>\n                                                        name +\n                                                        this._evaluator.printType(overload, /* expandTypeAlias */ false)\n                                                )\n                                                .join('\\n');\n                                        } else {\n                                            typeDetail =\n                                                name +\n                                                ': ' +\n                                                this._evaluator.printType(functionType, /* expandTypeAlias */ false);\n                                        }\n                                    }\n                                    break;\n                                }\n                                case DeclarationType.Class:\n                                case DeclarationType.SpecialBuiltInClass: {\n                                    typeDetail = 'class ' + name + '()';\n                                    break;\n                                }\n\n                                case DeclarationType.Alias: {\n                                    typeDetail = name;\n                                    if (primaryDecl.path) {\n                                        const lookupResults = this._importLookup(primaryDecl.path);\n                                        if (lookupResults) {\n                                            documentation = lookupResults.docString;\n                                        }\n                                    }\n                                    break;\n                                }\n\n                                default: {\n                                    typeDetail = name;\n                                    break;\n                                }\n                            }\n\n                            if (isModule(type)) {\n                                documentation = getModuleDocString(type, primaryDecl, this._sourceMapper);\n                            } else if (isClass(type)) {\n                                documentation = getClassDocString(type, primaryDecl, this._sourceMapper);\n                            } else if (type.category === TypeCategory.Function) {\n                                documentation = getFunctionDocStringFromType(type, this._sourceMapper);\n                            } else if (type.category === TypeCategory.OverloadedFunction) {\n                                documentation = getOverloadedFunctionDocStrings(\n                                    type,\n                                    primaryDecl,\n                                    this._sourceMapper\n                                ).find((doc) => doc);\n                            } else if (primaryDecl.type === DeclarationType.Function) {\n                                // @property functions\n                                documentation = getFunctionDocStringFromDeclaration(primaryDecl, this._sourceMapper);\n                            }\n\n                            if (this._format === MarkupKind.Markdown) {\n                                let markdownString = '```python\\n' + typeDetail + '\\n```\\n';\n\n                                if (documentation) {\n                                    markdownString += '---\\n';\n                                    markdownString += convertDocStringToMarkdown(documentation);\n                                }\n\n                                this._itemToResolve.documentation = {\n                                    kind: MarkupKind.Markdown,\n                                    value: markdownString,\n                                };\n                            } else if (this._format === MarkupKind.PlainText) {\n                                let plainTextString = typeDetail + '\\n';\n\n                                if (documentation) {\n                                    plainTextString += '\\n';\n                                    plainTextString += convertDocStringToPlainText(documentation);\n                                }\n\n                                this._itemToResolve.documentation = {\n                                    kind: MarkupKind.PlainText,\n                                    value: plainTextString,\n                                };\n                            } else {\n                                fail(`Unsupported markup type: ${this._format}`);\n                            }\n                        }\n                    }\n                }\n            }\n\n            let autoImportText: string | undefined;\n            if (autoImportSource) {\n                if (this._format === MarkupKind.Markdown) {\n                    autoImportText = `\\`\\`\\`\\nfrom ${autoImportSource} import ${name}\\n\\`\\`\\``;\n                } else if (this._format === MarkupKind.PlainText) {\n                    autoImportText = `from ${autoImportSource} import ${name}`;\n                } else {\n                    fail(`Unsupported markup type: ${this._format}`);\n                }\n            }\n\n            this._addNameToCompletionList(\n                name,\n                itemKind,\n                priorWord,\n                completionList,\n                undefined,\n                undefined,\n                autoImportText,\n                textEdit,\n                additionalTextEdits\n            );\n        } else {\n            // Does the symbol have no declaration but instead has a synthesized type?\n            const synthesizedType = symbol.getSynthesizedType();\n            if (synthesizedType) {\n                const itemKind: CompletionItemKind = CompletionItemKind.Variable;\n                this._addNameToCompletionList(\n                    name,\n                    itemKind,\n                    priorWord,\n                    completionList,\n                    undefined,\n                    undefined,\n                    undefined,\n                    textEdit,\n                    additionalTextEdits\n                );\n            }\n        }\n    }\n\n    private _addNameToCompletionList(\n        name: string,\n        itemKind: CompletionItemKind,\n        filter: string,\n        completionList: CompletionList,\n        typeDetail?: string,\n        documentation?: string,\n        autoImportText?: string,\n        textEdit?: TextEdit,\n        additionalTextEdits?: TextEditAction[]\n    ) {\n        const similarity = StringUtils.computeCompletionSimilarity(filter, name);\n\n        if (similarity > similarityLimit) {\n            const completionItem = CompletionItem.create(name);\n            completionItem.kind = itemKind;\n\n            const completionItemData: CompletionItemData = {\n                workspacePath: this._workspacePath,\n                filePath: this._filePath,\n                position: this._position,\n            };\n            completionItem.data = completionItemData;\n\n            if (autoImportText) {\n                // Force auto-import entries to the end.\n                completionItem.sortText = this._makeSortText(SortCategory.AutoImport, name, autoImportText);\n                completionItemData.autoImportText = autoImportText;\n                completionItem.detail = 'Auto-import';\n            } else if (SymbolNameUtils.isDunderName(name)) {\n                // Force dunder-named symbols to appear after all other symbols.\n                completionItem.sortText = this._makeSortText(SortCategory.DunderSymbol, name);\n            } else if (filter === '' && SymbolNameUtils.isPrivateOrProtectedName(name)) {\n                // Distinguish between normal and private symbols only if there is\n                // currently no filter text. Once we get a single character to filter\n                // upon, we'll no longer differentiate.\n                completionItem.sortText = this._makeSortText(SortCategory.PrivateSymbol, name);\n            } else {\n                completionItem.sortText = this._makeSortText(SortCategory.NormalSymbol, name);\n            }\n\n            completionItemData.symbolLabel = name;\n\n            if (this._format === MarkupKind.Markdown) {\n                let markdownString = '';\n\n                if (autoImportText) {\n                    markdownString += autoImportText + '\\n\\n';\n                }\n\n                if (typeDetail) {\n                    markdownString += '```python\\n' + typeDetail + '\\n```\\n';\n                }\n\n                if (documentation) {\n                    markdownString += '---\\n';\n                    markdownString += convertDocStringToMarkdown(documentation);\n                }\n\n                markdownString = markdownString.trimEnd();\n\n                if (markdownString) {\n                    completionItem.documentation = {\n                        kind: MarkupKind.Markdown,\n                        value: markdownString,\n                    };\n                }\n            } else if (this._format === MarkupKind.PlainText) {\n                let plainTextString = '';\n\n                if (autoImportText) {\n                    plainTextString += autoImportText + '\\n\\n';\n                }\n\n                if (typeDetail) {\n                    plainTextString += typeDetail + '\\n';\n                }\n\n                if (documentation) {\n                    plainTextString += '\\n' + convertDocStringToPlainText(documentation);\n                }\n\n                plainTextString = plainTextString.trimEnd();\n\n                if (plainTextString) {\n                    completionItem.documentation = {\n                        kind: MarkupKind.PlainText,\n                        value: plainTextString,\n                    };\n                }\n            } else {\n                fail(`Unsupported markup type: ${this._format}`);\n            }\n\n            if (textEdit) {\n                completionItem.textEdit = textEdit;\n            }\n\n            if (additionalTextEdits) {\n                completionItem.additionalTextEdits = additionalTextEdits.map((te) => {\n                    const textEdit: TextEdit = {\n                        range: {\n                            start: { line: te.range.start.line, character: te.range.start.character },\n                            end: { line: te.range.end.line, character: te.range.end.character },\n                        },\n                        newText: te.replacementText,\n                    };\n                    return textEdit;\n                });\n            }\n\n            completionList.items.push(completionItem);\n        }\n    }\n\n    private _getRecentListIndex(name: string, autoImportText: string) {\n        return CompletionProvider._mostRecentCompletions.findIndex(\n            (item) => item.label === name && item.autoImportText === autoImportText\n        );\n    }\n\n    private _makeSortText(sortCategory: SortCategory, name: string, autoImportText = ''): string {\n        const recentListIndex = this._getRecentListIndex(name, autoImportText);\n\n        // If the label is in the recent list, modify the category\n        // so it appears higher in our list.\n        if (recentListIndex >= 0) {\n            if (sortCategory === SortCategory.AutoImport) {\n                sortCategory = SortCategory.RecentAutoImport;\n            } else if (sortCategory === SortCategory.ImportModuleName) {\n                sortCategory = SortCategory.RecentImportModuleName;\n            } else if (\n                sortCategory === SortCategory.Keyword ||\n                sortCategory === SortCategory.NormalSymbol ||\n                sortCategory === SortCategory.PrivateSymbol ||\n                sortCategory === SortCategory.DunderSymbol\n            ) {\n                sortCategory = SortCategory.RecentKeywordOrSymbol;\n            }\n        }\n\n        // Generate a sort string of the format\n        //    XX.YYYY.name\n        // where XX is the sort category\n        // and YYYY is the index of the item in the MRU list\n        return this._formatInteger(sortCategory, 2) + '.' + this._formatInteger(recentListIndex, 4) + '.' + name;\n    }\n\n    private _formatInteger(val: number, digits: number): string {\n        const charCodeZero = '0'.charCodeAt(0);\n\n        let result = '';\n        for (let i = 0; i < digits; i++) {\n            // Prepend the next digit.\n            let digit = Math.floor(val % 10);\n            if (digit < 0) {\n                digit = 9;\n            }\n            result = String.fromCharCode(digit + charCodeZero) + result;\n            val = Math.floor(val / 10);\n        }\n\n        return result;\n    }\n\n    private _convertDeclarationTypeToItemKind(declaration: Declaration): CompletionItemKind {\n        const resolvedDeclaration = this._evaluator.resolveAliasDeclaration(declaration, /* resolveLocalNames */ true);\n        if (!resolvedDeclaration) {\n            return CompletionItemKind.Variable;\n        }\n\n        switch (resolvedDeclaration.type) {\n            case DeclarationType.Intrinsic:\n                return resolvedDeclaration.intrinsicType === 'class'\n                    ? CompletionItemKind.Class\n                    : CompletionItemKind.Variable;\n\n            case DeclarationType.Parameter:\n                return CompletionItemKind.Variable;\n\n            case DeclarationType.Variable:\n                return resolvedDeclaration.isConstant || resolvedDeclaration.isFinal\n                    ? CompletionItemKind.Constant\n                    : CompletionItemKind.Variable;\n\n            case DeclarationType.Function: {\n                if (this._isPossiblePropertyDeclaration(resolvedDeclaration)) {\n                    const functionType = this._evaluator.getTypeOfFunction(resolvedDeclaration.node);\n                    if (functionType && isProperty(functionType.decoratedType)) {\n                        return CompletionItemKind.Property;\n                    }\n                }\n                return resolvedDeclaration.isMethod ? CompletionItemKind.Method : CompletionItemKind.Function;\n            }\n\n            case DeclarationType.Class:\n            case DeclarationType.SpecialBuiltInClass:\n                return CompletionItemKind.Class;\n\n            case DeclarationType.Alias:\n                return CompletionItemKind.Module;\n        }\n    }\n\n    private _getImportModuleCompletions(node: ModuleNameNode): CompletionResults {\n        const execEnvironment = this._configOptions.findExecEnvironment(this._filePath);\n        const moduleDescriptor: ImportedModuleDescriptor = {\n            leadingDots: node.leadingDots,\n            hasTrailingDot: node.hasTrailingDot,\n            nameParts: node.nameParts.map((part) => part.value),\n            importedSymbols: [],\n        };\n\n        const completions = this._importResolver.getCompletionSuggestions(\n            this._filePath,\n            execEnvironment,\n            moduleDescriptor,\n            similarityLimit\n        );\n\n        const completionList = CompletionList.create();\n\n        // If we're in the middle of a \"from X import Y\" statement, offer\n        // the \"import\" keyword as a completion.\n        if (\n            !node.hasTrailingDot &&\n            node.parent &&\n            node.parent.nodeType === ParseNodeType.ImportFrom &&\n            node.parent.missingImportKeyword\n        ) {\n            const keyword = 'import';\n            const completionItem = CompletionItem.create(keyword);\n            completionItem.kind = CompletionItemKind.Keyword;\n            completionList.items.push(completionItem);\n            completionItem.sortText = this._makeSortText(SortCategory.Keyword, keyword);\n        }\n\n        completions.forEach((completionName) => {\n            const completionItem = CompletionItem.create(completionName);\n            completionItem.kind = CompletionItemKind.Module;\n            completionList.items.push(completionItem);\n            completionItem.sortText = this._makeSortText(SortCategory.ImportModuleName, completionName);\n        });\n\n        return { completionList };\n    }\n\n    private _isPossiblePropertyDeclaration(decl: FunctionDeclaration) {\n        // Do cheap check using only nodes that will cover 99.9% cases\n        // before doing more expensive type evaluation.\n        return decl.isMethod && decl.node.decorators.length > 0;\n    }\n}\n","/*\n * definitionProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that maps a position within a Python program file into\n * a \"definition\" of the item that is referred to at that position.\n * For example, if the location is within an import name, the\n * definition is the top of the resolved import file.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { isStubFile, SourceMapper } from '../analyzer/sourceMapper';\nimport { TypeEvaluator } from '../analyzer/typeEvaluator';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { convertPositionToOffset } from '../common/positionUtils';\nimport { DocumentRange, Position, rangesAreEqual } from '../common/textRange';\nimport { ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\n\nexport class DefinitionProvider {\n    static getDefinitionsForPosition(\n        sourceMapper: SourceMapper,\n        parseResults: ParseResults,\n        position: Position,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): DocumentRange[] | undefined {\n        throwIfCancellationRequested(token);\n\n        const offset = convertPositionToOffset(position, parseResults.tokenizerOutput.lines);\n        if (offset === undefined) {\n            return undefined;\n        }\n\n        const node = ParseTreeUtils.findNodeByOffset(parseResults.parseTree, offset);\n        if (node === undefined) {\n            return undefined;\n        }\n\n        const definitions: DocumentRange[] = [];\n\n        if (node.nodeType === ParseNodeType.Name) {\n            const declarations = evaluator.getDeclarationsForNameNode(node);\n            if (declarations) {\n                declarations.forEach((decl) => {\n                    const resolvedDecl = evaluator.resolveAliasDeclaration(decl, /* resolveLocalNames */ true);\n                    if (resolvedDecl && resolvedDecl.path) {\n                        this._addIfUnique(definitions, {\n                            path: resolvedDecl.path,\n                            range: resolvedDecl.range,\n                        });\n\n                        if (isStubFile(resolvedDecl.path)) {\n                            const implDecls = sourceMapper.findDeclarations(resolvedDecl);\n                            for (const implDecl of implDecls) {\n                                if (implDecl && implDecl.path) {\n                                    this._addIfUnique(definitions, {\n                                        path: implDecl.path,\n                                        range: implDecl.range,\n                                    });\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n        }\n\n        return definitions.length > 0 ? definitions : undefined;\n    }\n\n    private static _addIfUnique(definitions: DocumentRange[], itemToAdd: DocumentRange) {\n        for (const def of definitions) {\n            if (def.path === itemToAdd.path && rangesAreEqual(def.range, itemToAdd.range)) {\n                return;\n            }\n        }\n\n        definitions.push(itemToAdd);\n    }\n}\n","/*\n * documentHighlightProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that maps a position within a Python program file into\n * one or more highlight types.\n */\n\nimport { CancellationToken, DocumentHighlight, DocumentHighlightKind } from 'vscode-languageserver';\n\nimport { isCodeUnreachable } from '../analyzer/analyzerNodeInfo';\nimport { Declaration } from '../analyzer/declaration';\nimport { areDeclarationsSame } from '../analyzer/declarationUtils';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { ParseTreeWalker } from '../analyzer/parseTreeWalker';\nimport { TypeEvaluator } from '../analyzer/typeEvaluator';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { convertOffsetToPosition, convertPositionToOffset } from '../common/positionUtils';\nimport { Position, TextRange } from '../common/textRange';\nimport { ModuleNameNode, NameNode, ParseNode, ParseNodeType, StringNode } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\n\n// This walker looks for symbols that are semantically equivalent\n// to the requested symbol.\nclass HighlightSymbolTreeWalker extends ParseTreeWalker {\n    constructor(\n        private _symbolName: string,\n        private _declarations: Declaration[],\n        private _parseResults: ParseResults,\n        private _highlightResults: DocumentHighlight[],\n        private _evaluator: TypeEvaluator,\n        private _cancellationToken: CancellationToken\n    ) {\n        super();\n    }\n\n    findHighlights() {\n        this.walk(this._parseResults.parseTree);\n    }\n\n    walk(node: ParseNode) {\n        if (!isCodeUnreachable(node)) {\n            super.walk(node);\n        }\n    }\n\n    visitModuleName(node: ModuleNameNode): boolean {\n        // Don't ever look for references within a module name.\n        return false;\n    }\n\n    visitName(node: NameNode): boolean {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        // No need to do any more work if the symbol name doesn't match.\n        if (node.value !== this._symbolName) {\n            return false;\n        }\n\n        if (this._declarations.length > 0) {\n            const declarations = this._evaluator.getDeclarationsForNameNode(node);\n\n            if (declarations && declarations.length > 0) {\n                // Does this name share a declaration with the symbol of interest?\n                if (declarations.some((decl) => this._resultsContainsDeclaration(decl))) {\n                    this._addResult(node);\n                }\n            }\n        } else {\n            // There were no declarations\n            this._addResult(node);\n        }\n\n        return true;\n    }\n\n    private _addResult(node: NameNode) {\n        this._highlightResults.push({\n            kind: this._isWriteAccess(node) ? DocumentHighlightKind.Write : DocumentHighlightKind.Read,\n            range: {\n                start: convertOffsetToPosition(node.start, this._parseResults.tokenizerOutput.lines),\n                end: convertOffsetToPosition(TextRange.getEnd(node), this._parseResults.tokenizerOutput.lines),\n            },\n        });\n    }\n\n    private _isWriteAccess(node: NameNode) {\n        let prevNode: ParseNode = node;\n        let curNode: ParseNode | undefined = prevNode.parent;\n\n        while (curNode) {\n            switch (curNode.nodeType) {\n                case ParseNodeType.Assignment: {\n                    return prevNode === curNode.leftExpression;\n                }\n\n                case ParseNodeType.AugmentedAssignment: {\n                    return prevNode === curNode.leftExpression;\n                }\n\n                case ParseNodeType.AssignmentExpression: {\n                    return prevNode === curNode.name;\n                }\n\n                case ParseNodeType.Del: {\n                    return true;\n                }\n\n                case ParseNodeType.For: {\n                    return prevNode === curNode.targetExpression;\n                }\n\n                case ParseNodeType.ImportAs: {\n                    return (\n                        prevNode === curNode.alias ||\n                        (curNode.module.nameParts.length > 0 && prevNode === curNode.module.nameParts[0])\n                    );\n                }\n\n                case ParseNodeType.ImportFromAs: {\n                    return prevNode === curNode.alias || (!curNode.alias && prevNode === curNode.name);\n                }\n\n                case ParseNodeType.MemberAccess: {\n                    if (prevNode !== curNode.memberName) {\n                        return false;\n                    }\n                    break;\n                }\n\n                case ParseNodeType.Except: {\n                    return prevNode === curNode.name;\n                }\n\n                case ParseNodeType.With: {\n                    return curNode.withItems.some((item) => item === prevNode);\n                }\n\n                case ParseNodeType.ListComprehensionFor: {\n                    return prevNode === curNode.targetExpression;\n                }\n\n                case ParseNodeType.TypeAnnotation: {\n                    if (prevNode === curNode.typeAnnotation) {\n                        return false;\n                    }\n                    break;\n                }\n\n                case ParseNodeType.Function:\n                case ParseNodeType.Class:\n                case ParseNodeType.Module: {\n                    return false;\n                }\n            }\n\n            prevNode = curNode;\n            curNode = curNode.parent;\n        }\n\n        return false;\n    }\n\n    private _resultsContainsDeclaration(declaration: Declaration) {\n        // Resolve the declaration.\n        const resolvedDecl = this._evaluator.resolveAliasDeclaration(declaration, /* resolveLocalNames */ false);\n        if (!resolvedDecl) {\n            return false;\n        }\n\n        // The reference results declarations are already resolved, so we don't\n        // need to call resolveAliasDeclaration on them.\n        if (this._declarations.some((decl) => areDeclarationsSame(decl, resolvedDecl))) {\n            return true;\n        }\n\n        // We didn't find the declaration using local-only alias resolution. Attempt\n        // it again by fully resolving the alias.\n        const resolvedDeclNonlocal = this._evaluator.resolveAliasDeclaration(\n            resolvedDecl,\n            /* resolveLocalNames */ true\n        );\n        if (!resolvedDeclNonlocal || resolvedDeclNonlocal === resolvedDecl) {\n            return false;\n        }\n\n        return this._declarations.some((decl) => areDeclarationsSame(decl, resolvedDeclNonlocal));\n    }\n}\n\n// This walker looks for strings that are equivalent\n// to the requested string.\nclass HighlightStringTreeWalker extends ParseTreeWalker {\n    constructor(\n        private _stringValue: string,\n        private _parseResults: ParseResults,\n        private _highlightResults: DocumentHighlight[],\n        private _cancellationToken: CancellationToken\n    ) {\n        super();\n    }\n\n    findHighlights() {\n        this.walk(this._parseResults.parseTree);\n    }\n\n    walk(node: ParseNode) {\n        if (!isCodeUnreachable(node)) {\n            super.walk(node);\n        }\n    }\n\n    visitString(node: StringNode): boolean {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        // Compare the unescaped values.\n        if (node.value !== this._stringValue) {\n            return false;\n        }\n\n        this._highlightResults.push({\n            kind: DocumentHighlightKind.Text,\n            range: {\n                start: convertOffsetToPosition(node.start, this._parseResults.tokenizerOutput.lines),\n                end: convertOffsetToPosition(TextRange.getEnd(node), this._parseResults.tokenizerOutput.lines),\n            },\n        });\n\n        return true;\n    }\n}\n\nexport class DocumentHighlightProvider {\n    static getDocumentHighlight(\n        parseResults: ParseResults,\n        position: Position,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): DocumentHighlight[] | undefined {\n        throwIfCancellationRequested(token);\n\n        const offset = convertPositionToOffset(position, parseResults.tokenizerOutput.lines);\n        if (offset === undefined) {\n            return undefined;\n        }\n\n        const node = ParseTreeUtils.findNodeByOffset(parseResults.parseTree, offset);\n        if (node === undefined) {\n            return undefined;\n        }\n\n        const results: DocumentHighlight[] = [];\n\n        if (node.nodeType === ParseNodeType.Name) {\n            const declarations = evaluator.getDeclarationsForNameNode(node) || [];\n\n            const resolvedDeclarations: Declaration[] = [];\n            declarations.forEach((decl) => {\n                const resolvedDecl = evaluator.resolveAliasDeclaration(decl, true);\n                if (resolvedDecl) {\n                    resolvedDeclarations.push(resolvedDecl);\n                }\n            });\n\n            const walker = new HighlightSymbolTreeWalker(\n                node.value,\n                resolvedDeclarations,\n                parseResults,\n                results,\n                evaluator,\n                token\n            );\n            walker.findHighlights();\n        } else if (node.nodeType === ParseNodeType.String) {\n            // User feedback indicates that most users don't want string literals\n            // to be highlighted through the document highlight provider, so we\n            // will disable this.\n            // const walker = new HighlightStringTreeWalker(node.value, parseResults, results, token);\n            // walker.findHighlights();\n        }\n\n        return results.length > 0 ? results : undefined;\n    }\n}\n","/*\n * documentSymbolProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that enumerates all of the symbols within a specified\n * source file document.\n */\n\nimport { CancellationToken, DocumentSymbol, Location, SymbolInformation, SymbolKind } from 'vscode-languageserver';\nimport { URI } from 'vscode-uri';\n\nimport { resolveAliasDeclaration } from '../analyzer/aliasDeclarationUtils';\nimport { ImportLookup } from '../analyzer/analyzerFileInfo';\nimport * as AnalyzerNodeInfo from '../analyzer/analyzerNodeInfo';\nimport { AliasDeclaration, Declaration, DeclarationType } from '../analyzer/declaration';\nimport { getNameFromDeclaration } from '../analyzer/declarationUtils';\nimport { getLastTypedDeclaredForSymbol } from '../analyzer/symbolUtils';\nimport { TypeEvaluator } from '../analyzer/typeEvaluator';\nimport { isProperty } from '../analyzer/typeUtils';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { getLibraryPathWithoutExtension } from '../common/pathUtils';\nimport { convertOffsetsToRange } from '../common/positionUtils';\nimport * as StringUtils from '../common/stringUtils';\nimport { Range } from '../common/textRange';\nimport { ModuleNode, ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\n\nexport interface IndexAliasData {\n    readonly originalName: string;\n    readonly modulePath: string;\n    readonly kind: SymbolKind;\n}\n\nexport interface IndexSymbolData {\n    readonly name: string;\n    readonly externallyVisible: boolean;\n    readonly kind: SymbolKind;\n    readonly alias?: IndexAliasData;\n    readonly range?: Range;\n    readonly selectionRange?: Range;\n    readonly children?: IndexSymbolData[];\n}\n\nexport interface IndexResults {\n    readonly privateOrProtected: boolean;\n    readonly symbols: IndexSymbolData[];\n}\n\nexport interface IndexOptions {\n    indexingForAutoImportMode: boolean;\n}\n\nexport type WorkspaceSymbolCallback = (symbols: SymbolInformation[]) => void;\n\nexport function includeAliasDeclarationInIndex(\n    importLookup: ImportLookup,\n    modulePath: string,\n    declaration: AliasDeclaration\n): boolean {\n    const aliasUsed = declaration.usesLocalName && !!declaration.symbolName && declaration.path.length > 0;\n    const wildcardUsed = declaration.node.nodeType === ParseNodeType.ImportFrom && declaration.node.isWildcardImport;\n    if (!aliasUsed && !wildcardUsed) {\n        return false;\n    }\n\n    // Make sure imported symbol is a submodule of same package.\n    if (!getLibraryPathWithoutExtension(declaration.path).startsWith(modulePath)) {\n        return false;\n    }\n\n    if (wildcardUsed) {\n        // if \"import *\" is used, resolve the alias to see whether we should include it.\n        const resolved = resolveAliasDeclaration(importLookup, declaration, true);\n        if (!resolved) {\n            return false;\n        }\n\n        if (!getLibraryPathWithoutExtension(resolved.path).startsWith(modulePath)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function getIndexAliasData(\n    importLookup: ImportLookup,\n    declaration: AliasDeclaration\n): IndexAliasData | undefined {\n    if (!declaration.symbolName) {\n        return undefined;\n    }\n\n    const resolved = resolveAliasDeclaration(importLookup, declaration, true);\n    const nameValue = resolved ? getNameFromDeclaration(resolved) : undefined;\n    if (!nameValue || resolved!.path.length <= 0) {\n        return undefined;\n    }\n\n    return {\n        originalName: nameValue,\n        modulePath: resolved!.path,\n        kind: getSymbolKind(nameValue, resolved!) ?? SymbolKind.Module,\n    };\n}\n\nexport function convertToFlatSymbols(documentUri: string, symbolList: DocumentSymbol[]): SymbolInformation[] {\n    const flatSymbols: SymbolInformation[] = [];\n\n    for (const symbol of symbolList) {\n        appendToFlatSymbolsRecursive(flatSymbols, documentUri, symbol);\n    }\n\n    return flatSymbols;\n}\n\n// We'll use a somewhat-arbitrary cutoff value here to determine\n// whether it's sufficiently similar.\nconst similarityLimit = 0.5;\n\nexport class DocumentSymbolProvider {\n    static getSymbolsForDocument(\n        indexResults: IndexResults | undefined,\n        parseResults: ParseResults | undefined,\n        filePath: string,\n        query: string,\n        token: CancellationToken\n    ): SymbolInformation[] {\n        const symbolList: SymbolInformation[] = [];\n\n        if (!indexResults && !parseResults) {\n            return symbolList;\n        }\n\n        const indexSymbolData =\n            (indexResults?.symbols as IndexSymbolData[]) ??\n            DocumentSymbolProvider.indexSymbols(parseResults!, { indexingForAutoImportMode: false }, token);\n\n        appendWorkspaceSymbolsRecursive(indexSymbolData, filePath, query, '', symbolList, token);\n        return symbolList;\n    }\n\n    static addHierarchicalSymbolsForDocument(\n        indexResults: IndexResults | undefined,\n        parseResults: ParseResults | undefined,\n        symbolList: DocumentSymbol[],\n        token: CancellationToken\n    ) {\n        if (!indexResults && !parseResults) {\n            return;\n        }\n\n        const indexSymbolData =\n            (indexResults?.symbols as IndexSymbolData[]) ??\n            DocumentSymbolProvider.indexSymbols(parseResults!, { indexingForAutoImportMode: false }, token);\n        appendDocumentSymbolsRecursive(indexSymbolData, symbolList, token);\n    }\n\n    static indexSymbols(\n        parseResults: ParseResults,\n        options: IndexOptions,\n        token: CancellationToken\n    ): IndexSymbolData[] {\n        const indexSymbolData: IndexSymbolData[] = [];\n        collectSymbolIndexData(parseResults, parseResults.parseTree, options, indexSymbolData, token);\n\n        return indexSymbolData;\n    }\n}\n\nfunction getSymbolKind(name: string, declaration: Declaration, evaluator?: TypeEvaluator): SymbolKind | undefined {\n    let symbolKind: SymbolKind;\n    switch (declaration.type) {\n        case DeclarationType.Class:\n        case DeclarationType.SpecialBuiltInClass:\n            symbolKind = SymbolKind.Class;\n            break;\n\n        case DeclarationType.Function:\n            if (declaration.isMethod) {\n                const declType = evaluator?.getTypeForDeclaration(declaration);\n                if (declType && isProperty(declType)) {\n                    symbolKind = SymbolKind.Property;\n                } else {\n                    symbolKind = SymbolKind.Method;\n                }\n            } else {\n                symbolKind = SymbolKind.Function;\n            }\n            break;\n\n        case DeclarationType.Alias:\n            symbolKind = SymbolKind.Module;\n            break;\n\n        case DeclarationType.Parameter:\n            if (name === 'self' || name === 'cls' || name === '_') {\n                return;\n            }\n            symbolKind = SymbolKind.Variable;\n            break;\n\n        case DeclarationType.Variable:\n            if (name === '_') {\n                return;\n            }\n            symbolKind = declaration.isConstant || declaration.isFinal ? SymbolKind.Constant : SymbolKind.Variable;\n            break;\n\n        default:\n            symbolKind = SymbolKind.Variable;\n            break;\n    }\n\n    return symbolKind;\n}\n\nfunction appendWorkspaceSymbolsRecursive(\n    indexSymbolData: IndexSymbolData[] | undefined,\n    filePath: string,\n    query: string,\n    container: string,\n    symbolList: SymbolInformation[],\n    token: CancellationToken\n) {\n    throwIfCancellationRequested(token);\n\n    if (!indexSymbolData) {\n        return;\n    }\n\n    for (const symbolData of indexSymbolData) {\n        if (symbolData.alias) {\n            continue;\n        }\n\n        const similarity = StringUtils.computeCompletionSimilarity(query, symbolData.name);\n        if (similarity >= similarityLimit) {\n            const location: Location = {\n                uri: URI.file(filePath).toString(),\n                range: symbolData.selectionRange!,\n            };\n\n            const symbolInfo: SymbolInformation = {\n                name: symbolData.name,\n                kind: symbolData.kind,\n                containerName: container.length > 0 ? container : undefined,\n                location,\n            };\n\n            symbolList.push(symbolInfo);\n        }\n\n        appendWorkspaceSymbolsRecursive(\n            symbolData.children,\n            filePath,\n            query,\n            getContainerName(container, symbolData.name),\n            symbolList,\n            token\n        );\n    }\n\n    function getContainerName(container: string, name: string) {\n        if (container.length > 0) {\n            return `${container}.${name}`;\n        }\n\n        return name;\n    }\n}\n\nfunction appendDocumentSymbolsRecursive(\n    indexSymbolData: IndexSymbolData[] | undefined,\n    symbolList: DocumentSymbol[],\n    token: CancellationToken\n) {\n    throwIfCancellationRequested(token);\n\n    if (!indexSymbolData) {\n        return;\n    }\n\n    for (const symbolData of indexSymbolData) {\n        if (symbolData.alias) {\n            continue;\n        }\n\n        const children: DocumentSymbol[] = [];\n        appendDocumentSymbolsRecursive(symbolData.children, children, token);\n\n        const symbolInfo: DocumentSymbol = {\n            name: symbolData.name,\n            kind: symbolData.kind,\n            range: symbolData.range!,\n            selectionRange: symbolData.selectionRange!,\n            children: children!,\n        };\n\n        symbolList.push(symbolInfo);\n    }\n}\n\nfunction getAllNameTable(autoImportMode: boolean, root: ModuleNode) {\n    if (!autoImportMode) {\n        // We only care about __all__ in auto import mode.\n        // other cases such as workspace symbols, document symbols, we will collect all symbols\n        // regardless whether it shows up in __all__ or not.\n        return undefined;\n    }\n\n    // If __all__ is defined, we only care ones in the __all__\n    const allNames = AnalyzerNodeInfo.getDunderAllNames(root);\n    if (allNames) {\n        return new Set<string>(allNames);\n    }\n\n    const file = AnalyzerNodeInfo.getFileInfo(root);\n    if (file && file.isStubFile) {\n        return undefined;\n    }\n\n    return new Set<string>();\n}\n\nfunction collectSymbolIndexData(\n    parseResults: ParseResults,\n    node: AnalyzerNodeInfo.ScopedNode,\n    options: IndexOptions,\n    indexSymbolData: IndexSymbolData[],\n    token: CancellationToken\n) {\n    throwIfCancellationRequested(token);\n\n    const scope = AnalyzerNodeInfo.getScope(node);\n    if (!scope) {\n        return;\n    }\n\n    const allNameTable = getAllNameTable(options.indexingForAutoImportMode, parseResults.parseTree);\n\n    let modulePath: string | undefined = undefined;\n    const symbolTable = scope.symbolTable;\n    symbolTable.forEach((symbol, name) => {\n        if (symbol.isIgnoredForProtocolMatch()) {\n            return;\n        }\n\n        if (allNameTable && !allNameTable.has(name)) {\n            // if allNameTable exists, then name must exist in the table.\n            return;\n        }\n\n        // Prefer declarations with a defined type.\n        let declaration = getLastTypedDeclaredForSymbol(symbol);\n\n        // Fall back to declarations without a type.\n        if (!declaration && symbol.hasDeclarations()) {\n            declaration = symbol.getDeclarations()[0];\n        }\n\n        if (!declaration) {\n            return;\n        }\n\n        if (DeclarationType.Alias === declaration.type) {\n            if (!options.indexingForAutoImportMode) {\n                // We don't include import alias for workspace files.\n                return;\n            }\n\n            if (declaration.path.length <= 0) {\n                return;\n            }\n\n            const lookup = AnalyzerNodeInfo.getFileInfo(parseResults.parseTree)!.importLookup;\n            modulePath =\n                modulePath ??\n                getLibraryPathWithoutExtension(AnalyzerNodeInfo.getFileInfo(parseResults.parseTree)!.filePath);\n\n            if (!allNameTable && !includeAliasDeclarationInIndex(lookup, modulePath, declaration)) {\n                // For import alias, we only put the alias in the index if it is the form of\n                // \"from x import y as z\" or the alias is explicitly listed in __all__\n                return;\n            }\n        }\n\n        collectSymbolIndexDataForName(\n            parseResults,\n            declaration,\n            options,\n            !symbol.isExternallyHidden(),\n            name,\n            indexSymbolData,\n            token\n        );\n    });\n}\n\nfunction collectSymbolIndexDataForName(\n    parseResults: ParseResults,\n    declaration: Declaration,\n    options: IndexOptions,\n    externallyVisible: boolean,\n    name: string,\n    indexSymbolData: IndexSymbolData[],\n    token: CancellationToken\n) {\n    if (options.indexingForAutoImportMode && !externallyVisible) {\n        return;\n    }\n\n    const symbolKind = getSymbolKind(name, declaration);\n    if (symbolKind === undefined) {\n        return;\n    }\n\n    const selectionRange = declaration.range;\n    let range = selectionRange;\n    const children: IndexSymbolData[] = [];\n\n    if (declaration.type === DeclarationType.Class || declaration.type === DeclarationType.Function) {\n        if (!options.indexingForAutoImportMode) {\n            collectSymbolIndexData(parseResults, declaration.node, options, children, token);\n        }\n\n        range = convertOffsetsToRange(\n            declaration.node.start,\n            declaration.node.name.start + declaration.node.length,\n            parseResults.tokenizerOutput.lines\n        );\n    }\n\n    const data: IndexSymbolData = {\n        name,\n        externallyVisible,\n        kind: symbolKind,\n        alias:\n            DeclarationType.Alias === declaration.type\n                ? getIndexAliasData(AnalyzerNodeInfo.getFileInfo(parseResults.parseTree)!.importLookup, declaration)\n                : undefined,\n        range: options.indexingForAutoImportMode ? undefined : range,\n        selectionRange: options.indexingForAutoImportMode ? undefined : selectionRange,\n        children: options.indexingForAutoImportMode ? undefined : children,\n    };\n\n    indexSymbolData.push(data);\n}\n\nfunction appendToFlatSymbolsRecursive(\n    flatSymbols: SymbolInformation[],\n    documentUri: string,\n    symbol: DocumentSymbol,\n    parent?: DocumentSymbol\n) {\n    const flatSymbol: SymbolInformation = {\n        name: symbol.name,\n        kind: symbol.kind,\n        location: Location.create(documentUri, symbol.range),\n        tags: symbol.tags,\n        containerName: parent?.name,\n    };\n\n    flatSymbols.push(flatSymbol);\n\n    if (symbol.children) {\n        for (const child of symbol.children) {\n            appendToFlatSymbolsRecursive(flatSymbols, documentUri, child, symbol);\n        }\n    }\n}\n","/*\n * hoverProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that maps a position within a Python program file into\n * markdown text that is displayed when the user hovers over that\n * position within a smart editor.\n */\n\nimport { CancellationToken, Hover, MarkupKind } from 'vscode-languageserver';\n\nimport { Declaration, DeclarationBase, DeclarationType, FunctionDeclaration } from '../analyzer/declaration';\nimport { convertDocStringToMarkdown, convertDocStringToPlainText } from '../analyzer/docStringConversion';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { SourceMapper } from '../analyzer/sourceMapper';\nimport {\n    getClassDocString,\n    getFunctionDocStringFromDeclaration,\n    getFunctionDocStringFromType,\n    getModuleDocString,\n    getOverloadedFunctionDocStrings,\n} from '../analyzer/typeDocStringUtils';\nimport { TypeEvaluator } from '../analyzer/typeEvaluator';\nimport {\n    getTypeAliasInfo,\n    isClass,\n    isModule,\n    isObject,\n    Type,\n    TypeBase,\n    TypeCategory,\n    UnknownType,\n} from '../analyzer/types';\nimport { ClassMemberLookupFlags, isProperty, lookUpClassMember } from '../analyzer/typeUtils';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { fail } from '../common/debug';\nimport { convertOffsetToPosition, convertPositionToOffset } from '../common/positionUtils';\nimport { Position, Range } from '../common/textRange';\nimport { TextRange } from '../common/textRange';\nimport { NameNode, ParseNode, ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\n\nexport interface HoverTextPart {\n    python?: boolean;\n    text: string;\n}\n\nexport interface HoverResults {\n    parts: HoverTextPart[];\n    range: Range;\n}\n\nexport class HoverProvider {\n    static getHoverForPosition(\n        sourceMapper: SourceMapper,\n        parseResults: ParseResults,\n        position: Position,\n        format: MarkupKind,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): HoverResults | undefined {\n        throwIfCancellationRequested(token);\n\n        const offset = convertPositionToOffset(position, parseResults.tokenizerOutput.lines);\n        if (offset === undefined) {\n            return undefined;\n        }\n\n        const node = ParseTreeUtils.findNodeByOffset(parseResults.parseTree, offset);\n        if (node === undefined) {\n            return undefined;\n        }\n\n        const results: HoverResults = {\n            parts: [],\n            range: {\n                start: convertOffsetToPosition(node.start, parseResults.tokenizerOutput.lines),\n                end: convertOffsetToPosition(TextRange.getEnd(node), parseResults.tokenizerOutput.lines),\n            },\n        };\n\n        if (node.nodeType === ParseNodeType.Name) {\n            const declarations = evaluator.getDeclarationsForNameNode(node);\n            if (declarations && declarations.length > 0) {\n                this._addResultsForDeclaration(format, sourceMapper, results.parts, declarations[0], node, evaluator);\n            } else if (!node.parent || node.parent.nodeType !== ParseNodeType.ModuleName) {\n                // If we had no declaration, see if we can provide a minimal tooltip. We'll skip\n                // this if it's part of a module name, since a module name part with no declaration\n                // is a directory (a namespace package), and we don't want to provide any hover\n                // information in that case.\n                if (results.parts.length === 0) {\n                    const type = evaluator.getType(node) || UnknownType.create();\n\n                    let typeText = '';\n                    if (isModule(type)) {\n                        // Handle modules specially because submodules aren't associated with\n                        // declarations, but we want them to be presented in the same way as\n                        // the top-level module, which does have a declaration.\n                        typeText = '(module) ' + node.value;\n                    } else {\n                        typeText = node.value + ': ' + evaluator.printType(type, /* expandTypeAlias */ false);\n                    }\n\n                    this._addResultsPart(results.parts, typeText, true);\n                    this._addDocumentationPart(format, sourceMapper, results.parts, node, evaluator, undefined);\n                }\n            }\n        }\n\n        return results.parts.length > 0 ? results : undefined;\n    }\n\n    private static _addResultsForDeclaration(\n        format: MarkupKind,\n        sourceMapper: SourceMapper,\n        parts: HoverTextPart[],\n        declaration: Declaration,\n        node: NameNode,\n        evaluator: TypeEvaluator\n    ): void {\n        const resolvedDecl = evaluator.resolveAliasDeclaration(declaration, /* resolveLocalNames */ true);\n        if (!resolvedDecl) {\n            this._addResultsPart(parts, `(import) ` + node.value + this._getTypeText(node, evaluator), true);\n            return;\n        }\n\n        switch (resolvedDecl.type) {\n            case DeclarationType.Intrinsic: {\n                this._addResultsPart(parts, node.value + this._getTypeText(node, evaluator), true);\n                this._addDocumentationPart(format, sourceMapper, parts, node, evaluator, resolvedDecl);\n                break;\n            }\n\n            case DeclarationType.Variable: {\n                let label = resolvedDecl.isConstant || resolvedDecl.isFinal ? 'constant' : 'variable';\n\n                // If the named node is an aliased import symbol, we can't call\n                // getType on the original name because it's not in the symbol\n                // table. Instead, use the node from the resolved alias.\n                let typeNode = node;\n                if (\n                    declaration.node.nodeType === ParseNodeType.ImportAs ||\n                    declaration.node.nodeType === ParseNodeType.ImportFromAs\n                ) {\n                    if (declaration.node.alias && node !== declaration.node.alias) {\n                        if (resolvedDecl.node.nodeType === ParseNodeType.Name) {\n                            typeNode = resolvedDecl.node;\n                        }\n                    }\n                } else if (node.parent?.nodeType === ParseNodeType.Argument && node.parent.name === node) {\n                    // If this is a named argument, we would normally have received a Parameter declaration\n                    // rather than a variable declaration, but we can get here in the case of a dataclass.\n                    // Replace the typeNode with the node of the variable declaration.\n                    if (declaration.node.nodeType === ParseNodeType.Name) {\n                        typeNode = declaration.node;\n                    }\n                }\n\n                // Determine if this identifier is a type alias. If so, expand\n                // the type alias when printing the type information.\n                const type = evaluator.getType(typeNode);\n                let expandTypeAlias = false;\n                if (type && TypeBase.isInstantiable(type)) {\n                    const typeAliasInfo = getTypeAliasInfo(type);\n                    if (typeAliasInfo) {\n                        if (typeAliasInfo.aliasName === typeNode.value) {\n                            expandTypeAlias = true;\n                        }\n\n                        label = 'type alias';\n                    }\n                }\n\n                this._addResultsPart(\n                    parts,\n                    `(${label}) ` + node.value + this._getTypeText(typeNode, evaluator, expandTypeAlias),\n                    true\n                );\n                this._addDocumentationPart(format, sourceMapper, parts, node, evaluator, resolvedDecl);\n                break;\n            }\n\n            case DeclarationType.Parameter: {\n                this._addResultsPart(parts, '(parameter) ' + node.value + this._getTypeText(node, evaluator), true);\n                this._addDocumentationPart(format, sourceMapper, parts, node, evaluator, resolvedDecl);\n                break;\n            }\n\n            case DeclarationType.Class:\n            case DeclarationType.SpecialBuiltInClass: {\n                if (this._addInitMethodInsteadIfCallNode(format, node, evaluator, parts, sourceMapper, resolvedDecl)) {\n                    return;\n                }\n\n                this._addResultsPart(parts, '(class) ' + node.value, true);\n                this._addDocumentationPart(format, sourceMapper, parts, node, evaluator, resolvedDecl);\n                break;\n            }\n\n            case DeclarationType.Function: {\n                let label = 'function';\n                if (resolvedDecl.isMethod) {\n                    const declaredType = evaluator.getTypeForDeclaration(resolvedDecl);\n                    label = declaredType && isProperty(declaredType) ? 'property' : 'method';\n                }\n\n                this._addResultsPart(parts, `(${label}) ` + node.value + this._getTypeText(node, evaluator), true);\n                this._addDocumentationPart(format, sourceMapper, parts, node, evaluator, resolvedDecl);\n                break;\n            }\n\n            case DeclarationType.Alias: {\n                this._addResultsPart(parts, '(module) ' + node.value, true);\n                this._addDocumentationPart(format, sourceMapper, parts, node, evaluator, resolvedDecl);\n                break;\n            }\n        }\n    }\n\n    private static _addInitMethodInsteadIfCallNode(\n        format: MarkupKind,\n        node: NameNode,\n        evaluator: TypeEvaluator,\n        parts: HoverTextPart[],\n        sourceMapper: SourceMapper,\n        declaration: Declaration\n    ) {\n        // If the class is used as part of a call (i.e. it is being\n        // instantiated), include the constructor arguments within the\n        // hover text.\n        let callLeftNode: ParseNode | undefined = node;\n\n        // Allow the left to be a member access chain (e.g. a.b.c) if the\n        // node in question is the last item in the chain.\n        if (\n            callLeftNode.parent &&\n            callLeftNode.parent.nodeType === ParseNodeType.MemberAccess &&\n            node === callLeftNode.parent.memberName\n        ) {\n            callLeftNode = node.parent;\n        }\n\n        if (\n            !callLeftNode ||\n            !callLeftNode.parent ||\n            callLeftNode.parent.nodeType !== ParseNodeType.Call ||\n            callLeftNode.parent.leftExpression !== callLeftNode\n        ) {\n            return false;\n        }\n\n        // Get the init method for this class.\n        const classType = evaluator.getType(node);\n        if (!classType || !isClass(classType)) {\n            return false;\n        }\n\n        const initMethodMember = lookUpClassMember(\n            classType,\n            '__init__',\n            ClassMemberLookupFlags.SkipInstanceVariables | ClassMemberLookupFlags.SkipObjectBaseClass\n        );\n\n        if (!initMethodMember) {\n            return false;\n        }\n\n        const instanceType = evaluator.getType(callLeftNode.parent);\n        const functionType = evaluator.getTypeOfMember(initMethodMember);\n\n        if (!instanceType || !functionType || !isObject(instanceType)) {\n            return false;\n        }\n\n        const initMethodType = evaluator.bindFunctionToClassOrObject(instanceType, functionType, false);\n\n        if (!initMethodType || initMethodType.category !== TypeCategory.Function) {\n            return false;\n        }\n\n        const functionParts = evaluator.printFunctionParts(initMethodType);\n        const classText = `${node.value}(${functionParts[0].join(', ')})`;\n\n        this._addResultsPart(parts, '(class) ' + classText, true);\n        const addedDoc = this._addDocumentationPartForType(format, sourceMapper, parts, initMethodType, declaration);\n        if (!addedDoc) {\n            this._addDocumentationPartForType(format, sourceMapper, parts, classType, declaration);\n        }\n        return true;\n    }\n\n    private static _getTypeText(node: NameNode, evaluator: TypeEvaluator, expandTypeAlias = false): string {\n        const type = evaluator.getType(node) || UnknownType.create();\n        return ': ' + evaluator.printType(type, expandTypeAlias);\n    }\n\n    private static _addDocumentationPart(\n        format: MarkupKind,\n        sourceMapper: SourceMapper,\n        parts: HoverTextPart[],\n        node: NameNode,\n        evaluator: TypeEvaluator,\n        resolvedDecl: DeclarationBase | undefined\n    ) {\n        const type = evaluator.getType(node);\n        if (type) {\n            this._addDocumentationPartForType(format, sourceMapper, parts, type, resolvedDecl);\n        }\n    }\n\n    private static _addDocumentationPartForType(\n        format: MarkupKind,\n        sourceMapper: SourceMapper,\n        parts: HoverTextPart[],\n        type: Type,\n        resolvedDecl: DeclarationBase | undefined\n    ): boolean {\n        const docStrings: (string | undefined)[] = [];\n\n        if (isModule(type)) {\n            docStrings.push(getModuleDocString(type, resolvedDecl, sourceMapper));\n        } else if (isClass(type)) {\n            docStrings.push(getClassDocString(type, resolvedDecl, sourceMapper));\n        } else if (type.category === TypeCategory.Function) {\n            docStrings.push(getFunctionDocStringFromType(type, sourceMapper));\n        } else if (type.category === TypeCategory.OverloadedFunction) {\n            docStrings.push(...getOverloadedFunctionDocStrings(type, resolvedDecl, sourceMapper));\n        } else if (resolvedDecl?.type === DeclarationType.Function) {\n            // @property functions\n            docStrings.push(getFunctionDocStringFromDeclaration(resolvedDecl as FunctionDeclaration, sourceMapper));\n        }\n\n        let addedDoc = false;\n        for (const docString of docStrings) {\n            if (docString) {\n                addedDoc = true;\n                this._addDocumentationResultsPart(format, parts, docString);\n            }\n        }\n\n        return addedDoc;\n    }\n\n    private static _addDocumentationResultsPart(format: MarkupKind, parts: HoverTextPart[], docString?: string) {\n        if (docString) {\n            if (format === MarkupKind.Markdown) {\n                this._addResultsPart(parts, convertDocStringToMarkdown(docString));\n            } else if (format === MarkupKind.PlainText) {\n                this._addResultsPart(parts, convertDocStringToPlainText(docString));\n            } else {\n                fail(`Unsupported markup type: ${format}`);\n            }\n        }\n    }\n\n    private static _addResultsPart(parts: HoverTextPart[], text: string, python = false) {\n        parts.push({\n            python,\n            text,\n        });\n    }\n}\n\nexport function convertHoverResults(format: MarkupKind, hoverResults: HoverResults | undefined): Hover | undefined {\n    if (!hoverResults) {\n        return undefined;\n    }\n\n    const markupString = hoverResults.parts\n        .map((part) => {\n            if (part.python) {\n                if (format === MarkupKind.Markdown) {\n                    return '```python\\n' + part.text + '\\n```\\n';\n                } else if (format === MarkupKind.PlainText) {\n                    return part.text + '\\n\\n';\n                } else {\n                    fail(`Unsupported markup type: ${format}`);\n                }\n            }\n            return part.text;\n        })\n        .join('');\n\n    return {\n        contents: {\n            kind: format,\n            value: markupString,\n        },\n        range: hoverResults.range,\n    };\n}\n","/*\n * importSorter.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Provides code that sorts and formats import statements within a\n * python source file.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport {\n    compareImportStatements,\n    getImportGroup,\n    getTopLevelImports,\n    ImportStatement,\n} from '../analyzer/importStatementUtils';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { TextEditAction } from '../common/editAction';\nimport { convertOffsetToPosition } from '../common/positionUtils';\nimport { Range } from '../common/textRange';\nimport { TextRange } from '../common/textRange';\nimport { ImportAsNode, ImportFromAsNode, ImportFromNode, ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\n\n// We choose a line length that matches the default for the popular\n// \"black\" formatter used in many Python projects.\nconst _maxLineLength = 88;\n\nexport class ImportSorter {\n    constructor(private _parseResults: ParseResults, private _cancellationToken: CancellationToken) {}\n\n    sort(): TextEditAction[] {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        const actions: TextEditAction[] = [];\n        const importStatements = getTopLevelImports(this._parseResults.parseTree);\n\n        const sortedStatements = importStatements.orderedImports\n            .map((s) => s)\n            .sort((a, b) => {\n                return compareImportStatements(a, b);\n            });\n\n        if (sortedStatements.length === 0) {\n            // Nothing to do.\n            return [];\n        }\n\n        const primaryRange = this._getPrimaryReplacementRange(importStatements.orderedImports);\n\n        actions.push({\n            range: primaryRange,\n            replacementText: this._generateSortedImportText(sortedStatements),\n        });\n\n        this._addSecondaryReplacementRanges(importStatements.orderedImports, actions);\n\n        return actions;\n    }\n\n    // Determines the text range for the existing primary block of import statements.\n    // If there are other blocks of import statements separated by other statements,\n    // we'll ignore these other blocks for now.\n    private _getPrimaryReplacementRange(statements: ImportStatement[]): Range {\n        let statementLimit = statements.findIndex((s) => s.followsNonImportStatement);\n        if (statementLimit < 0) {\n            statementLimit = statements.length;\n        }\n\n        const lastStatement = statements[statementLimit - 1].node;\n        return {\n            start: convertOffsetToPosition(statements[0].node.start, this._parseResults.tokenizerOutput.lines),\n            end: convertOffsetToPosition(TextRange.getEnd(lastStatement), this._parseResults.tokenizerOutput.lines),\n        };\n    }\n\n    // If import statements are separated by other statements, we will remove the old\n    // secondary blocks.\n    private _addSecondaryReplacementRanges(statements: ImportStatement[], actions: TextEditAction[]) {\n        let secondaryBlockStart = statements.findIndex((s) => s.followsNonImportStatement);\n        if (secondaryBlockStart < 0) {\n            return;\n        }\n\n        while (true) {\n            let secondaryBlockLimit = statements.findIndex(\n                (s, index) => index > secondaryBlockStart && s.followsNonImportStatement\n            );\n            if (secondaryBlockLimit < 0) {\n                secondaryBlockLimit = statements.length;\n            }\n\n            actions.push({\n                range: {\n                    start: convertOffsetToPosition(\n                        statements[secondaryBlockStart].node.start,\n                        this._parseResults.tokenizerOutput.lines\n                    ),\n                    end: convertOffsetToPosition(\n                        TextRange.getEnd(statements[secondaryBlockLimit - 1].node),\n                        this._parseResults.tokenizerOutput.lines\n                    ),\n                },\n                replacementText: '',\n            });\n\n            secondaryBlockStart = secondaryBlockLimit;\n            if (secondaryBlockStart >= statements.length) {\n                break;\n            }\n        }\n    }\n\n    private _generateSortedImportText(sortedStatements: ImportStatement[]): string {\n        let importText = '';\n        let prevImportGroup = getImportGroup(sortedStatements[0]);\n\n        for (const statement of sortedStatements) {\n            // Insert a blank space between import type groups.\n            const curImportType = getImportGroup(statement);\n            if (prevImportGroup !== curImportType) {\n                importText += this._parseResults.tokenizerOutput.predominantEndOfLineSequence;\n                prevImportGroup = curImportType;\n            }\n\n            let importLine: string;\n            if (statement.node.nodeType === ParseNodeType.Import) {\n                importLine = this._formatImportNode(statement.subnode!, statement.moduleName);\n            } else {\n                importLine = this._formatImportFromNode(statement.node, statement.moduleName);\n            }\n\n            // If this isn't the last statement, add a newline.\n            if (statement !== sortedStatements[sortedStatements.length - 1]) {\n                importLine += this._parseResults.tokenizerOutput.predominantEndOfLineSequence;\n            }\n\n            importText += importLine;\n        }\n\n        return importText;\n    }\n\n    private _formatImportNode(subnode: ImportAsNode, moduleName: string): string {\n        let importText = `import ${moduleName}`;\n        if (subnode.alias) {\n            importText += ` as ${subnode.alias.value}`;\n        }\n\n        return importText;\n    }\n\n    private _formatImportFromNode(node: ImportFromNode, moduleName: string): string {\n        const symbols = node.imports\n            .sort((a, b) => this._compareSymbols(a, b))\n            .map((symbol) => {\n                let symbolText = symbol.name.value;\n                if (symbol.alias) {\n                    symbolText += ` as ${symbol.alias.value}`;\n                }\n\n                return symbolText;\n            });\n\n        let cumulativeText = `from ${moduleName} import `;\n        if (node.isWildcardImport) {\n            return cumulativeText + '*';\n        }\n\n        const symbolText = symbols.join(', ');\n        if (cumulativeText.length + symbolText.length <= _maxLineLength) {\n            return cumulativeText + symbolText;\n        }\n\n        // We need to split across multiple lines with parens.\n        cumulativeText += '(' + this._parseResults.tokenizerOutput.predominantEndOfLineSequence;\n\n        for (const symbol of symbols) {\n            cumulativeText +=\n                this._parseResults.tokenizerOutput.predominantTabSequence +\n                symbol +\n                ',' +\n                this._parseResults.tokenizerOutput.predominantEndOfLineSequence;\n        }\n\n        cumulativeText += ')';\n\n        return cumulativeText;\n    }\n\n    private _compareSymbols(a: ImportFromAsNode, b: ImportFromAsNode) {\n        return a.name.value < b.name.value ? -1 : 1;\n    }\n}\n","/*\n * quickActions.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Provides support for miscellaneous quick actions.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport {\n    getTextEditsForAutoImportInsertion,\n    getTextEditsForAutoImportSymbolAddition,\n    getTopLevelImports,\n    ImportGroup,\n} from '../analyzer/importStatementUtils';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { Commands } from '../commands/commands';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { TextEditAction } from '../common/editAction';\nimport { convertOffsetToPosition } from '../common/positionUtils';\nimport { TextRange } from '../common/textRange';\nimport { ParseNode, ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\nimport { ImportSorter } from './importSorter';\n\nexport function performQuickAction(command: string, args: any[], parseResults: ParseResults, token: CancellationToken) {\n    if (command === Commands.orderImports) {\n        const importSorter = new ImportSorter(parseResults, token);\n        return importSorter.sort();\n    } else if (command === Commands.addMissingOptionalToParam) {\n        if (args.length >= 1) {\n            const nodeOffset = parseInt(args[0], 10);\n            return _addMissingOptionalToParam(parseResults, nodeOffset, token);\n        }\n    }\n\n    return [];\n}\n\n// Inserts text into the document to wrap an existing type annotation\n// with \"Optional[X]\".\nfunction _addMissingOptionalToParam(\n    parseResults: ParseResults,\n    offset: number,\n    token: CancellationToken\n): TextEditAction[] {\n    throwIfCancellationRequested(token);\n\n    let node: ParseNode | undefined = ParseTreeUtils.findNodeByOffset(parseResults.parseTree, offset);\n    while (node) {\n        if (node.nodeType === ParseNodeType.Parameter) {\n            break;\n        }\n\n        node = node.parent;\n    }\n\n    if (!node) {\n        return [];\n    }\n\n    const typeAnnotation = node.typeAnnotation || node.typeAnnotationComment;\n    if (!typeAnnotation) {\n        return [];\n    }\n\n    const editActions: TextEditAction[] = [];\n\n    const startPos = convertOffsetToPosition(typeAnnotation.start, parseResults.tokenizerOutput.lines);\n    const endPos = convertOffsetToPosition(TextRange.getEnd(typeAnnotation), parseResults.tokenizerOutput.lines);\n\n    editActions.push({\n        range: { start: startPos, end: startPos },\n        replacementText: 'Optional[',\n    });\n    editActions.push({\n        range: { start: endPos, end: endPos },\n        replacementText: ']',\n    });\n\n    // Add the import statement if necessary.\n    const importStatements = getTopLevelImports(parseResults.parseTree);\n    const importStatement = importStatements.orderedImports.find((imp) => imp.moduleName === 'typing');\n\n    // If there's an existing import statement, insert into it.\n    if (importStatement && importStatement.node.nodeType === ParseNodeType.ImportFrom) {\n        const additionalEditActions = getTextEditsForAutoImportSymbolAddition(\n            'Optional',\n            importStatement,\n            parseResults\n        );\n        editActions.push(...additionalEditActions);\n    } else {\n        const additionalEditActions = getTextEditsForAutoImportInsertion(\n            'Optional',\n            importStatements,\n            'typing',\n            ImportGroup.BuiltIn,\n            parseResults,\n            startPos\n        );\n        editActions.push(...additionalEditActions);\n    }\n\n    return editActions;\n}\n","/*\n * referencesProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that finds all of the references to a symbol specified\n * by a location within a file.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport * as AnalyzerNodeInfo from '../analyzer/analyzerNodeInfo';\nimport { Declaration } from '../analyzer/declaration';\nimport * as DeclarationUtils from '../analyzer/declarationUtils';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { ParseTreeWalker } from '../analyzer/parseTreeWalker';\nimport { isStubFile, SourceMapper } from '../analyzer/sourceMapper';\nimport { TypeEvaluator } from '../analyzer/typeEvaluator';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { convertOffsetToPosition, convertPositionToOffset } from '../common/positionUtils';\nimport { DocumentRange, Position } from '../common/textRange';\nimport { TextRange } from '../common/textRange';\nimport { ModuleNameNode, NameNode, ParseNode, ParseNodeType } from '../parser/parseNodes';\nimport { ParseResults } from '../parser/parser';\n\nexport type ReferenceCallback = (locations: DocumentRange[]) => void;\n\nexport class ReferencesResult {\n    private readonly _locations: DocumentRange[] = [];\n\n    constructor(\n        readonly requiresGlobalSearch: boolean,\n        readonly nodeAtOffset: ParseNode,\n        readonly symbolName: string,\n        readonly declarations: Declaration[],\n        private readonly _reporter?: ReferenceCallback\n    ) {}\n\n    get locations(): readonly DocumentRange[] {\n        return this._locations;\n    }\n\n    addLocations(...locs: DocumentRange[]) {\n        if (locs.length === 0) {\n            return;\n        }\n\n        if (this._reporter) {\n            this._reporter(locs);\n        }\n\n        this._locations.push(...locs);\n    }\n}\n\nclass FindReferencesTreeWalker extends ParseTreeWalker {\n    private readonly _locationsFound: DocumentRange[] = [];\n\n    constructor(\n        private _parseResults: ParseResults,\n        private _filePath: string,\n        private _referencesResult: ReferencesResult,\n        private _includeDeclaration: boolean,\n        private _evaluator: TypeEvaluator,\n        private _cancellationToken: CancellationToken\n    ) {\n        super();\n    }\n\n    findReferences() {\n        this.walk(this._parseResults.parseTree);\n\n        return this._locationsFound;\n    }\n\n    walk(node: ParseNode) {\n        if (!AnalyzerNodeInfo.isCodeUnreachable(node)) {\n            super.walk(node);\n        }\n    }\n\n    visitModuleName(node: ModuleNameNode): boolean {\n        // Don't ever look for references within a module name.\n        return false;\n    }\n\n    visitName(node: NameNode): boolean {\n        throwIfCancellationRequested(this._cancellationToken);\n\n        // No need to do any more work if the symbol name doesn't match.\n        if (node.value !== this._referencesResult.symbolName) {\n            return false;\n        }\n\n        const declarations = this._evaluator.getDeclarationsForNameNode(node);\n\n        if (declarations && declarations.length > 0) {\n            // Does this name share a declaration with the symbol of interest?\n            if (declarations.some((decl) => this._resultsContainsDeclaration(decl))) {\n                // Is it the same symbol?\n                if (this._includeDeclaration || node !== this._referencesResult.nodeAtOffset) {\n                    this._locationsFound.push({\n                        path: this._filePath,\n                        range: {\n                            start: convertOffsetToPosition(node.start, this._parseResults.tokenizerOutput.lines),\n                            end: convertOffsetToPosition(\n                                TextRange.getEnd(node),\n                                this._parseResults.tokenizerOutput.lines\n                            ),\n                        },\n                    });\n                }\n            }\n        }\n\n        return true;\n    }\n\n    private _resultsContainsDeclaration(declaration: Declaration) {\n        // Resolve the declaration.\n        const resolvedDecl = this._evaluator.resolveAliasDeclaration(declaration, /* resolveLocalNames */ false);\n        if (!resolvedDecl) {\n            return false;\n        }\n\n        // The reference results declarations are already resolved, so we don't\n        // need to call resolveAliasDeclaration on them.\n        if (\n            this._referencesResult.declarations.some((decl) => DeclarationUtils.areDeclarationsSame(decl, resolvedDecl))\n        ) {\n            return true;\n        }\n\n        // We didn't find the declaration using local-only alias resolution. Attempt\n        // it again by fully resolving the alias.\n        const resolvedDeclNonlocal = this._evaluator.resolveAliasDeclaration(\n            resolvedDecl,\n            /* resolveLocalNames */ true\n        );\n        if (!resolvedDeclNonlocal || resolvedDeclNonlocal === resolvedDecl) {\n            return false;\n        }\n\n        return this._referencesResult.declarations.some((decl) =>\n            DeclarationUtils.areDeclarationsSame(decl, resolvedDeclNonlocal)\n        );\n    }\n}\n\nexport class ReferencesProvider {\n    static getDeclarationForPosition(\n        sourceMapper: SourceMapper,\n        parseResults: ParseResults,\n        filePath: string,\n        position: Position,\n        evaluator: TypeEvaluator,\n        reporter: ReferenceCallback | undefined,\n        token: CancellationToken\n    ): ReferencesResult | undefined {\n        throwIfCancellationRequested(token);\n\n        const offset = convertPositionToOffset(position, parseResults.tokenizerOutput.lines);\n        if (offset === undefined) {\n            return undefined;\n        }\n\n        const node = ParseTreeUtils.findNodeByOffset(parseResults.parseTree, offset);\n        if (node === undefined) {\n            return undefined;\n        }\n\n        // If this isn't a name node, there are no references to be found.\n        if (node.nodeType !== ParseNodeType.Name) {\n            return undefined;\n        }\n\n        // Special case module names, which don't have references.\n        if (node.parent?.nodeType === ParseNodeType.ModuleName) {\n            return undefined;\n        }\n\n        const declarations = evaluator.getDeclarationsForNameNode(node);\n        if (!declarations) {\n            return undefined;\n        }\n\n        const resolvedDeclarations: Declaration[] = [];\n        declarations.forEach((decl) => {\n            const resolvedDecl = evaluator.resolveAliasDeclaration(decl, /* resolveLocalNames */ false);\n            if (resolvedDecl) {\n                resolvedDeclarations.push(resolvedDecl);\n\n                if (isStubFile(resolvedDecl.path)) {\n                    const implDecls = sourceMapper.findDeclarations(resolvedDecl);\n                    for (const implDecl of implDecls) {\n                        if (implDecl && implDecl.path) {\n                            this._addIfUnique(resolvedDeclarations, implDecl);\n                        }\n                    }\n                }\n            }\n        });\n\n        if (resolvedDeclarations.length === 0) {\n            return undefined;\n        }\n\n        // Does this symbol require search beyond the current file? Determine whether\n        // the symbol is declared within an evaluation scope that is within the current\n        // file and cannot be imported directly from other modules.\n        const requiresGlobalSearch = resolvedDeclarations.some((decl) => {\n            // If the declaration is outside of this file, a global search is needed.\n            if (decl.path !== filePath) {\n                return true;\n            }\n\n            const evalScope = ParseTreeUtils.getEvaluationScopeNode(decl.node);\n\n            // If the declaration is at the module level or a class level, it can be seen\n            // outside of the current module, so a global search is needed.\n            if (evalScope.nodeType === ParseNodeType.Module || evalScope.nodeType === ParseNodeType.Class) {\n                return true;\n            }\n\n            // If the name node is a member variable, we need to do a global search.\n            if (\n                decl.node?.parent?.nodeType === ParseNodeType.MemberAccess &&\n                decl.node === decl.node.parent.memberName\n            ) {\n                return true;\n            }\n\n            return false;\n        });\n\n        return new ReferencesResult(requiresGlobalSearch, node, node.value, resolvedDeclarations, reporter);\n    }\n\n    private static _addIfUnique(declarations: Declaration[], itemToAdd: Declaration) {\n        for (const def of declarations) {\n            if (DeclarationUtils.areDeclarationsSame(def, itemToAdd)) {\n                return;\n            }\n        }\n\n        declarations.push(itemToAdd);\n    }\n\n    static addReferences(\n        parseResults: ParseResults,\n        filePath: string,\n        referencesResult: ReferencesResult,\n        includeDeclaration: boolean,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): void {\n        const refTreeWalker = new FindReferencesTreeWalker(\n            parseResults,\n            filePath,\n            referencesResult,\n            includeDeclaration,\n            evaluator,\n            token\n        );\n\n        referencesResult.addLocations(...refTreeWalker.findReferences());\n    }\n}\n","/*\n * signatureHelpProvider.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Logic that maps a position within a Python call node into info\n * that can be presented to the developer to help fill in the remaining\n * arguments for the call.\n */\n\nimport { CancellationToken } from 'vscode-languageserver';\n\nimport { extractParameterDocumentation } from '../analyzer/docStringUtils';\nimport * as ParseTreeUtils from '../analyzer/parseTreeUtils';\nimport { CallSignature, TypeEvaluator } from '../analyzer/typeEvaluator';\nimport { throwIfCancellationRequested } from '../common/cancellationUtils';\nimport { convertPositionToOffset } from '../common/positionUtils';\nimport { Position } from '../common/textRange';\nimport { ParseResults } from '../parser/parser';\n\nexport interface ParamInfo {\n    startOffset: number;\n    endOffset: number;\n    text: string;\n    documentation?: string;\n}\n\nexport interface SignatureInfo {\n    label: string;\n    documentation?: string;\n    parameters?: ParamInfo[];\n    activeParameter?: number;\n}\n\nexport interface SignatureHelpResults {\n    signatures: SignatureInfo[];\n    callHasParameters: boolean;\n}\n\nexport class SignatureHelpProvider {\n    static getSignatureHelpForPosition(\n        parseResults: ParseResults,\n        position: Position,\n        evaluator: TypeEvaluator,\n        token: CancellationToken\n    ): SignatureHelpResults | undefined {\n        throwIfCancellationRequested(token);\n\n        const offset = convertPositionToOffset(position, parseResults.tokenizerOutput.lines);\n        if (offset === undefined) {\n            return undefined;\n        }\n\n        let node = ParseTreeUtils.findNodeByOffset(parseResults.parseTree, offset);\n\n        // See if we can get to a \"better\" node by backing up a few columns.\n        // A \"better\" node is defined as one that's deeper than the current\n        // node.\n        const initialNode = node;\n        const initialDepth = node ? ParseTreeUtils.getNodeDepth(node) : 0;\n        let curOffset = offset;\n        while (curOffset >= 0) {\n            curOffset--;\n            const curNode = ParseTreeUtils.findNodeByOffset(parseResults.parseTree, curOffset);\n            if (curNode && curNode !== initialNode) {\n                if (ParseTreeUtils.getNodeDepth(curNode) > initialDepth) {\n                    node = curNode;\n                }\n                break;\n            }\n        }\n\n        if (node === undefined) {\n            return undefined;\n        }\n\n        const callSignatureInfo = evaluator.getCallSignatureInfo(node, offset, parseResults.tokenizerOutput.tokens);\n        if (!callSignatureInfo) {\n            return undefined;\n        }\n\n        const signatures = callSignatureInfo.signatures.map((sig) => this._makeSignature(sig, evaluator));\n        const callHasParameters = !!callSignatureInfo.callNode.arguments?.length;\n\n        return {\n            signatures,\n            callHasParameters,\n        };\n    }\n\n    private static _makeSignature(signature: CallSignature, evaluator: TypeEvaluator): SignatureInfo {\n        const functionType = signature.type;\n        const stringParts = evaluator.printFunctionParts(functionType);\n        const parameters: ParamInfo[] = [];\n        const functionDocString = functionType.details.docString;\n        let label = '(';\n\n        stringParts[0].forEach((paramString: string, paramIndex) => {\n            const paramName = functionType.details.parameters[paramIndex].name || '';\n            parameters.push({\n                startOffset: label.length,\n                endOffset: label.length + paramString.length,\n                text: paramString,\n                documentation: extractParameterDocumentation(functionDocString || '', paramName),\n            });\n\n            label += paramString;\n            if (paramIndex < stringParts[0].length - 1) {\n                label += ', ';\n            }\n        });\n\n        label += ') -> ' + stringParts[1];\n\n        let activeParameter: number | undefined;\n        if (signature.activeParam) {\n            activeParameter = functionType.details.parameters.indexOf(signature.activeParam);\n            if (activeParameter === -1) {\n                activeParameter = undefined;\n            }\n        }\n\n        const sigInfo: SignatureInfo = {\n            label,\n            parameters,\n            documentation: functionDocString,\n            activeParameter,\n        };\n\n        return sigInfo;\n    }\n}\n","/*\n * localize.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Code that localizes user-visible strings.\n */\n\nimport { fail } from '../common/debug';\n\nimport enUsStrings = require('./package.nls.en-us.json');\nimport deStrings = require('./package.nls.de.json');\nimport esStrings = require('./package.nls.es.json');\nimport frStrings = require('./package.nls.fr.json');\nimport jaStrings = require('./package.nls.ja.json');\nimport ruStrings = require('./package.nls.ru.json');\nimport zhCnStrings = require('./package.nls.zh-cn.json');\nimport zhTwStrings = require('./package.nls.zh-tw.json');\n\nexport class ParameterizedString<T extends {}> {\n    constructor(private _formatString: string) {}\n\n    format(params: T): string {\n        let str = this._formatString;\n        Object.keys(params).forEach((key) => {\n            str = str.replace(`{${key}}`, (params as any)[key].toString());\n        });\n        return str;\n    }\n\n    getFormatString() {\n        return this._formatString;\n    }\n}\n\nconst defaultLocale = 'en-us';\nconst stringMapsByLocale: { [locale: string]: any } = {\n    de: deStrings,\n    'en-us': enUsStrings,\n    es: esStrings,\n    fr: frStrings,\n    ja: jaStrings,\n    ru: ruStrings,\n    'zh-cn': zhCnStrings,\n    'zh-tw': zhTwStrings,\n};\n\ntype StringLookupMap = { [key: string]: string | StringLookupMap };\nlet localizedStrings: StringLookupMap | undefined = undefined;\nlet defaultStrings: StringLookupMap = {};\n\nfunction getRawString(key: string): string {\n    if (localizedStrings === undefined) {\n        localizedStrings = initialize();\n    }\n\n    const keyParts = key.split('.');\n\n    const str = getRawStringFromMap(localizedStrings, keyParts) || getRawStringFromMap(defaultStrings, keyParts);\n    if (str) {\n        return str;\n    }\n\n    fail(`Missing localized string for key \"${key}\"`);\n}\n\nfunction getRawStringFromMap(map: StringLookupMap, keyParts: string[]): string | undefined {\n    let curObj: any = map;\n\n    for (const keyPart of keyParts) {\n        if (!curObj[keyPart]) {\n            return undefined;\n        }\n\n        curObj = curObj[keyPart];\n    }\n\n    return curObj as string;\n}\n\nfunction initialize(): StringLookupMap {\n    defaultStrings = loadDefaultStrings();\n    const currentLocale = getLocaleFromEnv();\n    return loadStringsForLocale(currentLocale);\n}\n\nfunction getLocaleFromEnv() {\n    const env = process.env;\n\n    // Start with the VSCode environment variables.\n    const vscodeConfigString = env.VSCODE_NLS_CONFIG;\n    if (vscodeConfigString) {\n        try {\n            return JSON.parse(vscodeConfigString).locale;\n        } catch {\n            // Fall through\n        }\n    }\n\n    // See if there is a language env variable.\n    const localeString = env.LC_ALL || env.LC_MESSAGES || env.LANG || env.LANGUAGE;\n    if (localeString) {\n        // This string may contain a local followed by an encoding (e.g. \"en-us.UTF-8\").\n        const localeStringSplit = localeString.split('.');\n        if (localeStringSplit.length > 0 && localeStringSplit[0]) {\n            return localeStringSplit[0];\n        }\n    }\n\n    // Fall back to the default locale.\n    return defaultLocale;\n}\n\nfunction loadDefaultStrings(): StringLookupMap {\n    const defaultStrings = loadStringsFromJsonFile(defaultLocale);\n    if (defaultStrings) {\n        return defaultStrings;\n    }\n    console.error('Could not load default strings');\n    return {};\n}\n\nfunction loadStringsForLocale(locale: string): StringLookupMap {\n    if (locale === defaultLocale) {\n        // No need to load override if we're using the default.\n        return {};\n    }\n\n    let override = loadStringsFromJsonFile(locale);\n    if (override !== undefined) {\n        return override;\n    }\n\n    // If we couldn't find the requested locale, try to fall back on a more\n    // general version.\n    const localeSplit = locale.split('-');\n    if (localeSplit.length > 0 && localeSplit[0]) {\n        override = loadStringsFromJsonFile(localeSplit[0]);\n        if (override !== undefined) {\n            return override;\n        }\n    }\n\n    return {};\n}\n\nfunction loadStringsFromJsonFile(locale: string): StringLookupMap | undefined {\n    return stringMapsByLocale[locale];\n}\n\nexport namespace Localizer {\n    export namespace Diagnostic {\n        export const annotatedParamCountMismatch = () =>\n            new ParameterizedString<{ expected: number; received: number }>(\n                getRawString('Diagnostic.annotatedParamCountMismatch')\n            );\n        export const annotatedTypeArgMissing = () => getRawString('Diagnostic.annotatedTypeArgMissing');\n        export const annotationFormatString = () => getRawString('Diagnostic.annotationFormatString');\n        export const annotationNotSupported = () => getRawString('Diagnostic.annotationNotSupported');\n        export const annotationSpansStrings = () => getRawString('Diagnostic.annotationSpansStrings');\n        export const annotationStringEscape = () => getRawString('Diagnostic.annotationStringEscape');\n        export const annotationTripleQuote = () => getRawString('Diagnostic.annotationTripleQuote');\n        export const argAssignment = () =>\n            new ParameterizedString<{ argType: string; paramType: string }>(getRawString('Diagnostic.argAssignment'));\n        export const argAssignmentFunction = () =>\n            new ParameterizedString<{ argType: string; paramType: string; functionName: string }>(\n                getRawString('Diagnostic.argAssignmentFunction')\n            );\n        export const argAssignmentParam = () =>\n            new ParameterizedString<{ argType: string; paramType: string; paramName: string }>(\n                getRawString('Diagnostic.argAssignmentParam')\n            );\n        export const argAssignmentParamFunction = () =>\n            new ParameterizedString<{ argType: string; paramType: string; paramName: string; functionName: string }>(\n                getRawString('Diagnostic.argAssignmentParamFunction')\n            );\n        export const argMissingForParam = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.argMissingForParam'));\n        export const argMissingForParams = () =>\n            new ParameterizedString<{ names: string }>(getRawString('Diagnostic.argMissingForParams'));\n        export const argPositional = () => getRawString('Diagnostic.argPositional');\n        export const argPositionalExpectedCount = () =>\n            new ParameterizedString<{ expected: number }>(getRawString('Diagnostic.argPositionalExpectedCount'));\n        export const argPositionalExpectedOne = () => getRawString('Diagnostic.argPositionalExpectedOne');\n        export const argTypePartiallyUnknown = () => getRawString('Diagnostic.argTypePartiallyUnknown');\n        export const argTypeUnknown = () => getRawString('Diagnostic.argTypeUnknown');\n        export const assertAlwaysTrue = () => getRawString('Diagnostic.assertAlwaysTrue');\n        export const assignmentExprContext = () => getRawString('Diagnostic.assignmentExprContext');\n        export const assignmentExprComprehension = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.assignmentExprComprehension'));\n        export const assignmentInProtocol = () => getRawString('Diagnostic.assignmentInProtocol');\n        export const assignmentTargetExpr = () => getRawString('Diagnostic.assignmentTargetExpr');\n        export const awaitIllegal = () => getRawString('Diagnostic.awaitIllegal');\n        export const awaitNotInAsync = () => getRawString('Diagnostic.awaitNotInAsync');\n        export const backticksIllegal = () => getRawString('Diagnostic.backticksIllegal');\n        export const baseClassCircular = () => getRawString('Diagnostic.baseClassCircular');\n        export const baseClassInvalid = () => getRawString('Diagnostic.baseClassInvalid');\n        export const baseClassFinal = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.baseClassFinal'));\n        export const baseClassUnknown = () => getRawString('Diagnostic.baseClassUnknown');\n        export const bindTypeMismatch = () =>\n            new ParameterizedString<{ type: string; methodName: string; paramName: string }>(\n                getRawString('Diagnostic.bindTypeMismatch')\n            );\n        export const breakOutsideLoop = () => getRawString('Diagnostic.breakOutsideLoop');\n        export const callableExtraArgs = () => getRawString('Diagnostic.callableExtraArgs');\n        export const callableFirstArg = () => getRawString('Diagnostic.callableFirstArg');\n        export const classMethodClsParam = () => getRawString('Diagnostic.classMethodClsParam');\n        export const classNotRuntimeSubscriptable = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.classNotRuntimeSubscriptable'));\n        export const classDecoratorTypeUnknown = () => getRawString('Diagnostic.classDecoratorTypeUnknown');\n        export const classGetItemClsParam = () => getRawString('Diagnostic.classGetItemClsParam');\n        export const classVarFirstArgMissing = () => getRawString('Diagnostic.classVarFirstArgMissing');\n        export const classVarTooManyArgs = () => getRawString('Diagnostic.classVarTooManyArgs');\n        export const comprehensionInDict = () => getRawString('Diagnostic.comprehensionInDict');\n        export const comprehensionInSet = () => getRawString('Diagnostic.comprehensionInSet');\n        export const concatenateParamSpecMissing = () => getRawString('Diagnostic.concatenateParamSpecMissing');\n        export const concatenateTypeArgsMissing = () => getRawString('Diagnostic.concatenateTypeArgsMissing');\n        export const constantRedefinition = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.constantRedefinition'));\n        export const constructorNoArgs = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.constructorNoArgs'));\n        export const continueInFinally = () => getRawString('Diagnostic.continueInFinally');\n        export const continueOutsideLoop = () => getRawString('Diagnostic.continueOutsideLoop');\n        export const dataClassFieldWithDefault = () => getRawString('Diagnostic.dataClassFieldWithDefault');\n        export const declaredReturnTypePartiallyUnknown = () =>\n            new ParameterizedString<{ returnType: string }>(\n                getRawString('Diagnostic.declaredReturnTypePartiallyUnknown')\n            );\n        export const declaredReturnTypeUnknown = () => getRawString('Diagnostic.declaredReturnTypeUnknown');\n        export const defaultValueContainsCall = () => getRawString('Diagnostic.defaultValueContainsCall');\n        export const defaultValueNotAllowed = () => getRawString('Diagnostic.defaultValueNotAllowed');\n        export const defaultValueNotEllipsis = () => getRawString('Diagnostic.defaultValueNotEllipsis');\n        export const dictInAnnotation = () => getRawString('Diagnostic.dictInAnnotation');\n        export const dictKeyValuePairs = () => getRawString('Diagnostic.dictKeyValuePairs');\n        export const dictUnpackIsNotMapping = () => getRawString('Diagnostic.dictUnpackIsNotMapping');\n        export const delTargetExpr = () => getRawString('Diagnostic.delTargetExpr');\n        export const dictExpandIllegalInComprehension = () =>\n            getRawString('Diagnostic.dictExpandIllegalInComprehension');\n        export const duplicateArgsParam = () => getRawString('Diagnostic.duplicateArgsParam');\n        export const duplicateBaseClass = () => getRawString('Diagnostic.duplicateBaseClass');\n        export const duplicateCatchAll = () => getRawString('Diagnostic.duplicateCatchAll');\n        export const duplicateImport = () =>\n            new ParameterizedString<{ importName: string }>(getRawString('Diagnostic.duplicateImport'));\n        export const duplicateKwargsParam = () => getRawString('Diagnostic.duplicateKwargsParam');\n        export const duplicateNameOnly = () => getRawString('Diagnostic.duplicateNameOnly');\n        export const duplicateParam = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.duplicateParam'));\n        export const duplicatePositionOnly = () => getRawString('Diagnostic.duplicatePositionOnly');\n        export const duplicateUnpack = () => getRawString('Diagnostic.duplicateUnpack');\n        export const ellipsisContext = () => getRawString('Diagnostic.ellipsisContext');\n        export const ellipsisSecondArg = () => getRawString('Diagnostic.ellipsisSecondArg');\n        export const exceptionTypeIncorrect = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.exceptionTypeIncorrect'));\n        export const exceptionTypeNotClass = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.exceptionTypeNotClass'));\n        export const exceptionTypeNotInstantiable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.exceptionTypeNotInstantiable'));\n        export const expectedAfterDecorator = () => getRawString('Diagnostic.expectedAfterDecorator');\n        export const expectedArrow = () => getRawString('Diagnostic.expectedArrow');\n        export const expectedAsAfterException = () => getRawString('Diagnostic.expectedAsAfterException');\n        export const expectedAssignRightHandExpr = () => getRawString('Diagnostic.expectedAssignRightHandExpr');\n        export const expectedBinaryRightHandExpr = () => getRawString('Diagnostic.expectedBinaryRightHandExpr');\n        export const expectedBoolLiteral = () => getRawString('Diagnostic.expectedBoolLiteral');\n        export const expectedClassName = () => getRawString('Diagnostic.expectedClassName');\n        export const expectedCloseBracket = () => getRawString('Diagnostic.expectedCloseBracket');\n        export const expectedCloseBrace = () => getRawString('Diagnostic.expectedCloseBrace');\n        export const expectedCloseParen = () => getRawString('Diagnostic.expectedCloseParen');\n        export const expectedColon = () => getRawString('Diagnostic.expectedColon');\n        export const expectedDecoratorExpr = () => getRawString('Diagnostic.expectedDecoratorExpr');\n        export const expectedDecoratorName = () => getRawString('Diagnostic.expectedDecoratorName');\n        export const expectedDecoratorNewline = () => getRawString('Diagnostic.expectedDecoratorNewline');\n        export const expectedDelExpr = () => getRawString('Diagnostic.expectedDelExpr');\n        export const expectedElse = () => getRawString('Diagnostic.expectedElse');\n        export const expectedExceptionClass = () => getRawString('Diagnostic.expectedExceptionClass');\n        export const expectedExceptionObj = () => getRawString('Diagnostic.expectedExceptionObj');\n        export const expectedExpr = () => getRawString('Diagnostic.expectedExpr');\n        export const expectedImport = () => getRawString('Diagnostic.expectedImport');\n        export const expectedImportAlias = () => getRawString('Diagnostic.expectedImportAlias');\n        export const expectedImportSymbols = () => getRawString('Diagnostic.expectedImportSymbols');\n        export const expectedIdentifier = () => getRawString('Diagnostic.expectedIdentifier');\n        export const expectedIndentedBlock = () => getRawString('Diagnostic.expectedIndentedBlock');\n        export const expectedIn = () => getRawString('Diagnostic.expectedIn');\n        export const expectedInExpr = () => getRawString('Diagnostic.expectedInExpr');\n        export const expectedFunctionAfterAsync = () => getRawString('Diagnostic.expectedFunctionAfterAsync');\n        export const expectedFunctionName = () => getRawString('Diagnostic.expectedFunctionName');\n        export const expectedMemberName = () => getRawString('Diagnostic.expectedMemberName');\n        export const expectedModuleName = () => getRawString('Diagnostic.expectedModuleName');\n        export const expectedNameAfterAs = () => getRawString('Diagnostic.expectedNameAfterAs');\n        export const expectedNamedArgument = () => getRawString('Diagnostic.expectedNamedArgument');\n        export const expectedNewlineOrSemicolon = () => getRawString('Diagnostic.expectedNewlineOrSemicolon');\n        export const expectedOpenParen = () => getRawString('Diagnostic.expectedOpenParen');\n        export const expectedParamName = () => getRawString('Diagnostic.expectedParamName');\n        export const expectedReturnExpr = () => getRawString('Diagnostic.expectedReturnExpr');\n        export const expectedSliceIndex = () => getRawString('Diagnostic.expectedSliceIndex');\n        export const expectedTypeNotString = () => getRawString('Diagnostic.expectedTypeNotString');\n        export const expectedYieldExpr = () => getRawString('Diagnostic.expectedYieldExpr');\n        export const finalContext = () => getRawString('Diagnostic.finalContext');\n        export const finalMethodOverride = () =>\n            new ParameterizedString<{ name: string; className: string }>(\n                getRawString('Diagnostic.finalMethodOverride')\n            );\n        export const finalReassigned = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.finalReassigned'));\n        export const finalRedeclaration = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.finalRedeclaration'));\n        export const finalRedeclarationBySubclass = () =>\n            new ParameterizedString<{ name: string; className: string }>(\n                getRawString('Diagnostic.finalRedeclarationBySubclass')\n            );\n        export const finalTooManyArgs = () => getRawString('Diagnostic.finalTooManyArgs');\n        export const finalUnassigned = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.finalUnassigned'));\n        export const formatStringBrace = () => getRawString('Diagnostic.formatStringBrace');\n        export const formatStringBytes = () => getRawString('Diagnostic.formatStringBytes');\n        export const formatStringEscape = () => getRawString('Diagnostic.formatStringEscape');\n        export const formatStringIllegal = () => getRawString('Diagnostic.formatStringIllegal');\n        export const formatStringUnicode = () => getRawString('Diagnostic.formatStringUnicode');\n        export const formatStringUnterminated = () => getRawString('Diagnostic.formatStringUnterminated');\n        export const functionDecoratorTypeUnknown = () => getRawString('Diagnostic.functionDecoratorTypeUnknown');\n        export const genericClassAssigned = () => getRawString('Diagnostic.genericClassAssigned');\n        export const genericClassDeleted = () => getRawString('Diagnostic.genericClassDeleted');\n        export const genericNotAllowed = () => getRawString('Diagnostic.genericNotAllowed');\n        export const genericTypeArgMissing = () => getRawString('Diagnostic.genericTypeArgMissing');\n        export const genericTypeArgTypeVar = () => getRawString('Diagnostic.genericTypeArgTypeVar');\n        export const genericTypeArgUnique = () => getRawString('Diagnostic.genericTypeArgUnique');\n        export const globalReassignment = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.globalReassignment'));\n        export const globalRedefinition = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.globalRedefinition'));\n        export const implicitStringConcat = () => getRawString('Diagnostic.implicitStringConcat');\n        export const importCycleDetected = () => getRawString('Diagnostic.importCycleDetected');\n        export const importDepthExceeded = () =>\n            new ParameterizedString<{ depth: number }>(getRawString('Diagnostic.importDepthExceeded'));\n        export const importResolveFailure = () =>\n            new ParameterizedString<{ importName: string }>(getRawString('Diagnostic.importResolveFailure'));\n        export const importSourceResolveFailure = () =>\n            new ParameterizedString<{ importName: string }>(getRawString('Diagnostic.importSourceResolveFailure'));\n        export const importSymbolUnknown = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.importSymbolUnknown'));\n        export const incompatibleMethodOverride = () =>\n            new ParameterizedString<{ name: string; className: string }>(\n                getRawString('Diagnostic.incompatibleMethodOverride')\n            );\n        export const inconsistentIndent = () => getRawString('Diagnostic.inconsistentIndent');\n        export const inconsistentTabs = () => getRawString('Diagnostic.inconsistentTabs');\n        export const initSubclassClsParam = () => getRawString('Diagnostic.initSubclassClsParam');\n        export const instanceMethodSelfParam = () => getRawString('Diagnostic.instanceMethodSelfParam');\n        export const internalBindError = () =>\n            new ParameterizedString<{ file: string; message: string }>(getRawString('Diagnostic.internalBindError'));\n        export const internalParseError = () =>\n            new ParameterizedString<{ file: string; message: string }>(getRawString('Diagnostic.internalParseError'));\n        export const internalTypeCheckingError = () =>\n            new ParameterizedString<{ file: string; message: string }>(\n                getRawString('Diagnostic.internalTypeCheckingError')\n            );\n        export const invalidIdentifierChar = () => getRawString('Diagnostic.invalidIdentifierChar');\n        export const invalidStubStatement = () => getRawString('Diagnostic.invalidStubStatement');\n        export const invalidTokenChars = () =>\n            new ParameterizedString<{ text: string }>(getRawString('Diagnostic.invalidTokenChars'));\n        export const isInstanceInvalidType = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.isInstanceInvalidType'));\n        export const isSubclassInvalidType = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.isSubclassInvalidType'));\n        export const keyRequiredDeleted = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.keyRequiredDeleted'));\n        export const keyValueInSet = () => getRawString('Diagnostic.keyValueInSet');\n        export const lambdaReturnTypeUnknown = () => getRawString('Diagnostic.lambdaReturnTypeUnknown');\n        export const lambdaReturnTypePartiallyUnknown = () =>\n            new ParameterizedString<{ returnType: string }>(\n                getRawString('Diagnostic.lambdaReturnTypePartiallyUnknown')\n            );\n        export const listInAnnotation = () => getRawString('Diagnostic.listInAnnotation');\n        export const literalUnsupportedType = () => getRawString('Diagnostic.literalUnsupportedType');\n        export const literalEmptyArgs = () => getRawString('Diagnostic.literalEmptyArgs');\n        export const memberAccess = () =>\n            new ParameterizedString<{ name: string; type: string }>(getRawString('Diagnostic.memberAccess'));\n        export const memberDelete = () =>\n            new ParameterizedString<{ name: string; type: string }>(getRawString('Diagnostic.memberDelete'));\n        export const memberSet = () =>\n            new ParameterizedString<{ name: string; type: string }>(getRawString('Diagnostic.memberSet'));\n        export const metaclassConflict = () => getRawString('Diagnostic.metaclassConflict');\n        export const metaclassDuplicate = () => getRawString('Diagnostic.metaclassDuplicate');\n        export const methodNotDefined = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.methodNotDefined'));\n        export const methodNotDefinedOnType = () =>\n            new ParameterizedString<{ name: string; type: string }>(getRawString('Diagnostic.methodNotDefinedOnType'));\n        export const methodOrdering = () => getRawString('Diagnostic.methodOrdering');\n        export const methodOverridden = () =>\n            new ParameterizedString<{ name: string; className: string }>(getRawString('Diagnostic.methodOverridden'));\n        export const methodReturnsNonObject = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.methodReturnsNonObject'));\n        export const moduleContext = () => getRawString('Diagnostic.moduleContext');\n        export const moduleUnknownMember = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.moduleUnknownMember'));\n        export const namedExceptAfterCatchAll = () => getRawString('Diagnostic.namedExceptAfterCatchAll');\n        export const namedTupleEmptyName = () => getRawString('Diagnostic.namedTupleEmptyName');\n        export const namedTupleFirstArg = () => getRawString('Diagnostic.namedTupleFirstArg');\n        export const namedTupleNameString = () => getRawString('Diagnostic.namedTupleNameString');\n        export const namedTupleNameType = () => getRawString('Diagnostic.namedTupleNameType');\n        export const namedTupleNameUnique = () => getRawString('Diagnostic.namedTupleNameUnique');\n        export const namedTupleNoTypes = () => getRawString('Diagnostic.namedTupleNoTypes');\n        export const namedTupleSecondArg = () => getRawString('Diagnostic.namedTupleSecondArg');\n        export const newClsParam = () => getRawString('Diagnostic.newClsParam');\n        export const nonDefaultAfterDefault = () => getRawString('Diagnostic.nonDefaultAfterDefault');\n        export const noneNotCallable = () => getRawString('Diagnostic.noneNotCallable');\n        export const noneNotIterable = () => getRawString('Diagnostic.noneNotIterable');\n        export const noneNotSubscriptable = () => getRawString('Diagnostic.noneNotSubscriptable');\n        export const noneNotUsableWith = () => getRawString('Diagnostic.noneNotUsableWith');\n        export const noneOperator = () =>\n            new ParameterizedString<{ operator: string }>(getRawString('Diagnostic.noneOperator'));\n        export const noneUnknownMember = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.noneUnknownMember'));\n        export const nonLocalNoBinding = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.nonLocalNoBinding'));\n        export const nonLocalReassignment = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.nonLocalReassignment'));\n        export const nonLocalRedefinition = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.nonLocalRedefinition'));\n        export const nonLocalInModule = () => getRawString('Diagnostic.nonLocalInModule');\n        export const noOverload = () =>\n            new ParameterizedString<{ expression: string }>(getRawString('Diagnostic.noOverload'));\n        export const noReturnContainsReturn = () => getRawString('Diagnostic.noReturnContainsReturn');\n        export const noReturnContainsYield = () => getRawString('Diagnostic.noReturnContainsYield');\n        export const noReturnReturnsNone = () => getRawString('Diagnostic.noReturnReturnsNone');\n        export const objectNotCallable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.objectNotCallable'));\n        export const obscuredClassDeclaration = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.obscuredClassDeclaration'));\n        export const obscuredFunctionDeclaration = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.obscuredFunctionDeclaration'));\n        export const obscuredParameterDeclaration = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.obscuredParameterDeclaration'));\n        export const obscuredVariableDeclaration = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.obscuredVariableDeclaration'));\n        export const operatorLessOrGreaterDeprecated = () => getRawString('Diagnostic.operatorLessOrGreaterDeprecated');\n        export const optionalExtraArgs = () => getRawString('Diagnostic.optionalExtraArgs');\n        export const overlappingOverload = () =>\n            new ParameterizedString<{ name: string; obscured: number; obscuredBy: number }>(\n                getRawString('Diagnostic.overlappingOverload')\n            );\n        export const overloadAbstractMismatch = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.overloadAbstractMismatch'));\n        export const overloadReturnTypeMismatch = () =>\n            new ParameterizedString<{ name: string; newIndex: number; prevIndex: number }>(\n                getRawString('Diagnostic.overloadReturnTypeMismatch')\n            );\n        export const paramAfterKwargsParam = () => getRawString('Diagnostic.paramAfterKwargsParam');\n        export const paramAlreadyAssigned = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.paramAlreadyAssigned'));\n        export const paramNameMissing = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.paramNameMissing'));\n        export const paramSpecAssignedName = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.paramSpecAssignedName'));\n        export const paramSpecContext = () => getRawString('Diagnostic.paramSpecContext');\n        export const paramSpecIllegal = () => getRawString('Diagnostic.paramSpecIllegal');\n        export const paramSpecFirstArg = () => getRawString('Diagnostic.paramSpecFirstArg');\n        export const paramSpecUnknownArg = () => getRawString('Diagnostic.paramSpecUnknownArg');\n        export const paramSpecUnknownMember = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.paramSpecUnknownMember'));\n        export const paramSpecUnknownParam = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.paramSpecUnknownParam'));\n        export const paramTypeCovariant = () => getRawString('Diagnostic.paramTypeCovariant');\n        export const paramTypeUnknown = () =>\n            new ParameterizedString<{ paramName: string }>(getRawString('Diagnostic.paramTypeUnknown'));\n        export const paramAssignmentMismatch = () =>\n            new ParameterizedString<{ sourceType: string; paramType: string }>(\n                getRawString('Diagnostic.paramAssignmentMismatch')\n            );\n        export const paramTypePartiallyUnknown = () =>\n            new ParameterizedString<{ paramName: string }>(getRawString('Diagnostic.paramTypePartiallyUnknown'));\n        export const positionArgAfterNamedArg = () => getRawString('Diagnostic.positionArgAfterNamedArg');\n        export const positionOnlyAfterNameOnly = () => getRawString('Diagnostic.positionOnlyAfterNameOnly');\n        export const positionOnlyIncompatible = () => getRawString('Diagnostic.positionOnlyIncompatible');\n        export const positionOnlyFirstParam = () => getRawString('Diagnostic.positionOnlyFirstParam');\n        export const privateUsedOutsideOfClass = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.privateUsedOutsideOfClass'));\n        export const privateUsedOutsideOfModule = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.privateUsedOutsideOfModule'));\n        export const propertyStaticOrClassMethod = () => getRawString('Diagnostic.propertyStaticOrClassMethod');\n        export const protectedUsedOutsideOfClass = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.protectedUsedOutsideOfClass'));\n        export const protocolIllegal = () => getRawString('Diagnostic.protocolIllegal');\n        export const protocolUsedInCall = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.protocolUsedInCall'));\n        export const raiseParams = () => getRawString('Diagnostic.raiseParams');\n        export const relativeImportNotAllowed = () => getRawString('Diagnostic.relativeImportNotAllowed');\n        export const returnMissing = () =>\n            new ParameterizedString<{ returnType: string }>(getRawString('Diagnostic.returnMissing'));\n        export const returnOutsideFunction = () => getRawString('Diagnostic.returnOutsideFunction');\n        export const returnTypeContravariant = () => getRawString('Diagnostic.returnTypeContravariant');\n        export const returnTypeMismatch = () =>\n            new ParameterizedString<{ exprType: string; returnType: string }>(\n                getRawString('Diagnostic.returnTypeMismatch')\n            );\n        export const returnTypeUnknown = () => getRawString('Diagnostic.returnTypeUnknown');\n        export const returnTypePartiallyUnknown = () =>\n            new ParameterizedString<{ returnType: string }>(getRawString('Diagnostic.returnTypePartiallyUnknown'));\n        export const setterGetterTypeMismatch = () => getRawString('Diagnostic.setterGetterTypeMismatch');\n        export const singleOverload = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.singleOverload'));\n        export const staticClsSelfParam = () => getRawString('Diagnostic.staticClsSelfParam');\n        export const stringNonAsciiBytes = () => getRawString('Diagnostic.stringNonAsciiBytes');\n        export const stringUnsupportedEscape = () => getRawString('Diagnostic.stringUnsupportedEscape');\n        export const stringUnterminated = () => getRawString('Diagnostic.stringUnterminated');\n        export const stubFileMissing = () =>\n            new ParameterizedString<{ importName: string }>(getRawString('Diagnostic.stubFileMissing'));\n        export const stubUsesGetAttr = () => getRawString('Diagnostic.stubUsesGetAttr');\n        export const sublistParamsIncompatible = () => getRawString('Diagnostic.sublistParamsIncompatible');\n        export const superCallArgCount = () => getRawString('Diagnostic.superCallArgCount');\n        export const superCallFirstArg = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.superCallFirstArg'));\n        export const superCallSecondArg = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.superCallSecondArg'));\n        export const superCallZeroArgForm = () => getRawString('Diagnostic.superCallZeroArgForm');\n        export const symbolIsUnbound = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.symbolIsUnbound'));\n        export const symbolIsUndefined = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.symbolIsUndefined'));\n        export const symbolIsPossiblyUnbound = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.symbolIsPossiblyUnbound'));\n        export const symbolOverridden = () =>\n            new ParameterizedString<{ name: string; className: string }>(getRawString('Diagnostic.symbolOverridden'));\n        export const tupleInAnnotation = () => getRawString('Diagnostic.tupleInAnnotation');\n        export const tupleSizeMismatch = () =>\n            new ParameterizedString<{ expected: number; received: number }>(\n                getRawString('Diagnostic.tupleSizeMismatch')\n            );\n        export const typeAbstract = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.typeAbstract'));\n        export const typeAliasIsRecursive = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeAliasIsRecursive'));\n        export const typeAliasNotInModule = () => getRawString('Diagnostic.typeAliasNotInModule');\n        export const typeAliasRedeclared = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeAliasRedeclared'));\n        export const typeArgsExpectingNone = () => getRawString('Diagnostic.typeArgsExpectingNone');\n        export const typeArgsMismatchOne = () =>\n            new ParameterizedString<{ received: number }>(getRawString('Diagnostic.typeArgsMismatchOne'));\n        export const typeArgsMissingForAlias = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeArgsMissingForAlias'));\n        export const typeArgsMissingForClass = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeArgsMissingForClass'));\n        export const typeArgsTooFew = () =>\n            new ParameterizedString<{ name: string; expected: number; received: number }>(\n                getRawString('Diagnostic.typeArgsTooFew')\n            );\n        export const typeArgsTooMany = () =>\n            new ParameterizedString<{ name: string; expected: number; received: number }>(\n                getRawString('Diagnostic.typeArgsTooMany')\n            );\n        export const typeAssignmentMismatch = () =>\n            new ParameterizedString<{ sourceType: string; destType: string }>(\n                getRawString('Diagnostic.typeAssignmentMismatch')\n            );\n        export const typeCallNotAllowed = () => getRawString('Diagnostic.typeCallNotAllowed');\n        export const typedDictAccess = () => getRawString('Diagnostic.typedDictAccess');\n        export const typedDictBadVar = () => getRawString('Diagnostic.typedDictBadVar');\n        export const typedDictBaseClass = () => getRawString('Diagnostic.typedDictBaseClass');\n        export const typedDictDelete = () => getRawString('Diagnostic.typedDictDelete');\n        export const typedDictEmptyName = () => getRawString('Diagnostic.typedDictEmptyName');\n        export const typedDictEntryName = () => getRawString('Diagnostic.typedDictEntryName');\n        export const typedDictEntryUnique = () => getRawString('Diagnostic.typedDictEntryUnique');\n        export const typedDictExtraArgs = () => getRawString('Diagnostic.typedDictExtraArgs');\n        export const typedDictFirstArg = () => getRawString('Diagnostic.typedDictFirstArg');\n        export const typedDictSecondArgDict = () => getRawString('Diagnostic.typedDictSecondArgDict');\n        export const typedDictSecondArgDictEntry = () => getRawString('Diagnostic.typedDictSecondArgDictEntry');\n        export const typedDictSet = () => getRawString('Diagnostic.typedDictSet');\n        export const typedDictTotalParam = () => getRawString('Diagnostic.typedDictTotalParam');\n        export const typeExpectedClass = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.typeExpectedClass'));\n        export const typeGuardArgCount = () => getRawString('Diagnostic.typeGuardArgCount');\n        export const typeNotAwaitable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.typeNotAwaitable'));\n        export const typeNotCallable = () =>\n            new ParameterizedString<{ expression: string; type: string }>(getRawString('Diagnostic.typeNotCallable'));\n        export const typeNotIntantiable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.typeNotIntantiable'));\n        export const typeNotIterable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.typeNotIterable'));\n        export const typeNotSpecializable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.typeNotSpecializable'));\n        export const typeNotSubscriptable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.typeNotSubscriptable'));\n        export const typeNotUsableWith = () =>\n            new ParameterizedString<{ type: string; method: string }>(getRawString('Diagnostic.typeNotUsableWith'));\n        export const typeNotSupportBinaryOperator = () =>\n            new ParameterizedString<{ leftType: string; rightType: string; operator: string }>(\n                getRawString('Diagnostic.typeNotSupportBinaryOperator')\n            );\n        export const typeNotSupportUnaryOperator = () =>\n            new ParameterizedString<{ type: string; operator: string }>(\n                getRawString('Diagnostic.typeNotSupportUnaryOperator')\n            );\n        export const typePartiallyUnknown = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typePartiallyUnknown'));\n        export const typeUnknown = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeUnknown'));\n        export const typeVarAssignedName = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeVarAssignedName'));\n        export const typeVarAssignmentMismatch = () =>\n            new ParameterizedString<{ type: string; name: string }>(\n                getRawString('Diagnostic.typeVarAssignmentMismatch')\n            );\n        export const typeVarBoundAndConstrained = () => getRawString('Diagnostic.typeVarBoundAndConstrained');\n        export const typeVarFirstArg = () => getRawString('Diagnostic.typeVarFirstArg');\n        export const typeVarGeneric = () => getRawString('Diagnostic.typeVarGeneric');\n        export const typeVarNotUsedByOuterScope = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeVarNotUsedByOuterScope'));\n        export const typeVarSingleConstraint = () => getRawString('Diagnostic.typeVarSingleConstraint');\n        export const typeVarUnknownParam = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeVarUnknownParam'));\n        export const typeVarUsedByOuterScope = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeVarUsedByOuterScope'));\n        export const typeVarUsedOnlyOnce = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.typeVarUsedOnlyOnce'));\n        export const typeVarVariance = () => getRawString('Diagnostic.typeVarVariance');\n        export const unaccessedClass = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.unaccessedClass'));\n        export const unaccessedFunction = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.unaccessedFunction'));\n        export const unaccessedImport = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.unaccessedImport'));\n        export const unaccessedSymbol = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.unaccessedSymbol'));\n        export const unaccessedVariable = () =>\n            new ParameterizedString<{ name: string }>(getRawString('Diagnostic.unaccessedVariable'));\n        export const unexpectedAsyncToken = () => getRawString('Diagnostic.unexpectedAsyncToken');\n        export const unexpectedExprToken = () => getRawString('Diagnostic.unexpectedExprToken');\n        export const unexpectedIndent = () => getRawString('Diagnostic.unexpectedIndent');\n        export const unexpectedUnindent = () => getRawString('Diagnostic.unexpectedUnindent');\n        export const unionSyntaxIllegal = () => getRawString('Diagnostic.unionSyntaxIllegal');\n        export const unnecessaryCast = () =>\n            new ParameterizedString<{ type: string }>(getRawString('Diagnostic.unnecessaryCast'));\n        export const unnecessaryIsInstanceNever = () =>\n            new ParameterizedString<{ testType: string; classType: string }>(\n                getRawString('Diagnostic.unnecessaryIsInstanceNever')\n            );\n        export const unnecessaryIsInstanceAlways = () =>\n            new ParameterizedString<{ testType: string; classType: string }>(\n                getRawString('Diagnostic.unnecessaryIsInstanceAlways')\n            );\n        export const unnecessaryIsSubclassAlways = () =>\n            new ParameterizedString<{ testType: string; classType: string }>(\n                getRawString('Diagnostic.unnecessaryIsSubclassAlways')\n            );\n        export const unnecessaryIsSubclassNever = () =>\n            new ParameterizedString<{ testType: string; classType: string }>(\n                getRawString('Diagnostic.unnecessaryIsSubclassNever')\n            );\n        export const unpackIllegalInComprehension = () => getRawString('Diagnostic.unpackIllegalInComprehension');\n        export const unpackInDict = () => getRawString('Diagnostic.unpackInDict');\n        export const unpackInSet = () => getRawString('Diagnostic.unpackInSet');\n        export const unpackTuplesIllegal = () => getRawString('Diagnostic.unpackTuplesIllegal');\n        export const unreachableCode = () => getRawString('Diagnostic.unreachableCode');\n        export const varAnnotationIllegal = () => getRawString('Diagnostic.varAnnotationIllegal');\n        export const walrusIllegal = () => getRawString('Diagnostic.walrusIllegal');\n        export const walrusNotAllowed = () => getRawString('Diagnostic.walrusNotAllowed');\n        export const wildcardInFunction = () => getRawString('Diagnostic.wildcardInFunction');\n        export const wildcardLibraryImport = () => getRawString('Diagnostic.wildcardLibraryImport');\n        export const yieldFromIllegal = () => getRawString('Diagnostic.yieldFromIllegal');\n        export const yieldFromOutsideAsync = () => getRawString('Diagnostic.yieldFromOutsideAsync');\n        export const yieldOutsideFunction = () => getRawString('Diagnostic.yieldOutsideFunction');\n        export const yieldTypeMismatch = () =>\n            new ParameterizedString<{ exprType: string; yieldType: string }>(\n                getRawString('Diagnostic.yieldTypeMismatch')\n            );\n    }\n\n    export namespace DiagnosticAddendum {\n        export const argParam = () =>\n            new ParameterizedString<{ paramName: string }>(getRawString('DiagnosticAddendum.argParam'));\n        export const argParamFunction = () =>\n            new ParameterizedString<{ paramName: string; functionName: string }>(\n                getRawString('DiagnosticAddendum.argParamFunction')\n            );\n        export const argsParamMissing = () =>\n            new ParameterizedString<{ paramName: string }>(getRawString('DiagnosticAddendum.argsParamMissing'));\n        export const argumentType = () =>\n            new ParameterizedString<{ type: string }>(getRawString('DiagnosticAddendum.argumentType'));\n        export const argumentTypes = () =>\n            new ParameterizedString<{ types: string }>(getRawString('DiagnosticAddendum.argumentTypes'));\n        export const assignToNone = () => getRawString('DiagnosticAddendum.assignToNone');\n        export const asyncHelp = () => getRawString('DiagnosticAddendum.asyncHelp');\n        export const finalMethod = () => getRawString('DiagnosticAddendum.finalMethod');\n        export const functionReturnTypeMismatch = () =>\n            new ParameterizedString<{ sourceType: string; destType: string }>(\n                getRawString('DiagnosticAddendum.functionReturnTypeMismatch')\n            );\n        export const functionTooFewParams = () =>\n            new ParameterizedString<{ expected: number; received: number }>(\n                getRawString('DiagnosticAddendum.functionTooFewParams')\n            );\n        export const functionTooManyParams = () =>\n            new ParameterizedString<{ expected: number; received: number }>(\n                getRawString('DiagnosticAddendum.functionTooManyParams')\n            );\n        export const keyUndefined = () =>\n            new ParameterizedString<{ name: string; type: string }>(getRawString('DiagnosticAddendum.keyUndefined'));\n        export const literalAssignmentMismatch = () =>\n            new ParameterizedString<{ sourceType: string; destType: string }>(\n                getRawString('DiagnosticAddendum.literalAssignmentMismatch')\n            );\n        export const memberAssignment = () =>\n            new ParameterizedString<{ type: string; name: string; classType: string }>(\n                getRawString('DiagnosticAddendum.memberAssignment')\n            );\n        export const memberIsAbstract = () =>\n            new ParameterizedString<{ type: string; name: string }>(\n                getRawString('DiagnosticAddendum.memberIsAbstract')\n            );\n        export const memberIsAbstractMore = () =>\n            new ParameterizedString<{ count: number }>(getRawString('DiagnosticAddendum.memberIsAbstractMore'));\n        export const memberSetClassVar = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.memberSetClassVar'));\n        export const memberTypeMismatch = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.memberTypeMismatch'));\n        export const memberUnknown = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.memberUnknown'));\n        export const namedParamMissingInDest = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.namedParamMissingInDest'));\n        export const namedParamMissingInSource = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.namedParamMissingInSource'));\n        export const namedParamTypeMismatch = () =>\n            new ParameterizedString<{ name: string; sourceType: string; destType: string }>(\n                getRawString('DiagnosticAddendum.namedParamTypeMismatch')\n            );\n        export const noOverloadAssignable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('DiagnosticAddendum.noOverloadAssignable'));\n        export const overloadCallName = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.overloadCallName'));\n        export const overloadNotAssignable = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.overloadNotAssignable'));\n        export const overriddenMethod = () => getRawString('DiagnosticAddendum.overriddenMethod');\n        export const overriddenSymbol = () => getRawString('DiagnosticAddendum.overriddenSymbol');\n        export const overrideParamCount = () =>\n            new ParameterizedString<{ baseCount: number; overrideCount: number }>(\n                getRawString('DiagnosticAddendum.overrideParamCount')\n            );\n        export const overrideParamName = () =>\n            new ParameterizedString<{ index: number; baseName: string; overrideName: string }>(\n                getRawString('DiagnosticAddendum.overrideParamName')\n            );\n        export const overrideParamType = () =>\n            new ParameterizedString<{ index: number; baseType: string; overrideType: string }>(\n                getRawString('DiagnosticAddendum.overrideParamType')\n            );\n        export const overrideReturnType = () =>\n            new ParameterizedString<{ baseType: string; overrideType: string }>(\n                getRawString('DiagnosticAddendum.overrideReturnType')\n            );\n        export const overrideType = () =>\n            new ParameterizedString<{ type: string }>(getRawString('DiagnosticAddendum.overrideType'));\n        export const paramAssignment = () =>\n            new ParameterizedString<{ index: number; sourceType: string; destType: string }>(\n                getRawString('DiagnosticAddendum.paramAssignment')\n            );\n        export const paramType = () =>\n            new ParameterizedString<{ paramType: string }>(getRawString('DiagnosticAddendum.paramType'));\n        export const propertyMissingDeleter = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.propertyMissingDeleter'));\n        export const propertyMissingSetter = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.propertyMissingSetter'));\n        export const protocolMemberClassVar = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.protocolMemberClassVar'));\n        export const protocolMemberMissing = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.protocolMemberMissing'));\n        export const seeDeclaration = () => getRawString('DiagnosticAddendum.seeDeclaration');\n        export const seeClassDeclaration = () => getRawString('DiagnosticAddendum.seeClassDeclaration');\n        export const seeFunctionDeclaration = () => getRawString('DiagnosticAddendum.seeFunctionDeclaration');\n        export const seeMethodDeclaration = () => getRawString('DiagnosticAddendum.seeMethodDeclaration');\n        export const seeParameterDeclaration = () => getRawString('DiagnosticAddendum.seeParameterDeclaration');\n        export const seeVariableDeclaration = () => getRawString('DiagnosticAddendum.seeVariableDeclaration');\n        export const tupleEntryTypeMismatch = () =>\n            new ParameterizedString<{ entry: number }>(getRawString('DiagnosticAddendum.tupleEntryTypeMismatch'));\n        export const tupleSizeMismatch = () =>\n            new ParameterizedString<{ expected: number; received: number }>(\n                getRawString('DiagnosticAddendum.tupleSizeMismatch')\n            );\n        export const typeAssignmentMismatch = () =>\n            new ParameterizedString<{ sourceType: string; destType: string }>(\n                getRawString('DiagnosticAddendum.typeAssignmentMismatch')\n            );\n        export const typeBound = () =>\n            new ParameterizedString<{ sourceType: string; destType: string; name: string }>(\n                getRawString('DiagnosticAddendum.typeBound')\n            );\n        export const typeConstrainedTypeVar = () =>\n            new ParameterizedString<{ type: string; name: string }>(\n                getRawString('DiagnosticAddendum.typeConstrainedTypeVar')\n            );\n        export const typeConstraint = () =>\n            new ParameterizedString<{ type: string; name: string }>(getRawString('DiagnosticAddendum.typeConstraint'));\n        export const typedDictFieldMissing = () =>\n            new ParameterizedString<{ name: string; type: string }>(\n                getRawString('DiagnosticAddendum.typedDictFieldMissing')\n            );\n        export const typedDictFieldNotRequired = () =>\n            new ParameterizedString<{ name: string; type: string }>(\n                getRawString('DiagnosticAddendum.typedDictFieldNotRequired')\n            );\n        export const typedDictFieldRequired = () =>\n            new ParameterizedString<{ name: string; type: string }>(\n                getRawString('DiagnosticAddendum.typedDictFieldRequired')\n            );\n        export const typedDictFieldTypeMismatch = () =>\n            new ParameterizedString<{ name: string; type: string }>(\n                getRawString('DiagnosticAddendum.typedDictFieldTypeMismatch')\n            );\n        export const typedDictFieldUndefined = () =>\n            new ParameterizedString<{ name: string; type: string }>(\n                getRawString('DiagnosticAddendum.typedDictFieldUndefined')\n            );\n        export const typeIncompatible = () =>\n            new ParameterizedString<{ sourceType: string; destType: string }>(\n                getRawString('DiagnosticAddendum.typeIncompatible')\n            );\n        export const typeNotCallable = () =>\n            new ParameterizedString<{ type: string }>(getRawString('DiagnosticAddendum.typeNotCallable'));\n        export const typeNotClass = () =>\n            new ParameterizedString<{ type: string }>(getRawString('DiagnosticAddendum.typeNotClass'));\n        export const typeParamSpec = () =>\n            new ParameterizedString<{ type: string; name: string }>(getRawString('DiagnosticAddendum.typeParamSpec'));\n        export const typeNotStringLiteral = () =>\n            new ParameterizedString<{ type: string }>(getRawString('DiagnosticAddendum.typeNotStringLiteral'));\n        export const typeOfSymbol = () =>\n            new ParameterizedString<{ name: string; type: string }>(getRawString('DiagnosticAddendum.typeOfSymbol'));\n        export const typeUnsupported = () =>\n            new ParameterizedString<{ type: string }>(getRawString('DiagnosticAddendum.typeUnsupported'));\n        export const typeVarIsContravariant = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.typeVarIsContravariant'));\n        export const typeVarIsCovariant = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.typeVarIsCovariant'));\n        export const typeVarIsInvariant = () =>\n            new ParameterizedString<{ name: string }>(getRawString('DiagnosticAddendum.typeVarIsInvariant'));\n        export const typeVarNotAllowed = () => getRawString('DiagnosticAddendum.typeVarNotAllowed');\n        export const useDictInstead = () => getRawString('DiagnosticAddendum.useDictInstead');\n        export const useListInstead = () => getRawString('DiagnosticAddendum.useListInstead');\n        export const useTupleInstead = () => getRawString('DiagnosticAddendum.useTupleInstead');\n        export const useTypeInstead = () => getRawString('DiagnosticAddendum.useTypeInstead');\n    }\n\n    export namespace CodeAction {\n        export const addOptionalToAnnotation = () => getRawString('CodeAction.addOptionalToAnnotation');\n        export const createTypeStub = () => getRawString('CodeAction.createTypeStub');\n        export const createTypeStubFor = () =>\n            new ParameterizedString<{ moduleName: string }>(getRawString('CodeAction.createTypeStubFor'));\n        export const executingCommand = () => getRawString('CodeAction.executingCommand');\n        export const filesToAnalyzeOne = () => getRawString('CodeAction.filesToAnalyzeOne');\n        export const filesToAnalyzeCount = () =>\n            new ParameterizedString<{ count: number }>(getRawString('CodeAction.filesToAnalyzeCount'));\n        export const findingReferences = () => getRawString('CodeAction.findingReferences');\n        export const organizeImports = () => getRawString('CodeAction.organizeImports');\n    }\n}\n","/*\n * characterStream.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Based on code from vscode-python repository:\n *  https://github.com/Microsoft/vscode-python\n *\n * Class that represents a stream of characters.\n */\n\nimport Char from 'typescript-char';\n\nimport { isLineBreak, isWhiteSpace } from './characters';\n\nexport class CharacterStream {\n    private _text: string;\n    private _position: number;\n    private _currentChar: number;\n    private _isEndOfStream: boolean;\n\n    constructor(text: string) {\n        this._text = text;\n        this._position = 0;\n        this._currentChar = text.length > 0 ? text.charCodeAt(0) : 0;\n        this._isEndOfStream = text.length === 0;\n    }\n\n    getText(): string {\n        return this._text;\n    }\n\n    get position(): number {\n        return this._position;\n    }\n\n    set position(value: number) {\n        this._position = value;\n        this._checkBounds();\n    }\n\n    get currentChar(): number {\n        return this._currentChar;\n    }\n\n    // We also expose a (non-property) method that is\n    // the equivalent of currentChar above. This allows\n    // us to work around assumptions in the TypeScript\n    // compiler that method calls (e.g. moveNext()) don't\n    // modify properties.\n    getCurrentChar(): number {\n        return this._currentChar;\n    }\n\n    get nextChar(): number {\n        return this.position + 1 < this._text.length ? this._text.charCodeAt(this.position + 1) : 0;\n    }\n\n    get prevChar(): number {\n        return this.position - 1 >= 0 ? this._text.charCodeAt(this.position - 1) : 0;\n    }\n\n    isEndOfStream(): boolean {\n        return this._isEndOfStream;\n    }\n\n    lookAhead(offset: number): number {\n        const pos = this._position + offset;\n        return pos < 0 || pos >= this._text.length ? 0 : this._text.charCodeAt(pos);\n    }\n\n    advance(offset: number) {\n        this.position += offset;\n    }\n\n    moveNext(): boolean {\n        if (this._position < this._text.length - 1) {\n            // Most common case, no need to check bounds extensively\n            this._position += 1;\n            this._currentChar = this._text.charCodeAt(this._position);\n            return true;\n        }\n        this.advance(1);\n        return !this.isEndOfStream();\n    }\n\n    isAtWhiteSpace(): boolean {\n        return isWhiteSpace(this.currentChar);\n    }\n\n    isAtLineBreak(): boolean {\n        return isLineBreak(this.currentChar);\n    }\n\n    skipLineBreak(): void {\n        if (this._currentChar === Char.CarriageReturn) {\n            this.moveNext();\n            if (this.currentChar === Char.LineFeed) {\n                this.moveNext();\n            }\n        } else if (this._currentChar === Char.LineFeed) {\n            this.moveNext();\n        }\n    }\n\n    skipWhitespace(): void {\n        while (!this.isEndOfStream() && this.isAtWhiteSpace()) {\n            this.moveNext();\n        }\n    }\n\n    skipToEol(): void {\n        while (!this.isEndOfStream() && !this.isAtLineBreak()) {\n            this.moveNext();\n        }\n    }\n\n    skipToWhitespace(): void {\n        while (!this.isEndOfStream() && !this.isAtWhiteSpace()) {\n            this.moveNext();\n        }\n    }\n\n    charCodeAt(index: number): number {\n        return this._text.charCodeAt(index);\n    }\n\n    get length(): number {\n        return this._text.length;\n    }\n\n    private _checkBounds(): void {\n        if (this._position < 0) {\n            this._position = 0;\n        }\n\n        this._isEndOfStream = this._position >= this._text.length;\n        if (this._isEndOfStream) {\n            this._position = this._text.length;\n        }\n\n        this._currentChar = this._isEndOfStream ? 0 : this._text.charCodeAt(this._position);\n    }\n}\n","/*\n * characters.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Based on code from vscode-python repository:\n *  https://github.com/Microsoft/vscode-python\n *\n * Utility routines used by tokenizer.\n */\n\nimport Char from 'typescript-char';\n\nimport * as unicode from './unicode';\n\nenum CharCategory {\n    // Character cannot appear in identifier\n    NotIdentifierChar = 0,\n\n    // Character can appear at beginning or within identifier\n    StartIdentifierChar = 1,\n\n    // Character can appear only within identifier, not at beginning\n    IdentifierChar = 2,\n}\n\n// Table of first 256 character codes (the most common cases).\nconst _identifierCharFastTableSize = 256;\nconst _identifierCharFastTable: CharCategory[] = new Array(_identifierCharFastTableSize);\n\n// Map of remaining characters that can appear within identifier.\nconst _identifierCharMap: { [code: number]: CharCategory } = {};\n\n// We do lazy initialization of this map because it's rarely used.\nlet _identifierCharMapInitialized = false;\n\nexport function isIdentifierStartChar(ch: number) {\n    if (ch < _identifierCharFastTableSize) {\n        return _identifierCharFastTable[ch] === CharCategory.StartIdentifierChar;\n    }\n\n    // Lazy initialize the char map. We'll rarely get here.\n    if (!_identifierCharMapInitialized) {\n        _buildIdentifierLookupTable(false);\n        _identifierCharMapInitialized = true;\n    }\n\n    return _identifierCharMap[ch] === CharCategory.StartIdentifierChar;\n}\n\nexport function isIdentifierChar(ch: number) {\n    if (ch < _identifierCharFastTableSize) {\n        return (\n            _identifierCharFastTable[ch] === CharCategory.StartIdentifierChar ||\n            _identifierCharFastTable[ch] === CharCategory.IdentifierChar\n        );\n    }\n\n    // Lazy initialize the char map. We'll rarely get here.\n    if (!_identifierCharMapInitialized) {\n        _buildIdentifierLookupTable(false);\n        _identifierCharMapInitialized = true;\n    }\n\n    return (\n        _identifierCharMap[ch] === CharCategory.StartIdentifierChar ||\n        _identifierCharMap[ch] === CharCategory.IdentifierChar\n    );\n}\n\nexport function isWhiteSpace(ch: number): boolean {\n    return ch === Char.Space || ch === Char.Tab || ch === Char.FormFeed;\n}\n\nexport function isLineBreak(ch: number): boolean {\n    return ch === Char.CarriageReturn || ch === Char.LineFeed;\n}\n\nexport function isNumber(ch: number): boolean {\n    return (ch >= Char._0 && ch <= Char._9) || ch === Char.Underscore;\n}\n\nexport function isDecimal(ch: number): boolean {\n    return (ch >= Char._0 && ch <= Char._9) || ch === Char.Underscore;\n}\n\nexport function isHex(ch: number): boolean {\n    return isDecimal(ch) || (ch >= Char.a && ch <= Char.f) || (ch >= Char.A && ch <= Char.F) || ch === Char.Underscore;\n}\n\nexport function isOctal(ch: number): boolean {\n    return (ch >= Char._0 && ch <= Char._7) || ch === Char.Underscore;\n}\n\nexport function isBinary(ch: number): boolean {\n    return ch === Char._0 || ch === Char._1 || ch === Char.Underscore;\n}\n\n// Underscore is explicitly allowed to start an identifier.\n// Characters with the Other_ID_Start property.\nconst _specialStartIdentifierChars: unicode.UnicodeRangeTable = [\n    Char.Underscore,\n    0x1885,\n    0x1886,\n    0x2118,\n    0x212e,\n    0x309b,\n    0x309c,\n];\n\nconst _startIdentifierCharRanges = [\n    _specialStartIdentifierChars,\n    unicode.unicodeLu,\n    unicode.unicodeLl,\n    unicode.unicodeLt,\n    unicode.unicodeLo,\n    unicode.unicodeLm,\n    unicode.unicodeNl,\n];\n\n// Characters with the Other_ID_Start property.\nconst _specialIdentifierChars: unicode.UnicodeRangeTable = [\n    0x00b7,\n    0x0387,\n    0x1369,\n    0x136a,\n    0x136b,\n    0x136c,\n    0x136d,\n    0x136e,\n    0x136f,\n    0x1370,\n    0x1371,\n    0x19da,\n];\n\nconst _identifierCharRanges = [\n    _specialIdentifierChars,\n    unicode.unicodeMn,\n    unicode.unicodeMc,\n    unicode.unicodeNd,\n    unicode.unicodePc,\n];\n\nfunction _buildIdentifierLookupTableFromUnicodeRangeTable(\n    table: unicode.UnicodeRangeTable,\n    category: CharCategory,\n    fastTableOnly: boolean\n) {\n    for (let entryIndex = 0; entryIndex < table.length; entryIndex++) {\n        const entry = table[entryIndex];\n        let rangeStart: number;\n        let rangeEnd: number;\n\n        if (Array.isArray(entry)) {\n            rangeStart = entry[0];\n            rangeEnd = entry[1];\n        } else {\n            rangeStart = rangeEnd = entry;\n        }\n\n        for (let i = rangeStart; i <= rangeEnd; i++) {\n            if (i < _identifierCharFastTableSize) {\n                _identifierCharFastTable[i] = category;\n            } else {\n                _identifierCharMap[i] = category;\n            }\n        }\n\n        if (fastTableOnly && rangeStart >= _identifierCharFastTableSize) {\n            break;\n        }\n    }\n}\n\n// Build a lookup table for to speed up tokenization of identifiers.\nfunction _buildIdentifierLookupTable(fastTableOnly: boolean) {\n    _identifierCharFastTable.fill(CharCategory.NotIdentifierChar);\n\n    _identifierCharRanges.forEach((table) => {\n        _buildIdentifierLookupTableFromUnicodeRangeTable(table, CharCategory.IdentifierChar, fastTableOnly);\n    });\n\n    _startIdentifierCharRanges.forEach((table) => {\n        _buildIdentifierLookupTableFromUnicodeRangeTable(table, CharCategory.StartIdentifierChar, fastTableOnly);\n    });\n}\n\n_buildIdentifierLookupTable(true);\n","/*\n * parseNodes.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Definition of parse nodes that make up the Python abstract\n * syntax tree (AST).\n */\n\nimport { TextRange } from '../common/textRange';\nimport {\n    IdentifierToken,\n    KeywordToken,\n    KeywordType,\n    NumberToken,\n    OperatorType,\n    StringToken,\n    Token,\n    TokenType,\n} from './tokenizerTypes';\n\nexport const enum ParseNodeType {\n    Error, // 0\n\n    Argument,\n    Assert,\n    Assignment,\n    AssignmentExpression,\n    AugmentedAssignment,\n    Await,\n    BinaryOperation,\n    Break,\n    Call,\n\n    Class, // 10\n    Constant,\n    Continue,\n    Decorator,\n    Del,\n    Dictionary,\n    DictionaryExpandEntry,\n    DictionaryKeyEntry,\n    Ellipsis,\n    If,\n\n    Import, // 20\n    ImportAs,\n    ImportFrom,\n    ImportFromAs,\n    Index,\n    IndexItems,\n    Except,\n    For,\n    FormatString,\n    Function,\n\n    Global, // 30\n    Lambda,\n    List,\n    ListComprehension,\n    ListComprehensionFor,\n    ListComprehensionIf,\n    MemberAccess,\n    Module,\n    ModuleName,\n    Name,\n\n    Nonlocal, // 40\n    Number,\n    Parameter,\n    Pass,\n    Raise,\n    Return,\n    Set,\n    Slice,\n    StatementList,\n    StringList,\n\n    String, // 50\n    Suite,\n    Ternary,\n    Tuple,\n    Try,\n    TypeAnnotation,\n    UnaryOperation,\n    Unpack,\n    While,\n    With,\n\n    WithItem, // 60\n    Yield,\n    YieldFrom,\n    FunctionAnnotation,\n}\n\nexport const enum ErrorExpressionCategory {\n    MissingIn,\n    MissingElse,\n    MissingExpression,\n    MissingIndexOrSlice,\n    MissingDecoratorCallName,\n    MissingCallCloseParen,\n    MissingIndexCloseBracket,\n    MissingMemberAccessName,\n    MissingTupleCloseParen,\n    MissingListCloseBracket,\n    MissingFunctionParameterList,\n}\n\nexport interface ParseNodeBase extends TextRange {\n    readonly nodeType: ParseNodeType;\n\n    // A unique ID given to each parse node.\n    id: number;\n\n    parent?: ParseNode;\n}\n\nlet _nextNodeId = 1;\nexport function getNextNodeId() {\n    return _nextNodeId++;\n}\n\nexport function extendRange(node: ParseNodeBase, newRange: TextRange) {\n    if (newRange.start < node.start) {\n        node.length += node.start - newRange.start;\n        node.start = newRange.start;\n    }\n\n    if (TextRange.getEnd(newRange) > TextRange.getEnd(node)) {\n        node.length = TextRange.getEnd(newRange) - node.start;\n    }\n}\n\nexport type ParseNodeArray = (ParseNode | undefined)[];\n\nexport interface ModuleNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Module;\n    statements: StatementNode[];\n}\n\nexport namespace ModuleNode {\n    export function create(range: TextRange) {\n        const node: ModuleNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Module,\n            id: _nextNodeId++,\n            statements: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface SuiteNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Suite;\n    statements: StatementNode[];\n}\n\nexport namespace SuiteNode {\n    export function create(range: TextRange) {\n        const node: SuiteNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Suite,\n            id: _nextNodeId++,\n            statements: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface IfNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.If;\n    testExpression: ExpressionNode;\n    ifSuite: SuiteNode;\n    elseSuite?: SuiteNode | IfNode;\n}\n\nexport namespace IfNode {\n    export function create(\n        ifOrElifToken: Token,\n        testExpression: ExpressionNode,\n        ifSuite: SuiteNode,\n        elseSuite?: SuiteNode\n    ) {\n        const node: IfNode = {\n            start: ifOrElifToken.start,\n            length: ifOrElifToken.length,\n            nodeType: ParseNodeType.If,\n            id: _nextNodeId++,\n            testExpression,\n            ifSuite,\n            elseSuite,\n        };\n\n        testExpression.parent = node;\n        ifSuite.parent = node;\n\n        extendRange(node, testExpression);\n        extendRange(node, ifSuite);\n        if (elseSuite) {\n            extendRange(node, elseSuite);\n            elseSuite.parent = node;\n        }\n\n        return node;\n    }\n}\n\nexport interface WhileNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.While;\n    testExpression: ExpressionNode;\n    whileSuite: SuiteNode;\n    elseSuite?: SuiteNode;\n}\n\nexport namespace WhileNode {\n    export function create(whileToken: Token, testExpression: ExpressionNode, whileSuite: SuiteNode) {\n        const node: WhileNode = {\n            start: whileToken.start,\n            length: whileToken.length,\n            nodeType: ParseNodeType.While,\n            id: _nextNodeId++,\n            testExpression,\n            whileSuite,\n        };\n\n        testExpression.parent = node;\n        whileSuite.parent = node;\n\n        extendRange(node, whileSuite);\n\n        return node;\n    }\n}\n\nexport interface ForNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.For;\n    isAsync?: boolean;\n    targetExpression: ExpressionNode;\n    iterableExpression: ExpressionNode;\n    forSuite: SuiteNode;\n    elseSuite?: SuiteNode;\n}\n\nexport namespace ForNode {\n    export function create(\n        forToken: Token,\n        targetExpression: ExpressionNode,\n        iterableExpression: ExpressionNode,\n        forSuite: SuiteNode\n    ) {\n        const node: ForNode = {\n            start: forToken.start,\n            length: forToken.length,\n            nodeType: ParseNodeType.For,\n            id: _nextNodeId++,\n            targetExpression,\n            iterableExpression,\n            forSuite,\n        };\n\n        targetExpression.parent = node;\n        iterableExpression.parent = node;\n        forSuite.parent = node;\n\n        extendRange(node, forSuite);\n\n        return node;\n    }\n}\n\nexport type ListComprehensionIterNode = ListComprehensionForNode | ListComprehensionIfNode;\n\nexport interface ListComprehensionForNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.ListComprehensionFor;\n    isAsync?: boolean;\n    targetExpression: ExpressionNode;\n    iterableExpression: ExpressionNode;\n}\n\nexport namespace ListComprehensionForNode {\n    export function create(startToken: Token, targetExpression: ExpressionNode, iterableExpression: ExpressionNode) {\n        const node: ListComprehensionForNode = {\n            start: startToken.start,\n            length: startToken.length,\n            nodeType: ParseNodeType.ListComprehensionFor,\n            id: _nextNodeId++,\n            targetExpression,\n            iterableExpression,\n        };\n\n        targetExpression.parent = node;\n        iterableExpression.parent = node;\n\n        extendRange(node, targetExpression);\n        extendRange(node, iterableExpression);\n\n        return node;\n    }\n}\n\nexport interface ListComprehensionIfNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.ListComprehensionIf;\n    testExpression: ExpressionNode;\n}\n\nexport namespace ListComprehensionIfNode {\n    export function create(ifToken: Token, testExpression: ExpressionNode) {\n        const node: ListComprehensionIfNode = {\n            start: ifToken.start,\n            length: ifToken.length,\n            nodeType: ParseNodeType.ListComprehensionIf,\n            id: _nextNodeId++,\n            testExpression,\n        };\n\n        testExpression.parent = node;\n\n        extendRange(node, testExpression);\n\n        return node;\n    }\n}\n\nexport interface TryNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Try;\n    trySuite: SuiteNode;\n    exceptClauses: ExceptNode[];\n    elseSuite?: SuiteNode;\n    finallySuite?: SuiteNode;\n}\n\nexport namespace TryNode {\n    export function create(tryToken: Token, trySuite: SuiteNode) {\n        const node: TryNode = {\n            start: tryToken.start,\n            length: tryToken.length,\n            nodeType: ParseNodeType.Try,\n            id: _nextNodeId++,\n            trySuite,\n            exceptClauses: [],\n        };\n\n        trySuite.parent = node;\n\n        extendRange(node, trySuite);\n\n        return node;\n    }\n}\n\nexport interface ExceptNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Except;\n    typeExpression?: ExpressionNode;\n    name?: NameNode;\n    exceptSuite: SuiteNode;\n}\n\nexport namespace ExceptNode {\n    export function create(exceptToken: Token, exceptSuite: SuiteNode) {\n        const node: ExceptNode = {\n            start: exceptToken.start,\n            length: exceptToken.length,\n            nodeType: ParseNodeType.Except,\n            id: _nextNodeId++,\n            exceptSuite,\n        };\n\n        exceptSuite.parent = node;\n\n        extendRange(node, exceptSuite);\n\n        return node;\n    }\n}\n\nexport interface FunctionNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Function;\n    decorators: DecoratorNode[];\n    isAsync?: boolean;\n    name: NameNode;\n    parameters: ParameterNode[];\n    returnTypeAnnotation?: ExpressionNode;\n    functionAnnotationComment?: FunctionAnnotationNode;\n    suite: SuiteNode;\n}\n\nexport namespace FunctionNode {\n    export function create(defToken: Token, name: NameNode, suite: SuiteNode) {\n        const node: FunctionNode = {\n            start: defToken.start,\n            length: defToken.length,\n            nodeType: ParseNodeType.Function,\n            id: _nextNodeId++,\n            decorators: [],\n            name,\n            parameters: [],\n            suite,\n        };\n\n        name.parent = node;\n        suite.parent = node;\n\n        extendRange(node, suite);\n\n        return node;\n    }\n}\n\nexport const enum ParameterCategory {\n    Simple,\n    VarArgList,\n    VarArgDictionary,\n}\n\nexport interface ParameterNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Parameter;\n    category: ParameterCategory;\n    name?: NameNode;\n    typeAnnotation?: ExpressionNode;\n    typeAnnotationComment?: ExpressionNode;\n    defaultValue?: ExpressionNode;\n}\n\nexport namespace ParameterNode {\n    export function create(startToken: Token, paramCategory: ParameterCategory) {\n        const node: ParameterNode = {\n            start: startToken.start,\n            length: startToken.length,\n            nodeType: ParseNodeType.Parameter,\n            id: _nextNodeId++,\n            category: paramCategory,\n        };\n\n        return node;\n    }\n}\n\nexport interface ClassNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Class;\n    decorators: DecoratorNode[];\n    name: NameNode;\n    arguments: ArgumentNode[];\n    suite: SuiteNode;\n}\n\nexport namespace ClassNode {\n    export function create(classToken: Token, name: NameNode, suite: SuiteNode) {\n        const node: ClassNode = {\n            start: classToken.start,\n            length: classToken.length,\n            nodeType: ParseNodeType.Class,\n            id: _nextNodeId++,\n            decorators: [],\n            name,\n            arguments: [],\n            suite,\n        };\n\n        name.parent = node;\n        suite.parent = node;\n\n        extendRange(node, suite);\n\n        return node;\n    }\n\n    // This variant is used to create a dummy class\n    // when the parser encounters decorators with no\n    // function or class declaration.\n    export function createDummyForDecorators(decorators: DecoratorNode[]) {\n        const node: ClassNode = {\n            start: 0,\n            length: 0,\n            nodeType: ParseNodeType.Class,\n            id: _nextNodeId++,\n            decorators,\n            name: {\n                start: 0,\n                length: 0,\n                id: 0,\n                nodeType: ParseNodeType.Name,\n                token: {\n                    type: TokenType.Identifier,\n                    start: 0,\n                    length: 0,\n                    comments: [],\n                    value: '',\n                },\n                value: '',\n            },\n            arguments: [],\n            suite: {\n                start: 0,\n                length: 0,\n                id: 0,\n                nodeType: ParseNodeType.Suite,\n                statements: [],\n            },\n        };\n\n        decorators.forEach((decorator) => {\n            decorator.parent = node;\n            extendRange(node, decorator);\n        });\n\n        node.name.parent = node;\n        node.suite.parent = node;\n\n        return node;\n    }\n}\n\nexport interface WithNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.With;\n    isAsync?: boolean;\n    withItems: WithItemNode[];\n    suite: SuiteNode;\n}\n\nexport namespace WithNode {\n    export function create(withToken: Token, suite: SuiteNode) {\n        const node: WithNode = {\n            start: withToken.start,\n            length: withToken.length,\n            nodeType: ParseNodeType.With,\n            id: _nextNodeId++,\n            withItems: [],\n            suite,\n        };\n\n        suite.parent = node;\n\n        extendRange(node, suite);\n\n        return node;\n    }\n}\n\nexport interface WithItemNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.WithItem;\n    expression: ExpressionNode;\n    target?: ExpressionNode;\n}\n\nexport namespace WithItemNode {\n    export function create(expression: ExpressionNode) {\n        const node: WithItemNode = {\n            start: expression.start,\n            length: expression.length,\n            nodeType: ParseNodeType.WithItem,\n            id: _nextNodeId++,\n            expression,\n        };\n\n        expression.parent = node;\n\n        return node;\n    }\n}\n\nexport interface DecoratorNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Decorator;\n    expression: ExpressionNode;\n}\n\nexport namespace DecoratorNode {\n    export function create(atToken: Token, expression: ExpressionNode) {\n        const node: DecoratorNode = {\n            start: atToken.start,\n            length: atToken.length,\n            nodeType: ParseNodeType.Decorator,\n            id: _nextNodeId++,\n            expression,\n        };\n\n        expression.parent = node;\n\n        extendRange(node, expression);\n\n        return node;\n    }\n}\n\nexport interface StatementListNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.StatementList;\n    statements: ParseNode[];\n}\n\nexport namespace StatementListNode {\n    export function create(atToken: Token) {\n        const node: StatementListNode = {\n            start: atToken.start,\n            length: atToken.length,\n            nodeType: ParseNodeType.StatementList,\n            id: _nextNodeId++,\n            statements: [],\n        };\n\n        return node;\n    }\n}\n\nexport type StatementNode =\n    | IfNode\n    | WhileNode\n    | ForNode\n    | TryNode\n    | FunctionNode\n    | ClassNode\n    | WithNode\n    | StatementListNode\n    | ErrorNode;\n\nexport type SmallStatementNode =\n    | ExpressionNode\n    | DelNode\n    | PassNode\n    | ImportNode\n    | GlobalNode\n    | NonlocalNode\n    | AssertNode;\n\nexport type ExpressionNode =\n    | ErrorNode\n    | UnaryOperationNode\n    | BinaryOperationNode\n    | AssignmentNode\n    | TypeAnnotationNode\n    | AssignmentExpressionNode\n    | AugmentedAssignmentNode\n    | AwaitNode\n    | TernaryNode\n    | UnpackNode\n    | TupleNode\n    | CallNode\n    | ListComprehensionNode\n    | IndexNode\n    | SliceNode\n    | YieldNode\n    | YieldFromNode\n    | MemberAccessNode\n    | LambdaNode\n    | NameNode\n    | ConstantNode\n    | EllipsisNode\n    | NumberNode\n    | StringNode\n    | FormatStringNode\n    | StringListNode\n    | DictionaryNode\n    | DictionaryExpandEntryNode\n    | ListNode\n    | SetNode\n    | DecoratorNode\n    | FunctionAnnotationNode;\n\nexport function isExpressionNode(node: ParseNode): node is ExpressionNode {\n    switch (node.nodeType) {\n        case ParseNodeType.Error:\n        case ParseNodeType.UnaryOperation:\n        case ParseNodeType.BinaryOperation:\n        case ParseNodeType.AssignmentExpression:\n        case ParseNodeType.TypeAnnotation:\n        case ParseNodeType.Await:\n        case ParseNodeType.Ternary:\n        case ParseNodeType.Unpack:\n        case ParseNodeType.Tuple:\n        case ParseNodeType.Call:\n        case ParseNodeType.ListComprehension:\n        case ParseNodeType.Index:\n        case ParseNodeType.Slice:\n        case ParseNodeType.Yield:\n        case ParseNodeType.YieldFrom:\n        case ParseNodeType.MemberAccess:\n        case ParseNodeType.Lambda:\n        case ParseNodeType.Name:\n        case ParseNodeType.Constant:\n        case ParseNodeType.Ellipsis:\n        case ParseNodeType.Number:\n        case ParseNodeType.String:\n        case ParseNodeType.FormatString:\n        case ParseNodeType.StringList:\n        case ParseNodeType.Dictionary:\n        case ParseNodeType.DictionaryExpandEntry:\n        case ParseNodeType.List:\n        case ParseNodeType.Set:\n            return true;\n\n        default:\n            return false;\n    }\n}\n\nexport interface ErrorNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Error;\n    readonly category: ErrorExpressionCategory;\n    readonly child?: ExpressionNode;\n}\n\nexport namespace ErrorNode {\n    export function create(initialRange: TextRange, category: ErrorExpressionCategory, child?: ExpressionNode) {\n        const node: ErrorNode = {\n            start: initialRange.start,\n            length: initialRange.length,\n            nodeType: ParseNodeType.Error,\n            id: _nextNodeId++,\n            category,\n            child,\n        };\n\n        if (child) {\n            child.parent = node;\n            extendRange(node, child);\n        }\n\n        return node;\n    }\n}\n\nexport interface UnaryOperationNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.UnaryOperation;\n    expression: ExpressionNode;\n    operatorToken: Token;\n    operator: OperatorType;\n}\n\nexport namespace UnaryOperationNode {\n    export function create(operatorToken: Token, expression: ExpressionNode, operator: OperatorType) {\n        const node: UnaryOperationNode = {\n            start: operatorToken.start,\n            length: operatorToken.length,\n            nodeType: ParseNodeType.UnaryOperation,\n            id: _nextNodeId++,\n            operator,\n            operatorToken,\n            expression,\n        };\n\n        expression.parent = node;\n\n        extendRange(node, expression);\n\n        return node;\n    }\n}\n\nexport interface BinaryOperationNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.BinaryOperation;\n    leftExpression: ExpressionNode;\n    operatorToken: Token;\n    operator: OperatorType;\n    rightExpression: ExpressionNode;\n    parenthesized?: boolean;\n}\n\nexport namespace BinaryOperationNode {\n    export function create(\n        leftExpression: ExpressionNode,\n        rightExpression: ExpressionNode,\n        operatorToken: Token,\n        operator: OperatorType\n    ) {\n        const node: BinaryOperationNode = {\n            start: leftExpression.start,\n            length: leftExpression.length,\n            nodeType: ParseNodeType.BinaryOperation,\n            id: _nextNodeId++,\n            leftExpression,\n            operatorToken,\n            operator,\n            rightExpression,\n        };\n\n        leftExpression.parent = node;\n        rightExpression.parent = node;\n\n        extendRange(node, rightExpression);\n\n        return node;\n    }\n}\n\nexport interface AssignmentExpressionNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.AssignmentExpression;\n    name: NameNode;\n    rightExpression: ExpressionNode;\n}\n\nexport namespace AssignmentExpressionNode {\n    export function create(name: NameNode, rightExpression: ExpressionNode) {\n        const node: AssignmentExpressionNode = {\n            start: name.start,\n            length: name.length,\n            nodeType: ParseNodeType.AssignmentExpression,\n            id: _nextNodeId++,\n            name,\n            rightExpression,\n        };\n\n        name.parent = node;\n        rightExpression.parent = node;\n\n        extendRange(node, rightExpression);\n\n        return node;\n    }\n}\n\nexport interface AssignmentNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Assignment;\n    leftExpression: ExpressionNode;\n    rightExpression: ExpressionNode;\n    typeAnnotationComment?: ExpressionNode;\n}\n\nexport namespace AssignmentNode {\n    export function create(leftExpression: ExpressionNode, rightExpression: ExpressionNode) {\n        const node: AssignmentNode = {\n            start: leftExpression.start,\n            length: leftExpression.length,\n            nodeType: ParseNodeType.Assignment,\n            id: _nextNodeId++,\n            leftExpression,\n            rightExpression,\n        };\n\n        leftExpression.parent = node;\n        rightExpression.parent = node;\n\n        extendRange(node, rightExpression);\n\n        return node;\n    }\n}\n\nexport interface TypeAnnotationNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.TypeAnnotation;\n    valueExpression: ExpressionNode;\n    typeAnnotation: ExpressionNode;\n}\n\nexport namespace TypeAnnotationNode {\n    export function create(valueExpression: ExpressionNode, typeAnnotation: ExpressionNode) {\n        const node: TypeAnnotationNode = {\n            start: valueExpression.start,\n            length: valueExpression.length,\n            nodeType: ParseNodeType.TypeAnnotation,\n            id: _nextNodeId++,\n            valueExpression,\n            typeAnnotation,\n        };\n\n        valueExpression.parent = node;\n        typeAnnotation.parent = node;\n\n        extendRange(node, typeAnnotation);\n\n        return node;\n    }\n}\n\nexport interface FunctionAnnotationNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.FunctionAnnotation;\n    isParamListEllipsis: boolean;\n    paramTypeAnnotations: ExpressionNode[];\n    returnTypeAnnotation: ExpressionNode;\n}\n\nexport namespace FunctionAnnotationNode {\n    export function create(\n        openParenToken: Token,\n        isParamListEllipsis: boolean,\n        paramTypeAnnotations: ExpressionNode[],\n        returnTypeAnnotation: ExpressionNode\n    ) {\n        const node: FunctionAnnotationNode = {\n            start: openParenToken.start,\n            length: openParenToken.length,\n            nodeType: ParseNodeType.FunctionAnnotation,\n            id: _nextNodeId++,\n            isParamListEllipsis,\n            paramTypeAnnotations,\n            returnTypeAnnotation,\n        };\n\n        paramTypeAnnotations.forEach((p) => {\n            p.parent = node;\n        });\n        returnTypeAnnotation.parent = node;\n\n        extendRange(node, returnTypeAnnotation);\n\n        return node;\n    }\n}\n\nexport interface AugmentedAssignmentNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.AugmentedAssignment;\n    leftExpression: ExpressionNode;\n    operator: OperatorType;\n    rightExpression: ExpressionNode;\n\n    // The destExpression is a copy of the leftExpression\n    // node. We use it as a place to hang the result type,\n    // as opposed to the source type.\n    destExpression: ExpressionNode;\n}\n\nexport namespace AugmentedAssignmentNode {\n    export function create(\n        leftExpression: ExpressionNode,\n        rightExpression: ExpressionNode,\n        operator: OperatorType,\n        destExpression: ExpressionNode\n    ) {\n        const node: AugmentedAssignmentNode = {\n            start: leftExpression.start,\n            length: leftExpression.length,\n            nodeType: ParseNodeType.AugmentedAssignment,\n            id: _nextNodeId++,\n            leftExpression,\n            operator,\n            rightExpression,\n            destExpression,\n        };\n\n        leftExpression.parent = node;\n        rightExpression.parent = node;\n        destExpression.parent = node;\n\n        extendRange(node, rightExpression);\n\n        return node;\n    }\n}\n\nexport interface AwaitNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Await;\n    expression: ExpressionNode;\n}\n\nexport namespace AwaitNode {\n    export function create(awaitToken: Token, expression: ExpressionNode) {\n        const node: AwaitNode = {\n            start: awaitToken.start,\n            length: awaitToken.length,\n            nodeType: ParseNodeType.Await,\n            id: _nextNodeId++,\n            expression,\n        };\n\n        expression.parent = node;\n\n        extendRange(node, expression);\n\n        return node;\n    }\n}\n\nexport interface TernaryNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Ternary;\n    ifExpression: ExpressionNode;\n    testExpression: ExpressionNode;\n    elseExpression: ExpressionNode;\n}\n\nexport namespace TernaryNode {\n    export function create(\n        ifExpression: ExpressionNode,\n        testExpression: ExpressionNode,\n        elseExpression: ExpressionNode\n    ) {\n        const node: TernaryNode = {\n            start: ifExpression.start,\n            length: ifExpression.length,\n            nodeType: ParseNodeType.Ternary,\n            id: _nextNodeId++,\n            ifExpression,\n            testExpression,\n            elseExpression,\n        };\n\n        ifExpression.parent = node;\n        testExpression.parent = node;\n        elseExpression.parent = node;\n\n        extendRange(node, elseExpression);\n\n        return node;\n    }\n}\n\nexport interface UnpackNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Unpack;\n    expression: ExpressionNode;\n}\n\nexport namespace UnpackNode {\n    export function create(starToken: Token, expression: ExpressionNode) {\n        const node: UnpackNode = {\n            start: starToken.start,\n            length: starToken.length,\n            nodeType: ParseNodeType.Unpack,\n            id: _nextNodeId++,\n            expression,\n        };\n\n        expression.parent = node;\n\n        extendRange(node, expression);\n\n        return node;\n    }\n}\n\nexport interface TupleNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Tuple;\n    expressions: ExpressionNode[];\n    enclosedInParens: boolean;\n}\n\nexport namespace TupleNode {\n    export function create(range: TextRange, enclosedInParens: boolean) {\n        const node: TupleNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Tuple,\n            id: _nextNodeId++,\n            expressions: [],\n            enclosedInParens,\n        };\n\n        return node;\n    }\n}\n\nexport interface CallNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Call;\n    leftExpression: ExpressionNode;\n    arguments: ArgumentNode[];\n}\n\nexport namespace CallNode {\n    export function create(leftExpression: ExpressionNode) {\n        const node: CallNode = {\n            start: leftExpression.start,\n            length: leftExpression.length,\n            nodeType: ParseNodeType.Call,\n            id: _nextNodeId++,\n            leftExpression,\n            arguments: [],\n        };\n\n        leftExpression.parent = node;\n\n        return node;\n    }\n}\n\nexport interface ListComprehensionNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.ListComprehension;\n    expression: ParseNode;\n    comprehensions: ListComprehensionIterNode[];\n}\n\nexport namespace ListComprehensionNode {\n    export function create(expression: ParseNode) {\n        const node: ListComprehensionNode = {\n            start: expression.start,\n            length: expression.length,\n            nodeType: ParseNodeType.ListComprehension,\n            id: _nextNodeId++,\n            expression,\n            comprehensions: [],\n        };\n\n        expression.parent = node;\n\n        return node;\n    }\n}\n\nexport interface IndexItemsNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.IndexItems;\n    items: ExpressionNode[];\n}\n\nexport namespace IndexItemsNode {\n    export function create(openBracketToken: Token, closeBracketToken: Token, items: ExpressionNode[]) {\n        const node: IndexItemsNode = {\n            start: openBracketToken.start,\n            length: openBracketToken.length,\n            nodeType: ParseNodeType.IndexItems,\n            id: _nextNodeId++,\n            items,\n        };\n\n        items.forEach((item) => {\n            item.parent = node;\n        });\n\n        extendRange(node, closeBracketToken);\n\n        return node;\n    }\n}\n\nexport interface IndexNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Index;\n    baseExpression: ExpressionNode;\n    items: IndexItemsNode;\n}\n\nexport namespace IndexNode {\n    export function create(baseExpression: ExpressionNode, items: IndexItemsNode) {\n        const node: IndexNode = {\n            start: baseExpression.start,\n            length: baseExpression.length,\n            nodeType: ParseNodeType.Index,\n            id: _nextNodeId++,\n            baseExpression,\n            items,\n        };\n\n        baseExpression.parent = node;\n        items.parent = node;\n\n        extendRange(node, items);\n\n        return node;\n    }\n}\n\nexport interface SliceNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Slice;\n    startValue?: ExpressionNode;\n    endValue?: ExpressionNode;\n    stepValue?: ExpressionNode;\n}\n\nexport namespace SliceNode {\n    export function create(range: TextRange) {\n        const node: SliceNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Slice,\n            id: _nextNodeId++,\n        };\n\n        return node;\n    }\n}\n\nexport interface YieldNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Yield;\n    expression?: ExpressionNode;\n}\n\nexport namespace YieldNode {\n    export function create(yieldToken: Token, expression?: ExpressionNode) {\n        const node: YieldNode = {\n            start: yieldToken.start,\n            length: yieldToken.length,\n            nodeType: ParseNodeType.Yield,\n            id: _nextNodeId++,\n            expression,\n        };\n\n        if (expression) {\n            expression.parent = node;\n            extendRange(node, expression);\n        }\n\n        return node;\n    }\n}\n\nexport interface YieldFromNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.YieldFrom;\n    expression: ExpressionNode;\n}\n\nexport namespace YieldFromNode {\n    export function create(yieldToken: Token, expression: ExpressionNode) {\n        const node: YieldFromNode = {\n            start: yieldToken.start,\n            length: yieldToken.length,\n            nodeType: ParseNodeType.YieldFrom,\n            id: _nextNodeId++,\n            expression,\n        };\n\n        expression.parent = node;\n\n        extendRange(node, expression);\n\n        return node;\n    }\n}\n\nexport interface MemberAccessNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.MemberAccess;\n    leftExpression: ExpressionNode;\n    memberName: NameNode;\n}\n\nexport namespace MemberAccessNode {\n    export function create(leftExpression: ExpressionNode, memberName: NameNode) {\n        const node: MemberAccessNode = {\n            start: leftExpression.start,\n            length: leftExpression.length,\n            nodeType: ParseNodeType.MemberAccess,\n            id: _nextNodeId++,\n            leftExpression,\n            memberName,\n        };\n\n        leftExpression.parent = node;\n        memberName.parent = node;\n\n        extendRange(node, memberName);\n\n        return node;\n    }\n}\n\nexport interface LambdaNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Lambda;\n    parameters: ParameterNode[];\n    expression: ExpressionNode;\n}\n\nexport namespace LambdaNode {\n    export function create(lambdaToken: Token, expression: ExpressionNode) {\n        const node: LambdaNode = {\n            start: lambdaToken.start,\n            length: lambdaToken.length,\n            nodeType: ParseNodeType.Lambda,\n            id: _nextNodeId++,\n            parameters: [],\n            expression,\n        };\n\n        expression.parent = node;\n\n        extendRange(node, expression);\n\n        return node;\n    }\n}\n\nexport interface NameNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Name;\n    token: IdentifierToken;\n    value: string;\n}\n\nexport namespace NameNode {\n    export function create(nameToken: IdentifierToken) {\n        const node: NameNode = {\n            start: nameToken.start,\n            length: nameToken.length,\n            nodeType: ParseNodeType.Name,\n            id: _nextNodeId++,\n            token: nameToken,\n            value: nameToken.value,\n        };\n\n        return node;\n    }\n}\n\nexport interface ConstantNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Constant;\n    constType: KeywordType;\n}\n\nexport namespace ConstantNode {\n    export function create(token: KeywordToken) {\n        const node: ConstantNode = {\n            start: token.start,\n            length: token.length,\n            nodeType: ParseNodeType.Constant,\n            id: _nextNodeId++,\n            constType: token.keywordType,\n        };\n\n        return node;\n    }\n}\n\nexport interface EllipsisNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Ellipsis;\n}\n\nexport namespace EllipsisNode {\n    export function create(range: TextRange) {\n        const node: EllipsisNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Ellipsis,\n            id: _nextNodeId++,\n        };\n\n        return node;\n    }\n}\n\nexport interface NumberNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Number;\n    value: number;\n    isInteger: boolean;\n    isImaginary: boolean;\n}\n\nexport namespace NumberNode {\n    export function create(token: NumberToken) {\n        const node: NumberNode = {\n            start: token.start,\n            length: token.length,\n            nodeType: ParseNodeType.Number,\n            id: _nextNodeId++,\n            value: token.value,\n            isInteger: token.isInteger,\n            isImaginary: token.isImaginary,\n        };\n\n        return node;\n    }\n}\n\nexport interface StringNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.String;\n    token: StringToken;\n    value: string;\n    hasUnescapeErrors: boolean;\n}\n\nexport namespace StringNode {\n    export function create(token: StringToken, unescapedValue: string, hasUnescapeErrors: boolean) {\n        const node: StringNode = {\n            start: token.start,\n            length: token.length,\n            nodeType: ParseNodeType.String,\n            id: _nextNodeId++,\n            token,\n            value: unescapedValue,\n            hasUnescapeErrors,\n        };\n\n        return node;\n    }\n}\n\nexport interface FormatStringNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.FormatString;\n    token: StringToken;\n    value: string;\n    hasUnescapeErrors: boolean;\n    expressions: ExpressionNode[];\n}\n\nexport namespace FormatStringNode {\n    export function create(\n        token: StringToken,\n        unescapedValue: string,\n        hasUnescapeErrors: boolean,\n        expressions: ExpressionNode[]\n    ) {\n        const node: FormatStringNode = {\n            start: token.start,\n            length: token.length,\n            nodeType: ParseNodeType.FormatString,\n            id: _nextNodeId++,\n            token,\n            value: unescapedValue,\n            hasUnescapeErrors,\n            expressions,\n        };\n\n        expressions.forEach((expr) => {\n            expr.parent = node;\n        });\n\n        return node;\n    }\n}\n\nexport interface StringListNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.StringList;\n    strings: (StringNode | FormatStringNode)[];\n\n    // If strings are found within the context of\n    // a type annotation, they are further parsed\n    // into an expression.\n    typeAnnotation?: ExpressionNode;\n}\n\nexport namespace StringListNode {\n    export function create(strings: (StringNode | FormatStringNode)[]) {\n        const node: StringListNode = {\n            start: strings[0].start,\n            length: strings[0].length,\n            nodeType: ParseNodeType.StringList,\n            id: _nextNodeId++,\n            strings,\n        };\n\n        if (strings.length > 0) {\n            strings.forEach((str) => {\n                str.parent = node;\n            });\n            extendRange(node, strings[strings.length - 1]);\n        }\n\n        return node;\n    }\n}\n\nexport interface DictionaryNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Dictionary;\n    entries: DictionaryEntryNode[];\n}\n\nexport namespace DictionaryNode {\n    export function create(range: TextRange) {\n        const node: DictionaryNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Dictionary,\n            id: _nextNodeId++,\n            entries: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface DictionaryKeyEntryNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.DictionaryKeyEntry;\n    keyExpression: ExpressionNode;\n    valueExpression: ExpressionNode;\n}\n\nexport namespace DictionaryKeyEntryNode {\n    export function create(keyExpression: ExpressionNode, valueExpression: ExpressionNode) {\n        const node: DictionaryKeyEntryNode = {\n            start: keyExpression.start,\n            length: keyExpression.length,\n            nodeType: ParseNodeType.DictionaryKeyEntry,\n            id: _nextNodeId++,\n            keyExpression,\n            valueExpression,\n        };\n\n        keyExpression.parent = node;\n        valueExpression.parent = node;\n\n        extendRange(node, valueExpression);\n\n        return node;\n    }\n}\n\nexport interface DictionaryExpandEntryNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.DictionaryExpandEntry;\n    expandExpression: ExpressionNode;\n}\n\nexport namespace DictionaryExpandEntryNode {\n    export function create(expandExpression: ExpressionNode) {\n        const node: DictionaryExpandEntryNode = {\n            start: expandExpression.start,\n            length: expandExpression.length,\n            nodeType: ParseNodeType.DictionaryExpandEntry,\n            id: _nextNodeId++,\n            expandExpression,\n        };\n\n        expandExpression.parent = node;\n\n        return node;\n    }\n}\n\nexport type DictionaryEntryNode = DictionaryKeyEntryNode | DictionaryExpandEntryNode | ListComprehensionNode;\n\nexport interface SetNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Set;\n    entries: ExpressionNode[];\n}\n\nexport namespace SetNode {\n    export function create(range: TextRange) {\n        const node: SetNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Set,\n            id: _nextNodeId++,\n            entries: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface ListNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.List;\n    entries: ExpressionNode[];\n}\n\nexport namespace ListNode {\n    export function create(range: TextRange) {\n        const node: ListNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.List,\n            id: _nextNodeId++,\n            entries: [],\n        };\n\n        return node;\n    }\n}\n\nexport const enum ArgumentCategory {\n    Simple,\n    UnpackedList,\n    UnpackedDictionary,\n}\n\nexport interface ArgumentNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Argument;\n    argumentCategory: ArgumentCategory;\n    name?: NameNode;\n    valueExpression: ExpressionNode;\n}\n\nexport namespace ArgumentNode {\n    export function create(startToken: Token, valueExpression: ExpressionNode, argCategory: ArgumentCategory) {\n        const node: ArgumentNode = {\n            start: startToken.start,\n            length: startToken.length,\n            nodeType: ParseNodeType.Argument,\n            id: _nextNodeId++,\n            valueExpression,\n            argumentCategory: argCategory,\n        };\n\n        valueExpression.parent = node;\n\n        extendRange(node, valueExpression);\n\n        return node;\n    }\n}\n\nexport interface DelNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Del;\n    expressions: ExpressionNode[];\n}\n\nexport namespace DelNode {\n    export function create(delToken: Token) {\n        const node: DelNode = {\n            start: delToken.start,\n            length: delToken.length,\n            nodeType: ParseNodeType.Del,\n            id: _nextNodeId++,\n            expressions: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface PassNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Pass;\n}\n\nexport namespace PassNode {\n    export function create(passToken: TextRange) {\n        const node: PassNode = {\n            start: passToken.start,\n            length: passToken.length,\n            nodeType: ParseNodeType.Pass,\n            id: _nextNodeId++,\n        };\n\n        return node;\n    }\n}\n\nexport interface ImportNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Import;\n    list: ImportAsNode[];\n}\n\nexport namespace ImportNode {\n    export function create(passToken: TextRange) {\n        const node: ImportNode = {\n            start: passToken.start,\n            length: passToken.length,\n            nodeType: ParseNodeType.Import,\n            id: _nextNodeId++,\n            list: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface ModuleNameNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.ModuleName;\n    leadingDots: number;\n    nameParts: NameNode[];\n\n    // This is an error condition used only for type completion.\n    hasTrailingDot?: boolean;\n}\n\nexport namespace ModuleNameNode {\n    export function create(range: TextRange) {\n        const node: ModuleNameNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.ModuleName,\n            id: _nextNodeId++,\n            leadingDots: 0,\n            nameParts: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface ImportAsNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.ImportAs;\n    module: ModuleNameNode;\n    alias?: NameNode;\n}\n\nexport namespace ImportAsNode {\n    export function create(module: ModuleNameNode) {\n        const node: ImportAsNode = {\n            start: module.start,\n            length: module.length,\n            nodeType: ParseNodeType.ImportAs,\n            id: _nextNodeId++,\n            module,\n        };\n\n        module.parent = node;\n\n        return node;\n    }\n}\n\nexport interface ImportFromNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.ImportFrom;\n    module: ModuleNameNode;\n    imports: ImportFromAsNode[];\n    isWildcardImport: boolean;\n    usesParens: boolean;\n    wildcardToken?: Token;\n    missingImportKeyword?: boolean;\n}\n\nexport namespace ImportFromNode {\n    export function create(fromToken: Token, module: ModuleNameNode) {\n        const node: ImportFromNode = {\n            start: fromToken.start,\n            length: fromToken.length,\n            nodeType: ParseNodeType.ImportFrom,\n            id: _nextNodeId++,\n            module,\n            imports: [],\n            isWildcardImport: false,\n            usesParens: false,\n        };\n\n        module.parent = node;\n\n        extendRange(node, module);\n\n        return node;\n    }\n}\n\nexport interface ImportFromAsNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.ImportFromAs;\n    name: NameNode;\n    alias?: NameNode;\n}\n\nexport namespace ImportFromAsNode {\n    export function create(name: NameNode) {\n        const node: ImportFromAsNode = {\n            start: name.start,\n            length: name.length,\n            nodeType: ParseNodeType.ImportFromAs,\n            id: _nextNodeId++,\n            name,\n        };\n\n        name.parent = node;\n\n        return node;\n    }\n}\n\nexport interface GlobalNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Global;\n    nameList: NameNode[];\n}\n\nexport namespace GlobalNode {\n    export function create(range: TextRange) {\n        const node: GlobalNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Global,\n            id: _nextNodeId++,\n            nameList: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface NonlocalNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Nonlocal;\n    nameList: NameNode[];\n}\n\nexport namespace NonlocalNode {\n    export function create(range: TextRange) {\n        const node: NonlocalNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Nonlocal,\n            id: _nextNodeId++,\n            nameList: [],\n        };\n\n        return node;\n    }\n}\n\nexport interface AssertNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Assert;\n    testExpression: ExpressionNode;\n    exceptionExpression?: ExpressionNode;\n}\n\nexport namespace AssertNode {\n    export function create(assertToken: Token, testExpression: ExpressionNode) {\n        const node: AssertNode = {\n            start: assertToken.start,\n            length: assertToken.length,\n            nodeType: ParseNodeType.Assert,\n            id: _nextNodeId++,\n            testExpression,\n        };\n\n        testExpression.parent = node;\n\n        extendRange(node, testExpression);\n\n        return node;\n    }\n}\n\nexport interface BreakNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Break;\n}\n\nexport namespace BreakNode {\n    export function create(range: TextRange) {\n        const node: BreakNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Break,\n            id: _nextNodeId++,\n        };\n\n        return node;\n    }\n}\n\nexport interface ContinueNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Continue;\n}\n\nexport namespace ContinueNode {\n    export function create(range: TextRange) {\n        const node: ContinueNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Continue,\n            id: _nextNodeId++,\n        };\n\n        return node;\n    }\n}\n\nexport interface ReturnNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Return;\n    returnExpression?: ExpressionNode;\n}\n\nexport namespace ReturnNode {\n    export function create(range: TextRange) {\n        const node: ReturnNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Return,\n            id: _nextNodeId++,\n        };\n\n        return node;\n    }\n}\n\nexport interface RaiseNode extends ParseNodeBase {\n    readonly nodeType: ParseNodeType.Raise;\n    typeExpression?: ExpressionNode;\n    valueExpression?: ExpressionNode;\n    tracebackExpression?: ExpressionNode;\n}\n\nexport namespace RaiseNode {\n    export function create(range: TextRange) {\n        const node: RaiseNode = {\n            start: range.start,\n            length: range.length,\n            nodeType: ParseNodeType.Raise,\n            id: _nextNodeId++,\n        };\n\n        return node;\n    }\n}\n\nexport type ParseNode =\n    | ErrorNode\n    | ArgumentNode\n    | AssertNode\n    | AssignmentExpressionNode\n    | AssignmentNode\n    | AugmentedAssignmentNode\n    | AwaitNode\n    | BinaryOperationNode\n    | BreakNode\n    | CallNode\n    | ClassNode\n    | ConstantNode\n    | ContinueNode\n    | DecoratorNode\n    | DelNode\n    | DictionaryNode\n    | DictionaryEntryNode\n    | DictionaryExpandEntryNode\n    | DictionaryKeyEntryNode\n    | EllipsisNode\n    | IfNode\n    | ImportNode\n    | ImportAsNode\n    | ImportFromNode\n    | ImportFromAsNode\n    | IndexNode\n    | IndexItemsNode\n    | ExceptNode\n    | ForNode\n    | FormatStringNode\n    | FunctionNode\n    | FunctionAnnotationNode\n    | GlobalNode\n    | LambdaNode\n    | ListNode\n    | ListComprehensionNode\n    | ListComprehensionForNode\n    | ListComprehensionIfNode\n    | MemberAccessNode\n    | ModuleNameNode\n    | ModuleNode\n    | NameNode\n    | NonlocalNode\n    | NumberNode\n    | ParameterNode\n    | PassNode\n    | RaiseNode\n    | ReturnNode\n    | SetNode\n    | SliceNode\n    | StatementListNode\n    | StringListNode\n    | StringNode\n    | SuiteNode\n    | TernaryNode\n    | TupleNode\n    | TryNode\n    | TypeAnnotationNode\n    | UnaryOperationNode\n    | UnpackNode\n    | WhileNode\n    | WithNode\n    | WithItemNode\n    | YieldNode\n    | YieldFromNode;\n\nexport type EvaluationScopeNode = LambdaNode | FunctionNode | ModuleNode | ClassNode | ListComprehensionNode;\nexport type ExecutionScopeNode = LambdaNode | FunctionNode | ModuleNode;\n","/*\n * parser.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Based on code from python-language-server repository:\n *  https://github.com/Microsoft/python-language-server\n *\n * Parser for the Python language. Converts a stream of tokens\n * into an abstract syntax tree (AST).\n */\n\nimport Char from 'typescript-char';\n\nimport { assert } from '../common/debug';\nimport { Diagnostic, DiagnosticAddendum } from '../common/diagnostic';\nimport { DiagnosticSink } from '../common/diagnosticSink';\nimport { convertOffsetsToRange, convertPositionToOffset } from '../common/positionUtils';\nimport { latestStablePythonVersion, PythonVersion } from '../common/pythonVersion';\nimport { TextRange } from '../common/textRange';\nimport { TextRangeCollection } from '../common/textRangeCollection';\nimport { timingStats } from '../common/timing';\nimport { Localizer } from '../localization/localize';\nimport {\n    ArgumentCategory,\n    ArgumentNode,\n    AssertNode,\n    AssignmentExpressionNode,\n    AssignmentNode,\n    AugmentedAssignmentNode,\n    AwaitNode,\n    BinaryOperationNode,\n    BreakNode,\n    CallNode,\n    ClassNode,\n    ConstantNode,\n    ContinueNode,\n    DecoratorNode,\n    DelNode,\n    DictionaryEntryNode,\n    DictionaryExpandEntryNode,\n    DictionaryKeyEntryNode,\n    DictionaryNode,\n    EllipsisNode,\n    ErrorExpressionCategory,\n    ErrorNode,\n    ExceptNode,\n    ExpressionNode,\n    extendRange,\n    FormatStringNode,\n    ForNode,\n    FunctionAnnotationNode,\n    FunctionNode,\n    getNextNodeId,\n    GlobalNode,\n    IfNode,\n    ImportAsNode,\n    ImportFromAsNode,\n    ImportFromNode,\n    ImportNode,\n    IndexItemsNode,\n    IndexNode,\n    LambdaNode,\n    ListComprehensionForNode,\n    ListComprehensionIfNode,\n    ListComprehensionIterNode,\n    ListComprehensionNode,\n    ListNode,\n    MemberAccessNode,\n    ModuleNameNode,\n    ModuleNode,\n    NameNode,\n    NonlocalNode,\n    NumberNode,\n    ParameterCategory,\n    ParameterNode,\n    ParseNode,\n    ParseNodeType,\n    PassNode,\n    RaiseNode,\n    ReturnNode,\n    SetNode,\n    SliceNode,\n    StatementListNode,\n    StatementNode,\n    StringListNode,\n    StringNode,\n    SuiteNode,\n    TernaryNode,\n    TryNode,\n    TupleNode,\n    TypeAnnotationNode,\n    UnaryOperationNode,\n    UnpackNode,\n    WhileNode,\n    WithItemNode,\n    WithNode,\n    YieldFromNode,\n    YieldNode,\n} from './parseNodes';\nimport * as StringTokenUtils from './stringTokenUtils';\nimport { Tokenizer, TokenizerOutput } from './tokenizer';\nimport {\n    DedentToken,\n    IdentifierToken,\n    IndentToken,\n    KeywordToken,\n    KeywordType,\n    NumberToken,\n    OperatorToken,\n    OperatorType,\n    StringToken,\n    StringTokenFlags,\n    Token,\n    TokenType,\n} from './tokenizerTypes';\n\ninterface ExpressionListResult {\n    list: ExpressionNode[];\n    trailingComma: boolean;\n    parseError?: ErrorNode;\n}\n\nexport class ParseOptions {\n    constructor() {\n        this.isStubFile = false;\n        this.pythonVersion = latestStablePythonVersion;\n        this.reportInvalidStringEscapeSequence = false;\n    }\n\n    isStubFile: boolean;\n    pythonVersion: PythonVersion;\n    reportInvalidStringEscapeSequence: boolean;\n}\n\nexport interface ParseResults {\n    text: string;\n    parseTree: ModuleNode;\n    importedModules: ModuleImport[];\n    futureImports: Map<string, boolean>;\n    tokenizerOutput: TokenizerOutput;\n    containsWildcardImport: boolean;\n}\n\nexport interface ParseExpressionTextResults {\n    parseTree?: ExpressionNode;\n    lines: TextRangeCollection<TextRange>;\n    diagnostics: Diagnostic[];\n}\n\nexport interface ModuleImport {\n    nameNode: ModuleNameNode;\n    leadingDots: number;\n    nameParts: string[];\n\n    // Used for \"from X import Y\" pattern. An empty\n    // array implies \"from X import *\".\n    importedSymbols: string[] | undefined;\n}\n\nconst enum ParseTextMode {\n    Expression,\n    VariableAnnotation,\n    FunctionAnnotation,\n}\n\nexport class Parser {\n    private _fileContents?: string;\n    private _tokenizerOutput?: TokenizerOutput;\n    private _tokenIndex = 0;\n    private _parseOptions: ParseOptions = new ParseOptions();\n    private _diagSink: DiagnosticSink = new DiagnosticSink();\n    private _isInLoop = false;\n    private _isInFunction = false;\n    private _isInFinally = false;\n    private _isParsingTypeAnnotation = false;\n    private _isParsingIndexTrailer = false;\n    private _futureImportMap = new Map<string, boolean>();\n    private _importedModules: ModuleImport[] = [];\n    private _containsWildcardImport = false;\n    private _assignmentExpressionsAllowed = true;\n    private _typingImportAliases: string[] = [];\n    private _typingSymbolAliases: Map<string, string> = new Map<string, string>();\n\n    parseSourceFile(fileContents: string, parseOptions: ParseOptions, diagSink: DiagnosticSink): ParseResults {\n        timingStats.tokenizeFileTime.timeOperation(() => {\n            this._startNewParse(fileContents, 0, fileContents.length, parseOptions, diagSink);\n        });\n\n        const moduleNode = ModuleNode.create({ start: 0, length: fileContents.length });\n\n        timingStats.parseFileTime.timeOperation(() => {\n            while (!this._atEof()) {\n                if (!this._consumeTokenIfType(TokenType.NewLine)) {\n                    // Handle a common error case and try to recover.\n                    const nextToken = this._peekToken();\n                    if (nextToken.type === TokenType.Indent) {\n                        this._getNextToken();\n                        const indentToken = nextToken as IndentToken;\n                        if (indentToken.isIndentAmbiguous) {\n                            this._addError(Localizer.Diagnostic.inconsistentTabs(), indentToken);\n                        } else {\n                            this._addError(Localizer.Diagnostic.unexpectedIndent(), nextToken);\n                        }\n                    }\n\n                    const statement = this._parseStatement();\n                    if (!statement) {\n                        // Perform basic error recovery to get to the next line.\n                        this._consumeTokensUntilType([TokenType.NewLine]);\n                    } else {\n                        statement.parent = moduleNode;\n                        moduleNode.statements.push(statement);\n                    }\n                }\n            }\n        });\n\n        assert(this._tokenizerOutput !== undefined);\n        return {\n            text: fileContents,\n            parseTree: moduleNode,\n            importedModules: this._importedModules,\n            futureImports: this._futureImportMap,\n            tokenizerOutput: this._tokenizerOutput!,\n            containsWildcardImport: this._containsWildcardImport,\n        };\n    }\n\n    parseTextExpression(\n        fileContents: string,\n        textOffset: number,\n        textLength: number,\n        parseOptions: ParseOptions,\n        parseTextMode = ParseTextMode.Expression,\n        initialParenDepth = 0\n    ): ParseExpressionTextResults {\n        const diagSink = new DiagnosticSink();\n        this._startNewParse(fileContents, textOffset, textLength, parseOptions, diagSink, initialParenDepth);\n\n        let parseTree: ExpressionNode | undefined;\n        if (parseTextMode === ParseTextMode.VariableAnnotation) {\n            parseTree = this._parseTypeAnnotation(/* allowUnionNotation */ false);\n        } else if (parseTextMode === ParseTextMode.FunctionAnnotation) {\n            parseTree = this._parseFunctionTypeAnnotation();\n        } else {\n            parseTree = this._parseTestExpression(false);\n        }\n\n        if (this._peekTokenType() === TokenType.NewLine) {\n            this._getNextToken();\n        }\n\n        if (!this._atEof()) {\n            this._addError(Localizer.Diagnostic.unexpectedExprToken(), this._peekToken());\n        }\n\n        return {\n            parseTree,\n            lines: this._tokenizerOutput!.lines,\n            diagnostics: diagSink.fetchAndClear(),\n        };\n    }\n\n    private _startNewParse(\n        fileContents: string,\n        textOffset: number,\n        textLength: number,\n        parseOptions: ParseOptions,\n        diagSink: DiagnosticSink,\n        initialParenDepth = 0\n    ) {\n        this._fileContents = fileContents;\n        this._parseOptions = parseOptions;\n        this._diagSink = diagSink;\n\n        // Tokenize the file contents.\n        const tokenizer = new Tokenizer();\n        this._tokenizerOutput = tokenizer.tokenize(fileContents, textOffset, textLength, initialParenDepth);\n        this._tokenIndex = 0;\n    }\n\n    // stmt: simple_stmt | compound_stmt\n    // compound_stmt: if_stmt | while_stmt | for_stmt | try_stmt | with_stmt\n    //   | funcdef | classdef | decorated | async_stmt\n    private _parseStatement(): StatementNode | ErrorNode | undefined {\n        // Handle the errant condition of a dedent token here to provide\n        // better recovery.\n        if (this._consumeTokenIfType(TokenType.Dedent)) {\n            this._addError(Localizer.Diagnostic.unexpectedUnindent(), this._peekToken());\n        }\n\n        switch (this._peekKeywordType()) {\n            case KeywordType.If:\n                return this._parseIfStatement();\n\n            case KeywordType.While:\n                return this._parseWhileStatement();\n\n            case KeywordType.For:\n                return this._parseForStatement();\n\n            case KeywordType.Try:\n                return this._parseTryStatement();\n\n            case KeywordType.With:\n                return this._parseWithStatement();\n\n            case KeywordType.Def:\n                return this._parseFunctionDef();\n\n            case KeywordType.Class:\n                return this._parseClassDef();\n\n            case KeywordType.Async:\n                return this._parseAsyncStatement();\n        }\n\n        if (this._peekOperatorType() === OperatorType.MatrixMultiply) {\n            return this._parseDecorated();\n        }\n\n        return this._parseSimpleStatement();\n    }\n\n    // async_stmt: 'async' (funcdef | with_stmt | for_stmt)\n    private _parseAsyncStatement(): StatementNode | undefined {\n        const asyncToken = this._getKeywordToken(KeywordType.Async);\n\n        switch (this._peekKeywordType()) {\n            case KeywordType.Def:\n                return this._parseFunctionDef(asyncToken);\n\n            case KeywordType.With:\n                return this._parseWithStatement(asyncToken);\n\n            case KeywordType.For:\n                return this._parseForStatement(asyncToken);\n        }\n\n        this._addError(Localizer.Diagnostic.unexpectedAsyncToken(), asyncToken);\n\n        return undefined;\n    }\n\n    // if_stmt: 'if' test_suite ('elif' test_suite)* ['else' suite]\n    // test_suite: test suite\n    // test: or_test ['if' or_test 'else' test] | lambdef\n    private _parseIfStatement(keywordType: KeywordType.If | KeywordType.Elif = KeywordType.If): IfNode {\n        const ifOrElifToken = this._getKeywordToken(keywordType);\n\n        const test = this._parseTestExpression(true);\n        const suite = this._parseSuite(this._isInFunction);\n        const ifNode = IfNode.create(ifOrElifToken, test, suite);\n\n        if (this._consumeTokenIfKeyword(KeywordType.Else)) {\n            ifNode.elseSuite = this._parseSuite(this._isInFunction);\n            ifNode.elseSuite.parent = ifNode;\n            extendRange(ifNode, ifNode.elseSuite);\n        } else if (this._peekKeywordType() === KeywordType.Elif) {\n            // Recursively handle an \"elif\" statement.\n            ifNode.elseSuite = this._parseIfStatement(KeywordType.Elif);\n            ifNode.elseSuite.parent = ifNode;\n            extendRange(ifNode, ifNode.elseSuite);\n        }\n\n        return ifNode;\n    }\n\n    private _parseLoopSuite(): SuiteNode {\n        const wasInLoop = this._isInLoop;\n        const wasInFinally = this._isInFinally;\n        this._isInLoop = true;\n        this._isInFinally = false;\n\n        const suite = this._parseSuite(this._isInFunction);\n\n        this._isInLoop = wasInLoop;\n        this._isInFinally = wasInFinally;\n\n        return suite;\n    }\n\n    // suite: ':' (simple_stmt | NEWLINE INDENT stmt+ DEDENT)\n    private _parseSuite(isFunction = false, postColonCallback?: () => void): SuiteNode {\n        const nextToken = this._peekToken();\n        const suite = SuiteNode.create(nextToken);\n\n        if (!this._consumeTokenIfType(TokenType.Colon)) {\n            this._addError(Localizer.Diagnostic.expectedColon(), nextToken);\n\n            // Try to perform parse recovery by consuming tokens until\n            // we find the end of the line.\n            if (this._consumeTokensUntilType([TokenType.NewLine, TokenType.Colon])) {\n                this._getNextToken();\n            }\n        }\n\n        if (postColonCallback) {\n            postColonCallback();\n        }\n\n        const wasFunction = this._isInFunction;\n        this._isInFunction = isFunction;\n\n        if (this._consumeTokenIfType(TokenType.NewLine)) {\n            if (postColonCallback) {\n                postColonCallback();\n            }\n\n            const possibleIndent = this._peekToken();\n            if (!this._consumeTokenIfType(TokenType.Indent)) {\n                this._addError(Localizer.Diagnostic.expectedIndentedBlock(), this._peekToken());\n            } else {\n                const indentToken = possibleIndent as IndentToken;\n                if (indentToken.isIndentAmbiguous) {\n                    this._addError(Localizer.Diagnostic.inconsistentTabs(), indentToken);\n                }\n            }\n\n            while (true) {\n                // Handle a common error here and see if we can recover.\n                const nextToken = this._peekToken();\n                if (nextToken.type === TokenType.Indent) {\n                    this._getNextToken();\n                    const indentToken = nextToken as IndentToken;\n                    if (indentToken.isIndentAmbiguous) {\n                        this._addError(Localizer.Diagnostic.inconsistentTabs(), indentToken);\n                    } else {\n                        this._addError(Localizer.Diagnostic.unexpectedIndent(), nextToken);\n                    }\n                }\n\n                const statement = this._parseStatement();\n                if (!statement) {\n                    // Perform basic error recovery to get to the next line.\n                    this._consumeTokensUntilType([TokenType.NewLine]);\n                } else {\n                    statement.parent = suite;\n                    suite.statements.push(statement);\n                }\n\n                const dedentToken = this._peekToken() as DedentToken;\n                if (this._consumeTokenIfType(TokenType.Dedent)) {\n                    if (!dedentToken.matchesIndent) {\n                        this._addError(Localizer.Diagnostic.inconsistentIndent(), dedentToken);\n                    }\n                    break;\n                }\n\n                if (this._peekTokenType() === TokenType.EndOfStream) {\n                    break;\n                }\n            }\n        } else {\n            const simpleStatement = this._parseSimpleStatement();\n            suite.statements.push(simpleStatement);\n            simpleStatement.parent = suite;\n        }\n\n        if (suite.statements.length > 0) {\n            extendRange(suite, suite.statements[suite.statements.length - 1]);\n        }\n\n        this._isInFunction = wasFunction;\n\n        return suite;\n    }\n\n    // for_stmt: [async] 'for' exprlist 'in' testlist suite ['else' suite]\n    private _parseForStatement(asyncToken?: KeywordToken): ForNode {\n        const forToken = this._getKeywordToken(KeywordType.For);\n\n        const exprListResult = this._parseExpressionList(true);\n        const targetExpr = this._makeExpressionOrTuple(exprListResult, /* enclosedInParens */ false);\n        let seqExpr: ExpressionNode;\n        let forSuite: SuiteNode;\n        let elseSuite: SuiteNode | undefined;\n\n        if (!this._consumeTokenIfKeyword(KeywordType.In)) {\n            seqExpr = this._handleExpressionParseError(\n                ErrorExpressionCategory.MissingIn,\n                Localizer.Diagnostic.expectedIn()\n            );\n            forSuite = SuiteNode.create(this._peekToken());\n        } else {\n            seqExpr = this._parseTestListAsExpression(\n                ErrorExpressionCategory.MissingExpression,\n                Localizer.Diagnostic.expectedInExpr()\n            );\n            forSuite = this._parseLoopSuite();\n\n            if (this._consumeTokenIfKeyword(KeywordType.Else)) {\n                elseSuite = this._parseSuite(this._isInFunction);\n            }\n        }\n\n        const forNode = ForNode.create(forToken, targetExpr, seqExpr, forSuite);\n        forNode.elseSuite = elseSuite;\n        if (elseSuite) {\n            extendRange(forNode, elseSuite);\n            elseSuite.parent = forNode;\n        }\n\n        if (asyncToken) {\n            forNode.isAsync = true;\n            extendRange(forNode, asyncToken);\n        }\n\n        return forNode;\n    }\n\n    // comp_iter: comp_for | comp_if\n    private _tryParseListComprehension(target: ParseNode): ListComprehensionNode | undefined {\n        const compFor = this._tryParseCompForStatement();\n\n        if (!compFor) {\n            return undefined;\n        }\n\n        if (target.nodeType === ParseNodeType.Unpack) {\n            this._addError(Localizer.Diagnostic.unpackIllegalInComprehension(), target);\n        } else if (target.nodeType === ParseNodeType.DictionaryExpandEntry) {\n            this._addError(Localizer.Diagnostic.dictExpandIllegalInComprehension(), target);\n        }\n\n        const listCompNode = ListComprehensionNode.create(target);\n\n        const compList: ListComprehensionIterNode[] = [compFor];\n        while (true) {\n            const compIter = this._tryParseCompForStatement() || this._tryParseCompIfStatement();\n            if (!compIter) {\n                break;\n            }\n            compIter.parent = listCompNode;\n            compList.push(compIter);\n        }\n\n        listCompNode.comprehensions = compList;\n        if (compList.length > 0) {\n            compList.forEach((comp) => {\n                comp.parent = listCompNode;\n            });\n            extendRange(listCompNode, compList[compList.length - 1]);\n        }\n        return listCompNode;\n    }\n\n    // comp_for: ['async'] 'for' exprlist 'in' or_test [comp_iter]\n    private _tryParseCompForStatement(): ListComprehensionForNode | undefined {\n        const startTokenKeywordType = this._peekKeywordType();\n\n        if (startTokenKeywordType === KeywordType.Async) {\n            const nextToken = this._peekToken(1) as KeywordToken;\n            if (nextToken.type !== TokenType.Keyword || nextToken.keywordType !== KeywordType.For) {\n                return undefined;\n            }\n        } else if (startTokenKeywordType !== KeywordType.For) {\n            return undefined;\n        }\n\n        let asyncToken: KeywordToken | undefined;\n        if (this._peekKeywordType() === KeywordType.Async) {\n            asyncToken = this._getKeywordToken(KeywordType.Async);\n        }\n\n        const forToken = this._getKeywordToken(KeywordType.For);\n\n        const exprListResult = this._parseExpressionList(true);\n        const targetExpr = this._makeExpressionOrTuple(exprListResult, /* enclosedInParens */ false);\n        let seqExpr: ExpressionNode | undefined;\n\n        if (!this._consumeTokenIfKeyword(KeywordType.In)) {\n            seqExpr = this._handleExpressionParseError(\n                ErrorExpressionCategory.MissingIn,\n                Localizer.Diagnostic.expectedIn()\n            );\n        } else {\n            this._disallowAssignmentExpression(() => {\n                seqExpr = this._parseOrTest();\n            });\n        }\n\n        const compForNode = ListComprehensionForNode.create(asyncToken || forToken, targetExpr, seqExpr!);\n\n        if (asyncToken) {\n            compForNode.isAsync = true;\n        }\n\n        return compForNode;\n    }\n\n    // comp_if: 'if' test_nocond [comp_iter]\n    // comp_iter: comp_for | comp_if\n    private _tryParseCompIfStatement(): ListComprehensionIfNode | undefined {\n        if (this._peekKeywordType() !== KeywordType.If) {\n            return undefined;\n        }\n\n        const ifToken = this._getKeywordToken(KeywordType.If);\n        const ifExpr = this._tryParseLambdaExpression() || this._parseAssignmentExpression();\n\n        const compIfNode = ListComprehensionIfNode.create(ifToken, ifExpr);\n\n        return compIfNode;\n    }\n\n    // while_stmt: 'while' test suite ['else' suite]\n    private _parseWhileStatement(): WhileNode {\n        const whileToken = this._getKeywordToken(KeywordType.While);\n\n        const whileNode = WhileNode.create(whileToken, this._parseTestExpression(true), this._parseLoopSuite());\n\n        if (this._consumeTokenIfKeyword(KeywordType.Else)) {\n            whileNode.elseSuite = this._parseSuite(this._isInFunction);\n            whileNode.elseSuite.parent = whileNode;\n            extendRange(whileNode, whileNode.elseSuite);\n        }\n\n        return whileNode;\n    }\n\n    // try_stmt: ('try' suite\n    //         ((except_clause suite)+\n    //             ['else' suite]\n    //             ['finally' suite] |\n    //         'finally' suite))\n    // except_clause: 'except' [test ['as' NAME]]\n    private _parseTryStatement(): TryNode {\n        const tryToken = this._getKeywordToken(KeywordType.Try);\n        const trySuite = this._parseSuite(this._isInFunction);\n        const tryNode = TryNode.create(tryToken, trySuite);\n        let sawCatchAllExcept = false;\n\n        while (true) {\n            const exceptToken = this._peekToken();\n            if (!this._consumeTokenIfKeyword(KeywordType.Except)) {\n                break;\n            }\n\n            let typeExpr: ExpressionNode | undefined;\n            let symbolName: IdentifierToken | undefined;\n            if (this._peekTokenType() !== TokenType.Colon) {\n                typeExpr = this._parseTestExpression(true);\n\n                if (this._consumeTokenIfKeyword(KeywordType.As)) {\n                    symbolName = this._getTokenIfIdentifier();\n                    if (!symbolName) {\n                        this._addError(Localizer.Diagnostic.expectedNameAfterAs(), this._peekToken());\n                    }\n                } else {\n                    // Handle the python 2.x syntax in a graceful manner.\n                    const peekToken = this._peekToken();\n                    if (this._consumeTokenIfType(TokenType.Comma)) {\n                        this._addError(Localizer.Diagnostic.expectedAsAfterException(), peekToken);\n\n                        // Parse the expression expected in python 2.x, but discard it.\n                        this._parseTestExpression(false);\n                    }\n                }\n            }\n\n            if (!typeExpr) {\n                if (sawCatchAllExcept) {\n                    this._addError(Localizer.Diagnostic.duplicateCatchAll(), exceptToken);\n                }\n                sawCatchAllExcept = true;\n            } else {\n                if (sawCatchAllExcept) {\n                    this._addError(Localizer.Diagnostic.namedExceptAfterCatchAll(), typeExpr);\n                }\n            }\n\n            const exceptSuite = this._parseSuite(this._isInFunction);\n            const exceptNode = ExceptNode.create(exceptToken, exceptSuite);\n            if (typeExpr) {\n                exceptNode.typeExpression = typeExpr;\n                exceptNode.typeExpression.parent = exceptNode;\n            }\n\n            if (symbolName) {\n                exceptNode.name = NameNode.create(symbolName);\n                exceptNode.name.parent = exceptNode;\n            }\n\n            tryNode.exceptClauses.push(exceptNode);\n            exceptNode.parent = tryNode;\n        }\n\n        if (tryNode.exceptClauses.length > 0) {\n            extendRange(tryNode, tryNode.exceptClauses[tryNode.exceptClauses.length - 1]);\n\n            if (this._consumeTokenIfKeyword(KeywordType.Else)) {\n                tryNode.elseSuite = this._parseSuite(this._isInFunction);\n                tryNode.elseSuite.parent = tryNode;\n                extendRange(tryNode, tryNode.elseSuite);\n            }\n        }\n\n        if (this._consumeTokenIfKeyword(KeywordType.Finally)) {\n            tryNode.finallySuite = this._parseSuite(this._isInFunction);\n            tryNode.finallySuite.parent = tryNode;\n            extendRange(tryNode, tryNode.finallySuite);\n        }\n\n        return tryNode;\n    }\n\n    // funcdef: 'def' NAME parameters ['->' test] ':' suite\n    // parameters: '(' [typedargslist] ')'\n    private _parseFunctionDef(asyncToken?: KeywordToken, decorators?: DecoratorNode[]): FunctionNode | ErrorNode {\n        const defToken = this._getKeywordToken(KeywordType.Def);\n\n        const nameToken = this._getTokenIfIdentifier();\n        if (!nameToken) {\n            this._addError(Localizer.Diagnostic.expectedFunctionName(), defToken);\n            return ErrorNode.create(defToken, ErrorExpressionCategory.MissingFunctionParameterList);\n        }\n\n        if (!this._consumeTokenIfType(TokenType.OpenParenthesis)) {\n            this._addError(Localizer.Diagnostic.expectedOpenParen(), this._peekToken());\n            return ErrorNode.create(\n                nameToken,\n                ErrorExpressionCategory.MissingFunctionParameterList,\n                NameNode.create(nameToken)\n            );\n        }\n\n        const paramList = this._parseVarArgsList(TokenType.CloseParenthesis, /* allowAnnotations */ true);\n\n        if (!this._consumeTokenIfType(TokenType.CloseParenthesis)) {\n            this._addError(Localizer.Diagnostic.expectedCloseParen(), this._peekToken());\n            this._consumeTokensUntilType([TokenType.Colon]);\n        }\n\n        let returnType: ExpressionNode | undefined;\n        if (this._consumeTokenIfType(TokenType.Arrow)) {\n            returnType = this._parseTypeAnnotation();\n        }\n\n        let functionTypeAnnotationToken: StringToken | undefined;\n        const suite = this._parseSuite(/* isFunction */ true, () => {\n            if (!functionTypeAnnotationToken) {\n                functionTypeAnnotationToken = this._getTypeAnnotationCommentText();\n            }\n        });\n\n        const functionNode = FunctionNode.create(defToken, NameNode.create(nameToken), suite);\n        if (asyncToken) {\n            functionNode.isAsync = true;\n            extendRange(functionNode, asyncToken);\n        }\n\n        functionNode.parameters = paramList;\n        paramList.forEach((param) => {\n            param.parent = functionNode;\n        });\n\n        if (decorators) {\n            functionNode.decorators = decorators;\n            decorators.forEach((decorator) => {\n                decorator.parent = functionNode;\n            });\n\n            if (decorators.length > 0) {\n                extendRange(functionNode, decorators[0]);\n            }\n        }\n\n        if (returnType) {\n            functionNode.returnTypeAnnotation = returnType;\n            functionNode.returnTypeAnnotation.parent = functionNode;\n            extendRange(functionNode, returnType);\n        }\n\n        // If there was a type annotation comment for the function,\n        // parse it now.\n        if (functionTypeAnnotationToken) {\n            this._parseFunctionTypeAnnotationComment(functionTypeAnnotationToken, functionNode);\n        }\n\n        return functionNode;\n    }\n\n    // typedargslist: (\n    //   tfpdef ['=' test] (',' tfpdef ['=' test])*\n    //      [ ','\n    //          [\n    //              '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]\n    //              | '**' tfpdef [',']\n    //          ]\n    //      ]\n    //   | '*' [tfpdef] (',' tfpdef ['=' test])* [',' ['**' tfpdef [',']]]\n    //   | '**' tfpdef [','])\n    // tfpdef: NAME [':' test]\n    // vfpdef: NAME;\n    private _parseVarArgsList(terminator: TokenType, allowAnnotations: boolean): ParameterNode[] {\n        const paramMap = new Map<string, string>();\n        const paramList: ParameterNode[] = [];\n        let sawDefaultParam = false;\n        let reportedNonDefaultParamErr = false;\n        let sawKwSeparator = false;\n        let sawPositionOnlySeparator = false;\n        let sawVarArgs = false;\n        let sawKwArgs = false;\n\n        while (true) {\n            if (this._peekTokenType() === terminator) {\n                break;\n            }\n\n            const param = this._parseParameter(allowAnnotations);\n            if (!param) {\n                this._consumeTokensUntilType([terminator]);\n                break;\n            }\n\n            if (param.name) {\n                const name = param.name.value;\n                if (paramMap.has(name)) {\n                    this._addError(Localizer.Diagnostic.duplicateParam().format({ name }), param.name);\n                } else {\n                    paramMap.set(name, name);\n                }\n            } else if (param.category === ParameterCategory.Simple) {\n                if (paramList.length === 0) {\n                    this._addError(Localizer.Diagnostic.positionOnlyFirstParam(), param);\n                }\n            }\n\n            if (param.category === ParameterCategory.Simple) {\n                if (!param.name) {\n                    if (sawPositionOnlySeparator) {\n                        this._addError(Localizer.Diagnostic.duplicatePositionOnly(), param);\n                    } else if (sawKwSeparator) {\n                        this._addError(Localizer.Diagnostic.positionOnlyAfterNameOnly(), param);\n                    }\n                    sawPositionOnlySeparator = true;\n                } else {\n                    if (param.defaultValue) {\n                        sawDefaultParam = true;\n                    } else if (sawDefaultParam && !sawKwSeparator && !sawVarArgs) {\n                        // Report this error only once.\n                        if (!reportedNonDefaultParamErr) {\n                            this._addError(Localizer.Diagnostic.nonDefaultAfterDefault(), param);\n                            reportedNonDefaultParamErr = true;\n                        }\n                    }\n                }\n            }\n\n            paramList.push(param);\n\n            if (param.category === ParameterCategory.VarArgList) {\n                if (!param.name) {\n                    if (sawKwSeparator) {\n                        this._addError(Localizer.Diagnostic.duplicateNameOnly(), param);\n                    }\n                    sawKwSeparator = true;\n                } else {\n                    if (sawVarArgs) {\n                        this._addError(Localizer.Diagnostic.duplicateArgsParam(), param);\n                    }\n                    sawVarArgs = true;\n                }\n            }\n\n            if (param.category === ParameterCategory.VarArgDictionary) {\n                if (sawKwArgs) {\n                    this._addError(Localizer.Diagnostic.duplicateKwargsParam(), param);\n                }\n                sawKwArgs = true;\n            } else if (sawKwArgs) {\n                this._addError(Localizer.Diagnostic.paramAfterKwargsParam(), param);\n            }\n\n            const foundComma = this._consumeTokenIfType(TokenType.Comma);\n\n            if (allowAnnotations && !param.typeAnnotation) {\n                // Look for a type annotation comment at the end of the line.\n                const typeAnnotationComment = this._parseVariableTypeAnnotationComment();\n                if (typeAnnotationComment) {\n                    param.typeAnnotationComment = typeAnnotationComment;\n                    param.typeAnnotationComment.parent = param;\n                    extendRange(param, param.typeAnnotationComment);\n                }\n            }\n\n            if (!foundComma) {\n                break;\n            }\n        }\n\n        if (paramList.length > 0) {\n            const lastParam = paramList[paramList.length - 1];\n            if (lastParam.category === ParameterCategory.VarArgList && !lastParam.name) {\n                this._addError(Localizer.Diagnostic.expectedNamedArgument(), lastParam);\n            }\n        }\n\n        return paramList;\n    }\n\n    private _parseParameter(allowAnnotations: boolean): ParameterNode {\n        let starCount = 0;\n        let slashCount = 0;\n        const firstToken = this._peekToken();\n\n        if (this._consumeTokenIfOperator(OperatorType.Multiply)) {\n            starCount = 1;\n        } else if (this._consumeTokenIfOperator(OperatorType.Power)) {\n            starCount = 2;\n        } else if (this._consumeTokenIfOperator(OperatorType.Divide)) {\n            if (this._getLanguageVersion() < PythonVersion.V3_8) {\n                this._addError(Localizer.Diagnostic.positionOnlyIncompatible(), firstToken);\n            }\n            slashCount = 1;\n        }\n\n        const paramName = this._getTokenIfIdentifier();\n        if (!paramName) {\n            if (starCount === 1) {\n                const paramNode = ParameterNode.create(firstToken, ParameterCategory.VarArgList);\n                return paramNode;\n            } else if (slashCount === 1) {\n                const paramNode = ParameterNode.create(firstToken, ParameterCategory.Simple);\n                return paramNode;\n            }\n\n            // Check for the Python 2.x parameter sublist syntax and handle it gracefully.\n            if (this._peekTokenType() === TokenType.OpenParenthesis) {\n                const sublistStart = this._getNextToken();\n                if (this._consumeTokensUntilType([TokenType.CloseParenthesis])) {\n                    this._getNextToken();\n                }\n                this._addError(Localizer.Diagnostic.sublistParamsIncompatible(), sublistStart);\n            } else {\n                this._addError(Localizer.Diagnostic.expectedParamName(), this._peekToken());\n            }\n        }\n\n        let paramType = ParameterCategory.Simple;\n        if (starCount === 1) {\n            paramType = ParameterCategory.VarArgList;\n        } else if (starCount === 2) {\n            paramType = ParameterCategory.VarArgDictionary;\n        }\n        const paramNode = ParameterNode.create(firstToken, paramType);\n        if (paramName) {\n            paramNode.name = NameNode.create(paramName);\n            paramNode.name.parent = paramNode;\n            extendRange(paramNode, paramName);\n        }\n\n        if (allowAnnotations && this._consumeTokenIfType(TokenType.Colon)) {\n            paramNode.typeAnnotation = this._parseTypeAnnotation();\n            paramNode.typeAnnotation.parent = paramNode;\n            extendRange(paramNode, paramNode.typeAnnotation);\n        }\n\n        if (this._consumeTokenIfOperator(OperatorType.Assign)) {\n            paramNode.defaultValue = this._parseTestExpression(false);\n            paramNode.defaultValue.parent = paramNode;\n            extendRange(paramNode, paramNode.defaultValue);\n\n            if (starCount > 0) {\n                this._addError(Localizer.Diagnostic.defaultValueNotAllowed(), paramNode.defaultValue);\n            }\n        }\n\n        return paramNode;\n    }\n\n    // with_stmt: 'with' with_item (',' with_item)*  ':' suite\n    private _parseWithStatement(asyncToken?: KeywordToken): WithNode {\n        const withToken = this._getKeywordToken(KeywordType.With);\n        const withItemList: WithItemNode[] = [];\n\n        while (true) {\n            withItemList.push(this._parseWithItem());\n\n            if (!this._consumeTokenIfType(TokenType.Comma)) {\n                break;\n            }\n        }\n\n        const withSuite = this._parseSuite(this._isInFunction);\n        const withNode = WithNode.create(withToken, withSuite);\n        if (asyncToken) {\n            withNode.isAsync = true;\n            extendRange(withNode, asyncToken);\n        }\n\n        withNode.withItems = withItemList;\n        withItemList.forEach((withItem) => {\n            withItem.parent = withNode;\n        });\n\n        return withNode;\n    }\n\n    // with_item: test ['as' expr]\n    private _parseWithItem(): WithItemNode {\n        const expr = this._parseTestExpression(true);\n        const itemNode = WithItemNode.create(expr);\n\n        if (this._consumeTokenIfKeyword(KeywordType.As)) {\n            itemNode.target = this._parseExpression(false);\n            itemNode.target.parent = itemNode;\n            extendRange(itemNode, itemNode.target);\n        }\n\n        return itemNode;\n    }\n\n    // decorators: decorator+\n    // decorated: decorators (classdef | funcdef | async_funcdef)\n    private _parseDecorated(): StatementNode | undefined {\n        const decoratorList: DecoratorNode[] = [];\n\n        while (true) {\n            if (this._peekOperatorType() === OperatorType.MatrixMultiply) {\n                decoratorList.push(this._parseDecorator());\n            } else {\n                break;\n            }\n        }\n\n        const nextToken = this._peekToken() as KeywordToken;\n        if (nextToken.type === TokenType.Keyword) {\n            if (nextToken.keywordType === KeywordType.Async) {\n                this._getNextToken();\n\n                if (this._peekKeywordType() !== KeywordType.Def) {\n                    this._addError(Localizer.Diagnostic.expectedFunctionAfterAsync(), this._peekToken());\n                } else {\n                    return this._parseFunctionDef(nextToken, decoratorList);\n                }\n            } else if (nextToken.keywordType === KeywordType.Def) {\n                return this._parseFunctionDef(undefined, decoratorList);\n            } else if (nextToken.keywordType === KeywordType.Class) {\n                return this._parseClassDef(decoratorList);\n            }\n        }\n\n        this._addError(Localizer.Diagnostic.expectedAfterDecorator(), this._peekToken());\n\n        // Return a dummy class declaration so the completion provider has\n        // some parse nodes to work with.\n        return ClassNode.createDummyForDecorators(decoratorList);\n    }\n\n    // decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE\n    private _parseDecorator(): DecoratorNode {\n        const atOperator = this._getNextToken() as OperatorToken;\n        assert(atOperator.operatorType === OperatorType.MatrixMultiply);\n\n        const expression = this._parseTestExpression(true);\n\n        // Versions of Python prior to 3.9 support a limited set of\n        // expression forms.\n        if (this._getLanguageVersion() < PythonVersion.V3_9) {\n            let isSupportedExpressionForm = false;\n            if (this._isNameOrMemberAccessExpression(expression)) {\n                isSupportedExpressionForm = true;\n            } else if (\n                expression.nodeType === ParseNodeType.Call &&\n                this._isNameOrMemberAccessExpression(expression.leftExpression)\n            ) {\n                isSupportedExpressionForm = true;\n            }\n\n            if (!isSupportedExpressionForm) {\n                this._addError(Localizer.Diagnostic.expectedDecoratorExpr(), expression);\n            }\n        }\n\n        const decoratorNode = DecoratorNode.create(atOperator, expression);\n\n        if (!this._consumeTokenIfType(TokenType.NewLine)) {\n            this._addError(Localizer.Diagnostic.expectedDecoratorNewline(), this._peekToken());\n            this._consumeTokensUntilType([TokenType.NewLine]);\n        }\n\n        return decoratorNode;\n    }\n\n    private _isNameOrMemberAccessExpression(expression: ExpressionNode): boolean {\n        if (expression.nodeType === ParseNodeType.Name) {\n            return true;\n        } else if (expression.nodeType === ParseNodeType.MemberAccess) {\n            return this._isNameOrMemberAccessExpression(expression.leftExpression);\n        }\n\n        return false;\n    }\n\n    // classdef: 'class' NAME ['(' [arglist] ')'] suite\n    private _parseClassDef(decorators?: DecoratorNode[]): ClassNode {\n        const classToken = this._getKeywordToken(KeywordType.Class);\n\n        let nameToken = this._getTokenIfIdentifier();\n        if (!nameToken) {\n            this._addError(Localizer.Diagnostic.expectedClassName(), this._peekToken());\n            nameToken = IdentifierToken.create(0, 0, '', undefined);\n        }\n\n        let argList: ArgumentNode[] = [];\n        if (this._consumeTokenIfType(TokenType.OpenParenthesis)) {\n            argList = this._parseArgList();\n\n            if (!this._consumeTokenIfType(TokenType.CloseParenthesis)) {\n                this._addError(Localizer.Diagnostic.expectedCloseParen(), this._peekToken());\n            }\n        }\n\n        const suite = this._parseSuite(false);\n\n        const classNode = ClassNode.create(classToken, NameNode.create(nameToken), suite);\n        classNode.arguments = argList;\n        argList.forEach((arg) => {\n            arg.parent = classNode;\n        });\n\n        if (decorators) {\n            classNode.decorators = decorators;\n            if (decorators.length > 0) {\n                decorators.forEach((decorator) => {\n                    decorator.parent = classNode;\n                });\n                extendRange(classNode, decorators[0]);\n            }\n        }\n\n        return classNode;\n    }\n\n    private _parsePassStatement(): PassNode {\n        return PassNode.create(this._getKeywordToken(KeywordType.Pass));\n    }\n\n    private _parseBreakStatement(): BreakNode {\n        const breakToken = this._getKeywordToken(KeywordType.Break);\n\n        if (!this._isInLoop) {\n            this._addError(Localizer.Diagnostic.breakOutsideLoop(), breakToken);\n        }\n\n        return BreakNode.create(breakToken);\n    }\n\n    private _parseContinueStatement(): ContinueNode {\n        const continueToken = this._getKeywordToken(KeywordType.Continue);\n\n        if (!this._isInLoop) {\n            this._addError(Localizer.Diagnostic.continueOutsideLoop(), continueToken);\n        } else if (this._isInFinally) {\n            this._addError(Localizer.Diagnostic.continueInFinally(), continueToken);\n        }\n\n        return ContinueNode.create(continueToken);\n    }\n\n    // return_stmt: 'return' [testlist]\n    private _parseReturnStatement(): ReturnNode {\n        const returnToken = this._getKeywordToken(KeywordType.Return);\n\n        const returnNode = ReturnNode.create(returnToken);\n\n        if (!this._isInFunction) {\n            this._addError(Localizer.Diagnostic.returnOutsideFunction(), returnToken);\n        }\n\n        if (!this._isNextTokenNeverExpression()) {\n            const returnExpr = this._parseTestOrStarListAsExpression(\n                /* allowAssignmentExpression */ true,\n                ErrorExpressionCategory.MissingExpression,\n                Localizer.Diagnostic.expectedReturnExpr()\n            );\n            this._reportConditionalErrorForStarTupleElement(returnExpr);\n            returnNode.returnExpression = returnExpr;\n            returnNode.returnExpression.parent = returnNode;\n            extendRange(returnNode, returnExpr);\n        }\n\n        return returnNode;\n    }\n\n    // import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)\n    //             'import' ('*' | '(' import_as_names ')' | import_as_names))\n    // import_as_names: import_as_name (',' import_as_name)* [',']\n    // import_as_name: NAME ['as' NAME]\n    private _parseFromStatement(): ImportFromNode {\n        const fromToken = this._getKeywordToken(KeywordType.From);\n\n        const modName = this._parseDottedModuleName(true);\n        const importFromNode = ImportFromNode.create(fromToken, modName);\n\n        // Handle imports from __future__ specially because they can\n        // change the way we interpret the rest of the file.\n        const isFutureImport =\n            modName.leadingDots === 0 && modName.nameParts.length === 1 && modName.nameParts[0].value === '__future__';\n\n        const possibleInputToken = this._peekToken();\n        if (!this._consumeTokenIfKeyword(KeywordType.Import)) {\n            this._addError(Localizer.Diagnostic.expectedImport(), this._peekToken());\n            if (!modName.hasTrailingDot) {\n                importFromNode.missingImportKeyword = true;\n            }\n        } else {\n            extendRange(importFromNode, possibleInputToken);\n\n            // Look for \"*\" token.\n            const possibleStarToken = this._peekToken();\n            if (this._consumeTokenIfOperator(OperatorType.Multiply)) {\n                extendRange(importFromNode, possibleStarToken);\n                importFromNode.isWildcardImport = true;\n                importFromNode.wildcardToken = possibleStarToken;\n                this._containsWildcardImport = true;\n            } else {\n                const inParen = this._consumeTokenIfType(TokenType.OpenParenthesis);\n\n                while (true) {\n                    const importName = this._getTokenIfIdentifier();\n                    if (!importName) {\n                        break;\n                    }\n\n                    const importFromAsNode = ImportFromAsNode.create(NameNode.create(importName));\n\n                    if (this._consumeTokenIfKeyword(KeywordType.As)) {\n                        const aliasName = this._getTokenIfIdentifier();\n                        if (!aliasName) {\n                            this._addError(Localizer.Diagnostic.expectedImportAlias(), this._peekToken());\n                        } else {\n                            importFromAsNode.alias = NameNode.create(aliasName);\n                            importFromAsNode.alias.parent = importFromAsNode;\n                            extendRange(importFromAsNode, aliasName);\n                        }\n                    }\n\n                    importFromNode.imports.push(importFromAsNode);\n                    importFromAsNode.parent = importFromNode;\n                    extendRange(importFromNode, importFromAsNode);\n\n                    if (isFutureImport) {\n                        // Add the future import to the map.\n                        this._futureImportMap.set(importName.value, true);\n                    }\n\n                    if (!this._consumeTokenIfType(TokenType.Comma)) {\n                        break;\n                    }\n                }\n\n                if (importFromNode.imports.length === 0) {\n                    this._addError(Localizer.Diagnostic.expectedImportSymbols(), this._peekToken());\n                }\n\n                if (inParen) {\n                    importFromNode.usesParens = true;\n\n                    const nextToken = this._peekToken();\n                    if (!this._consumeTokenIfType(TokenType.CloseParenthesis)) {\n                        this._addError(Localizer.Diagnostic.expectedCloseParen(), this._peekToken());\n                    } else {\n                        extendRange(importFromNode, nextToken);\n                    }\n                }\n            }\n        }\n\n        this._importedModules.push({\n            nameNode: importFromNode.module,\n            leadingDots: importFromNode.module.leadingDots,\n            nameParts: importFromNode.module.nameParts.map((p) => p.value),\n            importedSymbols: importFromNode.imports.map((imp) => imp.name.value),\n        });\n\n        let isTypingImport = false;\n        if (importFromNode.module.nameParts.length === 1) {\n            const firstNamePartValue = importFromNode.module.nameParts[0].value;\n            if (firstNamePartValue === 'typing' || firstNamePartValue === 'typing_extensions') {\n                isTypingImport = true;\n            }\n        }\n\n        if (isTypingImport) {\n            const typingSymbolsOfInterest = ['Literal', 'TypeAlias', 'Annotated'];\n\n            if (importFromNode.isWildcardImport) {\n                typingSymbolsOfInterest.forEach((s) => {\n                    this._typingSymbolAliases.set(s, s);\n                });\n            } else {\n                importFromNode.imports.forEach((imp) => {\n                    if (typingSymbolsOfInterest.some((s) => s === imp.name.value)) {\n                        this._typingSymbolAliases.set(imp.alias?.value || imp.name.value, imp.name.value);\n                    }\n                });\n            }\n        }\n\n        return importFromNode;\n    }\n\n    // import_name: 'import' dotted_as_names\n    // dotted_as_names: dotted_as_name (',' dotted_as_name)*\n    // dotted_as_name: dotted_name ['as' NAME]\n    private _parseImportStatement(): ImportNode {\n        const importToken = this._getKeywordToken(KeywordType.Import);\n\n        const importNode = ImportNode.create(importToken);\n\n        while (true) {\n            const modName = this._parseDottedModuleName();\n\n            const importAsNode = ImportAsNode.create(modName);\n\n            if (this._consumeTokenIfKeyword(KeywordType.As)) {\n                const aliasToken = this._getTokenIfIdentifier();\n                if (aliasToken) {\n                    importAsNode.alias = NameNode.create(aliasToken);\n                    importAsNode.alias.parent = importAsNode;\n                    extendRange(importAsNode, importAsNode.alias);\n                } else {\n                    this._addError(Localizer.Diagnostic.expectedImportAlias(), this._peekToken());\n                }\n            }\n\n            if (importAsNode.module.leadingDots > 0) {\n                this._addError(Localizer.Diagnostic.relativeImportNotAllowed(), importAsNode.module);\n            }\n\n            importNode.list.push(importAsNode);\n            importAsNode.parent = importNode;\n\n            this._importedModules.push({\n                nameNode: importAsNode.module,\n                leadingDots: importAsNode.module.leadingDots,\n                nameParts: importAsNode.module.nameParts.map((p) => p.value),\n                importedSymbols: undefined,\n            });\n\n            if (modName.nameParts.length === 1) {\n                const firstNamePartValue = modName.nameParts[0].value;\n                if (firstNamePartValue === 'typing' || firstNamePartValue === 'typing_extensions') {\n                    this._typingImportAliases.push(importAsNode.alias?.value || firstNamePartValue);\n                }\n            }\n\n            if (!this._consumeTokenIfType(TokenType.Comma)) {\n                break;\n            }\n        }\n\n        if (importNode.list.length > 0) {\n            extendRange(importNode, importNode.list[importNode.list.length - 1]);\n        }\n\n        return importNode;\n    }\n\n    // ('.' | '...')* dotted_name | ('.' | '...')+\n    // dotted_name: NAME ('.' NAME)*\n    private _parseDottedModuleName(allowJustDots = false): ModuleNameNode {\n        const moduleNameNode = ModuleNameNode.create(this._peekToken());\n\n        while (true) {\n            if (this._consumeTokenIfType(TokenType.Ellipsis)) {\n                moduleNameNode.leadingDots += 3;\n            } else if (this._consumeTokenIfType(TokenType.Dot)) {\n                moduleNameNode.leadingDots++;\n            } else {\n                break;\n            }\n        }\n\n        while (true) {\n            const identifier = this._getTokenIfIdentifier([KeywordType.Import]);\n            if (!identifier) {\n                if (!allowJustDots || moduleNameNode.leadingDots === 0) {\n                    this._addError(Localizer.Diagnostic.expectedModuleName(), this._peekToken());\n                    moduleNameNode.hasTrailingDot = true;\n                }\n                break;\n            }\n\n            const namePart = NameNode.create(identifier);\n            moduleNameNode.nameParts.push(namePart);\n            namePart.parent = moduleNameNode;\n            extendRange(moduleNameNode, namePart);\n\n            const nextToken = this._peekToken();\n            if (!this._consumeTokenIfType(TokenType.Dot)) {\n                break;\n            }\n\n            // Extend the module name to include the dot.\n            extendRange(moduleNameNode, nextToken);\n        }\n\n        return moduleNameNode;\n    }\n\n    private _parseGlobalStatement(): GlobalNode {\n        const globalToken = this._getKeywordToken(KeywordType.Global);\n\n        const globalNode = GlobalNode.create(globalToken);\n        globalNode.nameList = this._parseNameList();\n        if (globalNode.nameList.length > 0) {\n            globalNode.nameList.forEach((name) => {\n                name.parent = globalNode;\n            });\n            extendRange(globalNode, globalNode.nameList[globalNode.nameList.length - 1]);\n        }\n        return globalNode;\n    }\n\n    private _parseNonlocalStatement(): NonlocalNode {\n        const nonlocalToken = this._getKeywordToken(KeywordType.Nonlocal);\n\n        const nonlocalNode = NonlocalNode.create(nonlocalToken);\n        nonlocalNode.nameList = this._parseNameList();\n        if (nonlocalNode.nameList.length > 0) {\n            nonlocalNode.nameList.forEach((name) => {\n                name.parent = nonlocalNode;\n            });\n            extendRange(nonlocalNode, nonlocalNode.nameList[nonlocalNode.nameList.length - 1]);\n        }\n        return nonlocalNode;\n    }\n\n    private _parseNameList(): NameNode[] {\n        const nameList: NameNode[] = [];\n\n        while (true) {\n            const name = this._getTokenIfIdentifier();\n            if (!name) {\n                this._addError(Localizer.Diagnostic.expectedIdentifier(), this._peekToken());\n                break;\n            }\n\n            nameList.push(NameNode.create(name));\n\n            if (!this._consumeTokenIfType(TokenType.Comma)) {\n                break;\n            }\n        }\n\n        return nameList;\n    }\n\n    // raise_stmt: 'raise' [test ['from' test]]\n    // (old) raise_stmt: 'raise' [test [',' test [',' test]]]\n    private _parseRaiseStatement(): RaiseNode {\n        const raiseToken = this._getKeywordToken(KeywordType.Raise);\n\n        const raiseNode = RaiseNode.create(raiseToken);\n        if (!this._isNextTokenNeverExpression()) {\n            raiseNode.typeExpression = this._parseTestExpression(true);\n            raiseNode.typeExpression.parent = raiseNode;\n            extendRange(raiseNode, raiseNode.typeExpression);\n\n            if (this._consumeTokenIfKeyword(KeywordType.From)) {\n                raiseNode.valueExpression = this._parseTestExpression(true);\n                raiseNode.valueExpression.parent = raiseNode;\n                extendRange(raiseNode, raiseNode.valueExpression);\n            } else {\n                if (this._consumeTokenIfType(TokenType.Comma)) {\n                    // Handle the Python 2.x variant\n                    raiseNode.valueExpression = this._parseTestExpression(true);\n                    raiseNode.valueExpression.parent = raiseNode;\n                    extendRange(raiseNode, raiseNode.valueExpression);\n\n                    if (this._consumeTokenIfType(TokenType.Comma)) {\n                        raiseNode.tracebackExpression = this._parseTestExpression(true);\n                        raiseNode.tracebackExpression.parent = raiseNode;\n                        extendRange(raiseNode, raiseNode.tracebackExpression);\n                    }\n                }\n            }\n        }\n\n        return raiseNode;\n    }\n\n    // assert_stmt: 'assert' test [',' test]\n    private _parseAssertStatement(): AssertNode {\n        const assertToken = this._getKeywordToken(KeywordType.Assert);\n\n        const expr = this._parseTestExpression(true);\n        const assertNode = AssertNode.create(assertToken, expr);\n\n        if (this._consumeTokenIfType(TokenType.Comma)) {\n            const exceptionExpr = this._parseTestExpression(true);\n            assertNode.exceptionExpression = exceptionExpr;\n            assertNode.exceptionExpression.parent = assertNode;\n            extendRange(assertNode, exceptionExpr);\n        }\n\n        return assertNode;\n    }\n\n    // del_stmt: 'del' exprlist\n    private _parseDelStatement(): DelNode {\n        const delToken = this._getKeywordToken(KeywordType.Del);\n\n        const exprListResult = this._parseExpressionList(true);\n        if (!exprListResult.parseError && exprListResult.list.length === 0) {\n            this._addError(Localizer.Diagnostic.expectedDelExpr(), this._peekToken());\n        }\n        const delNode = DelNode.create(delToken);\n        delNode.expressions = exprListResult.list;\n        if (delNode.expressions.length > 0) {\n            delNode.expressions.forEach((expr) => {\n                expr.parent = delNode;\n            });\n            extendRange(delNode, delNode.expressions[delNode.expressions.length - 1]);\n        }\n        return delNode;\n    }\n\n    // yield_expr: 'yield' [yield_arg]\n    // yield_arg: 'from' test | testlist\n    private _parseYieldExpression(): YieldNode | YieldFromNode {\n        const yieldToken = this._getKeywordToken(KeywordType.Yield);\n\n        const nextToken = this._peekToken();\n        if (this._consumeTokenIfKeyword(KeywordType.From)) {\n            if (this._getLanguageVersion() < PythonVersion.V3_3) {\n                this._addError(Localizer.Diagnostic.yieldFromIllegal(), nextToken);\n            }\n            return YieldFromNode.create(yieldToken, this._parseTestExpression(true));\n        }\n\n        let exprList: ExpressionNode | undefined;\n        if (!this._isNextTokenNeverExpression()) {\n            exprList = this._parseTestOrStarListAsExpression(\n                /* allowAssignmentExpression */ true,\n                ErrorExpressionCategory.MissingExpression,\n                Localizer.Diagnostic.expectedYieldExpr()\n            );\n            this._reportConditionalErrorForStarTupleElement(exprList);\n        }\n\n        return YieldNode.create(yieldToken, exprList);\n    }\n\n    private _tryParseYieldExpression(): YieldNode | YieldFromNode | undefined {\n        if (this._peekKeywordType() !== KeywordType.Yield) {\n            return undefined;\n        }\n\n        return this._parseYieldExpression();\n    }\n\n    // simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE\n    private _parseSimpleStatement(): StatementListNode {\n        const statement = StatementListNode.create(this._peekToken());\n\n        while (true) {\n            // Swallow invalid tokens to make sure we make forward progress.\n            if (this._peekTokenType() === TokenType.Invalid) {\n                const invalidToken = this._getNextToken();\n                const text = this._fileContents!.substr(invalidToken.start, invalidToken.length);\n\n                // Remove any non-printable characters.\n                const cleanedText = text.replace(/[\\S\\W]/g, '');\n                this._addError(Localizer.Diagnostic.invalidTokenChars().format({ text: cleanedText }), invalidToken);\n                this._consumeTokensUntilType([TokenType.NewLine]);\n                break;\n            }\n\n            const smallStatement = this._parseSmallStatement();\n            statement.statements.push(smallStatement);\n            smallStatement.parent = statement;\n            extendRange(statement, smallStatement);\n\n            if (smallStatement.nodeType === ParseNodeType.Error) {\n                // No need to log an error here. We assume that\n                // it was already logged by _parseSmallStatement.\n                break;\n            }\n\n            // Consume the semicolon if present.\n            if (!this._consumeTokenIfType(TokenType.Semicolon)) {\n                break;\n            }\n\n            const nextTokenType = this._peekTokenType();\n            if (nextTokenType === TokenType.NewLine || nextTokenType === TokenType.EndOfStream) {\n                break;\n            }\n        }\n\n        if (!this._consumeTokenIfType(TokenType.NewLine)) {\n            this._addError(Localizer.Diagnostic.expectedNewlineOrSemicolon(), this._peekToken());\n        }\n\n        return statement;\n    }\n\n    // small_stmt: (expr_stmt | del_stmt | pass_stmt | flow_stmt |\n    //             import_stmt | global_stmt | nonlocal_stmt | assert_stmt)\n    // flow_stmt: break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt\n    // import_stmt: import_name | import_from\n    private _parseSmallStatement(): ParseNode {\n        switch (this._peekKeywordType()) {\n            case KeywordType.Pass:\n                return this._parsePassStatement();\n\n            case KeywordType.Break:\n                return this._parseBreakStatement();\n\n            case KeywordType.Continue:\n                return this._parseContinueStatement();\n\n            case KeywordType.Return:\n                return this._parseReturnStatement();\n\n            case KeywordType.From:\n                return this._parseFromStatement();\n\n            case KeywordType.Import:\n                return this._parseImportStatement();\n\n            case KeywordType.Global:\n                return this._parseGlobalStatement();\n\n            case KeywordType.Nonlocal:\n                return this._parseNonlocalStatement();\n\n            case KeywordType.Raise:\n                return this._parseRaiseStatement();\n\n            case KeywordType.Assert:\n                return this._parseAssertStatement();\n\n            case KeywordType.Del:\n                return this._parseDelStatement();\n\n            case KeywordType.Yield:\n                return this._parseYieldExpression();\n        }\n\n        return this._parseExpressionStatement();\n    }\n\n    private _makeExpressionOrTuple(exprListResult: ExpressionListResult, enclosedInParens: boolean): ExpressionNode {\n        // A single-element tuple with no trailing comma is simply an expression\n        // that's surrounded by parens.\n        if (exprListResult.list.length === 1 && !exprListResult.trailingComma) {\n            return exprListResult.list[0];\n        }\n\n        // To accommodate empty tuples (\"()\"), we will reach back to get\n        // the opening parenthesis as the opening token.\n\n        const tupleStartRange: TextRange =\n            exprListResult.list.length > 0 ? exprListResult.list[0] : this._peekToken(-1);\n\n        const tupleNode = TupleNode.create(tupleStartRange, enclosedInParens);\n        tupleNode.expressions = exprListResult.list;\n        if (exprListResult.list.length > 0) {\n            exprListResult.list.forEach((expr) => {\n                expr.parent = tupleNode;\n            });\n            extendRange(tupleNode, exprListResult.list[exprListResult.list.length - 1]);\n        }\n\n        return tupleNode;\n    }\n\n    private _parseTestListAsExpression(errorCategory: ErrorExpressionCategory, errorString: string): ExpressionNode {\n        if (this._isNextTokenNeverExpression()) {\n            return this._handleExpressionParseError(errorCategory, errorString);\n        }\n\n        const exprListResult = this._parseTestExpressionList();\n        if (exprListResult.parseError) {\n            return exprListResult.parseError;\n        }\n        return this._makeExpressionOrTuple(exprListResult, /* enclosedInParens */ false);\n    }\n\n    private _parseTestOrStarListAsExpression(\n        allowAssignmentExpression: boolean,\n        errorCategory: ErrorExpressionCategory,\n        errorString: string\n    ): ExpressionNode {\n        if (this._isNextTokenNeverExpression()) {\n            return this._handleExpressionParseError(errorCategory, errorString);\n        }\n\n        const exprListResult = this._parseTestOrStarExpressionList(allowAssignmentExpression);\n        if (exprListResult.parseError) {\n            return exprListResult.parseError;\n        }\n        return this._makeExpressionOrTuple(exprListResult, /* enclosedInParens */ false);\n    }\n\n    private _parseExpressionList(allowStar: boolean): ExpressionListResult {\n        return this._parseExpressionListGeneric(() => this._parseExpression(allowStar));\n    }\n\n    // testlist: test (',' test)* [',']\n    private _parseTestExpressionList(): ExpressionListResult {\n        return this._parseExpressionListGeneric(() => this._parseTestExpression(false));\n    }\n\n    private _parseTestOrStarExpressionList(allowAssignmentExpression: boolean): ExpressionListResult {\n        const exprListResult = this._parseExpressionListGeneric(() =>\n            this._parseTestOrStarExpression(allowAssignmentExpression)\n        );\n\n        if (!exprListResult.parseError) {\n            // Make sure that we don't have more than one star expression in the list.\n            let sawStar = false;\n            for (const expr of exprListResult.list) {\n                if (expr.nodeType === ParseNodeType.Unpack) {\n                    if (sawStar) {\n                        this._addError(Localizer.Diagnostic.duplicateUnpack(), expr);\n                        break;\n                    }\n                    sawStar = true;\n                }\n            }\n        }\n\n        return exprListResult;\n    }\n\n    // exp_or_star: expr | star_expr\n    // expr: xor_expr ('|' xor_expr)*\n    // star_expr: '*' expr\n    private _parseExpression(allowUnpack: boolean): ExpressionNode {\n        const startToken = this._peekToken();\n\n        if (allowUnpack && this._consumeTokenIfOperator(OperatorType.Multiply)) {\n            return UnpackNode.create(startToken, this._parseExpression(false));\n        }\n\n        return this._parseBitwiseOrExpression();\n    }\n\n    // test_or_star: test | star_expr\n    private _parseTestOrStarExpression(allowAssignmentExpression: boolean): ExpressionNode {\n        if (this._peekOperatorType() === OperatorType.Multiply) {\n            return this._parseExpression(true);\n        }\n\n        return this._parseTestExpression(allowAssignmentExpression);\n    }\n\n    // test: or_test ['if' or_test 'else' test] | lambdef\n    private _parseTestExpression(allowAssignmentExpression: boolean): ExpressionNode {\n        if (this._peekKeywordType() === KeywordType.Lambda) {\n            return this._parseLambdaExpression();\n        }\n\n        const ifExpr = allowAssignmentExpression ? this._parseAssignmentExpression() : this._parseOrTest();\n        if (ifExpr.nodeType === ParseNodeType.Error) {\n            return ifExpr;\n        }\n\n        if (!this._consumeTokenIfKeyword(KeywordType.If)) {\n            return ifExpr;\n        }\n\n        const testExpr = this._parseAssignmentExpression();\n        if (testExpr.nodeType === ParseNodeType.Error) {\n            return testExpr;\n        }\n\n        if (!this._consumeTokenIfKeyword(KeywordType.Else)) {\n            return this._handleExpressionParseError(\n                ErrorExpressionCategory.MissingElse,\n                Localizer.Diagnostic.expectedElse()\n            );\n        }\n\n        const elseExpr = this._parseTestExpression(true);\n        if (elseExpr.nodeType === ParseNodeType.Error) {\n            return elseExpr;\n        }\n\n        return TernaryNode.create(ifExpr, testExpr, elseExpr);\n    }\n\n    // assign_expr: NAME := test\n    private _parseAssignmentExpression() {\n        const leftExpr = this._parseOrTest();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        if (leftExpr.nodeType !== ParseNodeType.Name) {\n            return leftExpr;\n        }\n\n        const walrusToken = this._peekToken();\n        if (!this._consumeTokenIfOperator(OperatorType.Walrus)) {\n            return leftExpr;\n        }\n\n        if (!this._assignmentExpressionsAllowed) {\n            this._addError(Localizer.Diagnostic.walrusNotAllowed(), walrusToken);\n        }\n\n        if (this._getLanguageVersion() < PythonVersion.V3_8) {\n            this._addError(Localizer.Diagnostic.walrusIllegal(), walrusToken);\n        }\n\n        const rightExpr = this._parseTestExpression(/* allowAssignmentExpression */ false);\n\n        return AssignmentExpressionNode.create(leftExpr, rightExpr);\n    }\n\n    // or_test: and_test ('or' and_test)*\n    private _parseOrTest(): ExpressionNode {\n        let leftExpr = this._parseAndTest();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        while (true) {\n            const peekToken = this._peekToken();\n            if (!this._consumeTokenIfKeyword(KeywordType.Or)) {\n                break;\n            }\n            const rightExpr = this._parseAndTest();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, OperatorType.Or);\n        }\n\n        return leftExpr;\n    }\n\n    // and_test: not_test ('and' not_test)*\n    private _parseAndTest(): ExpressionNode {\n        let leftExpr = this._parseNotTest();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        while (true) {\n            const peekToken = this._peekToken();\n            if (!this._consumeTokenIfKeyword(KeywordType.And)) {\n                break;\n            }\n            const rightExpr = this._parseNotTest();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, OperatorType.And);\n        }\n\n        return leftExpr;\n    }\n\n    // not_test: 'not' not_test | comparison\n    private _parseNotTest(): ExpressionNode {\n        const notToken = this._peekToken();\n        if (this._consumeTokenIfKeyword(KeywordType.Not)) {\n            const notExpr = this._parseNotTest();\n            return UnaryOperationNode.create(notToken, notExpr, OperatorType.Not);\n        }\n\n        return this._parseComparison();\n    }\n\n    // comparison: expr (comp_op expr)*\n    // comp_op: '<'|'>'|'=='|'>='|'<='|'<>'|'!='|'in'|'not' 'in'|'is'|'is' 'not'\n    private _parseComparison(): ExpressionNode {\n        let leftExpr = this._parseBitwiseOrExpression();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        while (true) {\n            let comparisonOperator: OperatorType | undefined;\n            const peekToken = this._peekToken();\n\n            if (Tokenizer.isOperatorComparison(this._peekOperatorType())) {\n                comparisonOperator = this._peekOperatorType();\n                if (comparisonOperator === OperatorType.LessOrGreaterThan) {\n                    this._addError(Localizer.Diagnostic.operatorLessOrGreaterDeprecated(), peekToken);\n                    comparisonOperator = OperatorType.NotEquals;\n                }\n                this._getNextToken();\n            } else if (this._consumeTokenIfKeyword(KeywordType.In)) {\n                comparisonOperator = OperatorType.In;\n            } else if (this._consumeTokenIfKeyword(KeywordType.Is)) {\n                if (this._consumeTokenIfKeyword(KeywordType.Not)) {\n                    comparisonOperator = OperatorType.IsNot;\n                } else {\n                    comparisonOperator = OperatorType.Is;\n                }\n            } else if (this._peekKeywordType() === KeywordType.Not) {\n                const tokenAfterNot = this._peekToken(1);\n                if (\n                    tokenAfterNot.type === TokenType.Keyword &&\n                    (tokenAfterNot as KeywordToken).keywordType === KeywordType.In\n                ) {\n                    this._getNextToken();\n                    this._getNextToken();\n                    comparisonOperator = OperatorType.NotIn;\n                }\n            }\n\n            if (comparisonOperator === undefined) {\n                break;\n            }\n\n            const rightExpr = this._parseComparison();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, comparisonOperator);\n        }\n\n        return leftExpr;\n    }\n\n    // expr: xor_expr ('|' xor_expr)*\n    private _parseBitwiseOrExpression(): ExpressionNode {\n        let leftExpr = this._parseBitwiseXorExpression();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        while (true) {\n            const peekToken = this._peekToken();\n            if (!this._consumeTokenIfOperator(OperatorType.BitwiseOr)) {\n                break;\n            }\n            const rightExpr = this._parseBitwiseXorExpression();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, OperatorType.BitwiseOr);\n        }\n\n        return leftExpr;\n    }\n\n    // xor_expr: and_expr ('^' and_expr)*\n    private _parseBitwiseXorExpression(): ExpressionNode {\n        let leftExpr = this._parseBitwiseAndExpression();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        while (true) {\n            const peekToken = this._peekToken();\n            if (!this._consumeTokenIfOperator(OperatorType.BitwiseXor)) {\n                break;\n            }\n            const rightExpr = this._parseBitwiseAndExpression();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, OperatorType.BitwiseXor);\n        }\n\n        return leftExpr;\n    }\n\n    // and_expr: shift_expr ('&' shift_expr)*\n    private _parseBitwiseAndExpression(): ExpressionNode {\n        let leftExpr = this._parseShiftExpression();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        while (true) {\n            const peekToken = this._peekToken();\n            if (!this._consumeTokenIfOperator(OperatorType.BitwiseAnd)) {\n                break;\n            }\n            const rightExpr = this._parseShiftExpression();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, OperatorType.BitwiseAnd);\n        }\n\n        return leftExpr;\n    }\n\n    // shift_expr: arith_expr (('<<'|'>>') arith_expr)*\n    private _parseShiftExpression(): ExpressionNode {\n        let leftExpr = this._parseArithmeticExpression();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        let peekToken = this._peekToken();\n        let nextOperator = this._peekOperatorType();\n        while (nextOperator === OperatorType.LeftShift || nextOperator === OperatorType.RightShift) {\n            this._getNextToken();\n            const rightExpr = this._parseArithmeticExpression();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, nextOperator);\n            peekToken = this._peekToken();\n            nextOperator = this._peekOperatorType();\n        }\n\n        return leftExpr;\n    }\n\n    // arith_expr: term (('+'|'-') term)*\n    private _parseArithmeticExpression(): ExpressionNode {\n        let leftExpr = this._parseArithmeticTerm();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        let peekToken = this._peekToken();\n        let nextOperator = this._peekOperatorType();\n        while (nextOperator === OperatorType.Add || nextOperator === OperatorType.Subtract) {\n            this._getNextToken();\n            const rightExpr = this._parseArithmeticTerm();\n            if (rightExpr.nodeType === ParseNodeType.Error) {\n                return rightExpr;\n            }\n\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, nextOperator);\n            peekToken = this._peekToken();\n            nextOperator = this._peekOperatorType();\n        }\n\n        return leftExpr;\n    }\n\n    // term: factor (('*'|'@'|'/'|'%'|'//') factor)*\n    private _parseArithmeticTerm(): ExpressionNode {\n        let leftExpr = this._parseArithmeticFactor();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        let peekToken = this._peekToken();\n        let nextOperator = this._peekOperatorType();\n        while (\n            nextOperator === OperatorType.Multiply ||\n            nextOperator === OperatorType.MatrixMultiply ||\n            nextOperator === OperatorType.Divide ||\n            nextOperator === OperatorType.Mod ||\n            nextOperator === OperatorType.FloorDivide\n        ) {\n            this._getNextToken();\n            const rightExpr = this._parseArithmeticFactor();\n            leftExpr = BinaryOperationNode.create(leftExpr, rightExpr, peekToken, nextOperator);\n            peekToken = this._peekToken();\n            nextOperator = this._peekOperatorType();\n        }\n\n        return leftExpr;\n    }\n\n    // factor: ('+'|'-'|'~') factor | power\n    // power: atom_expr ['**' factor]\n    private _parseArithmeticFactor(): ExpressionNode {\n        const nextToken = this._peekToken();\n        const nextOperator = this._peekOperatorType();\n        if (\n            nextOperator === OperatorType.Add ||\n            nextOperator === OperatorType.Subtract ||\n            nextOperator === OperatorType.BitwiseInvert\n        ) {\n            this._getNextToken();\n            const expression = this._parseArithmeticFactor();\n            return UnaryOperationNode.create(nextToken, expression, nextOperator);\n        }\n\n        const leftExpr = this._parseAtomExpression();\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        const peekToken = this._peekToken();\n        if (this._consumeTokenIfOperator(OperatorType.Power)) {\n            const rightExpr = this._parseArithmeticFactor();\n            return BinaryOperationNode.create(leftExpr, rightExpr, peekToken, OperatorType.Power);\n        }\n\n        return leftExpr;\n    }\n\n    // Determines whether the expression refers to a type exported by the typing\n    // or typing_extensions modules. We can directly evaluate the types at binding\n    // time. We assume here that the code isn't making use of some custom type alias\n    // to refer to the typing types.\n    private _isTypingAnnotation(typeAnnotation: ExpressionNode, name: string): boolean {\n        if (typeAnnotation.nodeType === ParseNodeType.Name) {\n            const alias = this._typingSymbolAliases.get(typeAnnotation.value);\n            if (alias === name) {\n                return true;\n            }\n        } else if (typeAnnotation.nodeType === ParseNodeType.MemberAccess) {\n            if (\n                typeAnnotation.leftExpression.nodeType === ParseNodeType.Name &&\n                typeAnnotation.memberName.value === name\n            ) {\n                const baseName = typeAnnotation.leftExpression.value;\n                return this._typingImportAliases.some((alias) => alias === baseName);\n            }\n        }\n\n        return false;\n    }\n\n    // atom_expr: ['await'] atom trailer*\n    // trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME\n    private _parseAtomExpression(): ExpressionNode {\n        let awaitToken: KeywordToken | undefined;\n        if (this._peekKeywordType() === KeywordType.Await && !this._isParsingTypeAnnotation) {\n            awaitToken = this._getKeywordToken(KeywordType.Await);\n            if (this._getLanguageVersion() < PythonVersion.V3_5) {\n                this._addError(Localizer.Diagnostic.awaitIllegal(), awaitToken);\n            }\n        }\n\n        let atomExpression = this._parseAtom();\n        if (atomExpression.nodeType === ParseNodeType.Error) {\n            return atomExpression;\n        }\n\n        // Consume trailers.\n        while (true) {\n            const nextToken = this._peekToken();\n\n            // Is it a function call?\n            if (this._consumeTokenIfType(TokenType.OpenParenthesis)) {\n                // Generally, function calls are not allowed within type annotations,\n                // but they are permitted in \"Annotated\" annotations.\n                const wasParsingTypeAnnotation = this._isParsingTypeAnnotation;\n                this._isParsingTypeAnnotation = false;\n\n                const argList = this._parseArgList();\n                const callNode = CallNode.create(atomExpression);\n                callNode.arguments = argList;\n                if (argList.length > 0) {\n                    argList.forEach((arg) => {\n                        arg.parent = callNode;\n                    });\n                    extendRange(callNode, argList[argList.length - 1]);\n                }\n\n                const nextToken = this._peekToken();\n                let isArgListTerminated = false;\n                if (!this._consumeTokenIfType(TokenType.CloseParenthesis)) {\n                    this._addError(Localizer.Diagnostic.expectedCloseParen(), this._peekToken());\n\n                    // Consume the remainder of tokens on the line for error\n                    // recovery.\n                    this._consumeTokensUntilType([TokenType.NewLine]);\n\n                    // Extend the node's range to include the rest of the line.\n                    // This helps the signatureHelpProvider.\n                    extendRange(callNode, this._peekToken());\n                } else {\n                    extendRange(callNode, nextToken);\n                    isArgListTerminated = true;\n                }\n\n                this._isParsingTypeAnnotation = wasParsingTypeAnnotation;\n\n                if (this._isParsingTypeAnnotation) {\n                    const diag = new DiagnosticAddendum();\n                    if (atomExpression.nodeType === ParseNodeType.Name && atomExpression.value === 'type') {\n                        diag.addMessage(Localizer.DiagnosticAddendum.useTypeInstead());\n                        this._addError(Localizer.Diagnostic.typeCallNotAllowed() + diag.getString(), callNode);\n                    }\n                }\n\n                atomExpression = callNode;\n\n                // If the argument list wasn't terminated, break out of the loop\n                if (!isArgListTerminated) {\n                    break;\n                }\n            } else if (this._consumeTokenIfType(TokenType.OpenBracket)) {\n                // Is it an index operator?\n\n                // This is an unfortunate hack that's necessary to accommodate 'Literal'\n                // and 'Annotated' type annotations properly. We need to suspend treating\n                // strings as type annotations within a Literal or Annotated subscript.\n                const wasParsingIndexTrailer = this._isParsingIndexTrailer;\n                const wasParsingTypeAnnotation = this._isParsingTypeAnnotation;\n\n                if (\n                    this._isTypingAnnotation(atomExpression, 'Literal') ||\n                    this._isTypingAnnotation(atomExpression, 'Annotated')\n                ) {\n                    this._isParsingTypeAnnotation = false;\n                }\n\n                this._isParsingIndexTrailer = true;\n                const indexExpressions = this._parseSubscriptList();\n                this._isParsingTypeAnnotation = wasParsingTypeAnnotation;\n                this._isParsingIndexTrailer = wasParsingIndexTrailer;\n\n                const closingToken = this._peekToken();\n                const indexItemsNode = IndexItemsNode.create(nextToken, closingToken, indexExpressions);\n                const indexNode = IndexNode.create(atomExpression, indexItemsNode);\n                extendRange(indexNode, indexNode);\n\n                if (!this._consumeTokenIfType(TokenType.CloseBracket)) {\n                    // Handle the error case, but don't use the error node in this\n                    // case because it creates problems for the completion provider.\n                    this._handleExpressionParseError(\n                        ErrorExpressionCategory.MissingIndexCloseBracket,\n                        Localizer.Diagnostic.expectedCloseBracket(),\n                        indexNode\n                    );\n                }\n\n                atomExpression = indexNode;\n            } else if (this._consumeTokenIfType(TokenType.Dot)) {\n                // Is it a member access?\n                const memberName = this._getTokenIfIdentifier();\n                if (!memberName) {\n                    return this._handleExpressionParseError(\n                        ErrorExpressionCategory.MissingMemberAccessName,\n                        Localizer.Diagnostic.expectedMemberName(),\n                        atomExpression\n                    );\n                }\n                atomExpression = MemberAccessNode.create(atomExpression, NameNode.create(memberName));\n            } else {\n                break;\n            }\n        }\n\n        if (awaitToken) {\n            return AwaitNode.create(awaitToken, atomExpression);\n        }\n\n        return atomExpression;\n    }\n\n    // subscriptlist: subscript (',' subscript)* [',']\n    private _parseSubscriptList(): ExpressionNode[] {\n        const listResult = this._parseExpressionListGeneric(\n            () => this._parseSubscript(),\n            () => {\n                // Override the normal terminal check to exclude colons,\n                // which are a valid way to start subscription expressions.\n                if (this._peekTokenType() === TokenType.Colon) {\n                    return false;\n                }\n                return this._isNextTokenNeverExpression();\n            }\n        );\n\n        if (listResult.parseError) {\n            return [listResult.parseError];\n        }\n\n        if (listResult.list.length === 0) {\n            return [\n                this._handleExpressionParseError(\n                    ErrorExpressionCategory.MissingIndexOrSlice,\n                    Localizer.Diagnostic.expectedSliceIndex()\n                ),\n            ];\n        }\n\n        return listResult.list;\n    }\n\n    // subscript: test | [test] ':' [test] [sliceop]\n    // sliceop: ':' [test]\n    private _parseSubscript(): ExpressionNode {\n        const firstToken = this._peekToken();\n        const sliceExpressions: (ExpressionNode | undefined)[] = [undefined, undefined, undefined];\n        let sliceIndex = 0;\n        let sawColon = false;\n\n        while (true) {\n            const nextTokenType = this._peekTokenType();\n            if (nextTokenType === TokenType.CloseBracket || nextTokenType === TokenType.Comma) {\n                break;\n            }\n\n            if (nextTokenType !== TokenType.Colon) {\n                sliceExpressions[sliceIndex] = this._parseTestExpression(false);\n            }\n            sliceIndex++;\n\n            if (sliceIndex >= 3 || !this._consumeTokenIfType(TokenType.Colon)) {\n                break;\n            }\n            sawColon = true;\n        }\n\n        // If this was a simple expression with no colons return it.\n        if (!sawColon) {\n            return sliceExpressions[0]!;\n        }\n\n        const sliceNode = SliceNode.create(firstToken);\n        sliceNode.startValue = sliceExpressions[0];\n        if (sliceNode.startValue) {\n            sliceNode.startValue.parent = sliceNode;\n        }\n        sliceNode.endValue = sliceExpressions[1];\n        if (sliceNode.endValue) {\n            sliceNode.endValue.parent = sliceNode;\n        }\n        sliceNode.stepValue = sliceExpressions[2];\n        if (sliceNode.stepValue) {\n            sliceNode.stepValue.parent = sliceNode;\n        }\n        const extension = sliceExpressions[2] || sliceExpressions[1] || sliceExpressions[0];\n        if (extension) {\n            extendRange(sliceNode, extension);\n        }\n\n        return sliceNode;\n    }\n\n    // arglist: argument (',' argument)*  [',']\n    private _parseArgList(): ArgumentNode[] {\n        const argList: ArgumentNode[] = [];\n        let sawKeywordArg = false;\n\n        while (true) {\n            const nextTokenType = this._peekTokenType();\n            if (\n                nextTokenType === TokenType.CloseParenthesis ||\n                nextTokenType === TokenType.NewLine ||\n                nextTokenType === TokenType.EndOfStream\n            ) {\n                break;\n            }\n\n            const arg = this._parseArgument();\n            if (arg.name) {\n                sawKeywordArg = true;\n            } else if (sawKeywordArg && arg.argumentCategory === ArgumentCategory.Simple) {\n                this._addError(Localizer.Diagnostic.positionArgAfterNamedArg(), arg);\n            }\n            argList.push(arg);\n\n            if (!this._consumeTokenIfType(TokenType.Comma)) {\n                break;\n            }\n        }\n\n        return argList;\n    }\n\n    // argument: ( test [comp_for] |\n    //             test '=' test |\n    //             '**' test |\n    //             '*' test )\n    private _parseArgument(): ArgumentNode {\n        const firstToken = this._peekToken();\n\n        let argType = ArgumentCategory.Simple;\n        if (this._consumeTokenIfOperator(OperatorType.Multiply)) {\n            argType = ArgumentCategory.UnpackedList;\n        } else if (this._consumeTokenIfOperator(OperatorType.Power)) {\n            argType = ArgumentCategory.UnpackedDictionary;\n        }\n\n        let valueExpr = this._parseTestExpression(true);\n        let nameIdentifier: IdentifierToken | undefined;\n\n        if (argType === ArgumentCategory.Simple) {\n            if (this._consumeTokenIfOperator(OperatorType.Assign)) {\n                const nameExpr = valueExpr;\n                valueExpr = this._parseTestExpression(false);\n\n                if (nameExpr.nodeType === ParseNodeType.Name) {\n                    nameIdentifier = nameExpr.token;\n                } else {\n                    this._addError(Localizer.Diagnostic.expectedParamName(), nameExpr);\n                }\n            } else {\n                const listComp = this._tryParseListComprehension(valueExpr);\n                if (listComp) {\n                    valueExpr = listComp;\n                }\n            }\n        }\n\n        const argNode = ArgumentNode.create(firstToken, valueExpr, argType);\n        if (nameIdentifier) {\n            argNode.name = NameNode.create(nameIdentifier);\n            argNode.name.parent = argNode;\n        }\n\n        return argNode;\n    }\n\n    // atom: ('(' [yield_expr | testlist_comp] ')' |\n    //     '[' [testlist_comp] ']' |\n    //     '{' [dictorsetmaker] '}' |\n    //     NAME | NUMBER | STRING+ | '...' | 'None' | 'True' | 'False' | '__debug__')\n    private _parseAtom(): ExpressionNode {\n        const nextToken = this._peekToken();\n\n        if (nextToken.type === TokenType.Ellipsis) {\n            return EllipsisNode.create(this._getNextToken());\n        }\n\n        if (nextToken.type === TokenType.Number) {\n            return NumberNode.create(this._getNextToken() as NumberToken);\n        }\n\n        if (nextToken.type === TokenType.Identifier) {\n            return NameNode.create(this._getNextToken() as IdentifierToken);\n        }\n\n        if (nextToken.type === TokenType.String) {\n            return this._parseStringList();\n        }\n\n        if (nextToken.type === TokenType.Backtick) {\n            this._getNextToken();\n\n            // Atoms with backticks are no longer allowed in Python 3.x, but they\n            // were a thing in Python 2.x. We'll parse them to improve parse recovery\n            // and emit an error.\n            this._addError(Localizer.Diagnostic.backticksIllegal(), nextToken);\n\n            const expressionNode = this._parseTestListAsExpression(\n                ErrorExpressionCategory.MissingExpression,\n                Localizer.Diagnostic.expectedExpr()\n            );\n\n            this._consumeTokenIfType(TokenType.Backtick);\n            return expressionNode;\n        }\n\n        if (nextToken.type === TokenType.OpenParenthesis) {\n            const possibleTupleNode = this._parseTupleAtom();\n            if (\n                possibleTupleNode.nodeType === ParseNodeType.Tuple &&\n                this._isParsingTypeAnnotation &&\n                !this._isParsingIndexTrailer\n            ) {\n                // This is allowed inside of an index trailer, specifically\n                // to support Tuple[()], which is the documented way to annotate\n                // a zero-length tuple.\n                const diag = new DiagnosticAddendum();\n                diag.addMessage(Localizer.DiagnosticAddendum.useTupleInstead());\n                this._addError(Localizer.Diagnostic.tupleInAnnotation() + diag.getString(), possibleTupleNode);\n            }\n\n            if (possibleTupleNode.nodeType === ParseNodeType.BinaryOperation) {\n                // Mark the binary expression as parenthesized so we don't attempt\n                // to use comparison chaining, which isn't appropriate when the\n                // expression is parenthesized.\n                possibleTupleNode.parenthesized = true;\n            }\n            return possibleTupleNode;\n        } else if (nextToken.type === TokenType.OpenBracket) {\n            const listNode = this._parseListAtom();\n            if (this._isParsingTypeAnnotation && !this._isParsingIndexTrailer) {\n                const diag = new DiagnosticAddendum();\n                diag.addMessage(Localizer.DiagnosticAddendum.useListInstead());\n                this._addError(Localizer.Diagnostic.listInAnnotation() + diag.getString(), listNode);\n            }\n            return listNode;\n        } else if (nextToken.type === TokenType.OpenCurlyBrace) {\n            const dictNode = this._parseDictionaryOrSetAtom();\n            if (this._isParsingTypeAnnotation) {\n                const diag = new DiagnosticAddendum();\n                diag.addMessage(Localizer.DiagnosticAddendum.useDictInstead());\n                this._addError(Localizer.Diagnostic.dictInAnnotation() + diag.getString(), dictNode);\n            }\n            return dictNode;\n        }\n\n        if (nextToken.type === TokenType.Keyword) {\n            const keywordToken = nextToken as KeywordToken;\n            if (\n                keywordToken.keywordType === KeywordType.False ||\n                keywordToken.keywordType === KeywordType.True ||\n                keywordToken.keywordType === KeywordType.Debug ||\n                keywordToken.keywordType === KeywordType.None\n            ) {\n                return ConstantNode.create(this._getNextToken() as KeywordToken);\n            }\n\n            // Make an identifier out of the keyword.\n            const keywordAsIdentifier = this._getTokenIfIdentifier();\n            if (keywordAsIdentifier) {\n                return NameNode.create(keywordAsIdentifier);\n            }\n        }\n\n        return this._handleExpressionParseError(\n            ErrorExpressionCategory.MissingExpression,\n            Localizer.Diagnostic.expectedExpr()\n        );\n    }\n\n    // Allocates a dummy \"error expression\" and consumes the remainder\n    // of the tokens on the line for error recovery. A partially-completed\n    // child node can be passed to help the completion provider determine\n    // what to do.\n    private _handleExpressionParseError(\n        category: ErrorExpressionCategory,\n        errorMsg: string,\n        childNode?: ExpressionNode\n    ): ErrorNode {\n        this._addError(errorMsg, this._peekToken());\n        const expr = ErrorNode.create(this._peekToken(), category, childNode);\n        this._consumeTokensUntilType([TokenType.NewLine]);\n        return expr;\n    }\n\n    // lambdef: 'lambda' [varargslist] ':' test\n    private _parseLambdaExpression(allowConditional = true): LambdaNode {\n        const lambdaToken = this._getKeywordToken(KeywordType.Lambda);\n\n        const argList = this._parseVarArgsList(TokenType.Colon, /* allowAnnotations */ false);\n\n        if (!this._consumeTokenIfType(TokenType.Colon)) {\n            this._addError(Localizer.Diagnostic.expectedColon(), this._peekToken());\n        }\n\n        let testExpr: ExpressionNode;\n        if (allowConditional) {\n            testExpr = this._parseTestExpression(false);\n        } else {\n            testExpr = this._tryParseLambdaExpression(false) || this._parseOrTest();\n        }\n\n        const lambdaNode = LambdaNode.create(lambdaToken, testExpr);\n        lambdaNode.parameters = argList;\n        argList.forEach((arg) => {\n            arg.parent = lambdaNode;\n        });\n        return lambdaNode;\n    }\n\n    private _tryParseLambdaExpression(allowConditional = true): LambdaNode | undefined {\n        if (this._peekKeywordType() !== KeywordType.Lambda) {\n            return undefined;\n        }\n\n        return this._parseLambdaExpression(allowConditional);\n    }\n\n    // ('(' [yield_expr | testlist_comp] ')'\n    // testlist_comp: (test | star_expr) (comp_for | (',' (test | star_expr))* [','])\n    private _parseTupleAtom(): ExpressionNode {\n        const startParen = this._getNextToken();\n        assert(startParen.type === TokenType.OpenParenthesis);\n\n        const yieldExpr = this._tryParseYieldExpression();\n        if (yieldExpr) {\n            if (this._peekTokenType() !== TokenType.CloseParenthesis) {\n                return this._handleExpressionParseError(\n                    ErrorExpressionCategory.MissingTupleCloseParen,\n                    Localizer.Diagnostic.expectedCloseParen()\n                );\n            } else {\n                extendRange(yieldExpr, this._getNextToken());\n            }\n\n            return yieldExpr;\n        }\n\n        const exprListResult = this._parseTestListWithComprehension();\n        const tupleOrExpression = this._makeExpressionOrTuple(exprListResult, /* enclosedInParens */ true);\n\n        if (this._peekTokenType() !== TokenType.CloseParenthesis) {\n            return this._handleExpressionParseError(\n                ErrorExpressionCategory.MissingTupleCloseParen,\n                Localizer.Diagnostic.expectedCloseParen()\n            );\n        } else {\n            extendRange(tupleOrExpression, this._getNextToken());\n        }\n\n        return tupleOrExpression;\n    }\n\n    // '[' [testlist_comp] ']'\n    // testlist_comp: (test | star_expr) (comp_for | (',' (test | star_expr))* [','])\n    private _parseListAtom(): ListNode | ErrorNode {\n        const startBracket = this._getNextToken();\n        assert(startBracket.type === TokenType.OpenBracket);\n\n        const exprListResult = this._parseTestListWithComprehension();\n        const closeBracket: Token | undefined = this._peekToken();\n        if (!this._consumeTokenIfType(TokenType.CloseBracket)) {\n            return this._handleExpressionParseError(\n                ErrorExpressionCategory.MissingListCloseBracket,\n                Localizer.Diagnostic.expectedCloseBracket()\n            );\n        }\n\n        const listAtom = ListNode.create(startBracket);\n        extendRange(listAtom, closeBracket);\n        if (exprListResult.list.length > 0) {\n            exprListResult.list.forEach((expr) => {\n                expr.parent = listAtom;\n            });\n            extendRange(listAtom, exprListResult.list[exprListResult.list.length - 1]);\n        }\n        listAtom.entries = exprListResult.list;\n        return listAtom;\n    }\n\n    private _parseTestListWithComprehension(): ExpressionListResult {\n        let sawComprehension = false;\n\n        return this._parseExpressionListGeneric(\n            () => {\n                let expr = this._parseTestOrStarExpression(true);\n                const listComp = this._tryParseListComprehension(expr);\n                if (listComp) {\n                    expr = listComp;\n                    sawComprehension = true;\n                }\n                return expr;\n            },\n            () => this._isNextTokenNeverExpression(),\n            () => sawComprehension\n        );\n    }\n\n    // '{' [dictorsetmaker] '}'\n    // dictorsetmaker: (\n    //    (dictentry (comp_for | (',' dictentry)* [',']))\n    //    | (setentry (comp_for | (',' setentry)* [',']))\n    // )\n    // dictentry: (test ':' test | '**' expr)\n    // setentry: test | star_expr\n    private _parseDictionaryOrSetAtom(): DictionaryNode | SetNode {\n        const startBrace = this._getNextToken();\n        assert(startBrace.type === TokenType.OpenCurlyBrace);\n\n        const dictionaryEntries: DictionaryEntryNode[] = [];\n        const setEntries: ExpressionNode[] = [];\n        let isDictionary = false;\n        let isSet = false;\n        let sawListComprehension = false;\n        let isFirstEntry = true;\n\n        while (true) {\n            if (this._peekTokenType() === TokenType.CloseCurlyBrace) {\n                break;\n            }\n\n            let doubleStarExpression: ExpressionNode | undefined;\n            let keyExpression: ExpressionNode | undefined;\n            let valueExpression: ExpressionNode | undefined;\n            const doubleStar = this._peekToken();\n\n            if (this._consumeTokenIfOperator(OperatorType.Power)) {\n                doubleStarExpression = this._parseExpression(false);\n            } else {\n                keyExpression = this._parseTestOrStarExpression(true);\n\n                if (this._consumeTokenIfType(TokenType.Colon)) {\n                    valueExpression = this._parseTestExpression(false);\n                }\n            }\n\n            if (keyExpression && valueExpression) {\n                if (keyExpression.nodeType === ParseNodeType.Unpack) {\n                    this._addError(Localizer.Diagnostic.unpackInDict(), keyExpression);\n                }\n\n                if (isSet) {\n                    this._addError(Localizer.Diagnostic.keyValueInSet(), valueExpression);\n                } else {\n                    const keyEntryNode = DictionaryKeyEntryNode.create(keyExpression, valueExpression);\n                    let dictEntry: DictionaryEntryNode = keyEntryNode;\n                    const listComp = this._tryParseListComprehension(keyEntryNode);\n                    if (listComp) {\n                        dictEntry = listComp;\n                        sawListComprehension = true;\n\n                        if (!isFirstEntry) {\n                            this._addError(Localizer.Diagnostic.comprehensionInDict(), dictEntry);\n                        }\n                    }\n                    dictionaryEntries.push(dictEntry);\n                    isDictionary = true;\n                }\n            } else if (doubleStarExpression) {\n                if (isSet) {\n                    this._addError(Localizer.Diagnostic.unpackInSet(), doubleStarExpression);\n                } else {\n                    const listEntryNode = DictionaryExpandEntryNode.create(doubleStarExpression);\n                    extendRange(listEntryNode, doubleStar);\n                    let expandEntryNode: DictionaryEntryNode = listEntryNode;\n                    const listComp = this._tryParseListComprehension(listEntryNode);\n                    if (listComp) {\n                        expandEntryNode = listComp;\n                        sawListComprehension = true;\n\n                        if (!isFirstEntry) {\n                            this._addError(Localizer.Diagnostic.comprehensionInDict(), doubleStarExpression);\n                        }\n                    }\n                    dictionaryEntries.push(expandEntryNode);\n                    isDictionary = true;\n                }\n            } else {\n                assert(keyExpression !== undefined);\n                if (keyExpression) {\n                    if (isDictionary) {\n                        this._addError(Localizer.Diagnostic.dictKeyValuePairs(), keyExpression);\n                    } else {\n                        const listComp = this._tryParseListComprehension(keyExpression);\n                        if (listComp) {\n                            keyExpression = listComp;\n                            sawListComprehension = true;\n\n                            if (!isFirstEntry) {\n                                this._addError(Localizer.Diagnostic.comprehensionInSet(), keyExpression);\n                            }\n                        }\n                        setEntries.push(keyExpression);\n                        isSet = true;\n                    }\n                }\n            }\n\n            // List comprehension statements always end the list.\n            if (sawListComprehension) {\n                break;\n            }\n\n            if (!this._consumeTokenIfType(TokenType.Comma)) {\n                break;\n            }\n\n            isFirstEntry = false;\n        }\n\n        let closeCurlyBrace: Token | undefined = this._peekToken();\n        if (!this._consumeTokenIfType(TokenType.CloseCurlyBrace)) {\n            this._addError(Localizer.Diagnostic.expectedCloseBrace(), this._peekToken());\n            closeCurlyBrace = undefined;\n        }\n\n        if (isSet) {\n            const setAtom = SetNode.create(startBrace);\n            if (closeCurlyBrace) {\n                extendRange(setAtom, closeCurlyBrace);\n            }\n            if (setEntries.length > 0) {\n                extendRange(setAtom, setEntries[setEntries.length - 1]);\n            }\n            setEntries.forEach((entry) => {\n                entry.parent = setAtom;\n            });\n            setAtom.entries = setEntries;\n            return setAtom;\n        }\n\n        const dictionaryAtom = DictionaryNode.create(startBrace);\n        if (closeCurlyBrace) {\n            extendRange(dictionaryAtom, closeCurlyBrace);\n        }\n        if (dictionaryEntries.length > 0) {\n            dictionaryEntries.forEach((entry) => {\n                entry.parent = dictionaryAtom;\n            });\n            extendRange(dictionaryAtom, dictionaryEntries[dictionaryEntries.length - 1]);\n        }\n        dictionaryAtom.entries = dictionaryEntries;\n        return dictionaryAtom;\n    }\n\n    private _parseExpressionListGeneric(\n        parser: () => ExpressionNode,\n        terminalCheck: () => boolean = () => this._isNextTokenNeverExpression(),\n        finalEntryCheck: () => boolean = () => false\n    ): ExpressionListResult {\n        let trailingComma = false;\n        const list: ExpressionNode[] = [];\n        let parseError: ErrorNode | undefined;\n\n        while (true) {\n            if (terminalCheck()) {\n                break;\n            }\n\n            const expr = parser();\n            if (expr.nodeType === ParseNodeType.Error) {\n                parseError = expr;\n                break;\n            }\n            list.push(expr);\n\n            // Should we stop without checking for a trailing comma?\n            if (finalEntryCheck()) {\n                break;\n            }\n\n            if (!this._consumeTokenIfType(TokenType.Comma)) {\n                trailingComma = false;\n                break;\n            }\n\n            trailingComma = true;\n        }\n\n        return { trailingComma, list, parseError };\n    }\n\n    // expr_stmt: testlist_star_expr (annassign | augassign (yield_expr | testlist) |\n    //                     ('=' (yield_expr | testlist_star_expr))*)\n    // testlist_star_expr: (test|star_expr) (',' (test|star_expr))* [',']\n    // annassign: ':' test ['=' test]\n    // augassign: ('+=' | '-=' | '*=' | '@=' | '/=' | '%=' | '&=' | '|=' | '^=' |\n    //             '<<=' | '>>=' | '**=' | '//=')\n    private _parseExpressionStatement(): ExpressionNode {\n        let leftExpr = this._parseTestOrStarListAsExpression(\n            /* allowAssignmentExpression */ false,\n            ErrorExpressionCategory.MissingExpression,\n            Localizer.Diagnostic.expectedExpr()\n        );\n        let annotationExpr: ExpressionNode | undefined;\n\n        if (leftExpr.nodeType === ParseNodeType.Error) {\n            return leftExpr;\n        }\n\n        // Is this a type annotation assignment?\n        if (this._consumeTokenIfType(TokenType.Colon)) {\n            annotationExpr = this._parseTypeAnnotation();\n            leftExpr = TypeAnnotationNode.create(leftExpr, annotationExpr);\n\n            if (!this._parseOptions.isStubFile && this._getLanguageVersion() < PythonVersion.V3_6) {\n                this._addError(Localizer.Diagnostic.varAnnotationIllegal(), annotationExpr);\n            }\n\n            if (!this._consumeTokenIfOperator(OperatorType.Assign)) {\n                return leftExpr;\n            }\n\n            // This is an unfortunate hack that's necessary to accommodate 'TypeAlias'\n            // declarations properly. We need to treat this assignment differently than\n            // most because the expression on the right side is treated like a type\n            // annotation and therefore allows string-literal forward declarations.\n            const isTypeAliasDeclaration = this._isTypingAnnotation(annotationExpr, 'TypeAlias');\n\n            const wasParsingTypeAnnotation = this._isParsingTypeAnnotation;\n            if (isTypeAliasDeclaration) {\n                this._isParsingTypeAnnotation = true;\n            }\n\n            const rightExpr = this._parseTestExpression(false);\n\n            this._isParsingTypeAnnotation = wasParsingTypeAnnotation;\n\n            return AssignmentNode.create(leftExpr, rightExpr);\n        }\n\n        // Is this a simple assignment?\n        if (this._consumeTokenIfOperator(OperatorType.Assign)) {\n            return this._parseChainAssignments(leftExpr);\n        }\n\n        if (!annotationExpr && Tokenizer.isOperatorAssignment(this._peekOperatorType())) {\n            const operatorToken = this._getNextToken() as OperatorToken;\n\n            const rightExpr =\n                this._tryParseYieldExpression() ||\n                this._parseTestListAsExpression(\n                    ErrorExpressionCategory.MissingExpression,\n                    Localizer.Diagnostic.expectedBinaryRightHandExpr()\n                );\n\n            // Make a shallow copy of the dest expression but give it a new ID.\n            const destExpr = Object.assign({}, leftExpr);\n            destExpr.id = getNextNodeId();\n\n            return AugmentedAssignmentNode.create(leftExpr, rightExpr, operatorToken.operatorType, destExpr);\n        }\n\n        return leftExpr;\n    }\n\n    private _parseChainAssignments(leftExpr: ExpressionNode): ExpressionNode {\n        let rightExpr: ExpressionNode | undefined;\n        rightExpr = this._tryParseYieldExpression();\n        if (!rightExpr) {\n            rightExpr = this._parseTestOrStarListAsExpression(\n                /* allowAssignmentExpression */ false,\n                ErrorExpressionCategory.MissingExpression,\n                Localizer.Diagnostic.expectedAssignRightHandExpr()\n            );\n        }\n\n        if (rightExpr.nodeType === ParseNodeType.Error) {\n            return AssignmentNode.create(leftExpr, rightExpr);\n        }\n\n        // Recur until we've consumed the entire chain.\n        if (this._consumeTokenIfOperator(OperatorType.Assign)) {\n            rightExpr = this._parseChainAssignments(rightExpr);\n            if (rightExpr.nodeType === ParseNodeType.Error) {\n                return rightExpr;\n            }\n        }\n\n        const assignmentNode = AssignmentNode.create(leftExpr, rightExpr);\n\n        // Look for a type annotation comment at the end of the line.\n        const typeAnnotationComment = this._parseVariableTypeAnnotationComment();\n        if (typeAnnotationComment) {\n            assignmentNode.typeAnnotationComment = typeAnnotationComment;\n            assignmentNode.typeAnnotationComment.parent = assignmentNode;\n            extendRange(assignmentNode, assignmentNode.typeAnnotationComment);\n        }\n\n        return assignmentNode;\n    }\n\n    private _parseFunctionTypeAnnotation(): FunctionAnnotationNode | undefined {\n        const openParenToken = this._peekToken();\n        if (!this._consumeTokenIfType(TokenType.OpenParenthesis)) {\n            this._addError(Localizer.Diagnostic.expectedOpenParen(), this._peekToken());\n            return undefined;\n        }\n\n        let paramAnnotations: ExpressionNode[] = [];\n\n        while (true) {\n            const nextTokenType = this._peekTokenType();\n            if (\n                nextTokenType === TokenType.CloseParenthesis ||\n                nextTokenType === TokenType.NewLine ||\n                nextTokenType === TokenType.EndOfStream\n            ) {\n                break;\n            }\n\n            const paramAnnotation = this._parseTypeAnnotation();\n            paramAnnotations.push(paramAnnotation);\n\n            if (!this._consumeTokenIfType(TokenType.Comma)) {\n                break;\n            }\n        }\n\n        if (!this._consumeTokenIfType(TokenType.CloseParenthesis)) {\n            this._addError(Localizer.Diagnostic.expectedCloseParen(), this._peekToken());\n            this._consumeTokensUntilType([TokenType.Colon]);\n        }\n\n        if (!this._consumeTokenIfType(TokenType.Arrow)) {\n            this._addError(Localizer.Diagnostic.expectedArrow(), this._peekToken());\n            return undefined;\n        }\n\n        const returnType = this._parseTypeAnnotation();\n\n        let isParamListEllipsis = false;\n        if (paramAnnotations.length === 1 && paramAnnotations[0].nodeType === ParseNodeType.Ellipsis) {\n            paramAnnotations = [];\n            isParamListEllipsis = true;\n        }\n\n        return FunctionAnnotationNode.create(openParenToken, isParamListEllipsis, paramAnnotations, returnType);\n    }\n\n    private _parseTypeAnnotation(allowUnionNotation = true): ExpressionNode {\n        // Temporary set a flag that indicates we're parsing a type annotation.\n        const wasParsingTypeAnnotation = this._isParsingTypeAnnotation;\n        this._isParsingTypeAnnotation = true;\n\n        const result = this._parseTestExpression(/* allowAssignmentExpression */ false);\n\n        this._isParsingTypeAnnotation = wasParsingTypeAnnotation;\n\n        return result;\n    }\n\n    private _reportStringTokenErrors(stringToken: StringToken, unescapedResult: StringTokenUtils.UnescapedString) {\n        if (stringToken.flags & StringTokenFlags.Unterminated) {\n            this._addError(Localizer.Diagnostic.stringUnterminated(), stringToken);\n        }\n\n        if (unescapedResult.nonAsciiInBytes) {\n            this._addError(Localizer.Diagnostic.stringNonAsciiBytes(), stringToken);\n        }\n\n        if (stringToken.flags & StringTokenFlags.Format) {\n            if (this._getLanguageVersion() < PythonVersion.V3_6) {\n                this._addError(Localizer.Diagnostic.formatStringIllegal(), stringToken);\n            }\n\n            if (stringToken.flags & StringTokenFlags.Bytes) {\n                this._addError(Localizer.Diagnostic.formatStringBytes(), stringToken);\n            }\n\n            if (stringToken.flags & StringTokenFlags.Unicode) {\n                this._addError(Localizer.Diagnostic.formatStringUnicode(), stringToken);\n            }\n        }\n    }\n\n    private _makeStringNode(stringToken: StringToken): StringNode {\n        const unescapedResult = StringTokenUtils.getUnescapedString(stringToken);\n        this._reportStringTokenErrors(stringToken, unescapedResult);\n        return StringNode.create(stringToken, unescapedResult.value, unescapedResult.unescapeErrors.length > 0);\n    }\n\n    private _getTypeAnnotationCommentText(): StringToken | undefined {\n        if (this._tokenIndex === 0) {\n            return undefined;\n        }\n\n        const curToken = this._tokenizerOutput!.tokens.getItemAt(this._tokenIndex - 1);\n        const nextToken = this._tokenizerOutput!.tokens.getItemAt(this._tokenIndex);\n\n        if (curToken.start + curToken.length === nextToken.start) {\n            return undefined;\n        }\n\n        const interTokenContents = this._fileContents!.substring(curToken.start + curToken.length, nextToken.start);\n        const commentRegEx = /^(\\s*#\\s*type:\\s*)([^\\r\\n]*)/;\n        const match = interTokenContents.match(commentRegEx);\n        if (!match) {\n            return undefined;\n        }\n\n        // Synthesize a string token and StringNode.\n        const typeString = match[2];\n\n        // Ignore all \"ignore\" comments. Include \"[\" in the regular\n        // expression because mypy supports ignore comments of the\n        // form ignore[errorCode, ...]. We'll treat these as regular\n        // ignore statements (as though no errorCodes were included).\n        if (typeString.trim().match(/^ignore(\\s|\\[|$)/)) {\n            return undefined;\n        }\n\n        const tokenOffset = curToken.start + curToken.length + match[1].length;\n        return StringToken.create(tokenOffset, typeString.length, StringTokenFlags.None, typeString, 0, undefined);\n    }\n\n    private _parseVariableTypeAnnotationComment(): ExpressionNode | undefined {\n        const stringToken = this._getTypeAnnotationCommentText();\n        if (!stringToken) {\n            return undefined;\n        }\n\n        const stringNode = this._makeStringNode(stringToken);\n        const stringListNode = StringListNode.create([stringNode]);\n        const parser = new Parser();\n        const parseResults = parser.parseTextExpression(\n            this._fileContents!,\n            stringToken.start,\n            stringToken.length,\n            this._parseOptions,\n            ParseTextMode.VariableAnnotation\n        );\n\n        parseResults.diagnostics.forEach((diag) => {\n            this._addError(diag.message, stringListNode);\n        });\n\n        if (!parseResults.parseTree) {\n            return undefined;\n        }\n\n        return parseResults.parseTree;\n    }\n\n    private _parseFunctionTypeAnnotationComment(stringToken: StringToken, functionNode: FunctionNode): void {\n        const stringNode = this._makeStringNode(stringToken);\n        const stringListNode = StringListNode.create([stringNode]);\n        const parser = new Parser();\n        const parseResults = parser.parseTextExpression(\n            this._fileContents!,\n            stringToken.start,\n            stringToken.length,\n            this._parseOptions,\n            ParseTextMode.FunctionAnnotation\n        );\n\n        parseResults.diagnostics.forEach((diag) => {\n            this._addError(diag.message, stringListNode);\n        });\n\n        if (!parseResults.parseTree || parseResults.parseTree.nodeType !== ParseNodeType.FunctionAnnotation) {\n            return;\n        }\n\n        const functionAnnotation = parseResults.parseTree;\n\n        functionNode.functionAnnotationComment = functionAnnotation;\n        functionAnnotation.parent = functionNode;\n        extendRange(functionNode, functionAnnotation);\n    }\n\n    private _parseFormatStringSegment(\n        stringToken: StringToken,\n        segment: StringTokenUtils.FormatStringSegment,\n        segmentOffset: number,\n        segmentLength: number\n    ) {\n        assert(segment.isExpression);\n        const parser = new Parser();\n        const parseResults = parser.parseTextExpression(\n            this._fileContents!,\n            stringToken.start + stringToken.prefixLength + stringToken.quoteMarkLength + segment.offset + segmentOffset,\n            segmentLength,\n            this._parseOptions,\n            ParseTextMode.Expression,\n            /* initialParenDepth */ 1\n        );\n\n        parseResults.diagnostics.forEach((diag) => {\n            const textRangeStart =\n                (diag.range ? convertPositionToOffset(diag.range.start, parseResults.lines) : stringToken.start) ||\n                stringToken.start;\n            const textRangeEnd =\n                (diag.range\n                    ? (convertPositionToOffset(diag.range.end, parseResults.lines) || 0) + 1\n                    : stringToken.start + stringToken.length) || stringToken.start + stringToken.length;\n            const textRange = { start: textRangeStart, length: textRangeEnd - textRangeStart };\n            this._addError(diag.message, textRange);\n        });\n\n        return parseResults.parseTree;\n    }\n\n    private _parseFormatString(stringToken: StringToken): FormatStringNode {\n        const unescapedResult = StringTokenUtils.getUnescapedString(stringToken);\n        this._reportStringTokenErrors(stringToken, unescapedResult);\n\n        const formatExpressions: ExpressionNode[] = [];\n\n        for (const segment of unescapedResult.formatStringSegments) {\n            if (segment.isExpression) {\n                // Determine if we need to truncate the expression because it\n                // contains formatting directives that start with a ! or :.\n                const segmentExprLength = this._getFormatStringExpressionLength(segment.value.trimEnd());\n                const parseTree = this._parseFormatStringSegment(stringToken, segment, 0, segmentExprLength);\n                if (parseTree) {\n                    formatExpressions.push(parseTree);\n                }\n\n                // Look for additional expressions within the format directive.\n                const formatDirective = segment.value.substr(segmentExprLength);\n                let braceDepth = 0;\n                let startOfExprOffset = 0;\n                for (let i = 0; i < formatDirective.length; i++) {\n                    if (formatDirective.charCodeAt(i) === Char.OpenBrace) {\n                        if (braceDepth === 0) {\n                            startOfExprOffset = i + 1;\n                        }\n                        braceDepth++;\n                    } else if (formatDirective.charCodeAt(i) === Char.CloseBrace) {\n                        if (braceDepth > 0) {\n                            braceDepth--;\n                            if (braceDepth === 0) {\n                                const parseTree = this._parseFormatStringSegment(\n                                    stringToken,\n                                    segment,\n                                    segmentExprLength + startOfExprOffset,\n                                    i - startOfExprOffset\n                                );\n                                if (parseTree) {\n                                    formatExpressions.push(parseTree);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return FormatStringNode.create(\n            stringToken,\n            unescapedResult.value,\n            unescapedResult.unescapeErrors.length > 0,\n            formatExpressions\n        );\n    }\n\n    private _getFormatStringExpressionLength(segmentValue: string): number {\n        let segmentExprLength = 0;\n\n        // PEP 498 says: Expressions cannot contain ':' or '!' outside of\n        // strings or parentheses, brackets, or braces. The exception is\n        // that the '!=' operator is allowed as a special case.\n        const quoteStack: string[] = [];\n        let braceCount = 0;\n        let parenCount = 0;\n        let bracketCount = 0;\n        let prevCharWasEqual = false;\n\n        while (segmentExprLength < segmentValue.length) {\n            const curChar = segmentValue[segmentExprLength];\n            const ignoreSeparator = quoteStack.length > 0 || braceCount > 0 || parenCount > 0 || bracketCount > 0;\n            const inString = quoteStack.length > 0;\n\n            if (curChar === '=') {\n                prevCharWasEqual = true;\n            } else {\n                if (curChar === ':') {\n                    if (!ignoreSeparator) {\n                        break;\n                    }\n                } else if (curChar === '!') {\n                    if (!ignoreSeparator) {\n                        // Allow !=, as per PEP 498\n                        if (\n                            segmentExprLength === segmentValue.length - 1 ||\n                            segmentValue[segmentExprLength + 1] !== '='\n                        ) {\n                            break;\n                        }\n                    }\n                } else if (curChar === \"'\" || curChar === '\"') {\n                    let quoteSequence = curChar;\n                    if (\n                        segmentExprLength + 2 < segmentValue.length &&\n                        segmentValue[segmentExprLength + 1] === curChar &&\n                        segmentValue[segmentExprLength + 2] === curChar\n                    ) {\n                        quoteSequence = curChar + curChar + curChar;\n                        segmentExprLength += 2;\n                    }\n\n                    if (quoteStack.length > 0 && quoteStack[quoteStack.length - 1] === quoteSequence) {\n                        quoteStack.pop();\n                    } else {\n                        quoteStack.push(quoteSequence);\n                    }\n                } else if (curChar === '(') {\n                    if (!inString) {\n                        parenCount++;\n                    }\n                } else if (curChar === ')') {\n                    if (!inString && parenCount > 0) {\n                        parenCount--;\n                    }\n                } else if (curChar === '{') {\n                    if (!inString) {\n                        braceCount++;\n                    }\n                } else if (curChar === '}') {\n                    if (!inString && braceCount > 0) {\n                        braceCount--;\n                    }\n                } else if (curChar === '[') {\n                    if (!inString) {\n                        bracketCount++;\n                    }\n                } else if (curChar === ']') {\n                    if (!inString && bracketCount > 0) {\n                        bracketCount--;\n                    }\n                }\n\n                prevCharWasEqual = false;\n            }\n\n            segmentExprLength++;\n        }\n\n        // Handle Python 3.8 f-string formatting expressions that\n        // end in an \"=\".\n        if (this._parseOptions.pythonVersion >= PythonVersion.V3_8 && prevCharWasEqual) {\n            segmentExprLength--;\n        }\n\n        return segmentExprLength;\n    }\n\n    private _parseStringList(): StringListNode {\n        const stringList: (StringNode | FormatStringNode)[] = [];\n\n        while (this._peekTokenType() === TokenType.String) {\n            const stringToken = this._getNextToken() as StringToken;\n            if (stringToken.flags & StringTokenFlags.Format) {\n                stringList.push(this._parseFormatString(stringToken));\n            } else {\n                stringList.push(this._makeStringNode(stringToken));\n            }\n        }\n\n        const stringNode = StringListNode.create(stringList);\n\n        // If we're parsing a type annotation, parse the contents of the string.\n        if (this._isParsingTypeAnnotation) {\n            // Don't allow multiple strings because we have no way of reporting\n            // parse errors that span strings.\n            if (stringNode.strings.length > 1) {\n                this._addError(Localizer.Diagnostic.annotationSpansStrings(), stringNode);\n            } else if (stringNode.strings[0].token.flags & StringTokenFlags.Triplicate) {\n                this._addError(Localizer.Diagnostic.annotationTripleQuote(), stringNode);\n            } else if (stringNode.strings[0].token.flags & StringTokenFlags.Format) {\n                this._addError(Localizer.Diagnostic.annotationFormatString(), stringNode);\n            } else {\n                const stringToken = stringNode.strings[0].token;\n                const stringValue = StringTokenUtils.getUnescapedString(stringNode.strings[0].token);\n                const unescapedString = stringValue.value;\n                const tokenOffset = stringToken.start;\n                const prefixLength = stringToken.prefixLength + stringToken.quoteMarkLength;\n\n                // Don't allow escape characters because we have no way of mapping\n                // error ranges back to the escaped text.\n                if (unescapedString.length !== stringToken.length - prefixLength - stringToken.quoteMarkLength) {\n                    this._addError(Localizer.Diagnostic.annotationStringEscape(), stringNode);\n                } else {\n                    const parser = new Parser();\n                    const parseResults = parser.parseTextExpression(\n                        this._fileContents!,\n                        tokenOffset + prefixLength,\n                        unescapedString.length,\n                        this._parseOptions,\n                        ParseTextMode.VariableAnnotation\n                    );\n\n                    parseResults.diagnostics.forEach((diag) => {\n                        this._addError(diag.message, stringNode);\n                    });\n\n                    if (parseResults.parseTree) {\n                        stringNode.typeAnnotation = parseResults.parseTree;\n                        stringNode.typeAnnotation.parent = stringNode;\n                    }\n                }\n            }\n        }\n\n        return stringNode;\n    }\n\n    // Python 3.8 added support for star (unpack) expressions in tuples\n    // following a return or yield statement in cases where the tuple\n    // wasn't surrounded in parentheses.\n    private _reportConditionalErrorForStarTupleElement(possibleTupleExpr: ExpressionNode) {\n        if (possibleTupleExpr.nodeType !== ParseNodeType.Tuple) {\n            return;\n        }\n\n        if (possibleTupleExpr.enclosedInParens) {\n            return;\n        }\n\n        if (this._parseOptions.pythonVersion >= PythonVersion.V3_8) {\n            return;\n        }\n\n        for (const expr of possibleTupleExpr.expressions) {\n            if (expr.nodeType === ParseNodeType.Unpack) {\n                this._addError(Localizer.Diagnostic.unpackTuplesIllegal(), expr);\n                return;\n            }\n        }\n    }\n\n    // Peeks at the next token and returns true if it can never\n    // represent the start of an expression.\n    private _isNextTokenNeverExpression(): boolean {\n        const nextToken = this._peekToken();\n        switch (nextToken.type) {\n            case TokenType.Keyword: {\n                switch (this._peekKeywordType()) {\n                    case KeywordType.For:\n                    case KeywordType.In:\n                    case KeywordType.If:\n                        return true;\n                }\n                break;\n            }\n\n            case TokenType.Operator: {\n                switch (this._peekOperatorType()) {\n                    case OperatorType.AddEqual:\n                    case OperatorType.SubtractEqual:\n                    case OperatorType.MultiplyEqual:\n                    case OperatorType.DivideEqual:\n                    case OperatorType.ModEqual:\n                    case OperatorType.BitwiseAndEqual:\n                    case OperatorType.BitwiseOrEqual:\n                    case OperatorType.BitwiseXorEqual:\n                    case OperatorType.LeftShiftEqual:\n                    case OperatorType.RightShiftEqual:\n                    case OperatorType.PowerEqual:\n                    case OperatorType.FloorDivideEqual:\n                    case OperatorType.Assign:\n                        return true;\n                }\n                break;\n            }\n\n            case TokenType.Indent:\n            case TokenType.Dedent:\n            case TokenType.NewLine:\n            case TokenType.EndOfStream:\n            case TokenType.Semicolon:\n            case TokenType.CloseParenthesis:\n            case TokenType.CloseBracket:\n            case TokenType.CloseCurlyBrace:\n            case TokenType.Comma:\n            case TokenType.Colon:\n                return true;\n        }\n\n        return false;\n    }\n\n    private _disallowAssignmentExpression(callback: () => void) {\n        const wasAllowed = this._assignmentExpressionsAllowed;\n        this._assignmentExpressionsAllowed = false;\n\n        callback();\n\n        this._assignmentExpressionsAllowed = wasAllowed;\n    }\n\n    private _getNextToken(): Token {\n        const token = this._tokenizerOutput!.tokens.getItemAt(this._tokenIndex);\n        if (!this._atEof()) {\n            this._tokenIndex++;\n        }\n\n        return token;\n    }\n\n    private _atEof(): boolean {\n        // Are we pointing at the last token in the stream (which is\n        // assumed to be an end-of-stream token)?\n        return this._tokenIndex >= this._tokenizerOutput!.tokens.count - 1;\n    }\n\n    private _peekToken(count = 0): Token {\n        if (this._tokenIndex + count < 0) {\n            this._tokenizerOutput!.tokens.getItemAt(0);\n        }\n\n        if (this._tokenIndex + count >= this._tokenizerOutput!.tokens.count) {\n            return this._tokenizerOutput!.tokens.getItemAt(this._tokenizerOutput!.tokens.count - 1);\n        }\n\n        return this._tokenizerOutput!.tokens.getItemAt(this._tokenIndex + count);\n    }\n\n    private _peekTokenType(): TokenType {\n        return this._peekToken().type;\n    }\n\n    private _peekKeywordType(): KeywordType | undefined {\n        const nextToken = this._peekToken();\n        if (nextToken.type !== TokenType.Keyword) {\n            return undefined;\n        }\n\n        return (nextToken as KeywordToken).keywordType;\n    }\n\n    private _peekOperatorType(): OperatorType | undefined {\n        const nextToken = this._peekToken();\n        if (nextToken.type !== TokenType.Operator) {\n            return undefined;\n        }\n\n        return (nextToken as OperatorToken).operatorType;\n    }\n\n    private _getTokenIfIdentifier(disallowedKeywords: KeywordType[] = []): IdentifierToken | undefined {\n        const nextToken = this._peekToken();\n        if (nextToken.type === TokenType.Identifier) {\n            return this._getNextToken() as IdentifierToken;\n        }\n\n        // If the next token is invalid, treat it as an identifier.\n        if (nextToken.type === TokenType.Invalid) {\n            this._getNextToken();\n            this._addError(Localizer.Diagnostic.invalidIdentifierChar(), nextToken);\n            return IdentifierToken.create(nextToken.start, nextToken.length, '', nextToken.comments);\n        }\n\n        // If keywords are allowed in this context, convert the keyword\n        // to an identifier token.\n        if (nextToken.type === TokenType.Keyword) {\n            const keywordType = this._peekKeywordType();\n            if (!disallowedKeywords.find((type) => type === keywordType)) {\n                const keywordText = this._fileContents!.substr(nextToken.start, nextToken.length);\n                this._getNextToken();\n                return IdentifierToken.create(nextToken.start, nextToken.length, keywordText, nextToken.comments);\n            }\n        }\n\n        return undefined;\n    }\n\n    // Consumes tokens until the next one in the stream is\n    // either a specified terminator or the end-of-stream\n    // token.\n    private _consumeTokensUntilType(terminators: TokenType[]): boolean {\n        while (true) {\n            const token = this._peekToken();\n            if (terminators.some((term) => term === token.type)) {\n                return true;\n            }\n\n            if (token.type === TokenType.EndOfStream) {\n                return false;\n            }\n\n            this._getNextToken();\n        }\n    }\n\n    private _consumeTokenIfType(tokenType: TokenType): boolean {\n        if (this._peekTokenType() === tokenType) {\n            this._getNextToken();\n            return true;\n        }\n\n        return false;\n    }\n\n    private _consumeTokenIfKeyword(keywordType: KeywordType): boolean {\n        if (this._peekKeywordType() === keywordType) {\n            this._getNextToken();\n            return true;\n        }\n\n        return false;\n    }\n\n    private _consumeTokenIfOperator(operatorType: OperatorType): boolean {\n        if (this._peekOperatorType() === operatorType) {\n            this._getNextToken();\n            return true;\n        }\n\n        return false;\n    }\n\n    private _getKeywordToken(keywordType: KeywordType): KeywordToken {\n        const keywordToken = this._getNextToken() as KeywordToken;\n        assert(keywordToken.type === TokenType.Keyword);\n        assert(keywordToken.keywordType === keywordType);\n        return keywordToken;\n    }\n\n    private _getLanguageVersion() {\n        return this._parseOptions.pythonVersion;\n    }\n\n    private _addError(message: string, range: TextRange) {\n        assert(range !== undefined);\n        this._diagSink.addError(\n            message,\n            convertOffsetsToRange(range.start, range.start + range.length, this._tokenizerOutput!.lines)\n        );\n    }\n}\n","/*\n * stringTokenUtils.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Methods that handle unescaping of escaped string token\n * literal values.\n */\n\nimport Char from 'typescript-char';\n\nimport { StringToken, StringTokenFlags } from './tokenizerTypes';\n\nexport interface FormatStringSegment {\n    // Offset within the unescaped string where\n    // this format string segment begins.\n    offset: number;\n\n    // Length of unescaped string corresponding\n    // to this segment.\n    length: number;\n\n    // Unescaped value of segment (without brackets).\n    value: string;\n\n    // Indicates whether this segment should be parsed\n    // as an expression.\n    isExpression: boolean;\n}\n\nexport const enum UnescapeErrorType {\n    InvalidEscapeSequence,\n    EscapeWithinFormatExpression,\n    SingleCloseBraceWithinFormatLiteral,\n    UnterminatedFormatExpression,\n}\n\nexport interface UnescapeError {\n    // Offset within the unescaped string where\n    // this error begins.\n    offset: number;\n\n    // Length of section associated with error.\n    length: number;\n\n    // Type of error.\n    errorType: UnescapeErrorType;\n}\n\nexport interface UnescapedString {\n    value: string;\n    unescapeErrors: UnescapeError[];\n    nonAsciiInBytes: boolean;\n    formatStringSegments: FormatStringSegment[];\n}\n\nexport function getUnescapedString(stringToken: StringToken): UnescapedString {\n    const escapedString = stringToken.escapedValue;\n    const isRaw = (stringToken.flags & StringTokenFlags.Raw) !== 0;\n    const isBytes = (stringToken.flags & StringTokenFlags.Bytes) !== 0;\n    const isFormat = (stringToken.flags & StringTokenFlags.Format) !== 0;\n    let formatExpressionNestCount = 0;\n    let formatSegment: FormatStringSegment = {\n        offset: 0,\n        length: 0,\n        value: '',\n        isExpression: false,\n    };\n    let strOffset = 0;\n    const output: UnescapedString = {\n        value: '',\n        unescapeErrors: [],\n        nonAsciiInBytes: false,\n        formatStringSegments: [],\n    };\n\n    const addInvalidEscapeOffset = () => {\n        // Invalid escapes are not reported for raw strings.\n        if (!isRaw) {\n            output.unescapeErrors.push({\n                offset: strOffset - 1,\n                length: 2,\n                errorType: UnescapeErrorType.InvalidEscapeSequence,\n            });\n        }\n    };\n\n    const getEscapedCharacter = (offset = 0) => {\n        if (strOffset + offset >= escapedString.length) {\n            return Char.EndOfText;\n        }\n\n        return escapedString.charCodeAt(strOffset + offset);\n    };\n\n    const scanHexEscape = (digitCount: number) => {\n        let foundIllegalHexDigit = false;\n        let hexValue = 0;\n        let localValue = '';\n\n        for (let i = 0; i < digitCount; i++) {\n            const charCode = getEscapedCharacter(1 + i);\n            if (!_isHexCharCode(charCode)) {\n                foundIllegalHexDigit = true;\n                break;\n            }\n            hexValue = 16 * hexValue + _getHexDigitValue(charCode);\n        }\n\n        if (foundIllegalHexDigit) {\n            addInvalidEscapeOffset();\n            localValue = '\\\\' + String.fromCharCode(getEscapedCharacter());\n            strOffset++;\n        } else {\n            localValue = String.fromCharCode(hexValue);\n            strOffset += 1 + digitCount;\n        }\n\n        return localValue;\n    };\n\n    const appendOutputChar = (charCode: number) => {\n        const char = String.fromCharCode(charCode);\n        output.value += char;\n        formatSegment.value += char;\n    };\n\n    while (true) {\n        let curChar = getEscapedCharacter();\n        if (curChar === Char.EndOfText) {\n            if (isFormat) {\n                if (formatSegment.isExpression) {\n                    // The last format segment was an unterminated expression.\n                    output.unescapeErrors.push({\n                        offset: formatSegment.offset,\n                        length: strOffset - formatSegment.offset,\n                        errorType: UnescapeErrorType.UnterminatedFormatExpression,\n                    });\n                }\n\n                // Push the last segment.\n                if (strOffset !== formatSegment.offset) {\n                    formatSegment.length = strOffset - formatSegment.offset;\n                    output.formatStringSegments.push(formatSegment);\n                }\n            }\n            return output;\n        }\n\n        if (curChar === Char.Backslash) {\n            if (isFormat && formatSegment.isExpression) {\n                // Backslashes aren't allowed within format string expressions.\n                output.unescapeErrors.push({\n                    offset: strOffset,\n                    length: 1,\n                    errorType: UnescapeErrorType.EscapeWithinFormatExpression,\n                });\n            }\n\n            // Move past the escape (backslash) character.\n            strOffset++;\n\n            if (isRaw) {\n                appendOutputChar(curChar);\n                continue;\n            }\n\n            curChar = getEscapedCharacter();\n            let localValue = '';\n\n            if (curChar === Char.CarriageReturn || curChar === Char.LineFeed) {\n                if (curChar === Char.CarriageReturn && getEscapedCharacter(1) === Char.LineFeed) {\n                    if (isRaw) {\n                        localValue += String.fromCharCode(curChar);\n                    }\n                    strOffset++;\n                    curChar = getEscapedCharacter();\n                }\n                if (isRaw) {\n                    localValue = '\\\\' + localValue + String.fromCharCode(curChar);\n                }\n                strOffset++;\n            } else {\n                if (isRaw) {\n                    localValue = '\\\\' + String.fromCharCode(curChar);\n                    strOffset++;\n                } else {\n                    switch (curChar) {\n                        case Char.Backslash:\n                        case Char.SingleQuote:\n                        case Char.DoubleQuote:\n                            localValue = String.fromCharCode(curChar);\n                            strOffset++;\n                            break;\n\n                        case Char.a:\n                            localValue = '\\u0007';\n                            strOffset++;\n                            break;\n\n                        case Char.b:\n                            localValue = '\\b';\n                            strOffset++;\n                            break;\n\n                        case Char.f:\n                            localValue = '\\f';\n                            strOffset++;\n                            break;\n\n                        case Char.n:\n                            localValue = '\\n';\n                            strOffset++;\n                            break;\n\n                        case Char.r:\n                            localValue = '\\r';\n                            strOffset++;\n                            break;\n\n                        case Char.t:\n                            localValue = '\\t';\n                            strOffset++;\n                            break;\n\n                        case Char.v:\n                            localValue = '\\v';\n                            strOffset++;\n                            break;\n\n                        case Char.x:\n                            localValue = scanHexEscape(2);\n                            break;\n\n                        case Char.N: {\n                            let foundIllegalChar = false;\n                            let charCount = 1;\n                            if (getEscapedCharacter(charCount) !== Char.OpenBrace) {\n                                foundIllegalChar = true;\n                            } else {\n                                charCount++;\n                                while (true) {\n                                    const lookaheadChar = getEscapedCharacter(charCount);\n                                    if (lookaheadChar === Char.CloseBrace) {\n                                        break;\n                                    } else if (\n                                        !_isAlphaNumericChar(lookaheadChar) &&\n                                        lookaheadChar !== Char.Hyphen &&\n                                        !_isWhitespaceChar(lookaheadChar)\n                                    ) {\n                                        foundIllegalChar = true;\n                                        break;\n                                    } else {\n                                        charCount++;\n                                    }\n                                }\n                            }\n\n                            if (foundIllegalChar) {\n                                addInvalidEscapeOffset();\n                                localValue = '\\\\' + String.fromCharCode(curChar);\n                                strOffset++;\n                            } else {\n                                // We don't have the Unicode name database handy, so\n                                // assume that the name is valid and use a '-' as a\n                                // replacement character.\n                                localValue = '-';\n                                strOffset += 1 + charCount;\n                            }\n                            break;\n                        }\n\n                        case Char.u:\n                            localValue = scanHexEscape(4);\n                            break;\n\n                        case Char.U:\n                            localValue = scanHexEscape(8);\n                            break;\n\n                        default:\n                            if (_isOctalCharCode(curChar)) {\n                                let octalCode = curChar - Char._0;\n                                strOffset++;\n                                curChar = getEscapedCharacter();\n                                if (_isOctalCharCode(curChar)) {\n                                    octalCode = octalCode * 8 + curChar - Char._0;\n                                    strOffset++;\n                                    curChar = getEscapedCharacter();\n\n                                    if (_isOctalCharCode(curChar)) {\n                                        octalCode = octalCode * 8 + curChar - Char._0;\n                                        strOffset++;\n                                    }\n                                }\n\n                                localValue = String.fromCharCode(octalCode);\n                            } else {\n                                localValue = '\\\\';\n                                addInvalidEscapeOffset();\n                            }\n                            break;\n                    }\n                }\n            }\n\n            output.value += localValue;\n            formatSegment.value += localValue;\n        } else if (curChar === Char.LineFeed || curChar === Char.CarriageReturn) {\n            // Skip over the escaped new line (either one or two characters).\n            if (curChar === Char.CarriageReturn && getEscapedCharacter(1) === Char.LineFeed) {\n                appendOutputChar(curChar);\n                strOffset++;\n                curChar = getEscapedCharacter();\n            }\n\n            appendOutputChar(curChar);\n            strOffset++;\n        } else if (isFormat && curChar === Char.OpenBrace) {\n            if (!formatSegment.isExpression && getEscapedCharacter(1) === Char.OpenBrace) {\n                appendOutputChar(curChar);\n                strOffset += 2;\n            } else {\n                if (formatExpressionNestCount === 0) {\n                    // A single open brace within a format literal indicates that\n                    // an expression is starting.\n                    formatSegment.length = strOffset - formatSegment.offset;\n                    if (formatSegment.length > 0) {\n                        output.formatStringSegments.push(formatSegment);\n                    }\n                    strOffset++;\n\n                    // Start a new segment.\n                    formatSegment = {\n                        offset: strOffset,\n                        length: 0,\n                        value: '',\n                        isExpression: true,\n                    };\n                } else {\n                    appendOutputChar(curChar);\n                    strOffset++;\n                }\n                formatExpressionNestCount++;\n            }\n        } else if (isFormat && curChar === Char.CloseBrace) {\n            if (!formatSegment.isExpression && getEscapedCharacter(1) === Char.CloseBrace) {\n                appendOutputChar(curChar);\n                strOffset += 2;\n            } else if (formatExpressionNestCount === 0) {\n                output.unescapeErrors.push({\n                    offset: strOffset,\n                    length: 1,\n                    errorType: UnescapeErrorType.SingleCloseBraceWithinFormatLiteral,\n                });\n                strOffset++;\n            } else {\n                formatExpressionNestCount--;\n\n                if (formatExpressionNestCount === 0) {\n                    // A close brace within a format expression indicates that\n                    // the expression is complete.\n                    formatSegment.length = strOffset - formatSegment.offset;\n                    output.formatStringSegments.push(formatSegment);\n                    strOffset++;\n\n                    // Start a new segment.\n                    formatSegment = {\n                        offset: strOffset,\n                        length: 0,\n                        value: '',\n                        isExpression: false,\n                    };\n                } else {\n                    appendOutputChar(curChar);\n                    strOffset++;\n                }\n            }\n        } else if (formatSegment.isExpression && (curChar === Char.SingleQuote || curChar === Char.DoubleQuote)) {\n            // We're within an expression, and we've encountered a string literal.\n            // Skip over it.\n            const quoteChar = curChar;\n            appendOutputChar(curChar);\n            const isTriplicate = getEscapedCharacter(1) === quoteChar && getEscapedCharacter(2) === quoteChar;\n            if (isTriplicate) {\n                strOffset += 2;\n                appendOutputChar(curChar);\n                appendOutputChar(curChar);\n                output.value += String.fromCharCode(curChar);\n                output.value += String.fromCharCode(curChar);\n            }\n\n            while (true) {\n                strOffset++;\n                let strChar = getEscapedCharacter();\n                if (strChar === Char.EndOfText) {\n                    break;\n                }\n\n                if (strChar === Char.Backslash) {\n                    appendOutputChar(strChar);\n                    strOffset++;\n                    strChar = getEscapedCharacter();\n                    appendOutputChar(strChar);\n                    continue;\n                }\n\n                if (strChar === Char.LineFeed || strChar === Char.CarriageReturn) {\n                    break;\n                }\n\n                if (strChar === quoteChar) {\n                    if (!isTriplicate) {\n                        strOffset++;\n                        appendOutputChar(strChar);\n                        break;\n                    }\n\n                    if (getEscapedCharacter(1) === quoteChar && getEscapedCharacter(2) === quoteChar) {\n                        strOffset += 3;\n                        appendOutputChar(strChar);\n                        appendOutputChar(strChar);\n                        appendOutputChar(strChar);\n                        break;\n                    }\n                }\n\n                appendOutputChar(strChar);\n            }\n        } else {\n            // There's nothing to unescape, so output the escaped character directly.\n            if (isBytes && curChar >= 128) {\n                output.nonAsciiInBytes = true;\n            }\n\n            appendOutputChar(curChar);\n            strOffset++;\n        }\n    }\n}\n\nfunction _isWhitespaceChar(charCode: number): boolean {\n    return charCode === Char.Space || charCode === Char.Tab;\n}\n\nfunction _isAlphaNumericChar(charCode: number): boolean {\n    if (charCode >= Char._0 && charCode <= Char._9) {\n        return true;\n    }\n\n    if (charCode >= Char.a && charCode <= Char.z) {\n        return true;\n    }\n\n    if (charCode >= Char.A && charCode <= Char.Z) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction _isOctalCharCode(charCode: number): boolean {\n    return charCode >= Char._0 && charCode <= Char._7;\n}\n\nfunction _isHexCharCode(charCode: number): boolean {\n    if (charCode >= Char._0 && charCode <= Char._9) {\n        return true;\n    }\n\n    if (charCode >= Char.a && charCode <= Char.f) {\n        return true;\n    }\n\n    if (charCode >= Char.A && charCode <= Char.F) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction _getHexDigitValue(charCode: number): number {\n    if (charCode >= Char._0 && charCode <= Char._9) {\n        return charCode - Char._0;\n    }\n\n    if (charCode >= Char.a && charCode <= Char.f) {\n        return charCode - Char.a + 10;\n    }\n\n    if (charCode >= Char.A && charCode <= Char.F) {\n        return charCode - Char.A + 10;\n    }\n\n    return 0;\n}\n","/*\n * tokenizer.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Based on code from vscode-python repository:\n *  https://github.com/Microsoft/vscode-python\n *\n * Converts a Python program text stream into a stream of tokens.\n */\n\nimport Char from 'typescript-char';\n\nimport { TextRange } from '../common/textRange';\nimport { TextRangeCollection } from '../common/textRangeCollection';\nimport { isBinary, isDecimal, isHex, isIdentifierChar, isIdentifierStartChar, isOctal } from './characters';\nimport { CharacterStream } from './characterStream';\nimport {\n    Comment,\n    DedentToken,\n    IdentifierToken,\n    IndentToken,\n    KeywordToken,\n    KeywordType,\n    NewLineToken,\n    NewLineType,\n    NumberToken,\n    OperatorFlags,\n    OperatorToken,\n    OperatorType,\n    StringToken,\n    StringTokenFlags,\n    Token,\n    TokenType,\n} from './tokenizerTypes';\n\nconst _keywords: { [key: string]: KeywordType } = {\n    and: KeywordType.And,\n    as: KeywordType.As,\n    assert: KeywordType.Assert,\n    async: KeywordType.Async,\n    await: KeywordType.Await,\n    break: KeywordType.Break,\n    class: KeywordType.Class,\n    continue: KeywordType.Continue,\n    __debug__: KeywordType.Debug,\n    def: KeywordType.Def,\n    del: KeywordType.Del,\n    elif: KeywordType.Elif,\n    else: KeywordType.Else,\n    except: KeywordType.Except,\n    finally: KeywordType.Finally,\n    for: KeywordType.For,\n    from: KeywordType.From,\n    global: KeywordType.Global,\n    if: KeywordType.If,\n    import: KeywordType.Import,\n    in: KeywordType.In,\n    is: KeywordType.Is,\n    lambda: KeywordType.Lambda,\n    nonlocal: KeywordType.Nonlocal,\n    not: KeywordType.Not,\n    or: KeywordType.Or,\n    pass: KeywordType.Pass,\n    raise: KeywordType.Raise,\n    return: KeywordType.Return,\n    try: KeywordType.Try,\n    while: KeywordType.While,\n    with: KeywordType.With,\n    yield: KeywordType.Yield,\n    False: KeywordType.False,\n    None: KeywordType.None,\n    True: KeywordType.True,\n};\n\nconst _operatorInfo: { [key: number]: OperatorFlags } = {\n    [OperatorType.Add]: OperatorFlags.Unary | OperatorFlags.Binary,\n    [OperatorType.AddEqual]: OperatorFlags.Assignment,\n    [OperatorType.Assign]: OperatorFlags.Assignment,\n    [OperatorType.BitwiseAnd]: OperatorFlags.Binary,\n    [OperatorType.BitwiseAndEqual]: OperatorFlags.Assignment,\n    [OperatorType.BitwiseInvert]: OperatorFlags.Unary,\n    [OperatorType.BitwiseOr]: OperatorFlags.Binary,\n    [OperatorType.BitwiseOrEqual]: OperatorFlags.Assignment,\n    [OperatorType.BitwiseXor]: OperatorFlags.Binary,\n    [OperatorType.BitwiseXorEqual]: OperatorFlags.Assignment,\n    [OperatorType.Divide]: OperatorFlags.Binary,\n    [OperatorType.DivideEqual]: OperatorFlags.Assignment,\n    [OperatorType.Equals]: OperatorFlags.Binary | OperatorFlags.Comparison,\n    [OperatorType.FloorDivide]: OperatorFlags.Binary,\n    [OperatorType.FloorDivideEqual]: OperatorFlags.Assignment,\n    [OperatorType.GreaterThan]: OperatorFlags.Binary | OperatorFlags.Comparison,\n    [OperatorType.GreaterThanOrEqual]: OperatorFlags.Binary | OperatorFlags.Comparison,\n    [OperatorType.LeftShift]: OperatorFlags.Binary,\n    [OperatorType.LeftShiftEqual]: OperatorFlags.Assignment,\n    [OperatorType.LessOrGreaterThan]: OperatorFlags.Binary | OperatorFlags.Comparison | OperatorFlags.Deprecated,\n    [OperatorType.LessThan]: OperatorFlags.Binary | OperatorFlags.Comparison,\n    [OperatorType.LessThanOrEqual]: OperatorFlags.Binary | OperatorFlags.Comparison,\n    [OperatorType.MatrixMultiply]: OperatorFlags.Binary,\n    [OperatorType.MatrixMultiplyEqual]: OperatorFlags.Assignment,\n    [OperatorType.Mod]: OperatorFlags.Binary,\n    [OperatorType.ModEqual]: OperatorFlags.Assignment,\n    [OperatorType.Multiply]: OperatorFlags.Binary,\n    [OperatorType.MultiplyEqual]: OperatorFlags.Assignment,\n    [OperatorType.NotEquals]: OperatorFlags.Binary | OperatorFlags.Comparison,\n    [OperatorType.Power]: OperatorFlags.Binary,\n    [OperatorType.PowerEqual]: OperatorFlags.Assignment,\n    [OperatorType.RightShift]: OperatorFlags.Binary,\n    [OperatorType.RightShiftEqual]: OperatorFlags.Assignment,\n    [OperatorType.Subtract]: OperatorFlags.Binary,\n    [OperatorType.SubtractEqual]: OperatorFlags.Assignment,\n\n    [OperatorType.And]: OperatorFlags.Binary,\n    [OperatorType.Or]: OperatorFlags.Binary,\n    [OperatorType.Not]: OperatorFlags.Unary,\n    [OperatorType.Is]: OperatorFlags.Binary,\n    [OperatorType.IsNot]: OperatorFlags.Binary,\n    [OperatorType.In]: OperatorFlags.Binary,\n    [OperatorType.NotIn]: OperatorFlags.Binary,\n};\n\nconst _byteOrderMarker = 0xfeff;\n\nexport interface TokenizerOutput {\n    // List of all tokens.\n    tokens: TextRangeCollection<Token>;\n\n    // List of ranges that comprise the lines.\n    lines: TextRangeCollection<TextRange>;\n\n    // Map of all line numbers that end in a \"type: ignore\" comment.\n    typeIgnoreLines: { [line: number]: boolean };\n\n    // Program starts with a \"type: ignore\" comment.\n    typeIgnoreAll: boolean;\n\n    // Line-end sequence ('/n', '/r', or '/r/n').\n    predominantEndOfLineSequence: string;\n\n    // Tab sequence ('/t or consecutive spaces).\n    predominantTabSequence: string;\n\n    // Does the code mostly use single or double quote\n    // characters for string literals?\n    predominantSingleQuoteCharacter: string;\n}\n\ninterface StringScannerOutput {\n    escapedValue: string;\n    flags: StringTokenFlags;\n}\n\ninterface IndentInfo {\n    tab1Spaces: number;\n    tab8Spaces: number;\n    isSpacePresent: boolean;\n    isTabPresent: boolean;\n}\n\nexport class Tokenizer {\n    private _cs = new CharacterStream('');\n    private _tokens: Token[] = [];\n    private _prevLineStart = 0;\n    private _parenDepth = 0;\n    private _lineRanges: TextRange[] = [];\n    private _indentAmounts: IndentInfo[] = [];\n    private _typeIgnoreAll = false;\n    private _typeIgnoreLines: { [line: number]: boolean } = {};\n    private _comments: Comment[] | undefined;\n\n    // Total times CR, CR/LF, and LF are used to terminate\n    // lines. Used to determine the predominant line ending.\n    private _crCount = 0;\n    private _crLfCount = 0;\n    private _lfCount = 0;\n\n    // Number of times an indent token is emitted.\n    private _indentCount = 0;\n\n    // Number of times an indent token is emitted and a tab character\n    // is present (used to determine predominant tab sequence).\n    private _indentTabCount = 0;\n\n    // Number of spaces that are added for an indent token\n    // (used to determine predominant tab sequence).\n    private _indentSpacesTotal = 0;\n\n    // Number of single or double quote string literals found\n    // in the code.\n    private _singleQuoteCount = 0;\n    private _doubleQuoteCount = 0;\n\n    tokenize(text: string, start?: number, length?: number, initialParenDepth = 0): TokenizerOutput {\n        if (start === undefined) {\n            start = 0;\n        } else if (start < 0 || start > text.length) {\n            throw new Error('Invalid range start');\n        }\n\n        if (length === undefined) {\n            length = text.length;\n        } else if (length < 0 || start + length > text.length) {\n            throw new Error('Invalid range length');\n        } else if (start + length < text.length) {\n            text = text.substr(0, start + length);\n        }\n\n        this._cs = new CharacterStream(text);\n        this._cs.position = start;\n        this._tokens = [];\n        this._prevLineStart = 0;\n        this._parenDepth = initialParenDepth;\n        this._lineRanges = [];\n        this._indentAmounts = [];\n\n        const end = start + length;\n        while (!this._cs.isEndOfStream()) {\n            this._addNextToken();\n\n            if (this._cs.position >= end) {\n                break;\n            }\n        }\n\n        // Insert an implied new line to make parsing easier.\n        if (this._tokens.length === 0 || this._tokens[this._tokens.length - 1].type !== TokenType.NewLine) {\n            this._tokens.push(NewLineToken.create(this._cs.position, 0, NewLineType.Implied, this._getComments()));\n        }\n\n        // Insert any implied dedent tokens.\n        this._setIndent(0, 0, true, false);\n\n        // Add a final end-of-stream token to make parsing easier.\n        this._tokens.push(Token.create(TokenType.EndOfStream, this._cs.position, 0, this._getComments()));\n\n        // Add the final line range.\n        this._addLineRange();\n\n        let predominantEndOfLineSequence = '\\n';\n        if (this._crCount > this._crLfCount && this._crCount > this._lfCount) {\n            predominantEndOfLineSequence = '\\r';\n        } else if (this._crLfCount > this._crCount && this._crLfCount > this._lfCount) {\n            predominantEndOfLineSequence = '\\r\\n';\n        }\n\n        let predominantTabSequence = '    ';\n        // If more than half of the indents use tab sequences,\n        // assume we're using tabs rather than spaces.\n        if (this._indentTabCount > this._indentCount / 2) {\n            predominantTabSequence = '\\t';\n        } else if (this._indentCount > 0) {\n            // Compute the average number of spaces per indent\n            // to estimate the predominant tab value.\n            let averageSpacePerIndent = Math.round(this._indentSpacesTotal / this._indentCount);\n            if (averageSpacePerIndent < 1) {\n                averageSpacePerIndent = 1;\n            } else if (averageSpacePerIndent > 8) {\n                averageSpacePerIndent = 8;\n            }\n            predominantTabSequence = '';\n            for (let i = 0; i < averageSpacePerIndent; i++) {\n                predominantTabSequence += ' ';\n            }\n        }\n\n        return {\n            tokens: new TextRangeCollection(this._tokens),\n            lines: new TextRangeCollection(this._lineRanges),\n            typeIgnoreLines: this._typeIgnoreLines,\n            typeIgnoreAll: this._typeIgnoreAll,\n            predominantEndOfLineSequence,\n            predominantTabSequence,\n            predominantSingleQuoteCharacter: this._singleQuoteCount >= this._doubleQuoteCount ? \"'\" : '\"',\n        };\n    }\n\n    static getOperatorInfo(operatorType: OperatorType): OperatorFlags {\n        return _operatorInfo[operatorType];\n    }\n\n    static isOperatorAssignment(operatorType?: OperatorType): boolean {\n        if (operatorType === undefined || _operatorInfo[operatorType] === undefined) {\n            return false;\n        }\n        return (_operatorInfo[operatorType] & OperatorFlags.Assignment) !== 0;\n    }\n\n    static isOperatorComparison(operatorType?: OperatorType): boolean {\n        if (operatorType === undefined || _operatorInfo[operatorType] === undefined) {\n            return false;\n        }\n        return (_operatorInfo[operatorType] & OperatorFlags.Comparison) !== 0;\n    }\n\n    private _addNextToken(): void {\n        this._cs.skipWhitespace();\n\n        if (this._cs.isEndOfStream()) {\n            return;\n        }\n\n        if (!this._handleCharacter()) {\n            this._cs.moveNext();\n        }\n    }\n\n    private _handleCharacter(): boolean {\n        // f-strings, b-strings, etc\n        const stringPrefixLength = this._getStringPrefixLength();\n\n        if (stringPrefixLength >= 0) {\n            let stringPrefix = '';\n            if (stringPrefixLength > 0) {\n                stringPrefix = this._cs.getText().substr(this._cs.position, stringPrefixLength);\n                // Indeed a string\n                this._cs.advance(stringPrefixLength);\n            }\n\n            const quoteTypeFlags = this._getQuoteTypeFlags(stringPrefix);\n            if (quoteTypeFlags !== StringTokenFlags.None) {\n                this._handleString(quoteTypeFlags, stringPrefixLength);\n                return true;\n            }\n        }\n\n        if (this._cs.currentChar === Char.Hash) {\n            this._handleComment();\n            return true;\n        }\n\n        switch (this._cs.currentChar) {\n            case _byteOrderMarker: {\n                // Skip the BOM if it's at the start of the file.\n                if (this._cs.position === 0) {\n                    return false;\n                }\n                return this._handleInvalid();\n            }\n\n            case Char.CarriageReturn: {\n                const length = this._cs.nextChar === Char.LineFeed ? 2 : 1;\n                const newLineType = length === 2 ? NewLineType.CarriageReturnLineFeed : NewLineType.CarriageReturn;\n                this._handleNewLine(length, newLineType);\n                return true;\n            }\n\n            case Char.LineFeed: {\n                this._handleNewLine(1, NewLineType.LineFeed);\n                return true;\n            }\n\n            case Char.Backslash: {\n                if (this._cs.nextChar === Char.CarriageReturn) {\n                    if (this._cs.lookAhead(2) === Char.LineFeed) {\n                        this._cs.advance(3);\n                    } else {\n                        this._cs.advance(2);\n                    }\n                    this._addLineRange();\n                    return true;\n                } else if (this._cs.nextChar === Char.LineFeed) {\n                    this._cs.advance(2);\n                    this._addLineRange();\n                    return true;\n                }\n                return this._handleInvalid();\n            }\n\n            case Char.OpenParenthesis: {\n                this._parenDepth++;\n                this._tokens.push(Token.create(TokenType.OpenParenthesis, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.CloseParenthesis: {\n                if (this._parenDepth > 0) {\n                    this._parenDepth--;\n                }\n                this._tokens.push(Token.create(TokenType.CloseParenthesis, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.OpenBracket: {\n                this._parenDepth++;\n                this._tokens.push(Token.create(TokenType.OpenBracket, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.CloseBracket: {\n                if (this._parenDepth > 0) {\n                    this._parenDepth--;\n                }\n                this._tokens.push(Token.create(TokenType.CloseBracket, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.OpenBrace: {\n                this._parenDepth++;\n                this._tokens.push(Token.create(TokenType.OpenCurlyBrace, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.CloseBrace: {\n                if (this._parenDepth > 0) {\n                    this._parenDepth--;\n                }\n                this._tokens.push(Token.create(TokenType.CloseCurlyBrace, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.Comma: {\n                this._tokens.push(Token.create(TokenType.Comma, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.Backtick: {\n                this._tokens.push(Token.create(TokenType.Backtick, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.Semicolon: {\n                this._tokens.push(Token.create(TokenType.Semicolon, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            case Char.Colon: {\n                if (this._cs.nextChar === Char.Equal) {\n                    this._tokens.push(\n                        OperatorToken.create(this._cs.position, 2, OperatorType.Walrus, this._getComments())\n                    );\n                    this._cs.advance(1);\n                    break;\n                }\n                this._tokens.push(Token.create(TokenType.Colon, this._cs.position, 1, this._getComments()));\n                break;\n            }\n\n            default: {\n                if (this._isPossibleNumber()) {\n                    if (this._tryNumber()) {\n                        return true;\n                    }\n                }\n\n                if (this._cs.currentChar === Char.Period) {\n                    if (this._cs.nextChar === Char.Period && this._cs.lookAhead(2) === Char.Period) {\n                        this._tokens.push(Token.create(TokenType.Ellipsis, this._cs.position, 3, this._getComments()));\n                        this._cs.advance(3);\n                        return true;\n                    }\n                    this._tokens.push(Token.create(TokenType.Dot, this._cs.position, 1, this._getComments()));\n                    break;\n                }\n\n                if (!this._tryIdentifier()) {\n                    if (!this._tryOperator()) {\n                        return this._handleInvalid();\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private _addLineRange() {\n        const lineLength = this._cs.position - this._prevLineStart;\n        if (lineLength > 0) {\n            this._lineRanges.push({ start: this._prevLineStart, length: lineLength });\n        }\n\n        this._prevLineStart = this._cs.position;\n    }\n\n    private _handleNewLine(length: number, newLineType: NewLineType) {\n        if (this._parenDepth === 0 && newLineType !== NewLineType.Implied) {\n            // New lines are ignored within parentheses.\n            // We'll also avoid adding multiple newlines in a row to simplify parsing.\n            if (this._tokens.length === 0 || this._tokens[this._tokens.length - 1].type !== TokenType.NewLine) {\n                this._tokens.push(NewLineToken.create(this._cs.position, length, newLineType, this._getComments()));\n            }\n        }\n        if (newLineType === NewLineType.CarriageReturn) {\n            this._crCount++;\n        } else if (newLineType === NewLineType.CarriageReturnLineFeed) {\n            this._crLfCount++;\n        } else {\n            this._lfCount++;\n        }\n        this._cs.advance(length);\n        this._addLineRange();\n        this._readIndentationAfterNewLine();\n    }\n\n    private _readIndentationAfterNewLine() {\n        let tab1Spaces = 0;\n        let tab8Spaces = 0;\n        let isTabPresent = false;\n        let isSpacePresent = false;\n\n        while (!this._cs.isEndOfStream()) {\n            switch (this._cs.currentChar) {\n                case Char.Space:\n                    tab1Spaces++;\n                    tab8Spaces++;\n                    isSpacePresent = true;\n                    this._cs.moveNext();\n                    break;\n\n                case Char.Tab:\n                    // Translate tabs into spaces assuming both 1-space\n                    // and 8-space tab stops.\n                    tab1Spaces++;\n                    tab8Spaces += 8 - (tab8Spaces % 8);\n                    isTabPresent = true;\n                    this._cs.moveNext();\n                    break;\n\n                case Char.FormFeed:\n                    tab1Spaces = 0;\n                    tab8Spaces = 0;\n                    isTabPresent = false;\n                    isSpacePresent = false;\n                    this._cs.moveNext();\n                    break;\n\n                default:\n                    // Non-blank line. Set the current indent level.\n                    this._setIndent(tab1Spaces, tab8Spaces, isSpacePresent, isTabPresent);\n                    return;\n\n                case Char.Hash:\n                case Char.LineFeed:\n                case Char.CarriageReturn:\n                    // Blank line -- no need to adjust indentation.\n                    return;\n            }\n        }\n    }\n\n    // The caller must specify two space count values. The first assumes\n    // that tabs are translated into one-space tab stops. The second assumes\n    // that tabs are translated into eight-space tab stops.\n    private _setIndent(tab1Spaces: number, tab8Spaces: number, isSpacePresent: boolean, isTabPresent: boolean) {\n        // Indentations are ignored within a parenthesized clause.\n        if (this._parenDepth > 0) {\n            return;\n        }\n\n        // Insert indent or dedent tokens as necessary.\n        if (this._indentAmounts.length === 0) {\n            if (tab8Spaces > 0) {\n                this._indentCount++;\n                if (isTabPresent) {\n                    this._indentTabCount++;\n                }\n                this._indentSpacesTotal += tab8Spaces;\n\n                this._indentAmounts.push({\n                    tab1Spaces,\n                    tab8Spaces,\n                    isSpacePresent,\n                    isTabPresent,\n                });\n                this._tokens.push(IndentToken.create(this._cs.position, 0, tab8Spaces, false, this._getComments()));\n            }\n        } else {\n            const prevTabInfo = this._indentAmounts[this._indentAmounts.length - 1];\n            if (prevTabInfo.tab8Spaces < tab8Spaces) {\n                // The Python spec says that if there is ambiguity about how tabs should\n                // be translated into spaces because the user has intermixed tabs and\n                // spaces, it should be an error. We'll record this condition in the token\n                // so the parser can later report it.\n                const isIndentAmbiguous =\n                    ((prevTabInfo.isSpacePresent && isTabPresent) || (prevTabInfo.isTabPresent && isSpacePresent)) &&\n                    prevTabInfo.tab1Spaces >= tab1Spaces;\n\n                this._indentCount++;\n                if (isTabPresent) {\n                    this._indentTabCount++;\n                }\n                this._indentSpacesTotal += tab8Spaces - this._indentAmounts[this._indentAmounts.length - 1].tab8Spaces;\n\n                this._indentAmounts.push({\n                    tab1Spaces,\n                    tab8Spaces,\n                    isSpacePresent,\n                    isTabPresent,\n                });\n\n                this._tokens.push(\n                    IndentToken.create(this._cs.position, 0, tab8Spaces, isIndentAmbiguous, this._getComments())\n                );\n            } else {\n                // The Python spec says that dedent amounts need to match the indent\n                // amount exactly. An error is generated at runtime if it doesn't.\n                // We'll record that error condition within the token, allowing the\n                // parser to report it later.\n                const dedentPoints: number[] = [];\n                while (\n                    this._indentAmounts.length > 0 &&\n                    this._indentAmounts[this._indentAmounts.length - 1].tab8Spaces > tab8Spaces\n                ) {\n                    dedentPoints.push(\n                        this._indentAmounts.length > 1\n                            ? this._indentAmounts[this._indentAmounts.length - 2].tab8Spaces\n                            : 0\n                    );\n                    this._indentAmounts.pop();\n                }\n\n                dedentPoints.forEach((dedentAmount, index) => {\n                    const matchesIndent = index < dedentPoints.length - 1 || dedentAmount === tab8Spaces;\n                    const actualDedentAmount = index < dedentPoints.length - 1 ? dedentAmount : tab8Spaces;\n                    this._tokens.push(\n                        DedentToken.create(this._cs.position, 0, actualDedentAmount, matchesIndent, this._getComments())\n                    );\n                });\n            }\n        }\n    }\n\n    private _tryIdentifier(): boolean {\n        const start = this._cs.position;\n        if (isIdentifierStartChar(this._cs.currentChar)) {\n            this._cs.moveNext();\n            while (isIdentifierChar(this._cs.currentChar)) {\n                this._cs.moveNext();\n            }\n        }\n        if (this._cs.position > start) {\n            const value = this._cs.getText().substr(start, this._cs.position - start);\n            if (_keywords[value] !== undefined) {\n                this._tokens.push(\n                    KeywordToken.create(start, this._cs.position - start, _keywords[value], this._getComments())\n                );\n            } else {\n                this._tokens.push(IdentifierToken.create(start, this._cs.position - start, value, this._getComments()));\n            }\n            return true;\n        }\n        return false;\n    }\n\n    private _isPossibleNumber(): boolean {\n        if (isDecimal(this._cs.currentChar)) {\n            return true;\n        }\n\n        if (this._cs.currentChar === Char.Period && isDecimal(this._cs.nextChar)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    private _tryNumber(): boolean {\n        const start = this._cs.position;\n\n        if (this._cs.currentChar === Char._0) {\n            let radix = 0;\n            let leadingChars = 0;\n\n            // Try hex => hexinteger: \"0\" (\"x\" | \"X\") ([\"_\"] hexdigit)+\n            if ((this._cs.nextChar === Char.x || this._cs.nextChar === Char.X) && isHex(this._cs.lookAhead(2))) {\n                this._cs.advance(2);\n                leadingChars = 2;\n                while (isHex(this._cs.currentChar)) {\n                    this._cs.moveNext();\n                }\n                radix = 16;\n            }\n\n            // Try binary => bininteger: \"0\" (\"b\" | \"B\") ([\"_\"] bindigit)+\n            if ((this._cs.nextChar === Char.b || this._cs.nextChar === Char.B) && isBinary(this._cs.lookAhead(2))) {\n                this._cs.advance(2);\n                leadingChars = 2;\n                while (isBinary(this._cs.currentChar)) {\n                    this._cs.moveNext();\n                }\n                radix = 2;\n            }\n\n            // Try octal => octinteger: \"0\" (\"o\" | \"O\") ([\"_\"] octdigit)+\n            if ((this._cs.nextChar === Char.o || this._cs.nextChar === Char.O) && isOctal(this._cs.lookAhead(2))) {\n                this._cs.advance(2);\n                leadingChars = 2;\n                while (isOctal(this._cs.currentChar)) {\n                    this._cs.moveNext();\n                }\n                radix = 8;\n            }\n\n            if (radix > 0) {\n                const text = this._cs.getText().substr(start, this._cs.position - start);\n                const value = parseInt(text.substr(leadingChars).replace(/_/g, ''), radix);\n                if (!isNaN(value)) {\n                    this._tokens.push(NumberToken.create(start, text.length, value, true, false, this._getComments()));\n                    return true;\n                }\n            }\n        }\n\n        let isDecimalInteger = false;\n        let mightBeFloatingPoint = false;\n        // Try decimal int =>\n        //    decinteger: nonzerodigit ([\"_\"] digit)* | \"0\" ([\"_\"] \"0\")*\n        //    nonzerodigit: \"1\"...\"9\"\n        //    digit: \"0\"...\"9\"\n        if (this._cs.currentChar >= Char._1 && this._cs.currentChar <= Char._9) {\n            while (isDecimal(this._cs.currentChar)) {\n                mightBeFloatingPoint = true;\n                this._cs.moveNext();\n            }\n            isDecimalInteger =\n                this._cs.currentChar !== Char.Period &&\n                this._cs.currentChar !== Char.e &&\n                this._cs.currentChar !== Char.E;\n        }\n\n        // \"0\" ([\"_\"] \"0\")*\n        if (this._cs.currentChar === Char._0) {\n            mightBeFloatingPoint = true;\n            while (this._cs.currentChar === Char._0 || this._cs.currentChar === Char.Underscore) {\n                this._cs.moveNext();\n            }\n            isDecimalInteger =\n                this._cs.currentChar !== Char.Period &&\n                this._cs.currentChar !== Char.e &&\n                this._cs.currentChar !== Char.E;\n        }\n\n        if (isDecimalInteger) {\n            let text = this._cs.getText().substr(start, this._cs.position - start);\n            const value = parseInt(text.replace(/_/g, ''), 10);\n            if (!isNaN(value)) {\n                let isImaginary = false;\n                if (this._cs.currentChar === Char.j || this._cs.currentChar === Char.J) {\n                    isImaginary = true;\n                    text += String.fromCharCode(this._cs.currentChar);\n                    this._cs.moveNext();\n                }\n                this._tokens.push(\n                    NumberToken.create(start, text.length, value, true, isImaginary, this._getComments())\n                );\n                return true;\n            }\n        }\n\n        // Floating point. Sign and leading digits were already skipped over.\n        this._cs.position = start;\n        if (\n            mightBeFloatingPoint ||\n            (this._cs.currentChar === Char.Period && this._cs.nextChar >= Char._0 && this._cs.nextChar <= Char._9)\n        ) {\n            if (this._skipFloatingPointCandidate()) {\n                let text = this._cs.getText().substr(start, this._cs.position - start);\n                const value = parseFloat(text);\n                if (!isNaN(value)) {\n                    let isImaginary = false;\n                    if (this._cs.currentChar === Char.j || this._cs.currentChar === Char.J) {\n                        isImaginary = true;\n                        text += String.fromCharCode(this._cs.currentChar);\n                        this._cs.moveNext();\n                    }\n                    this._tokens.push(\n                        NumberToken.create(\n                            start,\n                            this._cs.position - start,\n                            value,\n                            false,\n                            isImaginary,\n                            this._getComments()\n                        )\n                    );\n                    return true;\n                }\n            }\n        }\n\n        this._cs.position = start;\n        return false;\n    }\n\n    private _tryOperator(): boolean {\n        let length = 0;\n        const nextChar = this._cs.nextChar;\n        let operatorType: OperatorType;\n\n        switch (this._cs.currentChar) {\n            case Char.Plus:\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.AddEqual : OperatorType.Add;\n                break;\n\n            case Char.Ampersand:\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.BitwiseAndEqual : OperatorType.BitwiseAnd;\n                break;\n\n            case Char.Bar:\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.BitwiseOrEqual : OperatorType.BitwiseOr;\n                break;\n\n            case Char.Caret:\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.BitwiseXorEqual : OperatorType.BitwiseXor;\n                break;\n\n            case Char.Equal:\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.Equals : OperatorType.Assign;\n                break;\n\n            case Char.ExclamationMark:\n                if (nextChar !== Char.Equal) {\n                    return false;\n                }\n                length = 2;\n                operatorType = OperatorType.NotEquals;\n                break;\n\n            case Char.Percent:\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.ModEqual : OperatorType.Mod;\n                break;\n\n            case Char.Tilde:\n                length = 1;\n                operatorType = OperatorType.BitwiseInvert;\n                break;\n\n            case Char.Hyphen:\n                if (nextChar === Char.Greater) {\n                    this._tokens.push(Token.create(TokenType.Arrow, this._cs.position, 2, this._getComments()));\n                    this._cs.advance(2);\n                    return true;\n                }\n\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.SubtractEqual : OperatorType.Subtract;\n                break;\n\n            case Char.Asterisk:\n                if (nextChar === Char.Asterisk) {\n                    length = this._cs.lookAhead(2) === Char.Equal ? 3 : 2;\n                    operatorType = length === 3 ? OperatorType.PowerEqual : OperatorType.Power;\n                } else {\n                    length = nextChar === Char.Equal ? 2 : 1;\n                    operatorType = length === 2 ? OperatorType.MultiplyEqual : OperatorType.Multiply;\n                }\n                break;\n\n            case Char.Slash:\n                if (nextChar === Char.Slash) {\n                    length = this._cs.lookAhead(2) === Char.Equal ? 3 : 2;\n                    operatorType = length === 3 ? OperatorType.FloorDivideEqual : OperatorType.FloorDivide;\n                } else {\n                    length = nextChar === Char.Equal ? 2 : 1;\n                    operatorType = length === 2 ? OperatorType.DivideEqual : OperatorType.Divide;\n                }\n                break;\n\n            case Char.Less:\n                if (nextChar === Char.Less) {\n                    length = this._cs.lookAhead(2) === Char.Equal ? 3 : 2;\n                    operatorType = length === 3 ? OperatorType.LeftShiftEqual : OperatorType.LeftShift;\n                } else if (nextChar === Char.Greater) {\n                    length = 2;\n                    operatorType = OperatorType.LessOrGreaterThan;\n                } else {\n                    length = nextChar === Char.Equal ? 2 : 1;\n                    operatorType = length === 2 ? OperatorType.LessThanOrEqual : OperatorType.LessThan;\n                }\n                break;\n\n            case Char.Greater:\n                if (nextChar === Char.Greater) {\n                    length = this._cs.lookAhead(2) === Char.Equal ? 3 : 2;\n                    operatorType = length === 3 ? OperatorType.RightShiftEqual : OperatorType.RightShift;\n                } else {\n                    length = nextChar === Char.Equal ? 2 : 1;\n                    operatorType = length === 2 ? OperatorType.GreaterThanOrEqual : OperatorType.GreaterThan;\n                }\n                break;\n\n            case Char.At:\n                length = nextChar === Char.Equal ? 2 : 1;\n                operatorType = length === 2 ? OperatorType.MatrixMultiplyEqual : OperatorType.MatrixMultiply;\n                break;\n\n            default:\n                return false;\n        }\n        this._tokens.push(OperatorToken.create(this._cs.position, length, operatorType, this._getComments()));\n        this._cs.advance(length);\n        return length > 0;\n    }\n\n    private _handleInvalid(): boolean {\n        const start = this._cs.position;\n        while (true) {\n            if (\n                this._cs.currentChar === Char.LineFeed ||\n                this._cs.currentChar === Char.CarriageReturn ||\n                this._cs.isAtWhiteSpace() ||\n                this._cs.isEndOfStream()\n            ) {\n                break;\n            }\n            this._cs.moveNext();\n        }\n        const length = this._cs.position - start;\n        if (length > 0) {\n            this._tokens.push(Token.create(TokenType.Invalid, start, length, this._getComments()));\n            return true;\n        }\n        return false;\n    }\n\n    private _getComments(): Comment[] | undefined {\n        const prevComments = this._comments;\n        this._comments = undefined;\n        return prevComments;\n    }\n\n    private _handleComment(): void {\n        const start = this._cs.position + 1;\n        this._cs.skipToEol();\n\n        const length = this._cs.position - start;\n        const value = this._cs.getText().substr(start, length);\n        const comment = Comment.create(start, length, value);\n\n        // We include \"[\" in the regular expression because mypy supports\n        // ignore comments of the form ignore[errorCode, ...]. We'll treat\n        // these as regular ignore statements (as though no errorCodes were\n        // included).\n        if (value.match(/^\\s*type:\\s*ignore(\\s|\\[|$)/)) {\n            if (this._tokens.findIndex((t) => t.type !== TokenType.NewLine && t && t.type !== TokenType.Indent) < 0) {\n                this._typeIgnoreAll = true;\n            } else {\n                this._typeIgnoreLines[this._lineRanges.length] = true;\n            }\n        }\n\n        if (this._comments) {\n            this._comments.push(comment);\n        } else {\n            this._comments = [comment];\n        }\n    }\n\n    private _getStringPrefixLength(): number {\n        if (this._cs.currentChar === Char.SingleQuote || this._cs.currentChar === Char.DoubleQuote) {\n            // Simple string, no prefix\n            return 0;\n        }\n\n        if (this._cs.nextChar === Char.SingleQuote || this._cs.nextChar === Char.DoubleQuote) {\n            switch (this._cs.currentChar) {\n                case Char.f:\n                case Char.F:\n                case Char.r:\n                case Char.R:\n                case Char.b:\n                case Char.B:\n                case Char.u:\n                case Char.U:\n                    // Single-char prefix like u\"\" or r\"\"\n                    return 1;\n                default:\n                    break;\n            }\n        }\n\n        if (this._cs.lookAhead(2) === Char.SingleQuote || this._cs.lookAhead(2) === Char.DoubleQuote) {\n            const prefix = this._cs.getText().substr(this._cs.position, 2).toLowerCase();\n            switch (prefix) {\n                case 'rf':\n                case 'fr':\n                case 'ur':\n                case 'ru':\n                case 'br':\n                case 'rb':\n                    return 2;\n                default:\n                    break;\n            }\n        }\n        return -1;\n    }\n\n    private _getQuoteTypeFlags(prefix: string): StringTokenFlags {\n        let flags = StringTokenFlags.None;\n\n        prefix = prefix.toLowerCase();\n        for (let i = 0; i < prefix.length; i++) {\n            switch (prefix[i]) {\n                case 'u':\n                    flags |= StringTokenFlags.Unicode;\n                    break;\n\n                case 'b':\n                    flags |= StringTokenFlags.Bytes;\n                    break;\n\n                case 'r':\n                    flags |= StringTokenFlags.Raw;\n                    break;\n\n                case 'f':\n                    flags |= StringTokenFlags.Format;\n                    break;\n            }\n        }\n\n        if (this._cs.currentChar === Char.SingleQuote) {\n            flags |= StringTokenFlags.SingleQuote;\n            if (this._cs.nextChar === Char.SingleQuote && this._cs.lookAhead(2) === Char.SingleQuote) {\n                flags |= StringTokenFlags.Triplicate;\n            }\n        } else if (this._cs.currentChar === Char.DoubleQuote) {\n            flags |= StringTokenFlags.DoubleQuote;\n            if (this._cs.nextChar === Char.DoubleQuote && this._cs.lookAhead(2) === Char.DoubleQuote) {\n                flags |= StringTokenFlags.Triplicate;\n            }\n        }\n\n        return flags;\n    }\n\n    private _handleString(flags: StringTokenFlags, stringPrefixLength: number): void {\n        const start = this._cs.position - stringPrefixLength;\n\n        if (flags & StringTokenFlags.Triplicate) {\n            this._cs.advance(3);\n        } else {\n            this._cs.moveNext();\n\n            if (flags & StringTokenFlags.SingleQuote) {\n                this._singleQuoteCount++;\n            } else {\n                this._doubleQuoteCount++;\n            }\n        }\n\n        const stringLiteralInfo = this._skipToEndOfStringLiteral(flags);\n\n        const end = this._cs.position;\n\n        this._tokens.push(\n            StringToken.create(\n                start,\n                end - start,\n                stringLiteralInfo.flags,\n                stringLiteralInfo.escapedValue,\n                stringPrefixLength,\n                this._getComments()\n            )\n        );\n    }\n\n    private _skipToEndOfStringLiteral(flags: StringTokenFlags): StringScannerOutput {\n        const quoteChar = flags & StringTokenFlags.SingleQuote ? Char.SingleQuote : Char.DoubleQuote;\n        const isTriplicate = (flags & StringTokenFlags.Triplicate) !== 0;\n        let escapedValue = '';\n\n        while (true) {\n            if (this._cs.isEndOfStream()) {\n                // Hit the end of file without a termination.\n                flags |= StringTokenFlags.Unterminated;\n                return { escapedValue, flags };\n            }\n\n            if (this._cs.currentChar === Char.Backslash) {\n                escapedValue += String.fromCharCode(this._cs.currentChar);\n\n                // Move past the escape (backslash) character.\n                this._cs.moveNext();\n\n                if (this._cs.getCurrentChar() === Char.CarriageReturn || this._cs.getCurrentChar() === Char.LineFeed) {\n                    if (this._cs.getCurrentChar() === Char.CarriageReturn && this._cs.nextChar === Char.LineFeed) {\n                        escapedValue += String.fromCharCode(this._cs.getCurrentChar());\n                        this._cs.moveNext();\n                    }\n                    escapedValue += String.fromCharCode(this._cs.getCurrentChar());\n                    this._cs.moveNext();\n                    this._addLineRange();\n                } else {\n                    escapedValue += String.fromCharCode(this._cs.getCurrentChar());\n                    this._cs.moveNext();\n                }\n            } else if (this._cs.currentChar === Char.LineFeed || this._cs.currentChar === Char.CarriageReturn) {\n                if (!isTriplicate) {\n                    // Unterminated single-line string\n                    flags |= StringTokenFlags.Unterminated;\n                    return { escapedValue, flags };\n                }\n\n                // Skip over the new line (either one or two characters).\n                if (this._cs.currentChar === Char.CarriageReturn && this._cs.nextChar === Char.LineFeed) {\n                    escapedValue += String.fromCharCode(this._cs.currentChar);\n                    this._cs.moveNext();\n                }\n\n                escapedValue += String.fromCharCode(this._cs.currentChar);\n                this._cs.moveNext();\n                this._addLineRange();\n            } else if (!isTriplicate && this._cs.currentChar === quoteChar) {\n                this._cs.moveNext();\n                break;\n            } else if (\n                isTriplicate &&\n                this._cs.currentChar === quoteChar &&\n                this._cs.nextChar === quoteChar &&\n                this._cs.lookAhead(2) === quoteChar\n            ) {\n                this._cs.advance(3);\n                break;\n            } else {\n                escapedValue += String.fromCharCode(this._cs.currentChar);\n                this._cs.moveNext();\n            }\n        }\n\n        return { escapedValue, flags };\n    }\n\n    private _skipFloatingPointCandidate(): boolean {\n        // Determine end of the potential floating point number\n        const start = this._cs.position;\n        this._skipFractionalNumber();\n        if (this._cs.position > start) {\n            // Optional exponent sign\n            if (this._cs.currentChar === Char.e || this._cs.currentChar === Char.E) {\n                this._cs.moveNext();\n\n                // Skip exponent value\n                this._skipDecimalNumber(true);\n            }\n        }\n        return this._cs.position > start;\n    }\n\n    private _skipFractionalNumber(): void {\n        this._skipDecimalNumber(false);\n        if (this._cs.currentChar === Char.Period) {\n            // Optional period\n            this._cs.moveNext();\n        }\n        this._skipDecimalNumber(false);\n    }\n\n    private _skipDecimalNumber(allowSign: boolean): void {\n        if (allowSign && (this._cs.currentChar === Char.Hyphen || this._cs.currentChar === Char.Plus)) {\n            // Optional sign\n            this._cs.moveNext();\n        }\n        while (isDecimal(this._cs.currentChar)) {\n            // Skip integer part\n            this._cs.moveNext();\n        }\n    }\n}\n","/*\n * tokenizerTypes.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Based on code from vscode-python repository:\n *  https://github.com/Microsoft/vscode-python\n *\n * Interface, enumeration and class definitions used within\n * the Python tokenizer.\n */\n\nimport { TextRange } from '../common/textRange';\n\nexport const enum TokenType {\n    Invalid,\n    EndOfStream,\n    NewLine,\n    Indent,\n    Dedent,\n    String,\n    Number,\n    Identifier,\n    Keyword,\n    Operator,\n    Colon,\n    Semicolon,\n    Comma,\n    OpenParenthesis,\n    CloseParenthesis,\n    OpenBracket,\n    CloseBracket,\n    OpenCurlyBrace,\n    CloseCurlyBrace,\n    Ellipsis,\n    Dot,\n    Arrow,\n    Backtick,\n}\n\nexport const enum NewLineType {\n    CarriageReturn,\n    LineFeed,\n    CarriageReturnLineFeed,\n    Implied,\n}\n\nexport const enum OperatorType {\n    // These operators are used with tokens\n    // of type TokenType.Operator.\n    Add,\n    AddEqual,\n    Assign,\n    BitwiseAnd,\n    BitwiseAndEqual,\n    BitwiseInvert,\n    BitwiseOr,\n    BitwiseOrEqual,\n    BitwiseXor,\n    BitwiseXorEqual,\n    Divide,\n    DivideEqual,\n    Equals,\n    FloorDivide,\n    FloorDivideEqual,\n    GreaterThan,\n    GreaterThanOrEqual,\n    LeftShift,\n    LeftShiftEqual,\n    LessOrGreaterThan,\n    LessThan,\n    LessThanOrEqual,\n    MatrixMultiply,\n    MatrixMultiplyEqual,\n    Mod,\n    ModEqual,\n    Multiply,\n    MultiplyEqual,\n    NotEquals,\n    Power,\n    PowerEqual,\n    RightShift,\n    RightShiftEqual,\n    Subtract,\n    SubtractEqual,\n    Walrus,\n\n    // These operators are used with tokens\n    // of type TokenType.Keyword.\n    And,\n    Or,\n    Not,\n    Is,\n    IsNot,\n    In,\n    NotIn,\n}\n\nexport const enum OperatorFlags {\n    Unary = 1 << 0,\n    Binary = 1 << 1,\n    Assignment = 1 << 2,\n    Comparison = 1 << 3,\n    Deprecated = 1 << 4,\n}\n\nexport const enum KeywordType {\n    And,\n    As,\n    Assert,\n    Async,\n    Await,\n    Break,\n    Class,\n    Continue,\n    Debug,\n    Def,\n    Del,\n    Elif,\n    Else,\n    Except,\n    False,\n    Finally,\n    For,\n    From,\n    Global,\n    If,\n    Import,\n    In,\n    Is,\n    Lambda,\n    None,\n    Nonlocal,\n    Not,\n    Or,\n    Pass,\n    Raise,\n    Return,\n    True,\n    Try,\n    While,\n    With,\n    Yield,\n}\n\nexport const enum StringTokenFlags {\n    None = 0,\n\n    // Quote types\n    SingleQuote = 1 << 0,\n    DoubleQuote = 1 << 1,\n    Triplicate = 1 << 2,\n\n    // String content format\n    Raw = 1 << 3,\n    Unicode = 1 << 4,\n    Bytes = 1 << 5,\n    Format = 1 << 6,\n\n    // Error conditions\n    Unterminated = 1 << 16,\n}\n\nexport interface Comment extends TextRange {\n    readonly value: string;\n    readonly start: number;\n    readonly length: number;\n}\n\nexport namespace Comment {\n    export function create(start: number, length: number, value: string) {\n        const comment: Comment = {\n            start,\n            length,\n            value,\n        };\n\n        return comment;\n    }\n}\n\nexport interface TokenBase extends TextRange {\n    readonly type: TokenType;\n\n    // Comments prior to the token.\n    readonly comments?: Comment[];\n}\n\nexport interface Token extends TokenBase {}\n\nexport namespace Token {\n    export function create(type: TokenType, start: number, length: number, comments: Comment[] | undefined) {\n        const token: Token = {\n            start,\n            length,\n            type,\n            comments,\n        };\n\n        return token;\n    }\n}\n\nexport interface IndentToken extends Token {\n    readonly type: TokenType.Indent;\n    readonly indentAmount: number;\n    readonly isIndentAmbiguous: boolean;\n}\n\nexport namespace IndentToken {\n    export function create(\n        start: number,\n        length: number,\n        indentAmount: number,\n        isIndentAmbiguous: boolean,\n        comments: Comment[] | undefined\n    ) {\n        const token: IndentToken = {\n            start,\n            length,\n            type: TokenType.Indent,\n            isIndentAmbiguous,\n            comments,\n            indentAmount,\n        };\n\n        return token;\n    }\n}\n\nexport interface DedentToken extends Token {\n    readonly type: TokenType.Dedent;\n    readonly indentAmount: number;\n    readonly matchesIndent: boolean;\n}\n\nexport namespace DedentToken {\n    export function create(\n        start: number,\n        length: number,\n        indentAmount: number,\n        matchesIndent: boolean,\n        comments: Comment[] | undefined\n    ) {\n        const token: DedentToken = {\n            start,\n            length,\n            type: TokenType.Dedent,\n            comments,\n            indentAmount,\n            matchesIndent,\n        };\n\n        return token;\n    }\n}\n\nexport interface NewLineToken extends Token {\n    readonly type: TokenType.NewLine;\n    readonly newLineType: NewLineType;\n}\n\nexport namespace NewLineToken {\n    export function create(start: number, length: number, newLineType: NewLineType, comments: Comment[] | undefined) {\n        const token: NewLineToken = {\n            start,\n            length,\n            type: TokenType.NewLine,\n            comments,\n            newLineType,\n        };\n\n        return token;\n    }\n}\n\nexport interface KeywordToken extends Token {\n    readonly type: TokenType.Keyword;\n    readonly keywordType: KeywordType;\n}\n\nexport namespace KeywordToken {\n    export function create(start: number, length: number, keywordType: KeywordType, comments: Comment[] | undefined) {\n        const token: KeywordToken = {\n            start,\n            length,\n            type: TokenType.Keyword,\n            comments,\n            keywordType,\n        };\n\n        return token;\n    }\n}\n\nexport interface StringToken extends Token {\n    readonly type: TokenType.String;\n    readonly flags: StringTokenFlags;\n\n    // Use StringTokenUtils to convert escaped value to unescaped value.\n    readonly escapedValue: string;\n\n    // Number of characters in token that appear before\n    // the quote marks (e.g. \"r\" or \"UR\").\n    readonly prefixLength: number;\n\n    // Number of characters in token that make up the quote\n    // (either 1 or 3).\n    readonly quoteMarkLength: number;\n}\n\nexport namespace StringToken {\n    export function create(\n        start: number,\n        length: number,\n        flags: StringTokenFlags,\n        escapedValue: string,\n        prefixLength: number,\n        comments: Comment[] | undefined\n    ) {\n        const token: StringToken = {\n            start,\n            length,\n            type: TokenType.String,\n            flags,\n            escapedValue,\n            prefixLength,\n            quoteMarkLength: flags & StringTokenFlags.Triplicate ? 3 : 1,\n            comments,\n        };\n\n        return token;\n    }\n}\n\nexport interface NumberToken extends Token {\n    readonly type: TokenType.Number;\n    readonly value: number;\n    readonly isInteger: boolean;\n    readonly isImaginary: boolean;\n}\n\nexport namespace NumberToken {\n    export function create(\n        start: number,\n        length: number,\n        value: number,\n        isInteger: boolean,\n        isImaginary: boolean,\n        comments: Comment[] | undefined\n    ) {\n        const token: NumberToken = {\n            start,\n            length,\n            type: TokenType.Number,\n            isInteger,\n            isImaginary,\n            value,\n            comments,\n        };\n\n        return token;\n    }\n}\n\nexport interface OperatorToken extends Token {\n    readonly type: TokenType.Operator;\n    readonly operatorType: OperatorType;\n}\n\nexport namespace OperatorToken {\n    export function create(start: number, length: number, operatorType: OperatorType, comments: Comment[] | undefined) {\n        const token: OperatorToken = {\n            start,\n            length,\n            type: TokenType.Operator,\n            operatorType,\n            comments,\n        };\n\n        return token;\n    }\n}\n\nexport interface IdentifierToken extends Token {\n    readonly type: TokenType.Identifier;\n    readonly value: string;\n}\n\nexport namespace IdentifierToken {\n    export function create(start: number, length: number, value: string, comments: Comment[] | undefined) {\n        const token: IdentifierToken = {\n            start,\n            length,\n            type: TokenType.Identifier,\n            value,\n            comments,\n        };\n\n        return token;\n    }\n}\n","/*\n * unicode.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Tables that encode Unicode character codes for various Unicode-\n * defined categories used in the Python spec. These tables were built\n * from the npm package unicode, which contains the same information\n * in a much more verbose form.\n */\n\nexport type UnicodeRangeTable = ([number, number] | number)[];\n\nexport const unicodeLu: UnicodeRangeTable = [\n    [65, 90],\n    [192, 214],\n    [216, 222],\n    256,\n    258,\n    260,\n    262,\n    264,\n    266,\n    268,\n    270,\n    272,\n    274,\n    276,\n    278,\n    280,\n    282,\n    284,\n    286,\n    288,\n    290,\n    292,\n    294,\n    296,\n    298,\n    300,\n    302,\n    304,\n    306,\n    308,\n    310,\n    313,\n    315,\n    317,\n    319,\n    321,\n    323,\n    325,\n    327,\n    330,\n    332,\n    334,\n    336,\n    338,\n    340,\n    342,\n    344,\n    346,\n    348,\n    350,\n    352,\n    354,\n    356,\n    358,\n    360,\n    362,\n    364,\n    366,\n    368,\n    370,\n    372,\n    374,\n    [376, 377],\n    379,\n    381,\n    [385, 386],\n    388,\n    [390, 391],\n    [393, 395],\n    [398, 401],\n    [403, 404],\n    [406, 408],\n    [412, 413],\n    [415, 416],\n    418,\n    420,\n    [422, 423],\n    425,\n    428,\n    [430, 431],\n    [433, 435],\n    437,\n    [439, 440],\n    444,\n    452,\n    455,\n    458,\n    461,\n    463,\n    465,\n    467,\n    469,\n    471,\n    473,\n    475,\n    478,\n    480,\n    482,\n    484,\n    486,\n    488,\n    490,\n    492,\n    494,\n    497,\n    500,\n    [502, 504],\n    506,\n    508,\n    510,\n    512,\n    514,\n    516,\n    518,\n    520,\n    522,\n    524,\n    526,\n    528,\n    530,\n    532,\n    534,\n    536,\n    538,\n    540,\n    542,\n    544,\n    546,\n    548,\n    550,\n    552,\n    554,\n    556,\n    558,\n    560,\n    562,\n    [570, 571],\n    [573, 574],\n    577,\n    [579, 582],\n    584,\n    586,\n    588,\n    590,\n    880,\n    882,\n    886,\n    895,\n    902,\n    [904, 906],\n    908,\n    [910, 911],\n    [913, 929],\n    [931, 939],\n    975,\n    [978, 980],\n    984,\n    986,\n    988,\n    990,\n    992,\n    994,\n    996,\n    998,\n    1000,\n    1002,\n    1004,\n    1006,\n    1012,\n    1015,\n    [1017, 1018],\n    [1021, 1071],\n    1120,\n    1122,\n    1124,\n    1126,\n    1128,\n    1130,\n    1132,\n    1134,\n    1136,\n    1138,\n    1140,\n    1142,\n    1144,\n    1146,\n    1148,\n    1150,\n    1152,\n    1162,\n    1164,\n    1166,\n    1168,\n    1170,\n    1172,\n    1174,\n    1176,\n    1178,\n    1180,\n    1182,\n    1184,\n    1186,\n    1188,\n    1190,\n    1192,\n    1194,\n    1196,\n    1198,\n    1200,\n    1202,\n    1204,\n    1206,\n    1208,\n    1210,\n    1212,\n    1214,\n    [1216, 1217],\n    1219,\n    1221,\n    1223,\n    1225,\n    1227,\n    1229,\n    1232,\n    1234,\n    1236,\n    1238,\n    1240,\n    1242,\n    1244,\n    1246,\n    1248,\n    1250,\n    1252,\n    1254,\n    1256,\n    1258,\n    1260,\n    1262,\n    1264,\n    1266,\n    1268,\n    1270,\n    1272,\n    1274,\n    1276,\n    1278,\n    1280,\n    1282,\n    1284,\n    1286,\n    1288,\n    1290,\n    1292,\n    1294,\n    1296,\n    1298,\n    1300,\n    1302,\n    1304,\n    1306,\n    1308,\n    1310,\n    1312,\n    1314,\n    1316,\n    1318,\n    1320,\n    1322,\n    1324,\n    1326,\n    [1329, 1366],\n    [4256, 4293],\n    4295,\n    4301,\n    [5024, 5109],\n    7680,\n    7682,\n    7684,\n    7686,\n    7688,\n    7690,\n    7692,\n    7694,\n    7696,\n    7698,\n    7700,\n    7702,\n    7704,\n    7706,\n    7708,\n    7710,\n    7712,\n    7714,\n    7716,\n    7718,\n    7720,\n    7722,\n    7724,\n    7726,\n    7728,\n    7730,\n    7732,\n    7734,\n    7736,\n    7738,\n    7740,\n    7742,\n    7744,\n    7746,\n    7748,\n    7750,\n    7752,\n    7754,\n    7756,\n    7758,\n    7760,\n    7762,\n    7764,\n    7766,\n    7768,\n    7770,\n    7772,\n    7774,\n    7776,\n    7778,\n    7780,\n    7782,\n    7784,\n    7786,\n    7788,\n    7790,\n    7792,\n    7794,\n    7796,\n    7798,\n    7800,\n    7802,\n    7804,\n    7806,\n    7808,\n    7810,\n    7812,\n    7814,\n    7816,\n    7818,\n    7820,\n    7822,\n    7824,\n    7826,\n    7828,\n    7838,\n    7840,\n    7842,\n    7844,\n    7846,\n    7848,\n    7850,\n    7852,\n    7854,\n    7856,\n    7858,\n    7860,\n    7862,\n    7864,\n    7866,\n    7868,\n    7870,\n    7872,\n    7874,\n    7876,\n    7878,\n    7880,\n    7882,\n    7884,\n    7886,\n    7888,\n    7890,\n    7892,\n    7894,\n    7896,\n    7898,\n    7900,\n    7902,\n    7904,\n    7906,\n    7908,\n    7910,\n    7912,\n    7914,\n    7916,\n    7918,\n    7920,\n    7922,\n    7924,\n    7926,\n    7928,\n    7930,\n    7932,\n    7934,\n    [7944, 7951],\n    [7960, 7965],\n    [7976, 7983],\n    [7992, 7999],\n    [8008, 8013],\n    8025,\n    8027,\n    8029,\n    8031,\n    [8040, 8047],\n    [8120, 8123],\n    [8136, 8139],\n    [8152, 8155],\n    [8168, 8172],\n    [8184, 8187],\n    8450,\n    8455,\n    [8459, 8461],\n    [8464, 8466],\n    8469,\n    [8473, 8477],\n    8484,\n    8486,\n    8488,\n    [8490, 8493],\n    [8496, 8499],\n    [8510, 8511],\n    8517,\n    8579,\n    [11264, 11310],\n    11360,\n    [11362, 11364],\n    11367,\n    11369,\n    11371,\n    [11373, 11376],\n    11378,\n    11381,\n    [11390, 11392],\n    11394,\n    11396,\n    11398,\n    11400,\n    11402,\n    11404,\n    11406,\n    11408,\n    11410,\n    11412,\n    11414,\n    11416,\n    11418,\n    11420,\n    11422,\n    11424,\n    11426,\n    11428,\n    11430,\n    11432,\n    11434,\n    11436,\n    11438,\n    11440,\n    11442,\n    11444,\n    11446,\n    11448,\n    11450,\n    11452,\n    11454,\n    11456,\n    11458,\n    11460,\n    11462,\n    11464,\n    11466,\n    11468,\n    11470,\n    11472,\n    11474,\n    11476,\n    11478,\n    11480,\n    11482,\n    11484,\n    11486,\n    11488,\n    11490,\n    11499,\n    11501,\n    11506,\n    42560,\n    42562,\n    42564,\n    42566,\n    42568,\n    42570,\n    42572,\n    42574,\n    42576,\n    42578,\n    42580,\n    42582,\n    42584,\n    42586,\n    42588,\n    42590,\n    42592,\n    42594,\n    42596,\n    42598,\n    42600,\n    42602,\n    42604,\n    42624,\n    42626,\n    42628,\n    42630,\n    42632,\n    42634,\n    42636,\n    42638,\n    42640,\n    42642,\n    42644,\n    42646,\n    42648,\n    42650,\n    42786,\n    42788,\n    42790,\n    42792,\n    42794,\n    42796,\n    42798,\n    42802,\n    42804,\n    42806,\n    42808,\n    42810,\n    42812,\n    42814,\n    42816,\n    42818,\n    42820,\n    42822,\n    42824,\n    42826,\n    42828,\n    42830,\n    42832,\n    42834,\n    42836,\n    42838,\n    42840,\n    42842,\n    42844,\n    42846,\n    42848,\n    42850,\n    42852,\n    42854,\n    42856,\n    42858,\n    42860,\n    42862,\n    42873,\n    42875,\n    [42877, 42878],\n    42880,\n    42882,\n    42884,\n    42886,\n    42891,\n    42893,\n    42896,\n    42898,\n    42902,\n    42904,\n    42906,\n    42908,\n    42910,\n    42912,\n    42914,\n    42916,\n    42918,\n    42920,\n    [42922, 42926],\n    [42928, 42932],\n    42934,\n    [65313, 65338],\n    [66560, 66599],\n    [66736, 66771],\n    [68736, 68786],\n    [71840, 71871],\n    [119808, 119833],\n    [119860, 119885],\n    [119912, 119937],\n    119964,\n    [119966, 119967],\n    119970,\n    [119973, 119974],\n    [119977, 119980],\n    [119982, 119989],\n    [120016, 120041],\n    [120068, 120069],\n    [120071, 120074],\n    [120077, 120084],\n    [120086, 120092],\n    [120120, 120121],\n    [120123, 120126],\n    [120128, 120132],\n    120134,\n    [120138, 120144],\n    [120172, 120197],\n    [120224, 120249],\n    [120276, 120301],\n    [120328, 120353],\n    [120380, 120405],\n    [120432, 120457],\n    [120488, 120512],\n    [120546, 120570],\n    [120604, 120628],\n    [120662, 120686],\n    [120720, 120744],\n    120778,\n    [125184, 125217],\n];\n\nexport const unicodeLl: UnicodeRangeTable = [\n    [97, 122],\n    181,\n    [223, 246],\n    [248, 255],\n    257,\n    259,\n    261,\n    263,\n    265,\n    267,\n    269,\n    271,\n    273,\n    275,\n    277,\n    279,\n    281,\n    283,\n    285,\n    287,\n    289,\n    291,\n    293,\n    295,\n    297,\n    299,\n    301,\n    303,\n    305,\n    307,\n    309,\n    [311, 312],\n    314,\n    316,\n    318,\n    320,\n    322,\n    324,\n    326,\n    [328, 329],\n    331,\n    333,\n    335,\n    337,\n    339,\n    341,\n    343,\n    345,\n    347,\n    349,\n    351,\n    353,\n    355,\n    357,\n    359,\n    361,\n    363,\n    365,\n    367,\n    369,\n    371,\n    373,\n    375,\n    378,\n    380,\n    [382, 384],\n    387,\n    389,\n    392,\n    [396, 397],\n    402,\n    405,\n    [409, 411],\n    414,\n    417,\n    419,\n    421,\n    424,\n    [426, 427],\n    429,\n    432,\n    436,\n    438,\n    [441, 442],\n    [445, 447],\n    454,\n    457,\n    460,\n    462,\n    464,\n    466,\n    468,\n    470,\n    472,\n    474,\n    [476, 477],\n    479,\n    481,\n    483,\n    485,\n    487,\n    489,\n    491,\n    493,\n    [495, 496],\n    499,\n    501,\n    505,\n    507,\n    509,\n    511,\n    513,\n    515,\n    517,\n    519,\n    521,\n    523,\n    525,\n    527,\n    529,\n    531,\n    533,\n    535,\n    537,\n    539,\n    541,\n    543,\n    545,\n    547,\n    549,\n    551,\n    553,\n    555,\n    557,\n    559,\n    561,\n    [563, 569],\n    572,\n    [575, 576],\n    578,\n    583,\n    585,\n    587,\n    589,\n    [591, 659],\n    [661, 687],\n    881,\n    883,\n    887,\n    [891, 893],\n    912,\n    [940, 974],\n    [976, 977],\n    [981, 983],\n    985,\n    987,\n    989,\n    991,\n    993,\n    995,\n    997,\n    999,\n    1001,\n    1003,\n    1005,\n    [1007, 1011],\n    1013,\n    1016,\n    [1019, 1020],\n    [1072, 1119],\n    1121,\n    1123,\n    1125,\n    1127,\n    1129,\n    1131,\n    1133,\n    1135,\n    1137,\n    1139,\n    1141,\n    1143,\n    1145,\n    1147,\n    1149,\n    1151,\n    1153,\n    1163,\n    1165,\n    1167,\n    1169,\n    1171,\n    1173,\n    1175,\n    1177,\n    1179,\n    1181,\n    1183,\n    1185,\n    1187,\n    1189,\n    1191,\n    1193,\n    1195,\n    1197,\n    1199,\n    1201,\n    1203,\n    1205,\n    1207,\n    1209,\n    1211,\n    1213,\n    1215,\n    1218,\n    1220,\n    1222,\n    1224,\n    1226,\n    1228,\n    [1230, 1231],\n    1233,\n    1235,\n    1237,\n    1239,\n    1241,\n    1243,\n    1245,\n    1247,\n    1249,\n    1251,\n    1253,\n    1255,\n    1257,\n    1259,\n    1261,\n    1263,\n    1265,\n    1267,\n    1269,\n    1271,\n    1273,\n    1275,\n    1277,\n    1279,\n    1281,\n    1283,\n    1285,\n    1287,\n    1289,\n    1291,\n    1293,\n    1295,\n    1297,\n    1299,\n    1301,\n    1303,\n    1305,\n    1307,\n    1309,\n    1311,\n    1313,\n    1315,\n    1317,\n    1319,\n    1321,\n    1323,\n    1325,\n    1327,\n    [1377, 1415],\n    [5112, 5117],\n    [7296, 7304],\n    [7424, 7467],\n    [7531, 7543],\n    [7545, 7578],\n    7681,\n    7683,\n    7685,\n    7687,\n    7689,\n    7691,\n    7693,\n    7695,\n    7697,\n    7699,\n    7701,\n    7703,\n    7705,\n    7707,\n    7709,\n    7711,\n    7713,\n    7715,\n    7717,\n    7719,\n    7721,\n    7723,\n    7725,\n    7727,\n    7729,\n    7731,\n    7733,\n    7735,\n    7737,\n    7739,\n    7741,\n    7743,\n    7745,\n    7747,\n    7749,\n    7751,\n    7753,\n    7755,\n    7757,\n    7759,\n    7761,\n    7763,\n    7765,\n    7767,\n    7769,\n    7771,\n    7773,\n    7775,\n    7777,\n    7779,\n    7781,\n    7783,\n    7785,\n    7787,\n    7789,\n    7791,\n    7793,\n    7795,\n    7797,\n    7799,\n    7801,\n    7803,\n    7805,\n    7807,\n    7809,\n    7811,\n    7813,\n    7815,\n    7817,\n    7819,\n    7821,\n    7823,\n    7825,\n    7827,\n    [7829, 7837],\n    7839,\n    7841,\n    7843,\n    7845,\n    7847,\n    7849,\n    7851,\n    7853,\n    7855,\n    7857,\n    7859,\n    7861,\n    7863,\n    7865,\n    7867,\n    7869,\n    7871,\n    7873,\n    7875,\n    7877,\n    7879,\n    7881,\n    7883,\n    7885,\n    7887,\n    7889,\n    7891,\n    7893,\n    7895,\n    7897,\n    7899,\n    7901,\n    7903,\n    7905,\n    7907,\n    7909,\n    7911,\n    7913,\n    7915,\n    7917,\n    7919,\n    7921,\n    7923,\n    7925,\n    7927,\n    7929,\n    7931,\n    7933,\n    [7935, 7943],\n    [7952, 7957],\n    [7968, 7975],\n    [7984, 7991],\n    [8000, 8005],\n    [8016, 8023],\n    [8032, 8039],\n    [8048, 8061],\n    [8064, 8071],\n    [8080, 8087],\n    [8096, 8103],\n    [8112, 8116],\n    [8118, 8119],\n    8126,\n    [8130, 8132],\n    [8134, 8135],\n    [8144, 8147],\n    [8150, 8151],\n    [8160, 8167],\n    [8178, 8180],\n    [8182, 8183],\n    8458,\n    [8462, 8463],\n    8467,\n    8495,\n    8500,\n    8505,\n    [8508, 8509],\n    [8518, 8521],\n    8526,\n    8580,\n    [11312, 11358],\n    11361,\n    [11365, 11366],\n    11368,\n    11370,\n    11372,\n    11377,\n    [11379, 11380],\n    [11382, 11387],\n    11393,\n    11395,\n    11397,\n    11399,\n    11401,\n    11403,\n    11405,\n    11407,\n    11409,\n    11411,\n    11413,\n    11415,\n    11417,\n    11419,\n    11421,\n    11423,\n    11425,\n    11427,\n    11429,\n    11431,\n    11433,\n    11435,\n    11437,\n    11439,\n    11441,\n    11443,\n    11445,\n    11447,\n    11449,\n    11451,\n    11453,\n    11455,\n    11457,\n    11459,\n    11461,\n    11463,\n    11465,\n    11467,\n    11469,\n    11471,\n    11473,\n    11475,\n    11477,\n    11479,\n    11481,\n    11483,\n    11485,\n    11487,\n    11489,\n    [11491, 11492],\n    11500,\n    11502,\n    11507,\n    [11520, 11557],\n    11559,\n    11565,\n    42561,\n    42563,\n    42565,\n    42567,\n    42569,\n    42571,\n    42573,\n    42575,\n    42577,\n    42579,\n    2581,\n    42583,\n    42585,\n    42587,\n    42589,\n    42591,\n    42593,\n    42595,\n    42597,\n    42599,\n    42601,\n    42603,\n    42605,\n    42625,\n    42627,\n    42629,\n    42631,\n    42633,\n    42635,\n    42637,\n    42639,\n    42641,\n    42643,\n    42645,\n    42647,\n    42649,\n    42651,\n    42787,\n    42789,\n    42791,\n    42793,\n    42795,\n    42797,\n    [42799, 42801],\n    42803,\n    42805,\n    42807,\n    42809,\n    42811,\n    42813,\n    42815,\n    42817,\n    42819,\n    42821,\n    42823,\n    42825,\n    42827,\n    42829,\n    42831,\n    42833,\n    42835,\n    42837,\n    42839,\n    42841,\n    42843,\n    42845,\n    42847,\n    42849,\n    42851,\n    42853,\n    42855,\n    42857,\n    42859,\n    42861,\n    42863,\n    [42865, 42872],\n    42874,\n    42876,\n    42879,\n    42881,\n    42883,\n    42885,\n    42887,\n    42892,\n    42894,\n    42897,\n    [42899, 42901],\n    42903,\n    42905,\n    42907,\n    42909,\n    42911,\n    42913,\n    42915,\n    42917,\n    42919,\n    42921,\n    42933,\n    42935,\n    43002,\n    [43824, 43866],\n    [43872, 43877],\n    [43888, 43967],\n    [64256, 64262],\n    [64275, 64279],\n    [65345, 65370],\n    [66600, 66639],\n    [66776, 66811],\n    [68800, 68850],\n    [71872, 71903],\n    [119834, 119859],\n    [119886, 119892],\n    [119894, 119911],\n    [119938, 119963],\n    [119990, 119993],\n    119995,\n    [119997, 120003],\n    [120005, 120015],\n    [120042, 120067],\n    [120094, 120119],\n    [120146, 120171],\n    [120198, 120223],\n    [120250, 120275],\n    [120302, 120327],\n    [120354, 120379],\n    [120406, 120431],\n    [120458, 120485],\n    [120514, 120538],\n    [120540, 120545],\n    [120572, 120596],\n    [120598, 120603],\n    [120630, 120654],\n    [120656, 120661],\n    [120688, 120712],\n    [120714, 120719],\n    [120746, 120770],\n    [120772, 120777],\n    120779,\n    [125218, 125251],\n];\n\nexport const unicodeLt: UnicodeRangeTable = [\n    453,\n    456,\n    459,\n    498,\n    [8072, 8079],\n    [8088, 8095],\n    [8104, 8111],\n    8124,\n    8140,\n    8188,\n];\n\nexport const unicodeLo: UnicodeRangeTable = [\n    170,\n    186,\n    443,\n    [448, 451],\n    660,\n    [1488, 1514],\n    [1520, 1522],\n    [1568, 1599],\n    [1601, 1610],\n    [1646, 1647],\n    [1649, 1747],\n    1749,\n    [1774, 1775],\n    [1786, 1788],\n    1791,\n    1808,\n    [1810, 1839],\n    [1869, 1957],\n    1969,\n    [1994, 2026],\n    [2048, 2069],\n    [2112, 2136],\n    [2144, 2154],\n    [2208, 2228],\n    [2230, 2237],\n    [2308, 2361],\n    2365,\n    2384,\n    [2392, 2401],\n    [2418, 2432],\n    [2437, 2444],\n    [2447, 2448],\n    [2451, 2472],\n    [2474, 2480],\n    2482,\n    [2486, 2489],\n    2493,\n    2510,\n    [2524, 2525],\n    [2527, 2529],\n    [2544, 2545],\n    2556,\n    [2565, 2570],\n    [2575, 2576],\n    [2579, 2600],\n    [2602, 2608],\n    [2610, 2611],\n    [2613, 2614],\n    [2616, 2617],\n    [2649, 2652],\n    2654,\n    [2674, 2676],\n    [2693, 2701],\n    [2703, 2705],\n    [2707, 2728],\n    [2730, 2736],\n    [2738, 2739],\n    [2741, 2745],\n    2749,\n    2768,\n    [2784, 2785],\n    2809,\n    [2821, 2828],\n    [2831, 2832],\n    [2835, 2856],\n    [2858, 2864],\n    [2866, 2867],\n    [2869, 2873],\n    2877,\n    [2908, 2909],\n    [2911, 2913],\n    2929,\n    2947,\n    [2949, 2954],\n    [2958, 2960],\n    [2962, 2965],\n    [2969, 2970],\n    2972,\n    [2974, 2975],\n    [2979, 2980],\n    [2984, 2986],\n    [2990, 3001],\n    3024,\n    [3077, 3084],\n    [3086, 3088],\n    [3090, 3112],\n    [3114, 3129],\n    3133,\n    [3160, 3162],\n    [3168, 3169],\n    3200,\n    [3205, 3212],\n    [3214, 3216],\n    [3218, 3240],\n    [3242, 3251],\n    [3253, 3257],\n    3261,\n    3294,\n    [3296, 3297],\n    [3313, 3314],\n    [3333, 3340],\n    [3342, 3344],\n    [3346, 3386],\n    3389,\n    3406,\n    [3412, 3414],\n    [3423, 3425],\n    [3450, 3455],\n    [3461, 3478],\n    [3482, 3505],\n    [3507, 3515],\n    3517,\n    [3520, 3526],\n    [3585, 3632],\n    [3634, 3635],\n    [3648, 3653],\n    [3713, 3714],\n    3716,\n    [3719, 3720],\n    3722,\n    3725,\n    [3732, 3735],\n    [3737, 3743],\n    [3745, 3747],\n    3749,\n    3751,\n    [3754, 3755],\n    [3757, 3760],\n    [3762, 3763],\n    3773,\n    [3776, 3780],\n    [3804, 3807],\n    3840,\n    [3904, 3911],\n    [3913, 3948],\n    [3976, 3980],\n    [4096, 4138],\n    4159,\n    [4176, 4181],\n    [4186, 4189],\n    4193,\n    [4197, 4198],\n    [4206, 4208],\n    [4213, 4225],\n    4238,\n    [4304, 4346],\n    [4349, 4680],\n    [4682, 4685],\n    [4688, 4694],\n    4696,\n    [4698, 4701],\n    [4704, 4744],\n    [4746, 4749],\n    [4752, 4784],\n    [4786, 4789],\n    [4792, 4798],\n    4800,\n    [4802, 4805],\n    [4808, 4822],\n    [4824, 4880],\n    [4882, 4885],\n    [4888, 4954],\n    [4992, 5007],\n    [5121, 5740],\n    [5743, 5759],\n    [5761, 5786],\n    [5792, 5866],\n    [5873, 5880],\n    [5888, 5900],\n    [5902, 5905],\n    [5920, 5937],\n    [5952, 5969],\n    [5984, 5996],\n    [5998, 6000],\n    [6016, 6067],\n    6108,\n    [6176, 6210],\n    [6212, 6263],\n    [6272, 6276],\n    [6279, 6312],\n    6314,\n    [6320, 6389],\n    [6400, 6430],\n    [6480, 6509],\n    [6512, 6516],\n    [6528, 6571],\n    [6576, 6601],\n    [6656, 6678],\n    [6688, 6740],\n    [6917, 6963],\n    [6981, 6987],\n    [7043, 7072],\n    [7086, 7087],\n    [7098, 7141],\n    [7168, 7203],\n    [7245, 7247],\n    [7258, 7287],\n    [7401, 7404],\n    [7406, 7409],\n    [7413, 7414],\n    [8501, 8504],\n    [11568, 11623],\n    [11648, 11670],\n    [11680, 11686],\n    [11688, 11694],\n    [11696, 11702],\n    [11704, 11710],\n    [11712, 11718],\n    [11720, 11726],\n    [11728, 11734],\n    [11736, 11742],\n    12294,\n    12348,\n    [12353, 12438],\n    12447,\n    [12449, 12538],\n    12543,\n    [12549, 12590],\n    [12593, 12686],\n    [12704, 12730],\n    [12784, 12799],\n    [13312, 19893],\n    [19968, 40938],\n    [40960, 40980],\n    [40982, 42124],\n    [42192, 42231],\n    [42240, 42507],\n    [42512, 42527],\n    [42538, 42539],\n    42606,\n    [42656, 42725],\n    42895,\n    42999,\n    [43003, 43009],\n    [43011, 43013],\n    [43015, 43018],\n    [43020, 43042],\n    [43072, 43123],\n    [43138, 43187],\n    [43250, 43255],\n    43259,\n    43261,\n    [43274, 43301],\n    [43312, 43334],\n    [43360, 43388],\n    [43396, 43442],\n    [43488, 43492],\n    [43495, 43503],\n    [43514, 43518],\n    [43520, 43560],\n    [43584, 43586],\n    [43588, 43595],\n    [43616, 43631],\n    [43633, 43638],\n    43642,\n    [43646, 43695],\n    43697,\n    [43701, 43702],\n    [43705, 43709],\n    43712,\n    43714,\n    [43739, 43740],\n    [43744, 43754],\n    43762,\n    [43777, 43782],\n    [43785, 43790],\n    [43793, 43798],\n    [43808, 43814],\n    [43816, 43822],\n    [43968, 44002],\n    [44032, 55203],\n    [55216, 55238],\n    [55243, 55291],\n    [63744, 64109],\n    [64112, 64217],\n    64285,\n    [64287, 64296],\n    [64298, 64310],\n    [64312, 64316],\n    64318,\n    [64320, 64321],\n    [64323, 64324],\n    [64326, 64433],\n    [64467, 64829],\n    [64848, 64911],\n    [64914, 64967],\n    [65008, 65019],\n    [65136, 65140],\n    [65142, 65276],\n    [65382, 65391],\n    [65393, 65437],\n    [65440, 65470],\n    [65474, 65479],\n    [65482, 65487],\n    [65490, 65495],\n    [65498, 65500],\n    [65536, 65547],\n    [65549, 65574],\n    [65576, 65594],\n    [65596, 65597],\n    [65599, 65613],\n    [65616, 65629],\n    [65664, 65786],\n    [66176, 66204],\n    [66208, 66256],\n    [66304, 66335],\n    [66349, 66368],\n    [66370, 66377],\n    [66384, 66421],\n    [66432, 66461],\n    [66464, 66499],\n    [66504, 66511],\n    [66640, 66717],\n    [66816, 66855],\n    [66864, 66915],\n    [67072, 67382],\n    [67392, 67413],\n    [67424, 67431],\n    [67584, 67589],\n    67592,\n    [67594, 67637],\n    [67639, 67640],\n    67644,\n    [67647, 67669],\n    [67680, 67702],\n    [67712, 67742],\n    [67808, 67826],\n    [67828, 67829],\n    [67840, 67861],\n    [67872, 67897],\n    [67968, 68023],\n    [68030, 68031],\n    68096,\n    [68112, 68115],\n    [68117, 68119],\n    [68121, 68147],\n    [68192, 68220],\n    [68224, 68252],\n    [68288, 68295],\n    [68297, 68324],\n    [68352, 68405],\n    [68416, 68437],\n    [68448, 68466],\n    [68480, 68497],\n    [68608, 68680],\n    [69635, 69687],\n    [69763, 69807],\n    [69840, 69864],\n    [69891, 69926],\n    [69968, 70002],\n    70006,\n    [70019, 70066],\n    [70081, 70084],\n    70106,\n    70108,\n    [70144, 70161],\n    [70163, 70187],\n    [70272, 70278],\n    70280,\n    [70282, 70285],\n    [70287, 70301],\n    [70303, 70312],\n    [70320, 70366],\n    [70405, 70412],\n    [70415, 70416],\n    [70419, 70440],\n    [70442, 70448],\n    [70450, 70451],\n    [70453, 70457],\n    70461,\n    70480,\n    [70493, 70497],\n    [70656, 70708],\n    [70727, 70730],\n    [70784, 70831],\n    [70852, 70853],\n    70855,\n    [71040, 71086],\n    [71128, 71131],\n    [71168, 71215],\n    71236,\n    [71296, 71338],\n    [71424, 71449],\n    71935,\n    72192,\n    [72203, 72242],\n    72250,\n    72272,\n    [72284, 72323],\n    [72326, 72329],\n    [72384, 72440],\n    [72704, 72712],\n    [72714, 72750],\n    72768,\n    [72818, 72847],\n    [72960, 72966],\n    [72968, 72969],\n    [72971, 73008],\n    73030,\n    [73728, 74649],\n    [74880, 75075],\n    [77824, 78894],\n    [82944, 83526],\n    [92160, 92728],\n    [92736, 92766],\n    [92880, 92909],\n    [92928, 92975],\n    [93027, 93047],\n    [93053, 93071],\n    [93952, 94020],\n    94032,\n    [94208, 100332],\n    [100352, 101106],\n    [110592, 110878],\n    [110960, 111355],\n    [113664, 113770],\n    [113776, 113788],\n    [113792, 113800],\n    [113808, 113817],\n    [124928, 125124],\n    [126464, 126467],\n    [126469, 126495],\n    [126497, 126498],\n    126500,\n    126503,\n    [126505, 126514],\n    [126516, 126519],\n    126521,\n    126523,\n    126530,\n    126535,\n    126537,\n    126539,\n    [126541, 126543],\n    [126545, 126546],\n    126548,\n    126551,\n    126553,\n    126555,\n    126557,\n    126559,\n    [126561, 126562],\n    126564,\n    [126567, 126570],\n    [126572, 126578],\n    [126580, 126583],\n    [126585, 126588],\n    126590,\n    [126592, 126601],\n    [126603, 126619],\n    [126625, 126627],\n    [126629, 126633],\n    [126635, 126651],\n    [131072, 173782],\n    [173824, 177972],\n    [177984, 178205],\n    [178208, 183969],\n    [183984, 191456],\n    [194560, 195101],\n];\n\nexport const unicodeLm: UnicodeRangeTable = [\n    [688, 705],\n    [710, 721],\n    [736, 740],\n    748,\n    750,\n    884,\n    890,\n    1369,\n    1600,\n    [1765, 1766],\n    [2036, 2037],\n    2042,\n    2074,\n    2084,\n    2088,\n    2417,\n    3654,\n    3782,\n    4348,\n    6103,\n    6211,\n    6823,\n    [7288, 7293],\n    [7468, 7530],\n    7544,\n    [7579, 7615],\n    8305,\n    8319,\n    [8336, 8348],\n    [11388, 11389],\n    11631,\n    11823,\n    12293,\n    [12337, 12341],\n    12347,\n    [12445, 12446],\n    [12540, 12542],\n    40981,\n    [42232, 42237],\n    42508,\n    42623,\n    [42652, 42653],\n    [42775, 42783],\n    42864,\n    42888,\n    [43000, 43001],\n    43471,\n    43494,\n    43632,\n    43741,\n    [43763, 43764],\n    [43868, 43871],\n    65392,\n    [65438, 65439],\n    [92992, 92995],\n    [94099, 94111],\n    [94176, 94177],\n];\n\nexport const unicodeNl: UnicodeRangeTable = [\n    [5870, 5872],\n    [8544, 8578],\n    [8581, 8584],\n    12295,\n    [12321, 12329],\n    [12344, 12346],\n    [42726, 42735],\n    [65856, 65908],\n    66369,\n    66378,\n    [66513, 66517],\n    [74752, 74862],\n];\n\nexport const unicodeMn: UnicodeRangeTable = [\n    [768, 879],\n    [1155, 1159],\n    [1425, 1469],\n    1471,\n    [1473, 1474],\n    [1476, 1477],\n    1479,\n    [1552, 1562],\n    [1611, 1631],\n    1648,\n    [1750, 1756],\n    [1759, 1764],\n    [1767, 1768],\n    [1770, 1773],\n    1809,\n    [1840, 1866],\n    [1958, 1968],\n    [2027, 2035],\n    [2070, 2073],\n    [2075, 2083],\n    [2085, 2087],\n    [2089, 2093],\n    [2137, 2139],\n    [2260, 2273],\n    [2275, 2306],\n    2362,\n    2364,\n    [2369, 2376],\n    2381,\n    [2385, 2391],\n    [2402, 2403],\n    2433,\n    2492,\n    [2497, 2500],\n    2509,\n    [2530, 2531],\n    [2561, 2562],\n    2620,\n    [2625, 2626],\n    [2631, 2632],\n    [2635, 2637],\n    2641,\n    [2672, 2673],\n    2677,\n    [2689, 2690],\n    2748,\n    [2753, 2757],\n    [2759, 2760],\n    2765,\n    [2786, 2787],\n    [2810, 2815],\n    2817,\n    2876,\n    2879,\n    [2881, 2884],\n    2893,\n    2902,\n    [2914, 2915],\n    2946,\n    3008,\n    3021,\n    3072,\n    [3134, 3136],\n    [3142, 3144],\n    [3146, 3149],\n    [3157, 3158],\n    [3170, 3171],\n    3201,\n    3260,\n    3263,\n    3270,\n    [3276, 3277],\n    [3298, 3299],\n    [3328, 3329],\n    [3387, 3388],\n    [3393, 3396],\n    3405,\n    [3426, 3427],\n    3530,\n    [3538, 3540],\n    3542,\n    3633,\n    [3636, 3642],\n    [3655, 3662],\n    3761,\n    [3764, 3769],\n    [3771, 3772],\n    [3784, 3789],\n    [3864, 3865],\n    3893,\n    3895,\n    3897,\n    [3953, 3966],\n    [3968, 3972],\n    [3974, 3975],\n    [3981, 3991],\n    [3993, 4028],\n    4038,\n    [4141, 4144],\n    [4146, 4151],\n    [4153, 4154],\n    [4157, 4158],\n    [4184, 4185],\n    [4190, 4192],\n    [4209, 4212],\n    4226,\n    [4229, 4230],\n    4237,\n    4253,\n    [4957, 4959],\n    [5906, 5908],\n    [5938, 5940],\n    [5970, 5971],\n    [6002, 6003],\n    [6068, 6069],\n    [6071, 6077],\n    6086,\n    [6089, 6099],\n    6109,\n    [6155, 6157],\n    [6277, 6278],\n    6313,\n    [6432, 6434],\n    [6439, 6440],\n    6450,\n    [6457, 6459],\n    [6679, 6680],\n    6683,\n    6742,\n    [6744, 6750],\n    6752,\n    6754,\n    [6757, 6764],\n    [6771, 6780],\n    6783,\n    [6832, 6845],\n    [6912, 6915],\n    6964,\n    [6966, 6970],\n    6972,\n    6978,\n    [7019, 7027],\n    [7040, 7041],\n    [7074, 7077],\n    [7080, 7081],\n    [7083, 7085],\n    7142,\n    [7144, 7145],\n    7149,\n    [7151, 7153],\n    [7212, 7219],\n    [7222, 7223],\n    [7376, 7378],\n    [7380, 7392],\n    [7394, 7400],\n    7405,\n    7412,\n    [7416, 7417],\n    [7616, 7673],\n    [7675, 7679],\n    [8400, 8412],\n    8417,\n    [8421, 8432],\n    [11503, 11505],\n    11647,\n    [11744, 11775],\n    [12330, 12333],\n    [12441, 12442],\n    42607,\n    [42612, 42621],\n    [42654, 42655],\n    [42736, 42737],\n    43010,\n    43014,\n    43019,\n    [43045, 43046],\n    [43204, 43205],\n    [43232, 43249],\n    [43302, 43309],\n    [43335, 43345],\n    [43392, 43394],\n    43443,\n    [43446, 43449],\n    43452,\n    43493,\n    [43561, 43566],\n    [43569, 43570],\n    [43573, 43574],\n    43587,\n    43596,\n    43644,\n    43696,\n    [43698, 43700],\n    [43703, 43704],\n    [43710, 43711],\n    43713,\n    [43756, 43757],\n    43766,\n    44005,\n    44008,\n    44013,\n    64286,\n    [65024, 65039],\n    [65056, 65071],\n    66045,\n    66272,\n    [66422, 66426],\n    [68097, 68099],\n    [68101, 68102],\n    [68108, 68111],\n    [68152, 68154],\n    68159,\n    [68325, 68326],\n    69633,\n    [69688, 69702],\n    [69759, 69761],\n    [69811, 69814],\n    [69817, 69818],\n    [69888, 69890],\n    [69927, 69931],\n    [69933, 69940],\n    70003,\n    [70016, 70017],\n    [70070, 70078],\n    [70090, 70092],\n    [70191, 70193],\n    70196,\n    [70198, 70199],\n    70206,\n    70367,\n    [70371, 70378],\n    [70400, 70401],\n    70460,\n    70464,\n    [70502, 70508],\n    [70512, 70516],\n    [70712, 70719],\n    [70722, 70724],\n    70726,\n    [70835, 70840],\n    70842,\n    [70847, 70848],\n    [70850, 70851],\n    [71090, 71093],\n    [71100, 71101],\n    [71103, 71104],\n    [71132, 71133],\n    [71219, 71226],\n    71229,\n    [71231, 71232],\n    71339,\n    71341,\n    [71344, 71349],\n    71351,\n    [71453, 71455],\n    [71458, 71461],\n    [71463, 71467],\n    [72193, 72198],\n    [72201, 72202],\n    [72243, 72248],\n    [72251, 72254],\n    72263,\n    [72273, 72278],\n    [72281, 72283],\n    [72330, 72342],\n    [72344, 72345],\n    [72752, 72758],\n    [72760, 72765],\n    72767,\n    [72850, 72871],\n    [72874, 72880],\n    [72882, 72883],\n    [72885, 72886],\n    [73009, 73014],\n    73018,\n    [73020, 73021],\n    [73023, 73029],\n    73031,\n    [92912, 92916],\n    [92976, 92982],\n    [94095, 94098],\n    [113821, 113822],\n    [119143, 119145],\n    [119163, 119170],\n    [119173, 119179],\n    [119210, 119213],\n    [119362, 119364],\n    [121344, 121398],\n    [121403, 121452],\n    121461,\n    121476,\n    [121499, 121503],\n    [121505, 121519],\n    [122880, 122886],\n    [122888, 122904],\n    [122907, 122913],\n    [122915, 122916],\n    [122918, 122922],\n    [125136, 125142],\n    [125252, 125258],\n    [917760, 917999],\n];\n\nexport const unicodeMc: UnicodeRangeTable = [\n    2307,\n    2363,\n    [2366, 2368],\n    [2377, 2380],\n    [2382, 2383],\n    [2434, 2435],\n    [2494, 2496],\n    [2503, 2504],\n    [2507, 2508],\n    2519,\n    2563,\n    [2622, 2624],\n    2691,\n    [2750, 2752],\n    2761,\n    [2763, 2764],\n    [2818, 2819],\n    2878,\n    2880,\n    [2887, 2888],\n    [2891, 2892],\n    2903,\n    [3006, 3007],\n    [3009, 3010],\n    [3014, 3016],\n    [3018, 3020],\n    3031,\n    [3073, 3075],\n    [3137, 3140],\n    [3202, 3203],\n    3262,\n    [3264, 3268],\n    [3271, 3272],\n    [3274, 3275],\n    [3285, 3286],\n    [3330, 3331],\n    [3390, 3392],\n    [3398, 3400],\n    [3402, 3404],\n    3415,\n    [3458, 3459],\n    [3535, 3537],\n    [3544, 3551],\n    [3570, 3571],\n    [3902, 3903],\n    3967,\n    [4139, 4140],\n    4145,\n    4152,\n    [4155, 4156],\n    [4182, 4183],\n    [4194, 4196],\n    [4199, 4205],\n    [4227, 4228],\n    [4231, 4236],\n    4239,\n    [4250, 4252],\n    6070,\n    [6078, 6085],\n    [6087, 6088],\n    [6435, 6438],\n    [6441, 6443],\n    [6448, 6449],\n    [6451, 6456],\n    [6681, 6682],\n    6741,\n    6743,\n    6753,\n    [6755, 6756],\n    [6765, 6770],\n    6916,\n    6965,\n    6971,\n    [6973, 6977],\n    [6979, 6980],\n    7042,\n    7073,\n    [7078, 7079],\n    7082,\n    7143,\n    [7146, 7148],\n    7150,\n    [7154, 7155],\n    [7204, 7211],\n    [7220, 7221],\n    7393,\n    [7410, 7411],\n    7415,\n    [12334, 12335],\n    [43043, 43044],\n    43047,\n    [43136, 43137],\n    [43188, 43203],\n    [43346, 43347],\n    43395,\n    [43444, 43445],\n    [43450, 43451],\n    [43453, 43456],\n    [43567, 43568],\n    [43571, 43572],\n    43597,\n    43643,\n    43645,\n    43755,\n    [43758, 43759],\n    43765,\n    [44003, 44004],\n    [44006, 44007],\n    [44009, 44010],\n    44012,\n    69632,\n    69634,\n    69762,\n    [69808, 69810],\n    [69815, 69816],\n    69932,\n    70018,\n    [70067, 70069],\n    [70079, 70080],\n    [70188, 70190],\n    [70194, 70195],\n    70197,\n    [70368, 70370],\n    [70402, 70403],\n    [70462, 70463],\n    [70465, 70468],\n    [70471, 70472],\n    [70475, 70477],\n    70487,\n    [70498, 70499],\n    [70709, 70711],\n    [70720, 70721],\n    70725,\n    [70832, 70834],\n    70841,\n    [70843, 70846],\n    70849,\n    [71087, 71089],\n    [71096, 71099],\n    71102,\n    [71216, 71218],\n    [71227, 71228],\n    71230,\n    71340,\n    [71342, 71343],\n    71350,\n    [71456, 71457],\n    71462,\n    [72199, 72200],\n    72249,\n    [72279, 72280],\n    72343,\n    72751,\n    72766,\n    72873,\n    72881,\n    72884,\n    [94033, 94078],\n    [119141, 119142],\n    [119149, 119154],\n];\n\nexport const unicodeNd: UnicodeRangeTable = [\n    [48, 57],\n    [1632, 1641],\n    [1776, 1785],\n    [1984, 1993],\n    [2406, 2415],\n    [2534, 2543],\n    [2662, 2671],\n    [2790, 2799],\n    [2918, 2927],\n    [3046, 3055],\n    [3174, 3183],\n    [3302, 3311],\n    [3430, 3439],\n    [3558, 3567],\n    [3664, 3673],\n    [3792, 3801],\n    [3872, 3881],\n    [4160, 4169],\n    [4240, 4249],\n    [6112, 6121],\n    [6160, 6169],\n    [6470, 6479],\n    [6608, 6617],\n    [6784, 6793],\n    [6800, 6809],\n    [6992, 7001],\n    [7088, 7097],\n    [7232, 7241],\n    [7248, 7257],\n    [42528, 42537],\n    [43216, 43225],\n    [43264, 43273],\n    [43472, 43481],\n    [43504, 43513],\n    [43600, 43609],\n    [44016, 44025],\n    [65296, 65305],\n    [66720, 66729],\n    [69734, 69743],\n    [69872, 69881],\n    [69942, 69951],\n    [70096, 70105],\n    [70384, 70393],\n    [70736, 70745],\n    [70864, 70873],\n    [71248, 71257],\n    [71360, 71369],\n    [71472, 71481],\n    [71904, 71913],\n    [72784, 72793],\n    [73040, 73049],\n    [92768, 92777],\n    [93008, 93017],\n    [120782, 120831],\n    [125264, 125273],\n];\n\nexport const unicodePc: UnicodeRangeTable = [95, [8255, 8256], 8276, [65075, 65076], [65101, 65103], 65343];\n","/*\n * pyright.ts\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT license.\n * Author: Eric Traut\n *\n * Command-line entry point for pyright type checker.\n */\n\n// Add the start timer at the very top of the file, before we import other modules.\n\n/* eslint-disable */\nimport { timingStats } from './common/timing';\n/* eslint-enable */\n\nimport chalk from 'chalk';\nimport commandLineArgs from 'command-line-args';\nimport { CommandLineOptions, OptionDefinition } from 'command-line-args';\nimport * as process from 'process';\n\nimport { PackageTypeVerifier, PackageTypeReport, PackageSymbolType } from './analyzer/packageTypeVerifier';\nimport { AnalyzerService } from './analyzer/service';\nimport { CommandLineOptions as PyrightCommandLineOptions } from './common/commandLineOptions';\nimport { NullConsole } from './common/console';\nimport { Diagnostic, DiagnosticCategory } from './common/diagnostic';\nimport { FileDiagnostics } from './common/diagnosticSink';\nimport { combinePaths, normalizePath } from './common/pathUtils';\nimport { createFromRealFileSystem, FileSystem } from './common/fileSystem';\nimport { isEmptyRange, Range } from './common/textRange';\n\nconst toolName = 'pyright';\n\nenum ExitStatus {\n    NoErrors = 0,\n    ErrorsReported = 1,\n    FatalError = 2,\n    ConfigFileParseError = 3,\n}\n\ninterface PyrightJsonResults {\n    version: string;\n    time: string;\n    diagnostics: PyrightJsonDiagnostic[];\n    summary: PyrightJsonSummary;\n    typeCompleteness?: PyrightTypeCompletenessReport;\n}\n\ninterface PyrightTypeCompletenessReport {\n    packageName: string;\n    packageRootDirectory?: string;\n    pyTypedPath?: string;\n    symbolCount: number;\n    unknownTypeCount: number;\n    missingFunctionDocStringCount: number;\n    missingClassDocStringCount: number;\n    missingDefaultParamCount: number;\n    completnessScore: number;\n    modules: PyrightPublicModuleReport[];\n}\n\ninterface PyrightPublicModuleReport {\n    name: string;\n    symbols: PyrightPublicSymbolReport[];\n}\n\ninterface PyrightPublicSymbolReport {\n    name: string;\n    fullName: string;\n    symbolType: string;\n}\n\ninterface PyrightJsonDiagnostic {\n    file: string;\n    severity: 'error' | 'warning' | 'information';\n    message: string;\n    range?: Range;\n    rule?: string;\n}\n\ninterface PyrightJsonSummary {\n    filesAnalyzed: number;\n    errorCount: number;\n    warningCount: number;\n    informationCount: number;\n    timeInSec: number;\n}\n\ninterface DiagnosticResult {\n    errorCount: number;\n    warningCount: number;\n    informationCount: number;\n    diagnosticCount: number;\n}\n\nconst cancellationNone = Object.freeze({\n    isCancellationRequested: false,\n    onCancellationRequested: function () {\n        return {\n            dispose() {\n                /* empty */\n            },\n        };\n    },\n});\n\nfunction processArgs() {\n    const optionDefinitions: OptionDefinition[] = [\n        { name: 'createstub', type: String },\n        { name: 'dependencies', type: Boolean },\n        { name: 'files', type: String, multiple: true, defaultOption: true },\n        { name: 'help', alias: 'h', type: Boolean },\n        { name: 'lib', type: Boolean },\n        { name: 'outputjson', type: Boolean },\n        { name: 'project', alias: 'p', type: String },\n        { name: 'stats' },\n        { name: 'typeshed-path', alias: 't', type: String },\n        { name: 'venv-path', alias: 'v', type: String },\n        { name: 'verifytypes', type: String },\n        { name: 'verbose', type: Boolean },\n        { name: 'version', type: Boolean },\n        { name: 'watch', alias: 'w', type: Boolean },\n    ];\n\n    let args: CommandLineOptions;\n\n    try {\n        args = commandLineArgs(optionDefinitions);\n    } catch (err) {\n        const argErr: { name: string; optionName: string } = err;\n        if (argErr && argErr.optionName) {\n            console.error(`Unexpected option ${argErr.optionName}.\\n${toolName} --help for usage`);\n            return;\n        }\n\n        console.error(`Unexpected error\\n${toolName} --help for usage`);\n        return;\n    }\n\n    if (args.help !== undefined) {\n        printUsage();\n        return;\n    }\n\n    if (args.version !== undefined) {\n        printVersion();\n        return;\n    }\n\n    if (args.outputjson) {\n        const incompatibleArgs = ['watch', 'stats', 'verbose', 'createstub', 'dependencies'];\n        for (const arg of incompatibleArgs) {\n            if (args[arg] !== undefined) {\n                console.error(`'outputjson' option cannot be used with '${arg}' option`);\n                return;\n            }\n        }\n    }\n\n    if (args['verifytypes'] !== undefined) {\n        const incompatibleArgs = ['watch', 'stats', 'createstub', 'dependencies'];\n        for (const arg of incompatibleArgs) {\n            if (args[arg] !== undefined) {\n                console.error(`'verifytypes' option cannot be used with '${arg}' option`);\n                return;\n            }\n        }\n    }\n\n    if (args.createstub) {\n        const incompatibleArgs = ['watch', 'stats', 'verifytypes', 'dependencies'];\n        for (const arg of incompatibleArgs) {\n            if (args[arg] !== undefined) {\n                console.error(`'createstub' option cannot be used with '${arg}' option`);\n                return;\n            }\n        }\n    }\n\n    const options = new PyrightCommandLineOptions(process.cwd(), false);\n\n    // Assume any relative paths are relative to the working directory.\n    if (args.files && Array.isArray(args.files)) {\n        options.fileSpecs = args.files;\n        options.fileSpecs = options.fileSpecs.map((f) => combinePaths(process.cwd(), f));\n    } else {\n        options.fileSpecs = [];\n    }\n\n    if (args.project) {\n        options.configFilePath = combinePaths(process.cwd(), normalizePath(args.project));\n    }\n\n    if (args['venv-path']) {\n        options.venvPath = combinePaths(process.cwd(), normalizePath(args['venv-path']));\n    }\n\n    if (args['typeshed-path']) {\n        options.typeshedPath = combinePaths(process.cwd(), normalizePath(args['typeshed-path']));\n    }\n\n    if (args.createstub) {\n        options.typeStubTargetImportName = args.createstub;\n    }\n\n    if (args.verbose) {\n        options.verboseOutput = true;\n    }\n    if (args.lib) {\n        options.useLibraryCodeForTypes = true;\n    }\n    options.checkOnlyOpenFiles = false;\n\n    const output = args.outputjson ? new NullConsole() : undefined;\n    const realFileSystem = createFromRealFileSystem(output);\n\n    // The package type verification uses a different path.\n    if (args['verifytypes'] !== undefined) {\n        verifyPackageTypes(realFileSystem, args['verifytypes'] || '', !!args.verbose, !!args.outputjson);\n    }\n\n    const watch = args.watch !== undefined;\n    options.watchForSourceChanges = watch;\n\n    const service = new AnalyzerService('<default>', realFileSystem, output);\n\n    service.setCompletionCallback((results) => {\n        if (results.fatalErrorOccurred) {\n            process.exit(ExitStatus.FatalError);\n        }\n\n        if (results.configParseErrorOccurred) {\n            process.exit(ExitStatus.ConfigFileParseError);\n        }\n\n        let errorCount = 0;\n        if (results.diagnostics.length > 0 && !args.createstub && !args['verifytypes']) {\n            if (args.outputjson) {\n                const report = reportDiagnosticsAsJson(\n                    results.diagnostics,\n                    results.filesInProgram,\n                    results.elapsedTime\n                );\n                errorCount += report.errorCount;\n            } else {\n                const report = reportDiagnosticsAsText(results.diagnostics);\n                errorCount += report.errorCount;\n            }\n        }\n\n        if (args.createstub && results.filesRequiringAnalysis === 0) {\n            try {\n                service.writeTypeStub(cancellationNone);\n                service.dispose();\n                console.log(`Type stub was created for '${args.createstub}'`);\n            } catch (err) {\n                let errMessage = '';\n                if (err instanceof Error) {\n                    errMessage = ': ' + err.message;\n                }\n\n                console.error(`Error occurred when creating type stub: ` + errMessage);\n                process.exit(ExitStatus.FatalError);\n            }\n            process.exit(ExitStatus.NoErrors);\n        }\n\n        if (!args.outputjson) {\n            if (!watch) {\n                // Print the total time.\n                timingStats.printSummary(console);\n            }\n\n            if (args.stats !== undefined) {\n                // Print the stats details.\n                service.printStats();\n                timingStats.printDetails(console);\n            }\n\n            if (args.dependencies) {\n                service.printDependencies(!!args.verbose);\n            }\n        }\n\n        if (!watch) {\n            process.exit(errorCount > 0 ? ExitStatus.ErrorsReported : ExitStatus.NoErrors);\n        } else if (!args.outputjson) {\n            console.log('Watching for file changes...');\n        }\n    });\n\n    // This will trigger the analyzer.\n    service.setOptions(options);\n\n    // Sleep indefinitely.\n    const brokenPromise = new Promise(() => {\n        // Do nothing.\n    });\n    brokenPromise.then().catch();\n}\n\nfunction verifyPackageTypes(\n    realFileSystem: FileSystem,\n    packageName: string,\n    verboseOutput: boolean,\n    outputJson: boolean\n): never {\n    try {\n        const verifier = new PackageTypeVerifier(realFileSystem);\n        const report = verifier.verify(packageName);\n        const jsonReport = buildTypeCompletenessReport(packageName, report);\n\n        if (outputJson) {\n            console.log(JSON.stringify(jsonReport, undefined, 4));\n        } else {\n            printTypeCompletenessReportText(jsonReport, verboseOutput);\n        }\n\n        process.exit(\n            jsonReport.typeCompleteness!.completnessScore < 1 ? ExitStatus.ErrorsReported : ExitStatus.NoErrors\n        );\n    } catch (err) {\n        let errMessage = '';\n        if (err instanceof Error) {\n            errMessage = ': ' + err.message;\n        }\n\n        console.error(`Error occurred when verifying types: ` + errMessage);\n        process.exit(ExitStatus.FatalError);\n    }\n}\n\nfunction buildTypeCompletenessReport(packageName: string, completenessReport: PackageTypeReport): PyrightJsonResults {\n    const report: PyrightJsonResults = {\n        version: getVersionString(),\n        time: Date.now().toString(),\n        diagnostics: [],\n        summary: {\n            filesAnalyzed: completenessReport.modules.length,\n            errorCount: 0,\n            warningCount: 0,\n            informationCount: 0,\n            timeInSec: timingStats.getTotalDuration(),\n        },\n    };\n\n    // Add the general diagnostics.\n    completenessReport.diagnostics.forEach((diag) => {\n        const jsonDiag = convertDiagnosticToJson('', diag);\n        report.diagnostics.push(jsonDiag);\n\n        if (jsonDiag.severity === 'error') {\n            report.summary.errorCount++;\n        } else if (jsonDiag.severity === 'warning') {\n            report.summary.warningCount++;\n        } else if (jsonDiag.severity === 'information') {\n            report.summary.informationCount++;\n        }\n    });\n\n    report.typeCompleteness = {\n        packageName,\n        packageRootDirectory: completenessReport.rootDirectory,\n        pyTypedPath: completenessReport.pyTypedPath,\n        symbolCount: completenessReport.symbolCount,\n        unknownTypeCount: completenessReport.unknownTypeCount,\n        missingFunctionDocStringCount: completenessReport.missingFunctionDocStringCount,\n        missingClassDocStringCount: completenessReport.missingClassDocStringCount,\n        missingDefaultParamCount: completenessReport.missingDefaultParamCount,\n        completnessScore: 0,\n        modules: [],\n    };\n\n    // Add the modules.\n    completenessReport.modules.forEach((module) => {\n        const jsonModule: PyrightPublicModuleReport = {\n            name: module.name,\n            symbols: [],\n        };\n\n        module.symbols.forEach((symbol) => {\n            const jsonSymbol: PyrightPublicSymbolReport = {\n                name: symbol.name,\n                fullName: symbol.fullName,\n                symbolType: PackageTypeVerifier.getSymbolTypeString(symbol.symbolType),\n            };\n\n            jsonModule.symbols.push(jsonSymbol);\n        });\n\n        report.typeCompleteness!.modules.push(jsonModule);\n    });\n\n    if (completenessReport.symbolCount > 0) {\n        report.typeCompleteness!.completnessScore =\n            (completenessReport.symbolCount - completenessReport.unknownTypeCount) / completenessReport.symbolCount;\n    }\n\n    return report;\n}\n\nfunction printTypeCompletenessReportText(results: PyrightJsonResults, verboseOutput: boolean) {\n    const completenessReport = results.typeCompleteness!;\n\n    console.log(`Package name: \"${completenessReport.packageName}\"`);\n    if (completenessReport.packageRootDirectory !== undefined) {\n        console.log(`Package directory: \"${completenessReport.packageRootDirectory}\"`);\n    }\n\n    if (completenessReport.pyTypedPath !== undefined) {\n        console.log(`Path of py.typed file: \"${completenessReport.pyTypedPath}\"`);\n    }\n\n    // Print all the errors.\n    results.diagnostics.forEach((diag) => {\n        if (diag.severity === 'error') {\n            logDiagnosticToConsole(diag);\n        }\n    });\n\n    // Print all the non-errors.\n    results.diagnostics.forEach((diag) => {\n        if (diag.severity !== 'error') {\n            logDiagnosticToConsole(diag);\n        }\n    });\n\n    // Print other stats.\n    if (completenessReport.modules.length > 0) {\n        console.log('');\n        console.log(`Public modules: ${completenessReport.modules.length}`);\n        completenessReport.modules.forEach((module) => {\n            console.log(\n                `   ${module.name} (${module.symbols.length} ${module.symbols.length === 1 ? 'symbol' : 'symbols'})`\n            );\n\n            if (verboseOutput) {\n                for (const symbol of module.symbols) {\n                    console.log(`      ${symbol.fullName} (${symbol.symbolType})`);\n                }\n            }\n        });\n    }\n\n    console.log('');\n    console.log(`Public symbols: ${completenessReport.symbolCount}`);\n    console.log(`  Symbols with unknown type: ${completenessReport.unknownTypeCount}`);\n    console.log(`  Functions with missing docstring: ${completenessReport.missingFunctionDocStringCount}`);\n    console.log(`  Functions with missing default param: ${completenessReport.missingDefaultParamCount}`);\n    console.log(`  Classes with missing docstring: ${completenessReport.missingClassDocStringCount}`);\n    console.log(`Type completeness score: ${Math.round(completenessReport.completnessScore * 1000) / 10}%`);\n    console.log('');\n    console.info(`Completed in ${results.summary.timeInSec}sec`);\n}\n\nfunction printUsage() {\n    console.log(\n        'Usage: ' +\n            toolName +\n            ' [options] files...\\n' +\n            '  Options:\\n' +\n            '  --createstub IMPORT              Create type stub file(s) for import\\n' +\n            '  --dependencies                   Emit import dependency information\\n' +\n            '  -h,--help                        Show this help message\\n' +\n            '  --lib                            Use library code to infer types when stubs are missing\\n' +\n            '  --outputjson                     Output results in JSON format\\n' +\n            '  -p,--project FILE OR DIRECTORY   Use the configuration file at this location\\n' +\n            '  --stats                          Print detailed performance stats\\n' +\n            '  -t,--typeshed-path DIRECTORY     Use typeshed type stubs at this location\\n' +\n            '  -v,--venv-path DIRECTORY         Directory that contains virtual environments\\n' +\n            '  --verbose                        Emit verbose diagnostics\\n' +\n            '  --verifytypes PACKAGE            Verify type completeness of a py.typed package' +\n            '  --version                        Print Pyright version\\n' +\n            '  -w,--watch                       Continue to run and watch for changes\\n'\n    );\n}\n\nfunction getVersionString() {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const version = require('package.json').version;\n    return version.toString();\n}\n\nfunction printVersion() {\n    console.log(`${toolName} ${getVersionString()}`);\n}\n\nfunction reportDiagnosticsAsJson(\n    fileDiagnostics: FileDiagnostics[],\n    filesInProgram: number,\n    timeInSec: number\n): DiagnosticResult {\n    const report: PyrightJsonResults = {\n        version: getVersionString(),\n        time: Date.now().toString(),\n        diagnostics: [],\n        summary: {\n            filesAnalyzed: filesInProgram,\n            errorCount: 0,\n            warningCount: 0,\n            informationCount: 0,\n            timeInSec,\n        },\n    };\n\n    let errorCount = 0;\n    let warningCount = 0;\n    let informationCount = 0;\n\n    fileDiagnostics.forEach((fileDiag) => {\n        fileDiag.diagnostics.forEach((diag) => {\n            if (\n                diag.category === DiagnosticCategory.Error ||\n                diag.category === DiagnosticCategory.Warning ||\n                diag.category === DiagnosticCategory.Information\n            ) {\n                report.diagnostics.push(convertDiagnosticToJson(fileDiag.filePath, diag));\n\n                if (diag.category === DiagnosticCategory.Error) {\n                    errorCount++;\n                } else if (diag.category === DiagnosticCategory.Warning) {\n                    warningCount++;\n                } else if (diag.category === DiagnosticCategory.Information) {\n                    informationCount++;\n                }\n            }\n        });\n    });\n\n    report.summary.errorCount = errorCount;\n    report.summary.warningCount = warningCount;\n    report.summary.informationCount = informationCount;\n\n    console.log(JSON.stringify(report, undefined, 4));\n\n    return {\n        errorCount,\n        warningCount,\n        informationCount,\n        diagnosticCount: errorCount + warningCount + informationCount,\n    };\n}\n\nfunction convertDiagnosticToJson(filePath: string, diag: Diagnostic): PyrightJsonDiagnostic {\n    return {\n        file: filePath,\n        severity:\n            diag.category === DiagnosticCategory.Error\n                ? 'error'\n                : DiagnosticCategory.Warning\n                ? 'warning'\n                : 'information',\n        message: diag.message,\n        range: isEmptyRange(diag.range) ? undefined : diag.range,\n        rule: diag.getRule(),\n    };\n}\n\nfunction reportDiagnosticsAsText(fileDiagnostics: FileDiagnostics[]): DiagnosticResult {\n    let errorCount = 0;\n    let warningCount = 0;\n    let informationCount = 0;\n\n    fileDiagnostics.forEach((fileDiagnostics) => {\n        // Don't report unused code diagnostics.\n        const fileErrorsAndWarnings = fileDiagnostics.diagnostics.filter(\n            (diag) => diag.category !== DiagnosticCategory.UnusedCode\n        );\n\n        if (fileErrorsAndWarnings.length > 0) {\n            console.log(`${fileDiagnostics.filePath}`);\n            fileErrorsAndWarnings.forEach((diag) => {\n                logDiagnosticToConsole(convertDiagnosticToJson(fileDiagnostics.filePath, diag));\n\n                if (diag.category === DiagnosticCategory.Error) {\n                    errorCount++;\n                } else if (diag.category === DiagnosticCategory.Warning) {\n                    warningCount++;\n                } else if (diag.category === DiagnosticCategory.Information) {\n                    informationCount++;\n                }\n            });\n        }\n    });\n\n    console.log(\n        `${errorCount.toString()} ${errorCount === 1 ? 'error' : 'errors'}, ` +\n            `${warningCount.toString()} ${warningCount === 1 ? 'warning' : 'warnings'}, ` +\n            `${informationCount.toString()} ${informationCount === 1 ? 'info' : 'infos'} `\n    );\n\n    return {\n        errorCount,\n        warningCount,\n        informationCount,\n        diagnosticCount: errorCount + warningCount + informationCount,\n    };\n}\n\nfunction logDiagnosticToConsole(diag: PyrightJsonDiagnostic, prefix = '  ') {\n    let message = prefix;\n    if (diag.range && !isEmptyRange(diag.range)) {\n        message +=\n            chalk.yellow(`${diag.range.start.line + 1}`) +\n            ':' +\n            chalk.yellow(`${diag.range.start.character + 1}`) +\n            ' - ';\n    }\n\n    const [firstLine, ...remainingLines] = diag.message.split('\\n');\n\n    message +=\n        diag.severity === 'error'\n            ? chalk.red('error')\n            : diag.severity === 'warning'\n            ? chalk.cyan('warning')\n            : chalk.blue('info');\n    message += `: ${firstLine}`;\n    if (remainingLines.length > 0) {\n        message += '\\n' + prefix + remainingLines.join('\\n' + prefix);\n    }\n\n    if (diag.rule) {\n        message += chalk.gray(` (${diag.rule})`);\n    }\n\n    console.log(message);\n}\n\nexport function main() {\n    processArgs();\n}\n","/*\n * server.ts\n *\n * Implements pyright language server.\n */\n\nimport {\n    CancellationToken,\n    CodeAction,\n    CodeActionKind,\n    CodeActionParams,\n    Command,\n    ExecuteCommandParams,\n} from 'vscode-languageserver/node';\nimport { isMainThread } from 'worker_threads';\n\nimport { AnalysisResults } from './analyzer/analysis';\nimport { isPythonBinary } from './analyzer/pythonPathUtils';\nimport { BackgroundAnalysis, BackgroundAnalysisRunner } from './backgroundAnalysis';\nimport { BackgroundAnalysisBase } from './backgroundAnalysisBase';\nimport { CommandController } from './commands/commandController';\nimport { getCancellationFolderName } from './common/cancellationUtils';\nimport { LogLevel } from './common/console';\nimport { isDebugMode, isString } from './common/core';\nimport { convertUriToPath, resolvePaths } from './common/pathUtils';\nimport { ProgressReporter } from './common/progressReporter';\nimport {\n    LanguageServerBase,\n    ProgressReporterConnection,\n    ServerSettings,\n    WorkspaceServiceInstance,\n} from './languageServerBase';\nimport { CodeActionProvider } from './languageService/codeActionProvider';\n\nconst maxAnalysisTimeInForeground = { openFilesTimeInMs: 50, noOpenFilesTimeInMs: 200 };\n\nclass PyrightServer extends LanguageServerBase {\n    private _controller: CommandController;\n\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const version = require('../package.json').version || '';\n\n        // When executed from CLI command (pyright-langserver), __rootDirectory is\n        // already defined. When executed from VSCode extension, rootDirectory should\n        // be __dirname.\n        const rootDirectory = (global as any).__rootDirectory || __dirname;\n        super({\n            productName: 'Pyright',\n            rootDirectory,\n            version,\n            maxAnalysisTimeInForeground,\n            progressReporterFactory: reporterFactory,\n            supportedCodeActions: [CodeActionKind.QuickFix, CodeActionKind.SourceOrganizeImports],\n        });\n\n        this._controller = new CommandController(this);\n    }\n\n    async getSettings(workspace: WorkspaceServiceInstance): Promise<ServerSettings> {\n        const serverSettings: ServerSettings = {\n            watchForSourceChanges: true,\n            watchForLibraryChanges: true,\n            openFilesOnly: true,\n            useLibraryCodeForTypes: false,\n            disableLanguageServices: false,\n            disableOrganizeImports: false,\n            typeCheckingMode: 'basic',\n            diagnosticSeverityOverrides: {},\n            logLevel: LogLevel.Info,\n            autoImportCompletions: true,\n        };\n\n        try {\n            const pythonSection = await this.getConfiguration(workspace.rootUri, 'python');\n            if (pythonSection) {\n                const pythonPath = pythonSection.pythonPath;\n                if (pythonPath && isString(pythonPath) && !isPythonBinary(pythonPath)) {\n                    serverSettings.pythonPath = resolvePaths(workspace.rootPath, pythonPath);\n                }\n\n                const venvPath = pythonSection.venvPath;\n                if (venvPath && isString(venvPath)) {\n                    serverSettings.venvPath = resolvePaths(workspace.rootPath, venvPath);\n                }\n            }\n\n            const pythonAnalysisSection = await this.getConfiguration(workspace.rootUri, 'python.analysis');\n            if (pythonAnalysisSection) {\n                const typeshedPaths = pythonAnalysisSection.typeshedPaths;\n                if (typeshedPaths && Array.isArray(typeshedPaths) && typeshedPaths.length > 0) {\n                    const typeshedPath = typeshedPaths[0];\n                    if (typeshedPath && isString(typeshedPath)) {\n                        serverSettings.typeshedPath = resolvePaths(workspace.rootPath, typeshedPath);\n                    }\n                }\n\n                const stubPath = pythonAnalysisSection.stubPath;\n                if (stubPath && isString(stubPath)) {\n                    serverSettings.stubPath = resolvePaths(workspace.rootPath, stubPath);\n                }\n\n                const diagnosticSeverityOverrides = pythonAnalysisSection.diagnosticSeverityOverrides;\n                if (diagnosticSeverityOverrides) {\n                    for (const [name, value] of Object.entries(diagnosticSeverityOverrides)) {\n                        const ruleName = this.getDiagnosticRuleName(name);\n                        const severity = this.getSeverityOverrides(value as string);\n                        if (ruleName && severity) {\n                            serverSettings.diagnosticSeverityOverrides![ruleName] = severity!;\n                        }\n                    }\n                }\n\n                if (pythonAnalysisSection.diagnosticMode !== undefined) {\n                    serverSettings.openFilesOnly = this.isOpenFilesOnly(pythonAnalysisSection.diagnosticMode);\n                } else if (pythonAnalysisSection.openFilesOnly !== undefined) {\n                    serverSettings.openFilesOnly = !!pythonAnalysisSection.openFilesOnly;\n                }\n\n                if (pythonAnalysisSection.useLibraryCodeForTypes !== undefined) {\n                    serverSettings.useLibraryCodeForTypes = !!pythonAnalysisSection.useLibraryCodeForTypes;\n                }\n\n                serverSettings.logLevel = this.convertLogLevel(pythonAnalysisSection.logLevel);\n                serverSettings.autoSearchPaths = !!pythonAnalysisSection.autoSearchPaths;\n\n                const extraPaths = pythonAnalysisSection.extraPaths;\n                if (extraPaths && Array.isArray(extraPaths) && extraPaths.length > 0) {\n                    serverSettings.extraPaths = extraPaths\n                        .filter((p) => p && isString(p))\n                        .map((p) => resolvePaths(workspace.rootPath, p));\n                }\n\n                if (pythonAnalysisSection.typeCheckingMode !== undefined) {\n                    serverSettings.typeCheckingMode = pythonAnalysisSection.typeCheckingMode;\n                }\n\n                if (pythonAnalysisSection.autoImportCompletions !== undefined) {\n                    serverSettings.autoImportCompletions = pythonAnalysisSection.autoImportCompletions;\n                }\n            } else {\n                serverSettings.autoSearchPaths = true;\n            }\n\n            const pyrightSection = await this.getConfiguration(workspace.rootUri, 'pyright');\n            if (pyrightSection) {\n                if (pyrightSection.openFilesOnly !== undefined) {\n                    serverSettings.openFilesOnly = !!pyrightSection.openFilesOnly;\n                }\n\n                if (pyrightSection.useLibraryCodeForTypes !== undefined) {\n                    serverSettings.useLibraryCodeForTypes = !!pyrightSection.useLibraryCodeForTypes;\n                }\n\n                serverSettings.disableLanguageServices = !!pyrightSection.disableLanguageServices;\n                serverSettings.disableOrganizeImports = !!pyrightSection.disableOrganizeImports;\n\n                const typeCheckingMode = pyrightSection.typeCheckingMode;\n                if (typeCheckingMode && isString(typeCheckingMode)) {\n                    serverSettings.typeCheckingMode = typeCheckingMode;\n                }\n            }\n        } catch (error) {\n            this.console.error(`Error reading settings: ${error}`);\n        }\n        return serverSettings;\n    }\n\n    createBackgroundAnalysis(): BackgroundAnalysisBase | undefined {\n        if (isDebugMode() || !getCancellationFolderName()) {\n            // Don't do background analysis if we're in debug mode or an old client\n            // is used where cancellation is not supported.\n            return undefined;\n        }\n\n        return new BackgroundAnalysis(this.console);\n    }\n\n    protected executeCommand(params: ExecuteCommandParams, token: CancellationToken): Promise<any> {\n        return this._controller.execute(params, token);\n    }\n\n    protected isLongRunningCommand(command: string): boolean {\n        return this._controller.isLongRunningCommand(command);\n    }\n\n    protected async executeCodeAction(\n        params: CodeActionParams,\n        token: CancellationToken\n    ): Promise<(Command | CodeAction)[] | undefined | null> {\n        this.recordUserInteractionTime();\n\n        const filePath = convertUriToPath(params.textDocument.uri);\n        const workspace = await this.getWorkspaceForFile(filePath);\n        return CodeActionProvider.getCodeActionsForPosition(workspace, filePath, params.range, token);\n    }\n}\n\nfunction reporterFactory(connection: ProgressReporterConnection): ProgressReporter {\n    return {\n        isEnabled(data: AnalysisResults): boolean {\n            return true;\n        },\n\n        begin(): void {\n            connection.sendNotification('pyright/beginProgress');\n        },\n\n        report(message: string): void {\n            connection.sendNotification('pyright/reportProgress', message);\n        },\n\n        end(): void {\n            connection.sendNotification('pyright/endProgress');\n        },\n    };\n}\n\nexport function main() {\n    if (isMainThread) {\n        new PyrightServer();\n    } else {\n        const runner = new BackgroundAnalysisRunner();\n        runner.start();\n    }\n}\n","/*\n * workspaceMap.ts\n *\n * Workspace management related functionality.\n */\n\nimport { createDeferred } from './common/deferred';\nimport { LanguageServerBase, WorkspaceServiceInstance } from './languageServerBase';\n\nexport class WorkspaceMap extends Map<string, WorkspaceServiceInstance> {\n    private _defaultWorkspacePath = '<default>';\n\n    constructor(private _ls: LanguageServerBase) {\n        super();\n    }\n\n    getNonDefaultWorkspaces(): WorkspaceServiceInstance[] {\n        const workspaces: WorkspaceServiceInstance[] = [];\n        this.forEach((workspace) => {\n            if (workspace.rootPath) {\n                workspaces.push(workspace);\n            }\n        });\n\n        return workspaces;\n    }\n\n    getWorkspaceForFile(filePath: string): WorkspaceServiceInstance {\n        let bestRootPath: string | undefined;\n        let bestInstance: WorkspaceServiceInstance | undefined;\n\n        this.forEach((workspace) => {\n            if (workspace.rootPath) {\n                // Is the file is under this workspace folder?\n                if (filePath.startsWith(workspace.rootPath)) {\n                    // Is this the fist candidate? If not, is this workspace folder\n                    // contained within the previous candidate folder? We always want\n                    // to select the innermost folder, since that overrides the\n                    // outer folders.\n                    if (bestRootPath === undefined || workspace.rootPath.startsWith(bestRootPath)) {\n                        bestRootPath = workspace.rootPath;\n                        bestInstance = workspace;\n                    }\n                }\n            }\n        });\n\n        // If there were multiple workspaces or we couldn't find any,\n        // create a default one to use for this file.\n        if (bestInstance === undefined) {\n            let defaultWorkspace = this.get(this._defaultWorkspacePath);\n            if (!defaultWorkspace) {\n                // If there is only one workspace, use that one.\n                const workspaceNames = [...this.keys()];\n                if (workspaceNames.length === 1) {\n                    return this.get(workspaceNames[0])!;\n                }\n\n                // Create a default workspace for files that are outside\n                // of all workspaces.\n                defaultWorkspace = {\n                    workspaceName: '',\n                    rootPath: '',\n                    rootUri: '',\n                    serviceInstance: this._ls.createAnalyzerService(this._defaultWorkspacePath),\n                    disableLanguageServices: false,\n                    disableOrganizeImports: false,\n                    isInitialized: createDeferred<boolean>(),\n                };\n                this.set(this._defaultWorkspacePath, defaultWorkspace);\n                this._ls.updateSettingsForWorkspace(defaultWorkspace).ignoreErrors();\n            }\n\n            return defaultWorkspace;\n        }\n\n        return bestInstance;\n    }\n}\n"],"sourceRoot":""}